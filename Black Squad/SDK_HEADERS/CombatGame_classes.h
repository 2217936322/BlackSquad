/*
#############################################################################################
# Black Squad (37476) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: CombatGame_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_MESSENGER_ERR_TARGET_INVITE_YOU                    0x08
#define CONST_CHAT_ERR_CHAT_EMPTY                                0x01
#define CONST_CHAT_ERR_TRAFFIC_PENALTY                           0x02
#define CONST_CHAT_ERR_BLOCK                                     0x03
#define CONST_CHAT_ERR_WHISPER_CANT_OFFLINE_CHAMPIONSHIP_USER    0x04
#define CONST_WHISPER_CHAT_ERR_CHAT_EMPTY                        0x01
#define CONST_WHISPER_CHAT_ERR_TRAFFIC_PENALTY                   0x02
#define CONST_WHISPER_CHAT_ERR_BLOCK                             0x03
#define CONST_WHISPER_CHAT_ERR_WHISPER_BLIND                     0x04
#define CONST_WHISPER_CHAT_ERR_WHISPER_CANT_GM                   0x05
#define CONST_WHISPER_CHAT_ERR_WHISPER_SELF                      0x06
#define CONST_WHISPER_CHAT_ERR_WHISPER_OFFLINE                   0x07
#define CONST_WHISPER_CHAT_ERR_WHISPER_CANT_OFFLINE_CHAMPIONSHIP_USER 0x08
#define CONST_LEAVING_MATCHROOM_REASON_USER_REQUEST              0x00
#define CONST_LEAVING_MATCHROOM_REASON_BAN_FROM_HOST             0x01
#define CONST_LEAVING_MATCHROOM_REASON_BAN_FROM_SYSTEM           0x02
#define CONST_LEAVING_MATCHROOM_REASON_BAN_SECURITY              0x03
#define CONST_LEAVING_MATCHROOM_REASON_BAN_PING_TOO_HIGH         0x04
#define CONST_LEAVING_MATCHROOM_REASON_BAN_FROM_CLAN_MASTER      0x05
#define CONST_MATCH_HAS_FINISHED_REASON_GOOD                     0x00
#define CONST_MATCH_HAS_FINISHED_REASON_NO_USER                  0x01
#define CONST_MATCH_HAS_FINISHED_REASON_NO_WINNER                0x02
#define CONST_MATCH_HAS_FINISHED_REASON_INVALID_USERCOUNT        0x03
#define CONST_MATCH_HAS_FINISHED_REASON_INTERNAL_SERVER_ERROR    0x04
#define CONST_MATCH_HAS_FINISHED_REASON_MATCH_READY_FAILED       0x05
#define CONST_RETURN_LOBBY_REASON_GOOD                           0x01
#define CONST_RETURN_LOBBY_REASON_TIME_OUT                       0x02
#define CONST_RETURN_LOBBY_REASON_DEDICATED_ERR                  0x03
#define CONST_RETURN_LOBBY_REASON_LOADING_ERR                    0x04
#define CONST_RETURN_LOBBY_REASON_INVALID                        0x05
#define CONST_RETURN_LOBBY_REASON_CANT_MATH_JOIN                 0x06
#define CONST_RETURN_LOBBY_REASON_FINISH_MATCH                   0x07
#define CONST_RETURN_LOBBY_REASON_MATCH_READY_FAILED             0x08
#define CONST_DISCONNECTED_BY_GM                                 0x01
#define CONST_DISCONNECTED_BY_DUPLICATED_LOGIN                   0x02
#define CONST_DISCONNECTED_BY_GM_COMMAND_ACCOUNT_BLOCK           0x03
#define CONST_DISCONNECTED_BY_GAME_GUARD                         0x04
#define CONST_DISCONNECTED_BY_SYSTEM                             0x05
#define CONST_DISCONNECTED_BY_GAME_GUARD_ACCOUNT_BAN             0x06
#define CONST_DISCONNECTED_BY__GAME_GUARD_HWID_BAN               0x07
#define CONST_CLIENT_ERROR_NONE                                  0
#define CONST_CLIENT_ERROR_INTERNAL                              1
#define CONST_CLIENT_ERROR_INSUFFICIENT_IP                       2
#define CONST_CLIENT_ERROR_CANNOT_CONNECT                        3
#define CONST_CLIENT_ERROR_DUPLICATED                            4
#define CONST_CLIENT_ERROR_INVALID_USER                          5
#define CONST_CLIENT_ERROR_ACCOUNT_BLOCK                         6
#define CONST_CLIENT_ERROR_NOT_IN_SERVICE                        7
#define CONST_CLIENT_ERROR_INVALID_ACCESS                        8
#define CONST_CLIENT_ERROR_START_FAILED                          9
#define CONST_CLIENT_ERROR_INVALID_VERSION                       10
#define CONST_CLIENT_ERROR_NEED_REINSTALLATION                   11
#define CONST_TID1_EQUIP                                         1
#define CONST_TID1_CLOTHS                                        2
#define CONST_TID1_ACTIVEITEM                                    3
#define CONST_TID1_CONSUME                                       4
#define CONST_TID2_PRIMARY_WEAPON                                1
#define CONST_TID2_SUB_WEAPON                                    2
#define CONST_TID2_MELEE_WEAPON                                  3
#define CONST_TID2_GRENADE_A                                     4
#define CONST_TID2_GRENADE_B                                     5
#define CONST_TID2_GRENADE_C                                     6
#define CONST_TID2_CHIP_A                                        7
#define CONST_TID2_CHIP_B                                        8
#define CONST_TID2_CHIP_C                                        9
#define CONST_TID2_SET                                           1
#define CONST_TID2_SPECIAL                                       2
#define CONST_TID2_FUNCTION                                      1
#define CONST_TID3_SMG                                           1
#define CONST_TID3_RIFLE                                         2
#define CONST_TID3_DMR                                           3
#define CONST_TID3_LMG                                           4
#define CONST_TID3_BASR                                          5
#define CONST_TID3_SHOTGUN                                       6
#define CONST_TID3_PISTOL                                        1
#define CONST_TID3_MACHINE_PISTOL                                2
#define CONST_TID3_C4KIT                                         1
#define CONST_TID3_GOLDEXP                                       1
#define CONST_TID3_EXP                                           2
#define CONST_TID3_GOLD                                          3
#define CONST_TID3_ASSAULT                                       1
#define CONST_TID3_SUPPORT                                       2
#define CONST_TID3_COMMAND                                       3
#define CONST_TID3_RECON                                         4
#define CONST_TID4_ASSAULT_SKILL1                                1
#define CONST_TID4_ASSAULT_SKILL2                                2
#define CONST_TID4_ASSAULT_SKILL3                                3
#define CONST_TID4_ASSAULT_SKILL4                                4
#define CONST_TID4_SUPPORT_SKILL1                                1
#define CONST_TID4_SUPPORT_SKILL2                                2
#define CONST_TID4_SUPPORT_SKILL3                                3
#define CONST_TID4_SUPPORT_SKILL4                                4
#define CONST_TID4_COMMAND_SKILL1                                1
#define CONST_TID4_COMMAND_SKILL2                                2
#define CONST_TID4_COMMAND_SKILL3                                3
#define CONST_TID4_COMMAND_SKILL4                                4
#define CONST_TID4_RECON_SKILL1                                  1
#define CONST_TID4_RECON_SKILL2                                  2
#define CONST_TID4_RECON_SKILL3                                  3
#define CONST_TID4_RECON_SKILL4                                  4
#define CONST_CATEGORY_CLASSIC_MATCH                             0x0001
#define CONST_CATEGORY_A_MATCH                                   0x0002
#define CONST_CATEGORY_B_MATCH                                   0x0004
#define CONST_CATEGORY_FREE_A_MATCH                              0x0008
#define CONST_CATEGORY_FREE_B_MATCH                              0x0010
#define CONST_CATEGORY_AUTO_A_MATCH                              0x0020
#define CONST_CATEGORY_AUTO_B_MATCH                              0x0040
#define CONST_CATEGORY_AUTO_FREE_A_MATCH                         0x0080
#define CONST_CATEGORY_AUTO_FREE_B_MATCH                         0x0100
#define CONST_CATEGORY_AI_DEF_MATCH                              0x0200
#define CONST_CATEGORY_PRACTICE_MATCH                            0x0400
#define CONST_CATEGORY_RANKING_MATCH                             0x0800
#define CONST_CATEGORY_COMPETITIVE_MATCH                         0x1000
#define CONST_CATEGORY_COMPETITIVE_SQUAD_MATCH                   0x2000
#define CONST_SYSTEM_NOTIFY_MESSAGE_BLOCK_CHAT                   0x00
#define CONST_SYSTEM_NOTIFY_MESSAGE_UNBLOCK_CHAT                 0x01
#define CONST_DIALOG_PASSWORD_LENGTH                             4
#define CONST_SCHEDULE_OPTION_SUNDAY                             0x001
#define CONST_SCHEDULE_OPTION_MONDAY                             0x002
#define CONST_SCHEDULE_OPTION_TUESDAY                            0x004
#define CONST_SCHEDULE_OPTION_WEDNESDAY                          0x008
#define CONST_SCHEDULE_OPTION_THURSDAY                           0x010
#define CONST_SCHEDULE_OPTION_FRIDAY                             0x020
#define CONST_SCHEDULE_OPTION_SATURDAY                           0x040
#define CONST_SCHEDULE_OPTION_CONTINUOUS                         0x100
#define CONST_CLAN_MERCENARY_MARK                                "img://ItemIcon.clanmark.stm_clanmark_mercenary"
#define CONST_CATEGROY_COMPETITIVE                               0x3000
#define CONST_INV_HITLOCATION_SCALE                              0.0133333
#define CONST_HITLOCATION_SCALE                                  75
#define CONST_MAX_CHAMPIONSHIPMEMBER_MAX                         5
#define CONST_DESC_ITEMINFO                                      0x40
#define CONST_ADDON_ITEMINFO                                     0x20
#define CONST_GUAGE_ITEMINFO                                     0x10
#define CONST_ConvertTime                                        3600
#define CONST_INVALID_PING_LEVEL                                 0
#define CONST_CLAN_EMBLEM_ID_NONE                                0
#define CONST_CLAN_ID_NONE                                       0
#define CONST_ERR_LOGIN_CERTIFICATION_USER_REQUEST               80
#define CONST_ERR_LOGIN_CERTIFICATION_MODULE_CREATE_INSTANCE_FAIL 59
#define CONST_ERR_LOGIN_CERTIFICATION_MODULE_INITIALIZE_FAIL     58
#define CONST_ERR_LOGIN_CERTIFICATION_MODULE_LOAD_FAIL           57
#define CONST_ERR_LOGIN_CERTIFICATION_MODULE_INITIALIZE          56
#define CONST_ERR_LOGIN_CERTIFICATION_MODULE_REMAIN_NETCLIENT    55
#define CONST_ERR_LOGIN_CERTIFICATION_MODULE_NULL_SOURCE         54
#define CONST_ERR_LOGIN_CERTIFICATION_PARSING                    28
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_RETURN_ERROR    27
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_NULL_ERROR      26
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_NULL_OUTPUT     25
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_DECODE_JSON     24
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_NO_RESPONSE     23
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_MAC             22
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_ID_PW           21
#define CONST_ERR_LOGIN_CERTIFICATION_WEB_SERVER_URL             20
#define CONST_ERR_LOGIN_NULL                                     0
#define CONST_HOT_TAG                                            2
#define CONST_NEW_TAG                                            1
#define CONST_LOGOUT_REASON_MATCHSERVER_DISCONNECTED             1
#define CONST_SABM_FIND_FIRST_BIND                               -2
#define CONST_RealGameStartCount                                 5
#define CONST_LimitedPresetSelectTime_RoundStart                 10
#define CONST_LimitedPresetSelectTime_Intrude                    5
#define CONST_MAX_KILL_MARK_SCORE                                9
#define CONST_DAMAGEBOARD_MAX                                    20
#define CONST_GRENADE_INDICATOR_MAX                              4
#define CONST_MAX_MILITARYCLASS_TYPE                             4
#define CONST_MAX_PASSIVE_SKILL_COUNT                            4
#define CONST_MAX_ACTIVE_SKILL_COUNT                             4
#define CONST_MAX_ALL_SKILL_COUNT                                8
#define CONST_CircularBufferSize                                 10
#define CONST_CBPID_GraphicQuality                               380
#define CONST_CBPID_AspectRatio                                  381
#define CONST_CBPID_ScreenMode                                   382
#define CONST_CBPID_ScreenColors                                 383
#define CONST_CBPID_Gamma                                        384
#define CONST_CBPID_AntiAliasing                                 385
#define CONST_CBPID_Resolution                                   386
#define CONST_CBPID_ResX                                         387
#define CONST_CBPID_ResY                                         388
#define CONST_CBPID_ScanRate                                     389
#define CONST_CBPID_VSync                                        390
#define CONST_CBPID_Character                                    391
#define CONST_CBPID_BackGround                                   392
#define CONST_CBPID_Light                                        393
#define CONST_CBPID_LightReflect                                 394
#define CONST_CBPID_Shadow                                       395
#define CONST_CBPID_Effect                                       396
#define CONST_CBPID_Physical                                     397
#define CONST_CBPID_AmbOcclusion                                 398
#define CONST_CBPID_MasterSoundVolume                            399
#define CONST_CBPID_EffectSoundVolume                            400
#define CONST_CBPID_BGMVolume                                    401
#define CONST_CBPID_BGMMute                                      402
#define CONST_CBPID_VoiceVolume                                  403
#define CONST_CBPID_VoiceMute                                    404
#define CONST_CBPID_EffectSoundMute                              405
#define CONST_CBPID_HitSound                                     406
#define CONST_CBPID_HitSoundMute                                 407
#define CONST_CBPID_INGAMEBGMVolume                              408
#define CONST_CBPID_INGAMEBGMMute                                409
#define CONST_CBPID_VoiceChatAutoLogin                           481
#define CONST_CBPID_VoiceChatInputMode                           482
#define CONST_CBPID_VoiceChatInputDevice                         483
#define CONST_CBPID_VoiceChatInputVolume                         484
#define CONST_CBPID_VoiceChatInputMute                           485
#define CONST_CBPID_VoiceChatOutputVolume                        486
#define CONST_CBPID_VoiceChatOutputMute                          487
#define CONST_CBPID_MouseSensitivity_Master                      410
#define CONST_CBPID_AimAssist                                    411
#define CONST_CBPID_MouseSensitivity_Preset1                     412
#define CONST_CBPID_MouseSensitivity_Preset2                     413
#define CONST_CBPID_MouseSensitivity_Preset3                     414
#define CONST_CBPID_MouseSensitivity_Preset4                     415
#define CONST_CBPID_MouseSensitivity_Preset5                     416
#define CONST_CBPID_MouseSensitivity_Preset6                     417
#define CONST_CBPID_MouseSensitivity_Preset7                     418
#define CONST_CBPID_MouseSensitivity_Preset8                     419
#define CONST_CBPID_MouseSensitivity_Preset9                     420
#define CONST_CBPID_MouseSensitivity_Preset10                    421
#define CONST_CBPID_MouseSensMode                                422
#define CONST_CBPID_MouseInvert                                  423
#define CONST_CBPID_MouseSensitivity_Preset1_1stZoom             424
#define CONST_CBPID_MouseSensitivity_Preset1_2ndZoom             425
#define CONST_CBPID_MouseSensitivity_Preset2_1stZoom             426
#define CONST_CBPID_MouseSensitivity_Preset2_2ndZoom             427
#define CONST_CBPID_MouseSensitivity_Preset3_1stZoom             428
#define CONST_CBPID_MouseSensitivity_Preset3_2ndZoom             429
#define CONST_CBPID_GoreTeenLevel                                430
#define CONST_CBPID_GoreAdultLevel                               431
#define CONST_CBPID_BackgroundShadow                             432
#define CONST_CBPID_GunTrail                                     433
#define CONST_CBPID_MouseSensitivity_Preset4_1stZoom             440
#define CONST_CBPID_MouseSensitivity_Preset4_2ndZoom             441
#define CONST_CBPID_MouseSensitivity_Preset1_UseAll              442
#define CONST_CBPID_MouseSensitivity_Preset2_UseAll              443
#define CONST_CBPID_MouseSensitivity_Preset3_UseAll              444
#define CONST_CBPID_MouseSensitivity_Preset1_AutoScale           445
#define CONST_CBPID_MouseSensitivity_Preset2_AutoScale           446
#define CONST_CBPID_MouseSensitivity_Preset3_AutoScale           447
#define CONST_CBPID_AllChat                                      450
#define CONST_CBPID_TeamChat                                     451
#define CONST_CBPID_FOV                                          452
#define CONST_CBPID_FlipMesh                                     453
#define CONST_CBPID_IFFView                                      454
#define CONST_CBPID_HoldMode                                     455
#define CONST_CBPID_StartSecZoom                                 456
#define CONST_CBPID_ForegroundFOV                                457
#define CONST_CBPID_FriendRequestBlock                           458
#define CONST_CBPID_TeamOutline                                  459
#define CONST_CBPID_CrossHairType                                470
#define CONST_CBPID_CrossHairColor                               471
#define CONST_CBPID_CrossHairScale                               472
#define CONST_CBPID_CrossHairAlpha                               473
#define CONST_CBPID_CrossHairShadowType                          474
#define CONST_CBPID_CrossHairDoSpread                            475
#define CONST_CBPID_CrossHairCustomColor                         476
#define CONST_CBPID_SceneTone                                    477
#define CONST_CBPID_FPSLimit                                     478
#define CONST_CBPID_SystemCounter                                479
#define CONST_CBPID_OneFrameThreadLag                            480
#define CONST_CBPID_KeyAction                                    501
#define CONST_CBPID_KeyAction01                                  502
#define CONST_CBPID_KeyAction02                                  503
#define CONST_CBPID_KeyAction03                                  504
#define CONST_CBPID_KeyAction04                                  505
#define CONST_CBPID_KeyAction05                                  506
#define CONST_CBPID_KeyAction06                                  507
#define CONST_CBPID_KeyAction07                                  508
#define CONST_CBPID_KeyAction08                                  509
#define CONST_CBPID_KeyAction09                                  510
#define CONST_CBPID_KeyAction10                                  511
#define CONST_CBPID_KeyAction11                                  512
#define CONST_CBPID_KeyAction12                                  513
#define CONST_CBPID_KeyAction13                                  514
#define CONST_CBPID_KeyAction14                                  515
#define CONST_CBPID_KeyAction15                                  516
#define CONST_CBPID_KeyAction16                                  517
#define CONST_CBPID_KeyAction17                                  518
#define CONST_CBPID_KeyAction18                                  519
#define CONST_CBPID_KeyAction19                                  520
#define CONST_CBPID_KeyAction20                                  521
#define CONST_CBPID_KeyAction21                                  522
#define CONST_CBPID_KeyAction22                                  523
#define CONST_CBPID_KeyAction23                                  524
#define CONST_CBPID_KeyAction24                                  525
#define CONST_CBPID_KeyAction25                                  526
#define CONST_CBPID_KeyAction26                                  527
#define CONST_CBPID_KeyAction27                                  528
#define CONST_CBPID_KeyAction28                                  529
#define CONST_CBPID_KeyAction29                                  530
#define CONST_CBPID_KeyAction30                                  531
#define CONST_CBPID_KeyAction31                                  532
#define CONST_CBPID_KeyAction32                                  533
#define CONST_CBPID_KeyAction33                                  534
#define CONST_CBPID_KeyAction34                                  535
#define CONST_CBPID_KeyAction35                                  536
#define CONST_CBPID_KeyAction36                                  537
#define CONST_CBPID_KeyAction37                                  538
#define CONST_CBPID_KeyAction38                                  539
#define CONST_CBPID_KeyAction39                                  540
#define CONST_CBPID_KeyAction40                                  541
#define CONST_CBPID_KeyAction41                                  542
#define CONST_CBPID_KeyAction42                                  543
#define CONST_CBPID_KeyAction43                                  544
#define CONST_CBPID_KeyAction44                                  545
#define CONST_CBPID_KeyAction45                                  546
#define CONST_CBPID_KeyAction46                                  547
#define CONST_CBPID_KeyAction47                                  548
#define CONST_CBPID_KeyAction48                                  549
#define CONST_CBPID_KeyAction49                                  550
#define CONST_CBPID_KeyAction50                                  551
#define CONST_CBPID_KeyAction51                                  552
#define CONST_CBPID_KeyAction52                                  553
#define CONST_CBPID_KeyAction53                                  554
#define CONST_CBPID_KeyAction54                                  555
#define CONST_CBPID_KeyAction55                                  556
#define CONST_CBPID_KeyAction56                                  557
#define CONST_CBPID_KeyAction57                                  558
#define CONST_CBPID_KeyAction58                                  559
#define CONST_CBPID_KeyAction59                                  560
#define CONST_CBPID_KeyAction60                                  561
#define CONST_CBPID_KeyAction61                                  562
#define CONST_CBPID_KeyAction62                                  563
#define CONST_CBPID_KeyAction63                                  564
#define CONST_CBPID_KeyAction64                                  565
#define CONST_CBPID_KeyAction65                                  566
#define CONST_CBPID_KeyAction66                                  567
#define CONST_CBPID_RESERVED                                     601
#define CONST_CBPID_RESERVED01                                   602
#define CONST_CBPID_RESERVED02                                   603
#define CONST_CBPID_RESERVED03                                   604
#define CONST_CBPID_RESERVED04                                   605
#define CONST_CBPID_RESERVED05                                   606
#define CONST_CBPID_RESERVED06                                   607
#define CONST_CBPID_RESERVED07                                   608
#define CONST_CBPID_RESERVED08                                   609
#define CONST_CBPID_RESERVED09                                   610
#define CONST_CBPID_RESERVED10                                   611
#define CONST_CBPID_RESERVED11                                   612
#define CONST_CBPID_RESERVED12                                   613
#define CONST_CBPID_RESERVED13                                   614
#define CONST_CBPID_RESERVED14                                   615
#define CONST_CBPID_RESERVED15                                   616
#define CONST_CBPID_RESERVED16                                   617
#define CONST_CBPID_RESERVED17                                   618
#define CONST_CBPID_RESERVED18                                   619
#define CONST_CBPID_RESERVED19                                   620
#define CONST_MAX_LAST_WHISPER_LIST                              8
#define CONST_REWARD_TYPE_GOLD                                   1
#define CONST_REWARD_TYPE_ITEM                                   2
#define CONST_REWARD_TYPE_MEDAL                                  3
#define CONST_MAX_DIALOG                                         10
#define CONST_EQUIP_PRESET1                                      1
#define CONST_EQUIP_PRESET2                                      2
#define CONST_EQUIP_PRESET3                                      4
#define CONST_ADDON_MAX                                          10
#define CONST_MYINFO_COMBATRECORDS_WINRATE                       3000036
#define CONST_MYINFO_COMBATRECORDS_KAD                           3000037
#define CONST_MYINFO_COMBATRECORDS_HEADSHOT                      3000038
#define CONST_MYINFO_COMBATRECORDS_FATALSHOT                     3000039
#define CONST_MYINFO_COMBATRECORDS_TOTALWIN                      3000045
#define CONST_MYINFO_COMBATRECORDS_TOTALLOSE                     3000046
#define CONST_MYINFO_COMBATRECORDS_JOINDATE                      3000048
#define CONST_MYINFO_COMBATRECORDS_TOALLIVEPLAYTIME              3000049
#define CONST_MYINFO_COMBATRECORDS_DAYHOURMIN                    3000050
#define CONST_MYINFO_COMBATRECORDS_SUICIDE                       3000051
#define CONST_MYINFO_COMBATRECORDS_TOTALLSCORE                   3000052
#define CONST_MYINFO_COMBATRECORDS_TOTALKILLCOUNT                3000053
#define CONST_MYINFO_COMBATRECORDS_TOTALASSISTCOUNT              3000054
#define CONST_MYINFO_COMBATRECORDS_TOTALDEATHCOUNT               3000055
#define CONST_MYINFO_COMBATRECORDS_TOTALHEADSHOTCOUNT            3000056
#define CONST_MYINFO_COMBATRECORDS_TOTALFATALSHOTCOUNT           3000057
#define CONST_MYINFO_COMBATRECORDS_BEST_TOTALSCORECOUNT          3000058
#define CONST_MYINFO_COMBATRECORDS_BEST_TOTALKILLCOUNT           3000059
#define CONST_MYINFO_COMBATRECORDS_BEST_TOTALASSISTCOUNT         3000060
#define CONST_MYINFO_COMBATRECORDS_BEST_TOTALMISSIONCOUNT        3000061
#define CONST_MYINFO_COMBATRECORDS_LATESTCOMBAT10_WINRATE        3000086
#define CONST_MYINFO_COMBATRECORDS_LATESTCOMBAT10_WIN            3000089
#define CONST_MYINFO_COMBATRECORDS_LATESTCOMBAT10_LOSE           3000090
#define CONST_MYINFO_COMBATRECORDS_LATESTCOMBAT10_RUNAWAY        3000047
#define CONST_MYINFO_COMBATRECORDS_LATESTCOMBAT10_KAD            3000088
#define CONST_MYINFO_COMBATRECORDS_LATESTCOMBAT10_VSCLANNAME     3000087
#define CONST_MERCENARY_MATCH_NAME_TITLE                         105000
#define CONST_MYINFO_COMPETITIVERECORDS_WINRATE                  3000144
#define CONST_MYINFO_COMPETITIVERECORDS_TOTALWIN                 3000148
#define CONST_MYINFO_COMPETITIVERECORDS_TOTALLOSE                3000149
#define CONST_MYINFO_COMPETITIVERECORDS_KAD                      3000145
#define CONST_MYINFO_COMPETITIVERECORDS_TOTALKILLCOUNT           3000150
#define CONST_MYINFO_COMPETITIVERECORDS_TOTALASSISTCOUNT         3000151
#define CONST_MYINFO_COMPETITIVERECORDS_TOTALDEATHCOUNT          3000152
#define CONST_MYINFO_COMPETITIVERECORDS_HEADSHOT                 3000146
#define CONST_MYINFO_COMPETITIVERECORDS_TOTALHEADSHOTCOUNT       3000153
#define CONST_MYINFO_COMPETITIVERECORDS_TOTALFATALSHOTCOUNT      3000154
#define CONST_MYINFO_COMPETITIVERECORDS_FATALSHOT                3000147
#define CONST_MYINFO_COMPETITIVERECORDS_BEST_TOTALSCORECOUNT     3000155
#define CONST_MYINFO_COMPETITIVERECORDS_BEST_TOTALKILLCOUNT      3000156
#define CONST_MYINFO_COMPETITIVERECORDS_BEST_TOTALASSISTCOUNT    3000157
#define CONST_MYINFO_COMPETITIVERECORDS_BEST_TOTALMISSIONCOUNT   3000158
#define CONST_MYINFO_WEAPONRECORDS_PRIMWEAPONTOTAL               3000067
#define CONST_MYINFO_WEAPONRECORDS_SECONWEATOTAL                 3000068
#define CONST_MYINFO_WEAPONRECORDS_MELEEWEATOTAL                 3000069
#define CONST_MYINFO_WEAPONRECORDS_THROWWEATOTAL                 3000070
#define CONST_MYINFO_WEAPONRECORDS_SUBTAB_PRIMWEAPON             3000063
#define CONST_MYINFO_WEAPONRECORDS_SUBTAB_SECONWEA               3000064
#define CONST_MYINFO_WEAPONRECORDS_SUBTAB_MELEEWEA               3000065
#define CONST_MYINFO_WEAPONRECORDS_SUBTAB_THROWWEA               3000066
#define CONST_MYINFO_WEAPONRECORDS_EACHPRIMWEAPON                3000076
#define CONST_MYINFO_WEAPONRECORDS_EACHSECONWEA                  3000077
#define CONST_MYINFO_WEAPONRECORDS_EACHMELEEWEA                  3000078
#define CONST_MYINFO_WEAPONRECORDS_EACHTHROWWEA                  3000079
#define CONST_MYINFO_WEAPONRECORDS_HEADSHOT                      3000071
#define CONST_MYINFO_WEAPONRECORDS_FATALSHOT                     3000072
#define CONST_MYINFO_WEAPONRECORDS_TOTALKILLCOUNT                3000073
#define CONST_MYINFO_WEAPONRECORDS_TOTALHEADSHOTCOUNT            3000074
#define CONST_MYINFO_WEAPONRECORDS_TOTALFATALSHOTCOUNT           3000075
#define CONST_MYINFO_WEAPONRECORDS_RANK                          3000080
#define CONST_MYINFO_WEAPONRECORDS_WEAPONNAME                    3000081
#define CONST_MYINFO_WEAPONRECORDS_KILLNAME                      3000082
#define CONST_MYINFO_WEAPONRECORDS_HEADSHOTNAME                  3000083
#define CONST_MYINFO_WEAPONRECORDS_FATALSHOTNAME                 3000084
#define CONST_SCR_NOTICE_TIME                                    10
#define CONST_SCR_NOTICE_DELAY_TIME                              2
#define CONST_MISSION_PROGRESS                                   0
#define CONST_MISSION_OVER                                       1
#define CONST_FRONTEND_INVENTORY_BUTTON_USE                      1223003
#define CONST_MAX_PRESET_TAB_COUNT                               3
#define CONST_MAX_PRESET_LIST_COUNT                              5
#define CONST_MAX_CLOTHES_CHIP_COUNT                             14
#define CONST_MAX_FAILED_LOGIN_COUNT                             3
#define CONST_MAX_MENU_GAMEOPTION_DROPDOWN                       8
#define CONST_USER_STATE_ICON_WAIT                               0x00
#define CONST_USER_STATE_ICON_READY                              0x01
#define CONST_USER_STATE_ICON_SELF_SETTING                       0x02
#define CONST_USER_STATE_ICON_PLAYING                            0x03
#define CONST_USER_STATE_ICON_WATCHING                           0x04
#define CONST_USER_STATE_ICON_ROOM_SETTING                       0x05
#define CONST_B_CLANMATCH_MEMBER                                 0x2
#define CONST_A_CLANMATCH_MEMBER                                 0x3
#define CONST_FRONTEND_REBUY_BUTTON_TIMEOUT                      2100507
#define CONST_MAIL_BOX_RECEIVE_ITEM                              0x00
#define CONST_MAIL_BOX_RECEIVE_DELETE                            0x01
#define CONST_CIRCULAR_CROSSHAIR_IDX                             1
#define CONST_State_LocalPlayer                                  1
#define CONST_State_OtherPlayer                                  2
#define CONST_State_Death                                        3
#define CONST_MAX_INSTANCEITEM_COUNT                             4
#define CONST_MATCH_TIE                                          -1
#define CONST_MaxActorList                                       256
#define CONST_ATTEND_JOIN                                        0
#define CONST_ATTEND_REJOIN                                      1
#define CONST_ATTEND_NEXTDAY                                     2
#define CONST_AppIssuer                                          "nsstudio-blacksqu-w"
#define CONST_domain_with_at                                     "@mt1p.vivox.com"
#define CONST_WeaponStateCountRange                              0x03
#define CONST_ObjectPenetrationTypeMask                          1
#define CONST_PersonPenetrationTypeMask                          2
#define CONST_WeaponStateRange                                   0x3f

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum CombatGame.CCSSystemConfig.ECCSMovementConfig
/*enum ECCSMovementConfig
{
	CCSMovementUnreal                                  = 0,
	CCSMovementKynapse                                 = 1,
	ECCSMovementConfig_MAX                             = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.ETargetSelectionConfig
/*enum ETargetSelectionConfig
{
	CCSTarget_Player                                   = 0,
	CCSTarget_MissionActor                             = 1,
	CCSTarget_Enemy                                    = 2,
	CCSTarget_EnemyHelicopter                          = 3,
	CCSTarget_EnemySentryGun                           = 4,
	CCSTarget_MAX                                      = 5
};*/

// Enum CombatGame.CombatOnlineMetaphors.REMATCH_DISPERSE_REASON
/*enum REMATCH_DISPERSE_REASON
{
	REMATCH_DISPERSE_REASON_LACK_MEMBER                = 0,
	REMATCH_DISPERSE_REASON_TIMEOUT_LACK_MEMBER        = 1,
	REMATCH_DISPERSE_REASON_GAME_START_FAILED          = 2,
	REMATCH_DISPERSE_REASON_MAX                        = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.ECCSDetermineCanShootConfig
/*enum ECCSDetermineCanShootConfig
{
	CCSDetermineCanShoot_SingleLine                    = 0,
	CCSDetermineCanShoot_MultiLine                     = 1,
	CCSDetermineCanShoot_MAX                           = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.CHATTING_STATE
/*enum CHATTING_STATE
{
	CHATTING_STATE_ACTIVE                              = 0,
	CHATTING_STATE_TRAFFIC_PENALTY                     = 1,
	CHATTING_STATE_BLOCK                               = 2,
	CHATTING_STATE_MAX                                 = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.LIMIT_BUY_TYPE
/*enum LIMIT_BUY_TYPE
{
	LIMIT_BUY_TYPE_NONE                                = 0,
	LIMIT_BUY_TYPE_ONLY_ONE                            = 1,
	LIMIT_BUY_TYPE_DAY                                 = 2,
	LIMIT_BUY_TYPE_MAX                                 = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.Publisher
/*enum Publisher
{
	PublisherNSS                                       = 0,
	PublisherSteam                                     = 1,
	PublisherInnova                                    = 2,
	PublisherMax                                       = 3,
	PublisherPmang                                     = 4,
	PublisherHangameJapan                              = 5,
	Publisher_MAX                                      = 6
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCH_HISTORY_TYPE
/*enum MATCH_HISTORY_TYPE
{
	MATCH_HISTORY_TYPE_LOSE                            = 0,
	MATCH_HISTORY_TYPE_WIN                             = 1,
	MATCH_HISTORY_TYPE_RUNAWAY                         = 2,
	MATCH_HISTORY_TYPE_RUNAWAY_LOSE                    = 3,
	MATCH_HISTORY_TYPE_RUNAWAY_WIN                     = 4,
	MATCH_HISTORY_TYPE_MAX                             = 5
};*/

// Enum CombatGame.CombatOnlineMetaphors.COMPETITION_MODE_NOTIY_TYPE
/*enum COMPETITION_MODE_NOTIY_TYPE
{
	COMPETITION_MODE_NOTIY_TYPE_ACTIVE                 = 0,
	COMPETITION_MODE_NOTIY_TYPE_DEACTIVE               = 1,
	COMPETITION_MODE_NOTIY_TYPE_MAX                    = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.PLAY_COMPLETE_TYPE
/*enum PLAY_COMPLETE_TYPE
{
	PLAY_COMPLETE_TYPE_NORMAL                          = 0,
	PLAY_COMPLETE_TYPE_RUNAWAY                         = 1,
	PLAY_COMPLETE_TYPE_ENTER_FAILED                    = 2,
	PLAY_COMPLETE_TYPE_MAX                             = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.HOST_PREEMPTION_STATE
/*enum HOST_PREEMPTION_STATE
{
	HOST_PREEMPTION_STATE_DENINE                       = 0,
	HOST_PREEMPTION_STATE_ALLOW                        = 1,
	HOST_PREEMPTION_STATE_MAX                          = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.COMPETITIVE_POINT_STATE
/*enum COMPETITIVE_POINT_STATE
{
	COMPETITIVE_POINT_STATE_NORMAL                     = 0,
	COMPETITIVE_POINT_STATE_PENALTY_TIME               = 1,
	COMPETITIVE_POINT_STATE_PENALTY_INTERVAL           = 2,
	COMPETITIVE_POINT_STATE_MAX                        = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.TIER_POINT_UPDATE_TYPE
/*enum TIER_POINT_UPDATE_TYPE
{
	TIER_POINT_UPDATE_TYPE_MATCH_END                   = 0,
	TIER_POINT_UPDATE_TYPE_RESET                       = 1,
	TIER_POINT_UPDATE_TYPE_LONG_TERM_NON_PLAY_PENALTY  = 2,
	TIER_POINT_UPDATE_TYPE_SEASON_CHANGE               = 3,
	TIER_POINT_UPDATE_TYPE_MAX                         = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.GAME_OPTION_TYPE
/*enum GAME_OPTION_TYPE
{
	GAME_OPTION_TYPE_INVITE_AUTO_REGIST                = 0,
	GAME_OPTION_TYPE_FRIEND_INVITE_REFUSE              = 1,
	GAME_OPTION_TYPE_MINIMAP_SIZE_STEP                 = 2,
	GAME_OPTION_TYPE_MAX                               = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCH_END_REASON
/*enum MATCH_END_REASON
{
	MATCH_END_REASON_NONE                              = 0,
	MATCH_END_REASON_FORFEITURE                        = 1,
	MATCH_END_REASON_SURRENDER                         = 2,
	MATCH_END_REASON_MAX                               = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.PENALTY_TYPE
/*enum PENALTY_TYPE
{
	PENALTY_TYPE_MATCH_START_REJECT                    = 0,
	PENALTY_TYPE_CHANNEL_ENTER_REJECT                  = 1,
	PENALTY_TYPE_CHATTING_REJECT                       = 2,
	PENALTY_TYPE_MAX                                   = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.CLIENT_PROFILE_TYPE
/*enum CLIENT_PROFILE_TYPE
{
	CLIENT_PROFILE_PROTOCOL                            = 0,
	CLIENT_PROFILE_PROCESSOR                           = 1,
	CLIENT_PROFILE_MAX                                 = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.SALE_TYPE
/*enum SALE_TYPE
{
	SALE_NONE                                          = 0,
	SALE_INSTANCE                                      = 1,
	SALE_ALLTIME                                       = 2,
	SALE_MAX                                           = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.INVITE_TYPE
/*enum INVITE_TYPE
{
	INVITE_TYPE_MATCHROOM                              = 0,
	INVITE_TYPE_MESSENGER                              = 1,
	INVITE_TYPE_MAX                                    = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.BALANCE_TYPE
/*enum BALANCE_TYPE
{
	BALANCE_TYPE_HANCOIN                               = 0,
	BALANCE_TYPE_GIFT                                  = 1,
	BALANCE_TYPE_EVGIFT                                = 2,
	BALANCE_TYPE_TOTAL                                 = 3,
	BALANCE_TYPE_MAX                                   = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.ITEM_SELL_OVERLAP_CONDITION_TYPE
/*enum ITEM_SELL_OVERLAP_CONDITION_TYPE
{
	ITEM_SELL_OVERLAP_CONDITION_TYPE_NONE              = 0,
	ITEM_SELL_OVERLAP_CONDITION_TYPE_ALL               = 1,
	ITEM_SELL_OVERLAP_CONDITION_TYPE_TWO_OR_MORE       = 2,
	ITEM_SELL_OVERLAP_CONDITION_TYPE_MAX               = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.ITEM_SELL_PERIOD_CONDITION_TYPE
/*enum ITEM_SELL_PERIOD_CONDITION_TYPE
{
	ITEM_SELL_PERIOD_CONDITION_TYPE_NONE               = 0,
	ITEM_SELL_PERIOD_CONDITION_TYPE_INFINITE           = 1,
	ITEM_SELL_PERIOD_CONDITION_TYPE_TIME               = 2,
	ITEM_SELL_PERIOD_CONDITION_TYPE_ALL                = 3,
	ITEM_SELL_PERIOD_CONDITION_TYPE_MAX                = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.RANDOM_BOX_OBTAIN_TYPE
/*enum RANDOM_BOX_OBTAIN_TYPE
{
	RANDOM_BOX_OBTAIN_TYPE_NORMAL                      = 0,
	RANDOM_BOX_OBTAIN_TYPE_JACKPOT_NORAML              = 1,
	RANDOM_BOX_OBTAIN_TYPE_JACKPOT_GUARANTEE           = 2,
	RANDOM_BOX_OBTAIN_TYPE_MAX                         = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.RANDOM_BOX_CUBE_TYPE
/*enum RANDOM_BOX_CUBE_TYPE
{
	RANDOM_BOX_CUBE_TYPE_NORMAL                        = 0,
	RANDOM_BOX_CUBE_TYPE_GUARANTEE                     = 1,
	RANDOM_BOX_CUBE_TYPE_MAX                           = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.RANDOM_BOX_PROCESS_TYPE
/*enum RANDOM_BOX_PROCESS_TYPE
{
	RANDOM_BOX_PROCESS_TYPE_NONE                       = 0,
	RANDOM_BOX_PROCESS_TYPE_DICE                       = 1,
	RANDOM_BOX_PROCESS_TYPE_SEED                       = 2,
	RANDOM_BOX_PROCESS_TYPE_MAX                        = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCH_CHANNEL_LEAVE_REASON_TYPE
/*enum MATCH_CHANNEL_LEAVE_REASON_TYPE
{
	MATCH_CHANNEL_LEAVE_REASON_TYPE_NONE               = 0,
	MATCH_CHANNEL_LEAVE_REASON_TYPE_KICK_BY_CLAN_MASTER = 1,
	MATCH_CHANNEL_LEAVE_REASON_WRONG_ENTRY_CONDITION   = 2,
	MATCH_CHANNEL_LEAVE_REASON_TYPE_PING_TOO_HIGH      = 3,
	MATCH_CHANNEL_LEAVE_REASON_TYPE_KICK_SECURITY      = 4,
	MATCH_CHANNEL_LEAVE_REASON_TYPE_KICK_BY_SYSTEM     = 5,
	MATCH_CHANNEL_LEAVE_REASON_TYPE_MAX                = 6,
	MATCH_CHANNEL_LEAVE_REASON_MAX                     = 7
};*/

// Enum CombatGame.CombatOnlineMetaphors.CLAN_SHUTDOWN_TYPE
/*enum CLAN_SHUTDOWN_TYPE
{
	CLAN_SHUTDOWN_NONE                                 = 0,
	CLAN_SHUTDOWN_CLOSING                              = 1,
	CLAN_SHUTDOWN_DESTROYED                            = 2,
	CLAN_SHUTDOWN_MAX                                  = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCH_OPEN_CHANNEL_TYPE
/*enum MATCH_OPEN_CHANNEL_TYPE
{
	MATCH_OPEN_CHANNEL_TYPE_NORMAL                     = 0,
	MATCH_OPEN_CHANNEL_TYPE_CLAN                       = 1,
	MATCH_OPEN_CHANNEL_TYPE_AI                         = 2,
	MATCH_OPEN_CHANNEL_TYPE_QUICK                      = 3,
	MATCH_OPEN_CHANNEL_TYPE_RANK                       = 4,
	MATCH_OPEN_CHANNEL_TYPE_TEST                       = 5,
	MATCH_OPEN_CHANNEL_TYPE_MAX                        = 6
};*/

// Enum CombatGame.CombatOnlineMetaphors.REFERENCE_DATA_UPDATE_TYPE
/*enum REFERENCE_DATA_UPDATE_TYPE
{
	REFERENCE_DATA_UPDATE_TYPE_NONE                    = 0,
	REFERENCE_DATA_UPDATE_TYPE_MODE                    = 1,
	REFERENCE_DATA_UPDATE_TYPE_MAP                     = 2,
	REFERENCE_DATA_UPDATE_TYPE_SHOP                    = 3,
	REFERENCE_DATA_UPDATE_TYPE_MISSION                 = 4,
	REFERENCE_DATA_UPDATE_TYPE_MODE_GROUP_BIND_MODE    = 5,
	REFERENCE_DATA_UPDATE_TYPE_MODE_MAP                = 6,
	REFERENCE_DATA_UPDATE_TYPE_MODE_GROUP              = 7,
	REFERENCE_DATA_UPDATE_TYPE_MAX                     = 8
};*/

// Enum CombatGame.CombatOnlineMetaphors.ATTEND_USER_TYPE
/*enum ATTEND_USER_TYPE
{
	ATTEND_USER_TYPE_NONE                              = 0,
	ATTEND_USER_TYPE_NORMAL                            = 1,
	ATTEND_USER_TYPE_COMEBACK                          = 2,
	ATTEND_USER_TYPE_MAX                               = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.REQUIRE_TARGET_TYPE
/*enum REQUIRE_TARGET_TYPE
{
	REQUIRE_TARGET_TYPE_NONE                           = 0,
	REQUIRE_TARGET_TYPE_CLAN_MASTER                    = 1,
	REQUIRE_TARGET_TYPE_MAX                            = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.RANDOM_BOX_GIVE_TYPE
/*enum RANDOM_BOX_GIVE_TYPE
{
	RANDOM_BOX_GIVE_TYPE_NONE                          = 0,
	RANDOM_BOX_GIVE_TYPE_ITEM                          = 1,
	RANDOM_BOX_GIVE_TYPE_GOLD                          = 2,
	RANDOM_BOX_GIVE_TYPE_MEDAL                         = 3,
	RANDOM_BOX_GIVE_TYPE_GCOIN                         = 4,
	RANDOM_BOX_GIVE_TYPE_BSCOIN                        = 5,
	RANDOM_BOX_GIVE_TYPE_MCOIN                         = 6,
	RANDOM_BOX_GIVE_TYPE_MAX                           = 7
};*/

// Enum CombatGame.CombatOnlineMetaphors.USER_GAME_OPTION_TYPE
/*enum USER_GAME_OPTION_TYPE
{
	USER_GAME_OPTION_TYPE_OFF                          = 0,
	USER_GAME_OPTION_TYPE_ON                           = 1,
	USER_GAME_OPTION_TYPE_MAX                          = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.ITEM_STATE
/*enum ITEM_STATE
{
	ITEM_STATE_DEACTIVATED                             = 0,
	ITEM_STATE_ACTIVATED                               = 1,
	ITEM_STATE_EXPIRED                                 = 2,
	ITEM_STATE_DISTROY                                 = 3,
	ITEM_STATE_MAX                                     = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.USER_INFO_SEARCH_TYPE
/*enum USER_INFO_SEARCH_TYPE
{
	USER_INFO_SEARCH_TYPE_ID                           = 0,
	USER_INFO_SEARCH_TYPE_NICK                         = 1,
	USER_INFO_SEARCH_TYPE_MAX                          = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.ITEM_BUY_RECV_TYPE
/*enum ITEM_BUY_RECV_TYPE
{
	ITEM_BUY_RECV_TYPE_INVENTORY                       = 0,
	ITEM_BUY_RECV_TYPE_MAIL_BOX                        = 1,
	ITEM_BUY_RECV_TYPE_MAX                             = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.ITEM_PERIOD_TYPE
/*enum ITEM_PERIOD_TYPE
{
	ITEM_PERIOD_TYPE_TIME                              = 0,
	ITEM_PERIOD_TYPE_INFINITE                          = 1,
	ITEM_PERIOD_TYPE_MAX                               = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.CONSUME_TYPE
/*enum CONSUME_TYPE
{
	CONSUME_TYPE_NORMAL                                = 0,
	CONSUME_TYPE_SELECT                                = 1,
	CONSUME_TYPE_ALL                                   = 2,
	CONSUME_TYPE_MAX                                   = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.MAIL_STATE
/*enum MAIL_STATE
{
	MAIL_STATE_NEW                                     = 0,
	MAIL_STATE_READ                                    = 1,
	MAIL_STATE_MAX                                     = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.MAIL_TYPE
/*enum MAIL_TYPE
{
	MAIL_TYPE_CASH                                     = 0,
	MAIL_TYPE_GIFT_CASH                                = 1,
	MAIL_TYPE_GM                                       = 2,
	MAIL_TYPE_EVENT                                    = 3,
	MAIL_TYPE_SYSTEM                                   = 4,
	MAIL_TYPE_IN_GAME_REWARD                           = 5,
	MAIL_TYPE_IN_GAME_ITEM_BUY_BY_GAME_MONEY           = 6,
	MAIL_TYPE_IN_GAME_ITEM_BUY_BY_MEDAL                = 7,
	MAIL_TYPE_IN_GAME_ITEM_BUY_BY_CASH                 = 8,
	MAIL_TYPE_IN_GAME_ITEM_RANDOM_BOX                  = 9,
	MAIL_TYPE_WEB_CASH                                 = 10,
	MAIL_TYPE_MAX                                      = 11
};*/

// Enum CombatGame.CombatOnlineMetaphors.PCBANG_BENEFIT
/*enum PCBANG_BENEFIT
{
	PCBANG_BENEFIT_DEACTIVATE                          = 0,
	PCBANG_BENEFIT_ACTIVATE                            = 1,
	PCBANG_BENEFIT_MAX                                 = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.DAY_OF_WEEK
/*enum DAY_OF_WEEK
{
	DAY_OF_WEEK_SUNDAY                                 = 0,
	DAY_OF_WEEK_MONDAY                                 = 1,
	DAY_OF_WEEK_TUESDAY                                = 2,
	DAY_OF_WEEK_WEDNESDAY                              = 3,
	DAY_OF_WEEK_THURSDAY                               = 4,
	DAY_OF_WEEK_FRIDAY                                 = 5,
	DAY_OF_WEEK_SATURDAY                               = 6,
	DAY_OF_WEEK_MAX                                    = 7
};*/

// Enum CombatGame.CombatOnlineMetaphors.COMPLAINT_TYPE
/*enum COMPLAINT_TYPE
{
	COMPLAINT_TYPE_HACK_USER                           = 0,
	COMPLAINT_TYPE_ROUND_MONITORING                    = 1,
	COMPLAINT_TYPE_MAX                                 = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.QUEST_UPDATE_ABUSE_TYPE
/*enum QUEST_UPDATE_ABUSE_TYPE
{
	QUEST_UPDATE_ABUSE_TYPE_NONE                       = 0,
	QUEST_UPDATE_ABUSE_TYPE_BLOCK                      = 1,
	QUEST_UPDATE_ABUSE_TYPE_MAX                        = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.QUEST_STEP
/*enum QUEST_STEP
{
	QUEST_STEP                                         = 0,
	QUEST_STEP01                                       = 1,
	QUEST_STEP02                                       = 2,
	QUEST_STEP03                                       = 3,
	QUEST_STEP04                                       = 4,
	QUEST_STEP05                                       = 5,
	QUEST_STEP_MAX                                     = 6
};*/

// Enum CombatGame.CombatOnlineMetaphors.QUEST_TYPE
/*enum QUEST_TYPE
{
	QUEST_TYPE_NONE                                    = 0,
	QUEST_TYPE_DAILY                                   = 1,
	QUEST_TYPE_MEDAL                                   = 2,
	QUEST_TYPE_DAILY01                                 = 3,
	QUEST_TYPE_DAILY02                                 = 4,
	QUEST_TYPE_WEEKLY                                  = 5,
	QUEST_TYPE_WEEKLY01                                = 6,
	QUEST_TYPE_MONTHLY                                 = 7,
	QUEST_TYPE_MONTHLY01                               = 8,
	QUEST_TYPE_PCBANG_TS                               = 9,
	QUEST_TYPE_REPEATEDLY_AND_MATCH_REWARD_ONLY        = 10,
	QUEST_TYPE_REPEATEDLY_AND_MATCH_REWARD_ONLY01      = 11,
	QUEST_TYPE_SPECIAL                                 = 12,
	QUEST_TYPE_AI_NORMAL_S                             = 13,
	QUEST_TYPE_AI_NORMAL_SS                            = 14,
	QUEST_TYPE_AI_HARD_D                               = 15,
	QUEST_TYPE_REPEATEDLY_CLAN_FREE_MATCH_REWARD_ONLY  = 16,
	QUEST_TYPE_REPEATEDLY_CLAN_FREE_MATCH_REWARD_ONLY01 = 17,
	QUEST_TYPE_FREE_AUTO_MATCH                         = 18,
	QUEST_TYPE_FREE_CHANNEL_PLAY                       = 19,
	QUEST_TYPE_AI_TDM                                  = 20,
	QUEST_TYPE_REPEATEDLY_CLAN_RANKING_MATCH_REWARD_ONLY = 21,
	QUEST_TYPE_REPEATEDLY_CLAN_RANKING_MATCH_REWARD_ONLY01 = 22,
	QUEST_TYPE_COMPETITION_MATCH                       = 23,
	QUEST_TYPE_COMPETITION_MATCH_SQUAD                 = 24,
	QUEST_TYPE_DAILY03                                 = 25,
	QUEST_TYPE_ONE_TIME                                = 26,
	QUEST_TYPE_DEILY                                   = 27,
	QUEST_TYPE_DEILY01                                 = 28,
	QUEST_TYPE_DEILY02                                 = 29,
	QUEST_TYPE_DEILY03                                 = 30,
	QUEST_TYPE_DEILY04                                 = 31,
	QUEST_TYPE_DEILY05                                 = 32,
	QUEST_TYPE_DEILY06                                 = 33,
	QUEST_TYPE_DEILY07                                 = 34,
	QUEST_TYPE_DEILY08                                 = 35,
	QUEST_TYPE_DEILY09                                 = 36,
	QUEST_TYPE_MAX                                     = 37
};*/

// Enum CombatGame.CombatOnlineMetaphors.QUEST_GROUP
/*enum QUEST_GROUP
{
	QUEST_GROUP_NONE                                   = 0,
	QUEST_GROUP_DAILY                                  = 1,
	QUEST_GROUP_WEEKLY                                 = 2,
	QUEST_GROUP_MONTHLY                                = 3,
	QUEST_GROUP_PCBANG                                 = 4,
	QUEST_GROUP_REPEATEDLY_AND_MATCH_REWARD_ONLY       = 5,
	QUEST_GROUP_SPECIAL                                = 6,
	QUEST_GROUP_AI                                     = 7,
	QUEST_GROUP_FREE_AUTO_MATCH                        = 8,
	QUEST_GROUP_ONE_TIME                               = 9,
	QUEST_GROUP_MAX                                    = 10
};*/

// Enum CombatGame.CombatOnlineMetaphors.HACK_TYPE
/*enum HACK_TYPE
{
	HACK_Weapon_Ammo                                   = 0,
	HACK_Weapon_Range                                  = 1,
	HACK_Weapon_FireLocation                           = 2,
	HACK_Weapon_HitPawnLocation                        = 3,
	HACK_Weapon_PenetrationFire                        = 4,
	HACK_Weapon_InvalidRecoil                          = 5,
	HACK_ETC_InvalidUDP                                = 6,
	HACK_ETC_WallHack                                  = 7,
	HACK_ETC_MovementProperties                        = 8,
	HACK_Weapon_Projectile                             = 9,
	HACK_MAX                                           = 10
};*/

// Enum CombatGame.CombatOnlineMetaphors.BOOSTER
/*enum BOOSTER
{
	BOOSTER_PC_BANG                                    = 0,
	BOOSTER_ITEM                                       = 1,
	BOOSTER_PERIOD                                     = 2,
	BOOSTER_CHANNEL                                    = 3,
	BOOSTER_MATCH                                      = 4,
	BOOSTER_NOMANNER                                   = 5,
	BOOSTER_MAX                                        = 6
};*/

// Enum CombatGame.CombatOnlineMetaphors.SEARCH_ROOM_STATE
/*enum SEARCH_ROOM_STATE
{
	SEARCH_ROOM_STATE_NONE                             = 0,
	SEARCH_ROOM_STATE_WAITING                          = 1,
	SEARCH_ROOM_STATE_PLAYING                          = 2,
	SEARCH_ROOM_STATE_MAX                              = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.ERoundCountType
/*enum ERoundCountType
{
	ERound_None                                        = 0,
	ERound_Single                                      = 1,
	ERound_Multi                                       = 2,
	ERount_Etc                                         = 3,
	ERoundCountType_MAX                                = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.SHOP_VALUE_TYPE
/*enum SHOP_VALUE_TYPE
{
	SHOP_VALUE_TYPE_TIME                               = 0,
	SHOP_VALUE_TYPE_COUNT                              = 1,
	SHOP_VALUE_TYPE_MAX                                = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.PriceType
/*enum PriceType
{
	PRICE_TYPE_GAME_MONEY                              = 0,
	PRICE_TYPE_CASH                                    = 1,
	PRICE_TYPE_MEDAL                                   = 2,
	PRICE_TYPE_GCOIN                                   = 3,
	PRICE_TYPE_BSCOIN                                  = 4,
	PRICE_TYPE_MCOIN                                   = 5,
	PRICE_TYPE_MAX                                     = 6
};*/

// Enum CombatGame.CombatOnlineMetaphors.ClanSearchSortType
/*enum ClanSearchSortType
{
	ClanSearchSortTypeAsc                              = 0,
	ClanSearchSortTypeDesc                             = 1,
	ClanSearchSortTypeEnd                              = 2,
	ClanSearchSortType_MAX                             = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.CLAN_MATCH_TYPE
/*enum CLAN_MATCH_TYPE
{
	CLAN_MATCH_TYPE_NONE                               = 0,
	CLAN_MATCH_TYPE_A                                  = 1,
	CLAN_MATCH_TYPE_B                                  = 2,
	CLAN_MATCH_TYPE_RANKING                            = 3,
	CLAN_MATCH_TYPE_MAX                                = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.CLAN_SEARCH_TYPE
/*enum CLAN_SEARCH_TYPE
{
	CLAN_SEARCH_TYPE_CREATE_DATE                       = 0,
	CLAN_SEARCH_TYPE_MEMBER_REG_COUNT                  = 1,
	CLAN_SEARCH_TYPE_MATCH_POINT                       = 2,
	CLAN_SEARCH_TYPE_PLAY_MATCH_COUNT                  = 3,
	CLAN_SEARCH_TYPE_RANKING_POINT                     = 4,
	CLAN_SEARCH_TYPE_END                               = 5,
	CLAN_SEARCH_TYPE_MAX                               = 6
};*/

// Enum CombatGame.CombatOnlineMetaphors.CLAN_MEMBER_GRADE
/*enum CLAN_MEMBER_GRADE
{
	CLAN_MEMBER_GRADE_MASTER                           = 0,
	CLAN_MEMBER_GRADE_MANAGER                          = 1,
	CLAN_MEMBER_GRADE_NORMAL                           = 2,
	CLAN_MEMBER_GRADE_END                              = 3,
	CLAN_MEMBER_GRADE_MAX                              = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.CLAN_RECRUIT_CONDITION
/*enum CLAN_RECRUIT_CONDITION
{
	CLAN_RECRUIT_STOP                                  = 0,
	CLAN_RECRUIT_APPROVAL                              = 1,
	CLAN_RECRUIT_FREE                                  = 2,
	CLAN_RECRUIT_MAX                                   = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.GRADE
/*enum GRADE
{
	ADMIN_GRADE                                        = 0,
	LEAD_GM_GRADE                                      = 1,
	GM_GRADE                                           = 2,
	NORMAL_USER_GRADE                                  = 3,
	DUMMY_CLIENT_GRADE                                 = 4,
	CHAMPIONSHIP_OBSERVER_GRADE                        = 5,
	ONLINE_CHAMPIONSHIP_USER_GRADE                     = 6,
	OFFLINE_CHAMPIONSHIP_USER_GRADE                    = 7,
	GRADE_MAX                                          = 8
};*/

// Enum CombatGame.CombatOnlineMetaphors.MessengerMemberState
/*enum MessengerMemberState
{
	MemberInviteState                                  = 0,
	MemberFriendState                                  = 1,
	MemberBlockState                                   = 2,
	MessengerMemberState_MAX                           = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.CHAT_CHANNEL
/*enum CHAT_CHANNEL
{
	BASIC_CHAT_CHANNEL                                 = 0,
	CUSTOM_CHAT_CHANNEL                                = 1,
	MATCH_ROOM_CHAT_CHANNEL                            = 2,
	CHAT_CHANNEL_MAX                                   = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.CHAT_TYPE
/*enum CHAT_TYPE
{
	CHAT_TYPE_NORMAL                                   = 0,
	CHAT_TYPE_WHISPER                                  = 1,
	CHAT_TYPE_TEAM                                     = 2,
	CHAT_TYPE_NOTICE                                   = 3,
	CHAT_TYPE_RADIO                                    = 4,
	CHAT_TYPE_RADIO_ALL                                = 5,
	CHAT_TYPE_CHANNEL                                  = 6,
	CHAT_TYPE_INGAME                                   = 7,
	CHAT_TYPE_INGAME_TEAM                              = 8,
	CHAT_TYPE_COMMUNITY                                = 9,
	CHAT_TYPE_MAX                                      = 10
};*/

// Enum CombatGame.CombatOnlineMetaphors.MODE_GROUP_ENTRY_TYPE
/*enum MODE_GROUP_ENTRY_TYPE
{
	MODE_GROUP_ENTRY_ALL                               = 0,
	MODE_GROUP_ENTRY_VC                                = 1,
	MODE_GROUP_ENTRY_PM                                = 2,
	MODE_GROUP_ENTRY_MAX                               = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.MODE_GROUP_SELECT_TYPE
/*enum MODE_GROUP_SELECT_TYPE
{
	MODE_GROUP_SELECT_BASIC                            = 0,
	MODE_GROUP_SELECT_RANDOM                           = 1,
	MODE_GROUP_SELECT_AUTO_MATCHING                    = 2,
	MODE_GROUP_SELECT_QUICK_MATCHING                   = 3,
	MODE_GROUP_SELECT_COMPETITIVE_MATCHING             = 4,
	MODE_GROUP_SELECT_MAX                              = 5
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE
/*enum MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE
{
	MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE_NOT_USE      = 0,
	MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE_EASY         = 1,
	MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE_NORMAL       = 2,
	MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE_HARD         = 3,
	MATCHROOM_MODE_OPTION_DIFFICULTY_TYPE_MAX          = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_MODE_OPTION_TOGGLE_SHOW_TYPE
/*enum MATCHROOM_MODE_OPTION_TOGGLE_SHOW_TYPE
{
	MATCHROOM_MODE_OPTION_TOGGLE_SHOW_TYPE_HIDE        = 0,
	MATCHROOM_MODE_OPTION_TOGGLE_SHOW_TYPE_SHOW        = 1,
	MATCHROOM_MODE_OPTION_TOGGLE_SHOW_TYPE_MAX         = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_MODE_OPTION_TOGGLE_TYPE
/*enum MATCHROOM_MODE_OPTION_TOGGLE_TYPE
{
	MATCHROOM_MODE_OPTION_TOGGLE_TYPE_OFF              = 0,
	MATCHROOM_MODE_OPTION_TOGGLE_TYPE_ON               = 1,
	MATCHROOM_MODE_OPTION_TOGGLE_TYPE_MAX              = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_MODE_OPTION_TYPE
/*enum MATCHROOM_MODE_OPTION_TYPE
{
	MATCHROOM_MODE_OPTION_TYPE_MAX_USER                = 0,
	MATCHROOM_MODE_OPTION_TYPE_GOAL                    = 1,
	MATCHROOM_MODE_OPTION_TYPE_MISSION                 = 2,
	MATCHROOM_MODE_OPTION_TYPE_MATCH_END_SCORE         = 3,
	MATCHROOM_MODE_OPTION_TYPE_PLAY_TIME               = 4,
	MATCHROOM_MODE_OPTION_TYPE_THIRD_CAMERA_VIEW       = 5,
	MATCHROOM_MODE_OPTION_TYPE_FREE_CAMERA_VIEW        = 6,
	MATCHROOM_MODE_OPTION_TYPE_DEATH_CHAT              = 7,
	MATCHROOM_MODE_OPTION_TYPE_RUSH                    = 8,
	MATCHROOM_MODE_OPTION_TYPE_AUTO_TEAM_BALANCE       = 9,
	MATCHROOM_MODE_OPTION_TYPE_LIMIT_LEVEL             = 10,
	MATCHROOM_MODE_OPTION_TYPE_OBSERVER                = 11,
	MATCHROOM_MODE_OPTION_TYPE_DIFFICULTY              = 12,
	MATCHROOM_MODE_OPTION_TYPE_HALF_CHANGE             = 13,
	MATCHROOM_MODE_OPTION_TYPE_AUTO_TEAM_CHANGE        = 14,
	MATCHROOM_MODE_OPTION_TYPE_APPLY_CLAN_RECORD       = 15,
	MATCHROOM_MODE_OPTION_TYPE_REQUIRED_CLAN_MEMBER    = 16,
	MATCHROOM_MODE_OPTION_TYPE_ALL_CHAT                = 17,
	MATCHROOM_MODE_OPTION_TYPE_MAX                     = 18
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_OPEN_TYPE
/*enum MATCHROOM_OPEN_TYPE
{
	MATCHROOM_OPEN_TYPE_PUBLIC                         = 0,
	MATCHROOM_OPEN_TYPE_PRIVATE                        = 1,
	MATCHROOM_OPEN_TYPE_MAX                            = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_TITLE_TYPE
/*enum MATCHROOM_TITLE_TYPE
{
	MATCHROOM_TITLE_TYPE_MACRO                         = 0,
	MATCHROOM_TITLE_TYPE_CUSTOM                        = 1,
	MATCHROOM_TITLE_TYPE_MAX                           = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.PC_TYPE
/*enum PC_TYPE
{
	PC_PLAYER                                          = 0,
	PC_SPECTATOR                                       = 1,
	PC_MAX                                             = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.TEAM_UPDATE_TYPE
/*enum TEAM_UPDATE_TYPE
{
	TEAM_UPDATE_TYPE_SWAP_BY_GM                        = 0,
	TEAM_UPDATE_TYPE_SWAP_BY_HOST                      = 1,
	TEAM_UPDATE_TYPE_SHUFFLE_BY_GM                     = 2,
	TEAM_UPDATE_TYPE_SHUFFLE_BY_HOST                   = 3,
	TEAM_UPDATE_TYPE_MAX                               = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.AUTO_BALANCE_TEAM
/*enum AUTO_BALANCE_TEAM
{
	AUTO_BALANCE_TEAM_A                                = 0,
	AUTO_BALANCE_TEAM_B                                = 1,
	AUTO_BALANCE_TEAM_B01                              = 2,
	AUTO_BALANCE_TEAM_A01                              = 3,
	AUTO_BALANCE_TEAM_MAX                              = 4
};*/

// Enum CombatGame.CombatOnlineMetaphors.Team
/*enum Team
{
	TEAM_VIPER_CIRCLE                                  = 0,
	TEAM_PEACE_MAKER                                   = 1,
	TEAM_MAX                                           = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.MATCHROOM_STATES
/*enum MATCHROOM_STATES
{
	MATCHROOM_STATE_CLOSED                             = 0,
	MATCHROOM_STATE_CLOSING                            = 1,
	MATCHROOM_STATE_WAITING                            = 2,
	MATCHROOM_STATE_COUNTDOWN                          = 3,
	MATCHROOM_STATE_ENTERING_MATCH                     = 4,
	MATCHROOM_STATE_PLAYING                            = 5,
	MATCHROOM_STATE_MATCH_FINISHED                     = 6,
	MATCHROOM_STATE_MAX                                = 7
};*/

// Enum CombatGame.CombatOnlineMetaphors.ITEM_PROVIDE_TYPE
/*enum ITEM_PROVIDE_TYPE
{
	ITEM_PROVIDE_TYPE_SHOP                             = 0,
	ITEM_PROVIDE_TYPE_BASIC                            = 1,
	ITEM_PROVIDE_TYPE_MAX                              = 2
};*/

// Enum CombatGame.CombatOnlineMetaphors.AVATAR_TYPES
/*enum AVATAR_TYPES
{
	AVATAR_NONE                                        = 0,
	AVATAR_PEACE_MAKER                                 = 1,
	AVATAR_VIPER_CIRCLE                                = 2,
	AVATAR_MAX                                         = 3
};*/

// Enum CombatGame.CombatOnlineMetaphors.WEAPON_TYPES
/*enum WEAPON_TYPES
{
	WEAPON_NONE                                        = 0,
	WEAPON_PISTOL                                      = 1,
	WEAPON_SHOTGUN                                     = 2,
	WEAPON_SMG                                         = 3,
	WEAPON_RIFLE                                       = 4,
	WEAPON_DMR                                         = 5,
	WEAPON_LMG                                         = 6,
	WEAPON_BASR                                        = 7,
	WEAPON_GL                                          = 8,
	WEAPON_FSW_RL                                      = 9,
	WEAPON_FSW_GL                                      = 10,
	WEAPON_FSW_LMG                                     = 11,
	WEAPON_FSW_AMSR                                    = 12,
	WEAPON_MELEE                                       = 13,
	WEAPON_MELEE_SAW                                   = 14,
	WEAPON_FLAG                                        = 15,
	WEAPON_GAMEWEAPON                                  = 16,
	WEAPON_MACHINE_PISTOL                              = 17,
	WEAPON_MAX                                         = 18
};*/

// Enum CombatGame.CombatOnlineMetaphors.EQUIP_SLOTS
/*enum EQUIP_SLOTS
{
	EQUIP_PRIMARY_WEAPON                               = 0,
	EQUIP_SUB_WEAPON                                   = 1,
	EQUIP_MELEE_WEAPON                                 = 2,
	EQUIP_GRENADE_A                                    = 3,
	EQUIP_GRENADE_B                                    = 4,
	EQUIP_GRENADE_C                                    = 5,
	EQUIP_CHIP_A                                       = 6,
	EQUIP_CHIP_B                                       = 7,
	EQUIP_CHIP_C                                       = 8,
	EQUIP_MAX                                          = 9
};*/

// Enum CombatGame.CombatOnlineMetaphors.PRESET_EQUIPMENTS
/*enum PRESET_EQUIPMENTS
{
	PRESET_EQUIPMENTS_BASIC                            = 0,
	PRESET_EQUIPMENTS_BASIC01                          = 1,
	PRESET_EQUIPMENTS_BASIC02                          = 2,
	PRESET_EQUIPMENTS_MAX                              = 3
};*/

// Enum CombatGame.AIBeacon.EAITeamInfo
/*enum EAITeamInfo
{
	AITeamInfo_None                                    = 0,
	AITeamInfo_VC                                      = 1,
	AITeamInfo_PM                                      = 2,
	AITeamInfo_MAX                                     = 3
};*/

// Enum CombatGame.AIDebugCameraController.EAIDebugCameraType
/*enum EAIDebugCameraType
{
	AIDebugCameraType_Free                             = 0,
	AIDebugCameraType_Attach                           = 1,
	AIDebugCameraType_Fixed                            = 2,
	AIDebugCameraType_MAX                              = 3
};*/

// Enum CombatGame.CombatAnimBlendByFall.EBlendFallTypes
/*enum EBlendFallTypes
{
	FBT_Up                                             = 0,
	FBT_Down                                           = 1,
	FBT_PreLand                                        = 2,
	FBT_Land                                           = 3,
	FBT_None                                           = 4,
	FBT_MAX                                            = 5
};*/

// Enum CombatGame.CombatTypes.RadioKeyType
/*enum RadioKeyType
{
	RKT_LeftKey                                        = 0,
	RKT_RightKey                                       = 1,
	RKT_MAX                                            = 2
};*/

// Enum CombatGame.CombatTypes.EHotKeyType
/*enum EHotKeyType
{
	EHKT_PickItem                                      = 0,
	EHKT_Operation                                     = 1,
	EHKT_DisablePickItem                               = 2,
	EHKT_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.eStatType_HitPart
/*enum eStatType_HitPart
{
	eStatHitPart_Body                                  = 0,
	eStatHitPart_Head                                  = 1,
	eStatHitPart_Fatal                                 = 2,
	eStatHitPart_MAX                                   = 3
};*/

// Enum CombatGame.CombatTypes.ESplineActorType
/*enum ESplineActorType
{
	ESplineActorType_Helicopter                        = 0,
	ESplineActorType_SentryGun                         = 1,
	ESplineActorType_MineTrain                         = 2,
	ESplineActorType_MAX                               = 3
};*/

// Enum CombatGame.CombatTypes.EHitBodyType
/*enum EHitBodyType
{
	E_Head                                             = 0,
	E_Chest                                            = 1,
	E_Arm                                              = 2,
	E_Leg                                              = 3,
	E_MetalPart                                        = 4,
	E_PS_Normal                                        = 5,
	E_HeadCenter                                       = 6,
	E_Chestupper                                       = 7,
	E_PS_Weak                                          = 8,
	EHitBodyType_None                                  = 9,
	EHitBodyType_MAX                                   = 10
};*/

// Enum CombatGame.CombatTypes.E_COMPETITIVE_POINT_STATE
/*enum E_COMPETITIVE_POINT_STATE
{
	E_COMPETITIVE_POINT_STATE_NORMAL                   = 0,
	E_COMPETITIVE_POINT_STATE_PENALTY_TIME             = 1,
	E_COMPETITIVE_POINT_STATE_PENALTY_INTERVAL         = 2,
	E_COMPETITIVE_POINT_STATE_MAX                      = 3
};*/

// Enum CombatGame.CombatTypes.E_COMPETITIVE_MATCH_TYPE
/*enum E_COMPETITIVE_MATCH_TYPE
{
	E_CMT_NONE                                         = 0,
	E_CMT_SOLO_DUO                                     = 1,
	E_CMT_SQUAD                                        = 2,
	E_CMT_MAX                                          = 3
};*/

// Enum CombatGame.CombatTypes.ERequestSendChattingType
/*enum ERequestSendChattingType
{
	ERSCT_None                                         = 0,
	ERSCT_Channel                                      = 1,
	ERSCT_MatchRoom                                    = 2,
	ERSCT_InGame                                       = 3,
	ERSCT_InGameTeam                                   = 4,
	ERSCT_Clan                                         = 5,
	ERSCT_Whisper                                      = 6,
	ERSCT_RadioMessage                                 = 7,
	ERSCT_Max                                          = 8
};*/

// Enum CombatGame.CombatTypes.EModeUIType
/*enum EModeUIType
{
	EModeUIType_None                                   = 0,
	EModeUIType_PVP                                    = 1,
	EModeUIType_ClanMatch                              = 2,
	EModeUIType_AI_DFM                                 = 3,
	EModeUIType_AI_TDM                                 = 4,
	EModeUIType_COMPETITION                            = 5,
	EModeUIType_MAX                                    = 6
};*/

// Enum CombatGame.CombatTypes.EUIActivationType
/*enum EUIActivationType
{
	EUIActivation_Show                                 = 0,
	EUIActivation_Disable                              = 1,
	EUIActivation_Hide                                 = 2,
	EUIActivation_MAX                                  = 3
};*/

// Enum CombatGame.CombatTypes.EAIRewardRank
/*enum EAIRewardRank
{
	EAIRewardRank_D                                    = 0,
	EAIRewardRank_C                                    = 1,
	EAIRewardRank_B                                    = 2,
	EAIRewardRank_A                                    = 3,
	EAIRewardRank_S                                    = 4,
	EAIRewardRank_SS                                   = 5,
	EAIRewardRank_MAX                                  = 6
};*/

// Enum CombatGame.CombatTypes.EShopItemGetType
/*enum EShopItemGetType
{
	E_ShopItemGetType_None                             = 0,
	E_ShopItemGetType_BuyEquip                         = 1,
	E_ShopItemGetType_BuyUsed                          = 2,
	E_ShopItemGetType_MAX                              = 3
};*/

// Enum CombatGame.CombatTypes.ELoginProcessType
/*enum ELoginProcessType
{
	ELPT_Wait                                          = 0,
	ELPT_Load                                          = 1,
	ELPT_Succeed                                       = 2,
	ELPT_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.ELoginCertificationType
/*enum ELoginCertificationType
{
	ELCT_UserID                                        = 0,
	ELCT_EnterMatchServer                              = 1,
	ELCT_UserDataInfo                                  = 2,
	ELCT_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.EShopSortList
/*enum EShopSortList
{
	E_SHOPSORT_GAMEMONEY                               = 0,
	E_SHOPSORT_CASH                                    = 1,
	E_SHOPSORT_MEDAL                                   = 2,
	E_SHOPSORT_NAME                                    = 3,
	E_SHOPSORT_GRADE                                   = 4,
	E_SHOPSORT_MAX                                     = 5
};*/

// Enum CombatGame.CombatTypes.EShopMoneyType
/*enum EShopMoneyType
{
	E_MONEYTYPE_GAMEMONEY                              = 0,
	E_MONEYTYPE_CASH                                   = 1,
	E_MONEYTYPE_MEDAL                                  = 2,
	E_MONEYTYPE_GCOIN                                  = 3,
	E_MONEYTYPE_BSCOIN                                 = 4,
	E_MONEYTYPE_MCOIN                                  = 5,
	E_MONEYTYPE_MAX                                    = 6
};*/

// Enum CombatGame.CombatTypes.EShopType
/*enum EShopType
{
	E_SHOPTYPE_GAMEMONEY_OR_CASH                       = 0,
	E_SHOPTYPE_MEDAL                                   = 1,
	E_SHOPTYPE_RANDOMBOX                               = 2,
	E_SHOPTYPE_MAX                                     = 3
};*/

// Enum CombatGame.CombatTypes.EWeaponArcBrandishDir
/*enum EWeaponArcBrandishDir
{
	EWABD_RightToLeft                                  = 0,
	EWABD_LeftToRight                                  = 1,
	EWABD_MAX                                          = 2
};*/

// Enum CombatGame.CombatTypes.EClanPasswordErrorType
/*enum EClanPasswordErrorType
{
	ECPET_Sucees                                       = 0,
	ECPET_None_Pw                                      = 1,
	ECPET_None_PwConfirm                               = 2,
	ECPET_Match_Pw                                     = 3,
	ECPET_Bad_Pw                                       = 4,
	ECPET_None_CurPw                                   = 5,
	ECPET_None_NewPw                                   = 6,
	ECPET_Match_NewPw                                  = 7,
	ECPET_None_NewPwConfirm                            = 8,
	ECPET_Invalid_Pw                                   = 9,
	ECPET_Change_OldPw                                 = 10,
	ECPET_Invalid_Permission                           = 11,
	ECPET_MAX                                          = 12
};*/

// Enum CombatGame.CombatTypes.ATTCK_SKILL_ACTOR
/*enum ATTCK_SKILL_ACTOR
{
	ASA_SentryGun                                      = 0,
	ASA_Trophy                                         = 1,
	ASA_MAX                                            = 2
};*/

// Enum CombatGame.CombatTypes.PLAYERSTART_TYPE
/*enum PLAYERSTART_TYPE
{
	PLAYERSTART_TYPE_GROUND                            = 0,
	PLAYERSTART_TYPE_AIR                               = 1,
	PLAYERSTART_TYPE_MAX                               = 2
};*/

// Enum CombatGame.CombatTypes.MATCHROOM_SLOT_STATE
/*enum MATCHROOM_SLOT_STATE
{
	MATCHROOM_SLOT_STATE_NONE                          = 0,
	MATCHROOM_SLOT_STATE_OPEN                          = 1,
	MATCHROOM_SLOT_STATE_WAIT                          = 2,
	MATCHROOM_SLOT_STATE_READY                         = 3,
	MATCHROOM_SLOT_STATE_SETTING                       = 4,
	MATCHROOM_SLOT_STATE_PLAYING                       = 5,
	MATCHROOM_SLOT_STATE_CLOSED                        = 6,
	MATCHROOM_SLOT_STATE_ROOMSETTING                   = 7,
	MATCHROOM_SLOT_STATE_MAX                           = 8
};*/

// Enum CombatGame.CombatTypes.MATCHROOM_MAP_OPTION_SIZE
/*enum MATCHROOM_MAP_OPTION_SIZE
{
	MATCHROOM_MAP_OPTION_SIZE_SMALL                    = 0,
	MATCHROOM_MAP_OPTION_SIZE_MEDIUM                   = 1,
	MATCHROOM_MAP_OPTION_SIZE_LARGE                    = 2,
	MATCHROOM_MAP_OPTION_SIZE_MAX                      = 3
};*/

// Enum CombatGame.CombatTypes.EFrontEnd_TagType
/*enum EFrontEnd_TagType
{
	TagType_None                                       = 0,
	TagType_Event                                      = 1,
	TagType_Extra                                      = 2,
	TagType_Special                                    = 3,
	TagType_MAX                                        = 4
};*/

// Enum CombatGame.CombatTypes.ESplineSpeedType
/*enum ESplineSpeedType
{
	ESplineSpeedType_Maximum                           = 0,
	ESplineSpeedType_Linear                            = 1,
	ESplineSpeedType_MAX                               = 2
};*/

// Enum CombatGame.CombatTypes.EMatchStartErrorType
/*enum EMatchStartErrorType
{
	EMatchStartErr_None                                = 0,
	EMatchStartErr_LoadedPlayerNotEnough               = 1,
	EMatchStartErr_ClanMatchPlayerNotEnough            = 2,
	EMatchStartErr_MatchCancled                        = 3,
	EMatchStartErr_MAX                                 = 4
};*/

// Enum CombatGame.CombatTypes.EFlagPointType
/*enum EFlagPointType
{
	EFlagPointType_TakePoint                           = 0,
	EFlagPointType_SpawnPoint                          = 1,
	EFlagPointType_MAX                                 = 2
};*/

// Enum CombatGame.CombatTypes.EChannelEnterErrorType
/*enum EChannelEnterErrorType
{
	EChannelEnterErr_Full                              = 0,
	EChannelEnterErr_Not_Enough_Level                  = 1,
	EChannelEnterErr_Not_Service                       = 2,
	EChannelEnterErr_Clan_Only                         = 3,
	EChannelEnterErr_Unselected_Channel                = 4,
	EChannelEnterErr_NormalRequestedChampionship       = 5,
	EChannelEnterErr_ChampionshipRequestedNormal       = 6,
	EChannelEnterErr_KAD_Ratio_Failure                 = 7,
	EChannelEnterErr_MAX                               = 8
};*/

// Enum CombatGame.CombatTypes.EStatRecordType
/*enum EStatRecordType
{
	EStatRecordType_Sum                                = 0,
	EStatRecordType_Max                                = 1
};*/

// Enum CombatGame.CombatTypes.GrenadeUIType
/*enum GrenadeUIType
{
	EGUIT_None                                         = 0,
	EGUIT_HandGrenade                                  = 1,
	EGUIT_Smoke                                        = 2,
	EGUIT_MAX                                          = 3
};*/

// Enum CombatGame.CombatTypes.WeaponUIType
/*enum WeaponUIType
{
	EWUIT_Empty                                        = 0,
	EWUIT_NumberOfUse                                  = 1,
	EWUIT_AmmoWithChamber                              = 2,
	EWUIT_AmmoWithoutChamber                           = 3,
	EWUIT_Grenade                                      = 4,
	EWUIT_MAX                                          = 5
};*/

// Enum CombatGame.CombatTypes.ELevelIconType
/*enum ELevelIconType
{
	ELEVEL_ICON_SMALL                                  = 0,
	ELEVEL_ICON_BIG                                    = 1,
	ELEVEL_ICON_MAX                                    = 2
};*/

// Enum CombatGame.CombatTypes.EMouseSensMode
/*enum EMouseSensMode
{
	MOUSESENSMODE_Master                               = 0,
	MOUSESENSMODE_WeaponPreset                         = 1,
	MOUSESENSMODE_MAX                                  = 2
};*/

// Enum CombatGame.CombatTypes.ETableServiceType
/*enum ETableServiceType
{
	EService_InActive                                  = 0,
	EService_Active                                    = 1,
	EService_Prototype                                 = 2,
	EService_MAX                                       = 3
};*/

// Enum CombatGame.CombatTypes.ERoundConditionSoundType
/*enum ERoundConditionSoundType
{
	ERoundST_None                                      = 0,
	ERoundST_Score30Percent                            = 1,
	ERoundST_Score60Percent                            = 2,
	ERoundST_Score90Percent                            = 3,
	ERoundST_RemainTime1Min                            = 4,
	ERoundST_RemainTime10Sec                           = 5,
	ERoundST_RemainTime30Sec                           = 6,
	ERoundST_MAX                                       = 7
};*/

// Enum CombatGame.CombatTypes.EScoreType
/*enum EScoreType
{
	EScoreType_None                                    = 0,
	EScoreType_GameScore                               = 1,
	EScoreType_MissionScore                            = 2,
	EScoreType_MAX                                     = 3
};*/

// Enum CombatGame.CombatTypes.ERandomBoxShopCoinType
/*enum ERandomBoxShopCoinType
{
	E_RNDSHOP_COIN_ALL                                 = 0,
	E_RNDSHOP_COIN_CASH                                = 1,
	E_RNDSHOP_GOLD                                     = 2,
	E_RNDSHOP_MEDAL                                    = 3,
	E_RNDSHOP_COIN_BS                                  = 4,
	E_RNDSHOP_COIN_M                                   = 5,
	E_RNDSHOP_COIN_G                                   = 6,
	E_RNDSHOP_MAX                                      = 7
};*/

// Enum CombatGame.CombatTypes.EItemDetailViewType
/*enum EItemDetailViewType
{
	E_VIEWTYPE_TEXT                                    = 0,
	E_VIEWTYPE_SINGLE                                  = 1,
	E_VIEWTYPE_COMPARE                                 = 2,
	E_VIEWTYPE_MAX                                     = 3
};*/

// Enum CombatGame.CombatTypes.EItemDetaiInfoTab
/*enum EItemDetaiInfoTab
{
	E_ITEMINFO_GUAGE                                   = 0,
	E_ITEMINFO_ADDON                                   = 1,
	E_ITEMINFO_DESC                                    = 2,
	E_ITEMINFO_MAX                                     = 3
};*/

// Enum CombatGame.CombatTypes.EItemSubTabItem
/*enum EItemSubTabItem
{
	E_SUB_TAB_ITEM_ALL                                 = 0,
	E_SUB_TAB_ITEM_ITEM                                = 1,
	E_SUB_TAB_ITEM_LICENSE                             = 2,
	E_SUB_TAB_ITEM_PACKAGE                             = 3,
	E_SUB_TAB_ITEM_SPRAY                               = 4,
	E_SUB_TAB_ITEM_MAX                                 = 5
};*/

// Enum CombatGame.CombatTypes.EItemSubTabCharacter
/*enum EItemSubTabCharacter
{
	E_SUB_TAB_CHAR_ALL                                 = 0,
	E_SUB_TAB_CHAR_CHAR                                = 1,
	E_SUB_TAB_CHAR_MAX                                 = 2
};*/

// Enum CombatGame.CombatTypes.EItemSubTabAll
/*enum EItemSubTabAll
{
	E_SUB_TAB_ALL_ALL                                  = 0,
	E_SUB_TAB_ALL_MAX                                  = 1
};*/

// Enum CombatGame.CombatTypes.EItemSubTabWeapon
/*enum EItemSubTabWeapon
{
	E_SUB_TAB_WEAPON_ALL                               = 0,
	E_SUB_TAB_WEAPON_PRIMARY_WEAPON                    = 1,
	E_SUB_TAB_WEAPON_SUB_WEAPON                        = 2,
	E_SUB_TAB_WEAPON_MELEE_WEAPON                      = 3,
	E_SUB_TAB_WEAPON_THROW_WEAPON                      = 4,
	E_SUB_TAB_WEAPON_TR_WEAPON                         = 5,
	E_SUB_TAB_WEAPON_MAX                               = 6
};*/

// Enum CombatGame.CombatTypes.EItemMainTab
/*enum EItemMainTab
{
	E_MAIN_TAB_ALL                                     = 0,
	E_MAIN_TAB_WEAPON                                  = 1,
	E_MAIN_TAB_CHARACTER                               = 2,
	E_MAIN_TAB_ITEM                                    = 3,
	E_MAIN_TAB_MAX                                     = 4
};*/

// Enum CombatGame.CombatTypes.EIvenPresetTabIndex
/*enum EIvenPresetTabIndex
{
	E_PRESET_FIRST                                     = 0,
	E_PRESET_SECOND                                    = 1,
	E_PRESET_THIRD                                     = 2,
	E_PRESET_MAX                                       = 3
};*/

// Enum CombatGame.CombatTypes.EUIRoundPoint
/*enum EUIRoundPoint
{
	EUIRoundPoint_Score                                = 0,
	EUIRoundPoint_Kills                                = 1,
	EUIRoundPoint_AliveMemberCount                     = 2,
	EUIRoundPoint_WinRoundCount                        = 3,
	EUIRoundPoint_SpecialPoint                         = 4,
	EUIRoundPoint_MAX                                  = 5
};*/

// Enum CombatGame.CombatTypes.EStatConstValueType
/*enum EStatConstValueType
{
	EStatConstValueType_None                           = 0,
	EStatConstValueType_Gun                            = 1,
	EStatConstValueType_Melee                          = 2,
	EStatConstValueType_Flag                           = 3,
	EStatConstValueType_MAX                            = 4
};*/

// Enum CombatGame.CombatTypes.EStatDataSetType
/*enum EStatDataSetType
{
	EStatDataSetType_None                              = 0,
	EStatDataSetType_ConstValue                        = 1,
	EStatDataSetType_StatGroup                         = 2,
	EStatDataSetType_Item                              = 3,
	EStatDataSetType_Rank                              = 4,
	EStatDataSetType_Scoring                           = 5,
	EStatDataSetType_MAX                               = 6
};*/

// Enum CombatGame.CombatTypes.EStatGameSetType
/*enum EStatGameSetType
{
	EStatGameSetType_None                              = 0,
	EStatGameSetType_Map                               = 1,
	EStatGameSetType_Mode                              = 2,
	EStatGameSetType_MAX                               = 3
};*/

// Enum CombatGame.CombatTypes.EWorldObstacle
/*enum EWorldObstacle
{
	EWObstacle_None                                    = 0,
	EWObstacle_Cliff                                   = 1,
	EWObstacle_MAX                                     = 2
};*/

// Enum CombatGame.CombatTypes.EKillDeathOption
/*enum EKillDeathOption
{
	EKDOption_None                                     = 0,
	EKDOption_Penetrate                                = 1,
	EKDOption_BuzzKill                                 = 2,
	EKDOption_HeadShot                                 = 3,
	EKDOption_ForeheadShot                             = 4,
	EKDOption_Skill                                    = 5,
	EKDOption_AttachGrenadeLauncher                    = 6,
	EKDOption_MAX                                      = 7
};*/

// Enum CombatGame.CombatTypes.ESessionState
/*enum ESessionState
{
	StateNone                                          = 0,
	StateOffLine                                       = 1,
	StateChannel                                       = 2,
	StateLobby                                         = 3,
	StateMatchRoom                                     = 4,
	StatePlayGame                                      = 5,
	ESessionState_MAX                                  = 6
};*/

// Enum CombatGame.CombatTypes.ECombatDamageType
/*enum ECombatDamageType
{
	EDAMAGETYPE_NONE                                   = 0,
	EDAMAGETYPE_MELEE                                  = 1,
	EDAMAGETYPE_BULLET                                 = 2,
	EDAMAGETYPE_EXPLOSION                              = 3,
	EDAMAGETYPE_FELL                                   = 4,
	EDAMAGETYPE_MAX                                    = 5
};*/

// Enum CombatGame.CombatTypes.ERepairType
/*enum ERepairType
{
	CHANGE_INPUT                                       = 0,
	PLAYER_DEAD                                        = 1,
	GAME_OVER                                          = 2,
	PLAYER_OVERRANGE                                   = 3,
	ERepairType_MAX                                    = 4
};*/

// Enum CombatGame.CombatTypes.RescueMode_AnnounceSoundType
/*enum RescueMode_AnnounceSoundType
{
	ERAS_StartMove                                     = 0,
	ERAS_Groggy                                        = 1,
	ERAS_WaitingEscape                                 = 2,
	ERAS_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.EDialogType
/*enum EDialogType
{
	EDialog_OK                                         = 0,
	EDialog_Alert                                      = 1,
	EDialog_InputOnlyNumber                            = 2,
	EDialog_CompAlert                                  = 3,
	EDialog_CompOK                                     = 4,
	EDialog_MAX                                        = 5
};*/

// Enum CombatGame.CombatTypes.EDirectionalSeqMode
/*enum EDirectionalSeqMode
{
	EDSM_2Way                                          = 0,
	EDSM_4Way                                          = 1,
	EDSM_8Way                                          = 2,
	EDSM_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.EObjectGradeType
/*enum EObjectGradeType
{
	EOGT_Zero                                          = 0,
	EOGT_First                                         = 1,
	EOGT_Second                                        = 2,
	EOGT_Best                                          = 3,
	EOGT_MAX                                           = 4
};*/

// Enum CombatGame.CombatTypes.EChattingColorType
/*enum EChattingColorType
{
	ECHAT_COLOR_DEFAULT                                = 0,
	ECHAT_COLOR_SELF                                   = 1,
	ECHAT_COLOR_MAX                                    = 2
};*/

// Enum CombatGame.CombatTypes.EChattingType
/*enum EChattingType
{
	ECHAT_TALK                                         = 0,
	ECHAT_WHISPER_TO                                   = 1,
	ECHAT_WHISPER_FROM                                 = 2,
	ECHAT_CLAN                                         = 3,
	ECHAT_SYSTEM                                       = 4,
	ECHAT_SYSTEM_ACCESS_FRIEND                         = 5,
	ECHAT_SYSTEM_ACCESS_CLAN                           = 6,
	ECHAT_SYSTEM_NORMAL                                = 7,
	ECHAT_SYSTEM_MODE                                  = 8,
	ECHAT_SYSTEM_GM                                    = 9,
	ECHAT_SYSTEM_CLAN_NOTICE                           = 10,
	ECHAT_SYSTEM_ENTRANCE                              = 11,
	ECHAT_SYSTEM_MTS                                   = 12,
	ECHAT_SYSTEM_KICK                                  = 13,
	ECHAT_TEAM_CHAT                                    = 14,
	ECHAT_TEAM_DEAD                                    = 15,
	ECHAT_ALL_CHAT                                     = 16,
	ECHAT_ALL_DEAD                                     = 17,
	ECHAT_RADIO_MESSAGE                                = 18,
	ECHAT_NOTICE                                       = 19,
	ECHAT_EVENT                                        = 20,
	ECHAT_TIP                                          = 21,
	ECHAT_DEV                                          = 22,
	ECHAT_CHAMPIONSHIP_OBSERVER                        = 23,
	ECHAT_MAX                                          = 24
};*/

// Enum CombatGame.CombatTypes.EChattingOpenType
/*enum EChattingOpenType
{
	ECHAT_OPEN_DEFAULT                                 = 0,
	ECHAT_OPEN_PAGEUP                                  = 1,
	ECHAT_OPEN_PAGEDOWN                                = 2,
	ECHAT_OPEN_MAX                                     = 3
};*/

// Enum CombatGame.CombatTypes.EAnnounceableSkillType
/*enum EAnnounceableSkillType
{
	EAST_UAVPatrol                                     = 0,
	EAST_AttackHelicopter                              = 1,
	EAST_AirStrike                                     = 2,
	EAST_Howitzer                                      = 3,
	EAST_Predator                                      = 4,
	EAST_MAX                                           = 5
};*/

// Enum CombatGame.CombatTypes.ESkillMessageType
/*enum ESkillMessageType
{
	ESMT_UnLock                                        = 0,
	ESMT_Buy                                           = 1,
	ESMT_FailedBuy                                     = 2,
	ESMT_ActivatedAlert                                = 3,
	ESMT_MAX                                           = 4
};*/

// Enum CombatGame.CombatTypes.EHUDPlayerState
/*enum EHUDPlayerState
{
	ERPS_Default                                       = 0,
	ERPS_Dead                                          = 1,
	ERPS_Radio                                         = 2,
	ERPS_Fire                                          = 3,
	ERPS_Damaged                                       = 4,
	ERPS_MAX                                           = 5
};*/

// Enum CombatGame.CombatTypes.EPawnBuffState
/*enum EPawnBuffState
{
	EPBS_NONEBUFF                                      = 0,
	EPBS_APPLY_CHARBUFF                                = 1,
	EPBS_APPLY_CHARBUFF_AND_SKILLBUFF                  = 2,
	EPBS_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.EDroppedSuppliesType
/*enum EDroppedSuppliesType
{
	EDST_AmmoKit                                       = 0,
	EDST_MediKit                                       = 1,
	EDST_MAX                                           = 2
};*/

// Enum CombatGame.CombatTypes.EScoringGradeType
/*enum EScoringGradeType
{
	E_SCORING_GRADE0                                   = 0,
	E_SCORING_GRADE1                                   = 1,
	E_SCORING_GRADE2                                   = 2,
	E_SCORING_MAX                                      = 3
};*/

// Enum CombatGame.CombatTypes.EScoringDisplayType
/*enum EScoringDisplayType
{
	ESDT_None                                          = 0,
	ESDT_KillMark                                      = 1,
	ESDT_Stat                                          = 2,
	ESDT_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.HostageVoiceType
/*enum HostageVoiceType
{
	EHVT_None                                          = 0,
	EHVT_Captivity                                     = 1,
	EHVT_StartMove                                     = 2,
	EHVT_Hit                                           = 3,
	EHVT_Groggy                                        = 4,
	EHVT_ArriveEscapePoint                             = 5,
	EHVT_MAX                                           = 6
};*/

// Enum CombatGame.CombatTypes.SkillOptionType
/*enum SkillOptionType
{
	ESOP_lock                                          = 0,
	ESOP_Unlock                                        = 1,
	ESOP_Buy                                           = 2,
	ESOP_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.FailedBuyReasonType
/*enum FailedBuyReasonType
{
	EFBRT_OverRange                                    = 0,
	EFBRT_Locking                                      = 1,
	EFBRT_NoMoney                                      = 2,
	EFBRT_AlreadyHave                                  = 3,
	EFBRT_NoData                                       = 4,
	EFBRT_CoolTime                                     = 5,
	EFBRT_GlobalCoolTime                               = 6,
	EFBRT_AlreadyUse                                   = 7,
	EFBRT_NoLicense                                    = 8,
	EFBRT_MAX                                          = 9
};*/

// Enum CombatGame.CombatTypes.CombatSkillCoolType
/*enum CombatSkillCoolType
{
	CSCT_NORMAL                                        = 0,
	CSCT_GLOBAL                                        = 1,
	CSCT_MAX                                           = 2
};*/

// Enum CombatGame.CombatTypes.CombatSkillType
/*enum CombatSkillType
{
	CST_NONE                                           = 0,
	CST_Active                                         = 1,
	CST_Passive                                        = 2,
	CST_MAX                                            = 3
};*/

// Enum CombatGame.CombatTypes.MilitaryClassType
/*enum MilitaryClassType
{
	EMCT_ASSAULT                                       = 0,
	EMCT_SUPPORT                                       = 1,
	EMCT_COMMAND                                       = 2,
	EMCT_RECON                                         = 3,
	EMCT_MAX                                           = 4
};*/

// Enum CombatGame.CombatTypes.MagazineState
/*enum MagazineState
{
	EMS_Normal                                         = 0,
	EMS_Reload                                         = 1,
	EMS_LackOfAmmo                                     = 2,
	EMS_NoAmmo                                         = 3,
	EMS_MAX                                            = 4
};*/

// Enum CombatGame.CombatTypes.WeaponCategoryType
/*enum WeaponCategoryType
{
	EWCT_Gun                                           = 0,
	EWCT_Grenade                                       = 1,
	EWCT_Melee                                         = 2,
	EWCT_MAX                                           = 3
};*/

// Enum CombatGame.CombatTypes.TotalDataInfo_GameStat
/*enum TotalDataInfo_GameStat
{
	ETDI_GS_FireCount                                  = 0,
	ETDI_GS_HitCount                                   = 1,
	ETDI_GS_Damage                                     = 2,
	ETDI_GS_KillCount                                  = 3,
	ETDI_GS_DeathCount                                 = 4,
	ETDI_GS_SuicideCount                               = 5,
	ETDI_GS_Respawncount                               = 6,
	ETDI_GS_PlayTime                                   = 7,
	ETDI_GS_GameScore                                  = 8,
	ETDI_GS_MAX                                        = 9
};*/

// Enum CombatGame.CombatTypes.TotalDataInfo_WeaponStat
/*enum TotalDataInfo_WeaponStat
{
	ETDI_WS_FireCount                                  = 0,
	ETDI_WS_HitCount                                   = 1,
	ETDI_WS_Damage                                     = 2,
	ETDI_WS_KillCount                                  = 3,
	ETDI_WS_HeadShotCount                              = 4,
	ETDI_WS_HeadShotKillCount                          = 5,
	ETDI_WS_DeathCount                                 = 6,
	ETDI_WS_HeadShotDeathCount                         = 7,
	ETDI_WS_MAX                                        = 8
};*/

// Enum CombatGame.CombatTypes.ETeamWinnerCondition
/*enum ETeamWinnerCondition
{
	ETWC_None                                          = 0,
	ETWC_MemberScore                                   = 1,
	ETWC_MissionScore                                  = 2,
	ETWC_Kill                                          = 3,
	ETWC_ASSIST                                        = 4,
	ETWC_DEATH                                         = 5,
	ETWC_AliveMember                                   = 6,
	ETWC_FirstOccupation                               = 7,
	ETWC_MissionCount                                  = 8,
	ETWC_OccupationScoreInNotOccupationZone            = 9,
	ETWC_MAX                                           = 10
};*/

// Enum CombatGame.CombatTypes.EScoreboardType
/*enum EScoreboardType
{
	ESBT_Scoreboard                                    = 0,
	ESBT_ScoreboardAndMap                              = 1,
	ESBT_MAX                                           = 2
};*/

// Enum CombatGame.CombatTypes.EMapScoreMode
/*enum EMapScoreMode
{
	ETMM_None                                          = 0,
	ETMM_MiniMap                                       = 1,
	ETMM_MiniMapMixed                                  = 2,
	ETMM_WholeMap                                      = 3,
	ETMM_WholeMapMixed                                 = 4,
	ETMM_ScoreboardOnly                                = 5,
	ETMM_BroadCasting                                  = 6,
	ETMM_MAX                                           = 7
};*/

// Enum CombatGame.CombatTypes.EUIPlayerState
/*enum EUIPlayerState
{
	EUIPS_None                                         = 0,
	EUIPS_Death                                        = 1,
	EUIPS_Spectator                                    = 2,
	EUIPS_Operating                                    = 3,
	EUIPS_LockedPresetScene                            = 4,
	EUIPS_UnLockedPresetScene                          = 5,
	EUIPS_Num                                          = 6,
	EUIPS_MAX                                          = 7
};*/

// Enum CombatGame.CombatTypes.EUIUpdateSkillListType
/*enum EUIUpdateSkillListType
{
	EUIST_GENERAL                                      = 0,
	EUIST_CHANGECR                                     = 1,
	EUIST_MAX                                          = 2
};*/

// Enum CombatGame.CombatTypes.EUIGameStatus
/*enum EUIGameStatus
{
	EUIGS_None                                         = 0,
	EUIGS_WarmUp                                       = 1,
	EUIGS_CountDown                                    = 2,
	EUIGS_MatchInProgress                              = 3,
	EUIGS_RoundOver                                    = 4,
	EUIGS_SuddenDeath                                  = 5,
	EUIGS_FinalRoundOver                               = 6,
	EUIGS_MatchOver                                    = 7,
	EUIGS_TeamChange                                   = 8,
	EUIGS_TutorialCutScene                             = 9,
	EUIGS_MAX                                          = 10
};*/

// Enum CombatGame.CombatTypes.EUIDirection
/*enum EUIDirection
{
	EUID_TOP                                           = 0,
	EUID_RIGHT                                         = 1,
	EUID_BOTTOM                                        = 2,
	EUID_LEFT                                          = 3,
	EUID_Center                                        = 4,
	EUID_Point                                         = 5,
	EUID_INIT                                          = 6,
	EUID_MAX                                           = 7
};*/

// Enum CombatGame.CombatTypes.ECrosshairTarget
/*enum ECrosshairTarget
{
	ECT_None                                           = 0,
	ECT_Friendly                                       = 1,
	ECT_Enemy                                          = 2,
	ECT_MAX                                            = 3
};*/

// Enum CombatGame.CombatTypes.ECrosshairType
/*enum ECrosshairType
{
	Crosshair_Empty                                    = 0,
	Crosshair_Basic                                    = 1,
	Crosshair_GL                                       = 2,
	Crosshair_RL                                       = 3,
	Crosshair_LaserSight                               = 4,
	Crosshair_MAX                                      = 5
};*/

// Enum CombatGame.CombatTypes.EWinType
/*enum EWinType
{
	EWT_None                                           = 0,
	EWT_Winner                                         = 1,
	EWT_Loser                                          = 2,
	EWT_MAX                                            = 3
};*/

// Enum CombatGame.CombatTypes.ERoundResultReason
/*enum ERoundResultReason
{
	ERRR_None                                          = 0,
	ERRR_TimeLimit                                     = 1,
	ERRR_GameScoreLimit                                = 2,
	ERRR_SuddenDeathKill                               = 3,
	ERRR_NoRespawnGameAllDeath                         = 4,
	ERRR_MissionEnd                                    = 5,
	ERRR_WinByDecision                                 = 6,
	ERRR_MAX                                           = 7
};*/

// Enum CombatGame.CombatTypes.EBLOCK_PLAY_GAME_TYPE
/*enum EBLOCK_PLAY_GAME_TYPE
{
	BPGT_UNBLOCK                                       = 0,
	BPGT_BLOCK                                         = 1,
	BPGT_MAX                                           = 2
};*/

// Enum CombatGame.CombatTypes.EIFFDisplayType
/*enum EIFFDisplayType
{
	E_IFFDisplay_Off                                   = 0,
	E_IFFDisplay_FriendlyHidable                       = 1,
	E_IFFDisplay_Show                                  = 2,
	E_IFFDisplay_MAX                                   = 3
};*/

// Enum CombatGame.CombatTypes.EIFFType
/*enum EIFFType
{
	EIT_NONE                                           = 0,
	EIT_Friendly_Normal                                = 1,
	EIT_Friendly_Targeted                              = 2,
	EIT_Friendly_Hide                                  = 3,
	EIT_Friendly_Flash                                 = 4,
	EIT_Friendly_ChampionShip_Obsever                  = 5,
	EIT_Enemy_Targeted                                 = 6,
	EIT_Enemy_Flash                                    = 7,
	EIT_Enemy_ChampionShip_Obsever                     = 8,
	EIT_AI_Enemy_Targeted                              = 9,
	EIT_MAX                                            = 10
};*/

// Enum CombatGame.CombatTypes.ETacticalMapSymbolMovieClipType
/*enum ETacticalMapSymbolMovieClipType
{
	E_SYMBOL_MC_FRIEND                                 = 0,
	E_SYMBOL_MC_ENEMY                                  = 1,
	E_SYMBOL_MC_FOR_MODE                               = 2,
	E_SYMBOL_MC_AREA                                   = 3,
	E_SYMBOL_MC_SKILL                                  = 4,
	E_SYMBOL_MC_TOP_DEPTH_OBJECT                       = 5,
	E_SYMBOL_MC_MAX                                    = 6
};*/

// Enum CombatGame.CombatTypes.EObjectIconType
/*enum EObjectIconType
{
	O_ICONTYPE_Empty                                   = 0,
	O_ICONTYPE_Self                                    = 1,
	O_ICONTYPE_Friendly                                = 2,
	O_ICONTYPE_Dead_Friendly                           = 3,
	O_ICONTYPE_Damaged_Friendly                        = 4,
	O_ICONTYPE_Fire_Friendly                           = 5,
	O_ICONTYPE_Radio_Friendly                          = 6,
	O_ICONTYPE_Enemy                                   = 7,
	O_ICONTYPE_Dead_Enemy                              = 8,
	O_ICONTYPE_Damaged_Enemy                           = 9,
	O_ICONTYPE_Fire_Enemy                              = 10,
	O_ICONTYPE_Respawn_Area                            = 11,
	O_ICONTYPE_Area                                    = 12,
	O_ICONTYPE_C4_Friendly                             = 13,
	O_ICONTYPE_Damaged_C4_Friendly                     = 14,
	O_ICONTYPE_Fire_C4_Friendly                        = 15,
	O_ICONTYPE_Radio_C4_Friendly                       = 16,
	O_ICONTYPE_Explosion_A                             = 17,
	O_ICONTYPE_Explosion_Planted_A                     = 18,
	O_ICONTYPE_Explosion_B                             = 19,
	O_ICONTYPE_Explosion_Planted_B                     = 20,
	O_ICONTYPE_C4                                      = 21,
	O_ICONTYPE_Bunker_Ally_A                           = 22,
	O_ICONTYPE_Bunker_Ally_B                           = 23,
	O_ICONTYPE_Bunker_Ally_C                           = 24,
	O_ICONTYPE_Bunker_Ally_D                           = 25,
	O_ICONTYPE_Bunker_Ally_E                           = 26,
	O_ICONTYPE_Bunker_Attack_Ally_A                    = 27,
	O_ICONTYPE_Bunker_Attack_Ally_B                    = 28,
	O_ICONTYPE_Bunker_Attack_Ally_C                    = 29,
	O_ICONTYPE_Bunker_Attack_Ally_D                    = 30,
	O_ICONTYPE_Bunker_Attack_Ally_E                    = 31,
	O_ICONTYPE_Bunker_Enemy_A                          = 32,
	O_ICONTYPE_Bunker_Enemy_B                          = 33,
	O_ICONTYPE_Bunker_Enemy_C                          = 34,
	O_ICONTYPE_Bunker_Enemy_D                          = 35,
	O_ICONTYPE_Bunker_Enemy_E                          = 36,
	O_ICONTYPE_Bunker_Attack_Enemy_A                   = 37,
	O_ICONTYPE_Bunker_Attack_Enemy_B                   = 38,
	O_ICONTYPE_Bunker_Attack_Enemy_C                   = 39,
	O_ICONTYPE_Bunker_Attack_Enemy_D                   = 40,
	O_ICONTYPE_Bunker_Attack_Enemy_E                   = 41,
	O_ICONTYPE_RedAlert                                = 42,
	O_ICONTYPE_Siren                                   = 43,
	O_ICONTYPE_Exit                                    = 44,
	O_ICONTYPE_VIP                                     = 45,
	O_ICONTYPE_Damaged_VIP                             = 46,
	O_ICONTYPE_Fire_VIP                                = 47,
	O_ICONTYPE_Occupied_Area                           = 48,
	O_ICONTYPE_Chopper_Friendly                        = 49,
	O_ICONTYPE_Chopper_Enemy                           = 50,
	O_ICONTYPE_Claymore_Friendly                       = 51,
	O_ICONTYPE_Claymore_Enemy                          = 52,
	O_ICONTYPE_UAV_Friendly                            = 53,
	O_ICONTYPE_UAV_Enemy                               = 54,
	O_ICONTYPE_SentryGun_Friendly                      = 55,
	O_ICONTYPE_SentryGun_Enemy                         = 56,
	O_ICONTYPE_TrophyTurret_Friendly                   = 57,
	O_ICONTYPE_TrophyTurret_Enemy                      = 58,
	O_ICONTYPE_Pickup_SpearTac                         = 59,
	O_ICONTYPE_Pickup_Grenade                          = 60,
	O_ICONTYPE_Pickup_AmmoKit                          = 61,
	O_ICONTYPE_AIwave_DefendedObject                   = 62,
	O_ICONTYPE_MAX                                     = 63
};*/

// Enum CombatGame.CombatTypes.MissionActorUIState
/*enum MissionActorUIState
{
	MissionActorUIState_Default                        = 0,
	MissionActorUIState_Damaged                        = 1,
	MissionActorUIState_Exploded                       = 2,
	MissionActorUIState_MAX                            = 3
};*/

// Enum CombatGame.CombatTypes.ETacticalMapNameplateIconType
/*enum ETacticalMapNameplateIconType
{
	E_NAMEPLATE_VIEWTARGET                             = 0,
	E_NAMEPLATE_VC                                     = 1,
	E_NAMEPLATE_PM                                     = 2,
	E_NAMEPLATE_MAX                                    = 3
};*/

// Enum CombatGame.CombatTypes.EDecalTraceDir
/*enum EDecalTraceDir
{
	DECALTRACE_PosX                                    = 0,
	DECALTRACE_NegX                                    = 1,
	DECALTRACE_PosY                                    = 2,
	DECALTRACE_NegY                                    = 3,
	DECALTRACE_PosZ                                    = 4,
	DECALTRACE_NegZ                                    = 5,
	DECALTRACE_MAX                                     = 6
};*/

// Enum CombatGame.CombatTypes.ESceneType
/*enum ESceneType
{
	SCENE_None                                         = 0,
	SCENE_Main                                         = 1,
	SCENE_Sub                                          = 2,
	SCENE_MAX                                          = 3
};*/

// Enum CombatGame.CombatTypes.EZoomState
/*enum EZoomState
{
	ZST_NotZoomed                                      = 0,
	ZST_Zoomed                                         = 1,
	ZST_Zoomed_Sec                                     = 2,
	ZST_Zoomed_Lnchr                                   = 3,
	ZST_ZoomingOut                                     = 4,
	ZST_ZoomingIn                                      = 5,
	ZST_ZoomingOut_Sec                                 = 6,
	ZST_ZoomingIn_Sec                                  = 7,
	ZST_ZoomingOut_Lnchr                               = 8,
	ZST_ZoomingIn_Lnchr                                = 9,
	ZST_MAX                                            = 10
};*/

// Enum CombatGame.CombatTypes.EWeaponGroup
/*enum EWeaponGroup
{
	EWeaponGroup_None                                  = 0,
	EWeaponGroup_Pri                                   = 1,
	EWeaponGroup_Sub                                   = 2,
	EWeaponGroup_Melee                                 = 3,
	EWeaponGroup_Grenade                               = 4,
	EWeaponGroup_Fifth                                 = 5,
	EWeaponGroup_Sixth                                 = 6,
	EWeaponGroup_Seventh                               = 7,
	EWeaponGroup_Eighth                                = 8,
	EWeaponGroup_Ninth                                 = 9,
	EWeaponGroup_Mission                               = 10,
	EWeaponGroup_Skill                                 = 11,
	EWeaponGroup_MAX                                   = 12
};*/

// Enum CombatGame.CombatTypes.EWeaponState
/*enum EWeaponState
{
	WeaponState_InActive                               = 0,
	WeaponState_PendingDestroy                         = 1,
	WeaponState_Dropped                                = 2,
	WeaponState_Passive                                = 3,
	WeaponState_PendingClientWeaponSet                 = 4,
	WeaponState_Active                                 = 5,
	WeaponState_EquipUp                                = 6,
	WeaponState_PutDown                                = 7,
	WeaponState_PreReload                              = 8,
	WeaponState_FullPreReload                          = 9,
	WeaponState_Reload                                 = 10,
	WeaponState_FullReload                             = 11,
	WeaponState_PostReload                             = 12,
	WeaponState_PreFire1                               = 13,
	WeaponState_PreFire2                               = 14,
	WeaponState_Holding1                               = 15,
	WeaponState_Holding2                               = 16,
	WeaponState_Fire                                   = 17,
	WeaponState_ZoomFire                               = 18,
	WeaponState_ZoomFire_Sec                           = 19,
	WeaponState_AltFire                                = 20,
	WeaponState_RespawnAction                          = 21,
	WeaponState_SpinUp                                 = 22,
	WeaponState_SpinDown                               = 23,
	WeaponState_Stare                                  = 24,
	WeaponState_SilencerEquiping                       = 25,
	WeaponState_SilencerDetaching                      = 26,
	WeaponState_ETC                                    = 27,
	WeaponState_ActivePart                             = 28,
	WeaponState_DeactivePart                           = 29,
	WeaponState_MAX                                    = 30
};*/

// Enum CombatGame.CombatTypes.EStanceState
/*enum EStanceState
{
	E_SS_Stand_Idle                                    = 0,
	E_SS_Stand_Walk                                    = 1,
	E_SS_Stand_Run                                     = 2,
	E_SS_Crouch_Idle                                   = 3,
	E_SS_Crouch_Walk                                   = 4,
	E_SS_Unstable                                      = 5,
	E_SS_MAX                                           = 6
};*/

// Enum CombatGame.CombatTypes.VoteState
/*enum VoteState
{
	VT_NONE                                            = 0,
	VT_READY                                           = 1,
	VT_YES                                             = 2,
	VT_NO                                              = 3,
	VT_CANT                                            = 4,
	VT_MAX                                             = 5
};*/

// Enum CombatGame.CombatTypes.EPartType
/*enum EPartType
{
	PARTTYPE_CHAR_BODY                                 = 0,
	PARTTYPE_1ST_ARM                                   = 1,
	PARTTYPE_1ST_HAND                                  = 2,
	PARTTYPE_1ST_WRIST                                 = 3,
	PARTTYPE_WEAPON_1ST_BODY                           = 4,
	PARTTYPE_WEAPON_1ST_MAGAZINE                       = 5,
	PARTTYPE_WEAPON_1ST_LASER                          = 6,
	PARTTYPE_WEAPON_1ST_SILENCER                       = 7,
	PARTTYPE_WEAPON_1ST_SCOPE                          = 8,
	PARTTYPE_WEAPON_1ST_GLAUNCHER                      = 9,
	PARTTYPE_WEAPON_1ST_GRIP                           = 10,
	PARTTYPE_WEAPON_3RD_BODY                           = 11,
	PARTTYPE_WEAPON_3RD_MAGAZINE                       = 12,
	PARTTYPE_WEAPON_3RD_LASER                          = 13,
	PARTTYPE_WEAPON_3RD_SILENCER                       = 14,
	PARTTYPE_WEAPON_3RD_SCOPE                          = 15,
	PARTTYPE_WEAPON_3RD_GLAUNCHER                      = 16,
	PARTTYPE_WEAPON_3RD_GRIP                           = 17,
	PARTTYPE_MAX                                       = 18
};*/

// Enum CombatGame.CombatTypes.EVelocityState
/*enum EVelocityState
{
	VelocityState_None                                 = 0,
	VelocityState_Accel                                = 1,
	VelocityState_Deceleration                         = 2,
	VelocityState_MAX                                  = 3
};*/

// Enum CombatGame.CombatTypes.EMatchEndReason
/*enum EMatchEndReason
{
	EMatchEndReason_NONE                               = 0,
	EMatchEndReason_FORFEITURE                         = 1,
	EMatchEndReason_SURRENDER                          = 2,
	EMatchEndReason_MAX                                = 3
};*/

// Enum CombatGame.CombatTypes.DXFuncType
/*enum DXFuncType
{
	DXFuncType_EndScene                                = 0,
	DXFuncType_DrawIndexedPrimitive                    = 1,
	DXFuncType_SetStreamSource                         = 2,
	DXFuncType_MAX                                     = 3
};*/

// Enum CombatGame.CombatTypes.ELadderClimbType
/*enum ELadderClimbType
{
	ELadderClimbType_Default                           = 0,
	ELadderClimbType_IgnoreCameraPitch                 = 1,
	ELadderClimbType_MAX                               = 2
};*/

// Enum CombatGame.CombatTypes.ResourceType
/*enum ResourceType
{
	ResourceType_ImpactPointLight                      = 0,
	ResourceType_ImpactDecal                           = 1,
	ResourceType_ImpactEmitter                         = 2,
	ResourceType_RadialBlur                            = 3,
	ResourceType_WeaponTracer                          = 4,
	ResourceType_MAX                                   = 5
};*/

// Enum CombatGame.CombatTypes.ScoreType
/*enum ScoreType
{
	ScoreType_Team                                     = 0,
	ScoreType_Player                                   = 1,
	ScoreType_TeamAndPlayer                            = 2,
	ScoreType_MAX                                      = 3
};*/

// Enum CombatGame.CombatTypes.WeaponFireSoundType
/*enum WeaponFireSoundType
{
	WeaponFireSoundType_Fire                           = 0,
	WeaponFireSoundType_AltFire                        = 1,
	WeaponFireSoundType_Silencer                       = 2,
	WeaponFireSoundType_GrenadeLauncher                = 3,
	WeaponFireSoundType_MAX                            = 4
};*/

// Enum CombatGame.CombatTypes.WeapFireAnimType
/*enum WeapFireAnimType
{
	WeapFireAnimType_Anim                              = 0,
	WeapFireAnimType_IK                                = 1,
	WeapFireAnimType_Both                              = 2,
	WeapFireAnimType_MAX                               = 3
};*/

// Enum CombatGame.CombatTypes.EPawnAnimset
/*enum EPawnAnimset
{
	EPawnAnimset_Base                                  = 0,
	EPawnAnimset_WeaponMaster                          = 1,
	EPawnAnimset_WeaponSub                             = 2,
	EPawnAnimset_MAX                                   = 3
};*/

// Enum CombatGame.CombatTypes.EHand
/*enum EHand
{
	EHand_Left                                         = 0,
	EHand_Right                                        = 1,
	EHand_MAX                                          = 2
};*/

// Enum CombatGame.CombatTypes.EGender
/*enum EGender
{
	EGender_Male                                       = 0,
	EGender_FeMale                                     = 1,
	EGender_MAX                                        = 2
};*/

// Enum CombatGame.CombatTypes.RISSlot
/*enum RISSlot
{
	RISSlot_None                                       = 0,
	RISSlot_Sight                                      = 1,
	RISSlot_LaserSight                                 = 2,
	RISSlot_Silence                                    = 3,
	RISSlot_Launcher                                   = 4,
	RISSlot_MAX                                        = 5
};*/

// Enum CombatGame.CombatTypes.EFireMode
/*enum EFireMode
{
	FireMode                                           = 0,
	FireMode01                                         = 1,
	FireMode02                                         = 2,
	FireMode_MAX                                       = 3
};*/

// Enum CombatGame.CombatTypes.ERISState
/*enum ERISState
{
	RISState_Attached                                  = 0,
	RISState_Detached                                  = 1,
	RISState_ZoomStateChanged                          = 2,
	RISState_ChangeVisibility                          = 3,
	RISState_InitFirstPersonMesh                       = 4,
	RISState_InitThirdPersonMesh                       = 5,
	RISState_NotifyTeamChanged                         = 6,
	RISState_ModifyWeaponProperties                    = 7,
	RISState_PreActivePart                             = 8,
	RISState_PostDeactivePart                          = 9,
	RISState_MAX                                       = 10
};*/

// Enum CombatGame.CombatTypes.eFrontEndScene
/*enum eFrontEndScene
{
	FES_None                                           = 0,
	FES_Waiting                                        = 1,
	FES_GameTitle                                      = 2,
	FES_Login                                          = 3,
	FES_CreateCharacter                                = 4,
	FES_Channel                                        = 5,
	FES_MainLobby                                      = 6,
	FES_MatchRoom                                      = 7,
	FES_Achieve                                        = 8,
	FES_GameResult                                     = 9,
	FES_CharacterInfo                                  = 10,
	FES_Inventory                                      = 11,
	FES_Shop                                           = 12,
	FES_MakeRoom                                       = 13,
	FES_QuickStart                                     = 14,
	FES_ClanCreate                                     = 15,
	FES_ClanList                                       = 16,
	FES_ClanHome                                       = 17,
	FES_Storage                                        = 18,
	FES_MedalShop                                      = 19,
	FES_Event                                          = 20,
	FES_RandomBox                                      = 21,
	FES_RandomBoxShop                                  = 22,
	FES_END                                            = 23,
	FES_MAX                                            = 24
};*/

// Enum CombatGame.CombatTypes.EObjectCacheTypes
/*enum EObjectCacheTypes
{
	OCTYPE_None                                        = 0,
	OCTYPE_GameDependence                              = 1,
	OCTYPE_LevelDependence                             = 2,
	OCTYPE_MAX                                         = 3
};*/

// Enum CombatGame.CombatNonNativeTypes.ParachuteState
/*enum ParachuteState
{
	ParachuteState_FreeFall                            = 0,
	ParachuteState_Open                                = 1,
	ParachuteState_Landed                              = 2,
	ParachuteState_Max                                 = 3
};*/

// Enum CombatGame.CombatNonNativeTypes.eEffectType
/*enum eEffectType
{
	eEffectType_SmallGauge                             = 0,
	eEffectType_MiddleGauge                            = 1,
	eEffectType_LargeGauge                             = 2,
	eEffectType_AntiMGauge                             = 3,
	eEffectType_MeleeEffect                            = 4,
	eEffectType_LastEffect                             = 5,
	eEffectType_StrongMeleeEffect                      = 6,
	eEffectType_MeleeLastEffect                        = 7,
	eEffectType_MeleeSawEffect                         = 8,
	eEffectType_StrongMeleeSawEffect                   = 9,
	eEffectType_ExplosionEffect                        = 10,
	eEffectType_Max                                    = 11
};*/

// Enum CombatGame.CombatNonNativeTypes.ERotationStep
/*enum ERotationStep
{
	RotationStep                                       = 0,
	RotationStep01                                     = 1,
	RotationStep02                                     = 2,
	RotationStep03                                     = 3,
	RotationStep04                                     = 4,
	RotationStep05                                     = 5,
	RotationStep06                                     = 6,
	RotationStep07                                     = 7,
	RotationStep08                                     = 8,
	RotationStep09                                     = 9,
	RotationStep10                                     = 10,
	RotationStep11                                     = 11,
	RotationStep12                                     = 12,
	RotationStep13                                     = 13,
	RotationStep14                                     = 14,
	RotationStep15                                     = 15,
	RotationStep16                                     = 16,
	RotationStep17                                     = 17,
	RotationStep18                                     = 18,
	RotationStep19                                     = 19,
	RotationStep20                                     = 20,
	RotationStep21                                     = 21,
	RotationStep22                                     = 22,
	RotationStep23                                     = 23,
	RotationStep24                                     = 24,
	RotationStep25                                     = 25,
	RotationStep26                                     = 26,
	RotationStep27                                     = 27,
	RotationStep28                                     = 28,
	RotationStep29                                     = 29,
	RotationStep30                                     = 30,
	RotationStep31                                     = 31,
	RotationStep_MAX                                   = 32
};*/

// Enum CombatGame.CombatNonNativeTypes.EExplosionEffectType
/*enum EExplosionEffectType
{
	ExplosionEffectType_Default                        = 0,
	ExplosionEffectType_AirStrike                      = 1,
	ExplosionEffectType_Cherry                         = 2,
	ExplosionEffectType_Howitzer                       = 3,
	ExplosionEffectType_Predator                       = 4,
	ExplosionEffectType_JuggernautBomb                 = 5,
	ExplosionEffectType_Claymore                       = 6,
	ExplosionEffectType_Steyr                          = 7,
	ExplosionEffectType_TrophyTurret                   = 8,
	ExplosionEffectType_Ice                            = 9,
	ExplosionEffectType_Pumpkin                        = 10,
	ExplosionEffectType_PumpkinGhost                   = 11,
	ExplosionEffectType_Xmas                           = 12,
	ExplosionEffectType_Snow                           = 13,
	ExplosionEffectType_IceBlue                        = 14,
	ExplosionEffectType_FlashBang                      = 15,
	ExplosionEffectType_Party                          = 16,
	ExplosionEffectType_Sprout                         = 17,
	ExplosionEffectType_YellowPetal                    = 18,
	ExplosionEffectType_Max                            = 19
};*/

// Enum CombatGame.CBUIDataStore_ETC.EClanRankColor
/*enum EClanRankColor
{
	ERC_None                                           = 0,
	ERC_Advantageous                                   = 1,
	ERC_Equal                                          = 2,
	ERC_MAX                                            = 3
};*/

// Enum CombatGame.CBUIDataStore_TacticalGear.EGearCondition
/*enum EGearCondition
{
	E_GEAR_CON_MONEY                                   = 0,
	E_GEAR_CON_GAME_MODE                               = 1,
	E_GEAR_CON_MAX                                     = 2
};*/

// Enum CombatGame.CCSPawn.ECCSCoverPose
/*enum ECCSCoverPose
{
	CCSCoverPose_Idle                                  = 0,
	CCSCoverPose_ShootRight                            = 1,
	CCSCoverPose_ShootLeft                             = 2,
	CCSCoverPose_ShootOver                             = 3,
	CCSCoverPose_SideStepRight                         = 4,
	CCSCoverPose_SideStepLeft                          = 5,
	CCSCoverPose_BackSideStepRight                     = 6,
	CCSCoverPose_BackSideStepLeft                      = 7,
	CCSCoverPose_MAX                                   = 8
};*/

// Enum CombatGame.CCSPawn.ECCSAlertnessState
/*enum ECCSAlertnessState
{
	CCSAlertnessState_Relax                            = 0,
	CCSAlertnessState_Alert                            = 1,
	CCSAlertnessState_MAX                              = 2
};*/

// Enum CombatGame.CCSPawn.ECCSMovementSpeed
/*enum ECCSMovementSpeed
{
	CCSMovementSpeed_Walk                              = 0,
	CCSMovementSpeed_Run                               = 1,
	CCSMovementSpeed_MAX                               = 2
};*/

// Enum CombatGame.CCSPawn.ECCSMovementType
/*enum ECCSMovementType
{
	CCSMovementType_Idle                               = 0,
	CCSMovementType_Walk                               = 1,
	CCSMovementType_Run                                = 2,
	CCSMovementType_MAX                                = 3
};*/

// Enum CombatGame.GripAIDef.EDistanceType
/*enum EDistanceType
{
	DistanceType_2D                                    = 0,
	DistanceType_3D                                    = 1,
	DistanceType_MAX                                   = 2
};*/

// Enum CombatGame.GripAIDef.EAITargetSelectType
/*enum EAITargetSelectType
{
	AITargetSelectType_ClearEnemy                      = 0,
	AITargetSelectType_ClosestEnemy                    = 1,
	AITargetSelectType_ClosestVisibleEnemy             = 2,
	AITargetSelectType_ClosestPlayer                   = 3,
	AITargetSelectType_ClosestMissionActor             = 4,
	AITargetSelectType_MAX                             = 5
};*/

// Enum CombatGame.GripAIDef.ECurAITarget
/*enum ECurAITarget
{
	CurAITarget_Enemy                                  = 0,
	CurAITarget_CurrentAIBeacon                        = 1,
	CurAITarget_MAX                                    = 2
};*/

// Enum CombatGame.CCSBlackboard.CCSMoveCmd
/*enum CCSMoveCmd
{
	MOVE_CMD_NONE                                      = 0,
	MOVE_CMD_POS                                       = 1,
	MOVE_CMD_MAX                                       = 2
};*/

// Enum CombatGame.CCSBTActionWhileMoving.EUpperBodyActionType
/*enum EUpperBodyActionType
{
	EUBAT_Shoot                                        = 0,
	EUBAT_MAX                                          = 1
};*/

// Enum CombatGame.CCSBTActionWhileMoving.EMoveTargetType
/*enum EMoveTargetType
{
	EMTT_Target                                        = 0,
	EMTT_Actor                                         = 1,
	EMTT_MAX                                           = 2
};*/

// Enum CombatGame.CCSBTSelectTarget.ECCSSelectTargetAlgorithm
/*enum ECCSSelectTargetAlgorithm
{
	ECCSSelectTarget_Closest                           = 0,
	ECCSSelectTarget_ClosestAndVisible                 = 1,
	ECCSSelectTarget_ScriptedRoute                     = 2,
	ECCSSelectTarget_Empty                             = 3,
	ECCSSelectTarget_ClosestMissionActor               = 4,
	ECCSSelectTarget_ClosestPlayer                     = 5,
	ECCSSelectTarget_MAX                               = 6
};*/

// Enum CombatGame.CCSBTCombatTargetExistence.ETargetCheckMethods
/*enum ETargetCheckMethods
{
	ETargetCheckMethod_AND                             = 0,
	ETargetCheckMethod_OR                              = 1,
	ETargetCheckMethod_MAX                             = 2
};*/

// Enum CombatGame.CCSBTScriptCover.ScriptCoverState
/*enum ScriptCoverState
{
	EnterCover                                         = 0,
	GetOutCover                                        = 1,
	ShootFromCover                                     = 2,
	ExitCover                                          = 3,
	ScriptCoverState_MAX                               = 4
};*/

// Enum CombatGame.CombatSkill.ESkillType
/*enum ESkillType
{
	ESKT_None                                          = 0,
	ESKT_WeaponUsed                                    = 1,
	ESKT_Instant                                       = 2,
	ESKT_Passive                                       = 3,
	ESKT_MAX                                           = 4
};*/

// Enum CombatGame.CombatAICond_TargetExistenceDetail.ETargetType
/*enum ETargetType
{
	Target_All                                         = 0,
	Target_Closest                                     = 1,
	Target_ClosestVisible                              = 2,
	Target_Current                                     = 3,
	Target_ClosestPlayer                               = 4,
	Target_ClosestMissionActor                         = 5,
	Target_MAX                                         = 6
};*/

// Enum CombatGame.CombatGame.EMatchType
/*enum EMatchType
{
	EMT_Normal                                         = 0,
	EMT_Clan                                           = 1,
	EMT_Competitive                                    = 2,
	EMT_MAX                                            = 3
};*/

// Enum CombatGame.CombatStatStorageBase.StatSaveConditionType
/*enum StatSaveConditionType
{
	ESaveCondition_Default                             = 0,
	ESaveCondition_Desertion                           = 1,
	ESaveCondition_Ban                                 = 2,
	ESaveCondition_Disconnection                       = 3,
	ESaveCondition_MAX                                 = 4
};*/

// Enum CombatGame.CombatChampionshipManager.EChampionshipManagerError
/*enum EChampionshipManagerError
{
	EChampionshipError_Nothing                         = 0,
	EChampionshipError_InvalidArgument                 = 1,
	EChampionshipError_InvalidGrade                    = 2,
	EChampionshipError_FailedInitialize                = 3,
	EChampionshipError_InvalidPluginData               = 4,
	EChampionshipError_MAX                             = 5
};*/

// Enum CombatGame.CombatTeamGameMovie.EUIChatType
/*enum EUIChatType
{
	EUICHAT_TEAM                                       = 0,
	EUICHAT_ALL                                        = 1,
	EUICHAT_CLAN                                       = 2,
	EUICHAT_OTHER                                      = 3,
	EUICHAT_MAX                                        = 4
};*/

// Enum CombatGame.CombatTeamGameMovie.EKillDeathPlayerType
/*enum EKillDeathPlayerType
{
	Player_Friendly                                    = 0,
	Player_Enemy                                       = 1,
	Player_MySelf                                      = 2,
	Player_MAX                                         = 3
};*/

// Enum CombatGame.CombatTeamGameMovie.EKillType
/*enum EKillType
{
	KillType_Normal                                    = 0,
	KillType_Penetration                               = 1,
	KillType_Headshot                                  = 2,
	KillType_MiddleOfForehaed                          = 3,
	KillType_Suicide                                   = 4,
	KillType_BuzzKill                                  = 5,
	KillType_GrenadeLauncherKill                       = 6,
	KillType_MAX                                       = 7
};*/

// Enum CombatGame.CombatTeamGameMovie.ERoundStartType
/*enum ERoundStartType
{
	ERST_ATTCK_ROUND                                   = 0,
	ERST_DEPENSE_ROUND                                 = 1,
	ERST_ATTACK_ROUND_MATCHPOINT                       = 2,
	ERST_DEPENSE_ROUND_MATCHPOINT                      = 3,
	ERST_ATTACK_FINALROUND                             = 4,
	ERST_DEPENSE_FINALROUND                            = 5,
	ERST_ROUND                                         = 6,
	ERST_ROUND_MATCHPOINT                              = 7,
	ERST_FINALROUND                                    = 8,
	ERST_MESSAGE_ONLY                                  = 9,
	ERST_ERROR                                         = 10,
	ERST_MAX                                           = 11
};*/

// Enum CombatGame.CombatTeamGameMovie.EHUDTick
/*enum EHUDTick
{
	EHUDTICK_LEVEL1                                    = 0,
	EHUDTICK_LEVEL2                                    = 1,
	EHUDTICK_LEVEL3                                    = 2,
	EHUDTICK_MAX                                       = 3
};*/

// Enum CombatGame.CombatRadarCore.E_MINIMAP_SIZE
/*enum E_MINIMAP_SIZE
{
	E_MINIMAP_SIZE_SMALL                               = 0,
	E_MINIMAP_SIZE_MEDIUM                              = 1,
	E_MINIMAP_SIZE_LARGE                               = 2,
	E_MINIMAP_SIZE_MAX                                 = 3
};*/

// Enum CombatGame.CombatPlayerInput.EWeaponMouseSensPreset
/*enum EWeaponMouseSensPreset
{
	E_WMS_PRESET_FIRST                                 = 0,
	E_WMS_PRESET_SECOND                                = 1,
	E_WMS_PRESET_THIRD                                 = 2,
	E_WMS_PRESET_FOURTH                                = 3,
	E_WMS_PRESET_MAX                                   = 4
};*/

// Enum CombatGame.CombatPlayerInput.EDummyClientInputCmd
/*enum EDummyClientInputCmd
{
	DCIC_TOGGLEFIRE                                    = 0,
	DCIC_TOGGLEDUCK                                    = 1,
	DCIC_TURN_JUMP                                     = 2,
	DCIC_THROWGRENADE                                  = 3,
	DCIC_MOVE_FRONT                                    = 4,
	DCIC_MOVE_BACK                                     = 5,
	DCIC_STRAFE_LEFT                                   = 6,
	DCIC_STRAFE_RIGHT                                  = 7,
	DCIC_STOP                                          = 8,
	DCIC_SUICIDE                                       = 9,
	DCIC_MAX                                           = 10
};*/

// Enum CombatGame.CombatAssasinGame.EGamePhase
/*enum EGamePhase
{
	E_BeforeVIPMove                                    = 0,
	E_AfterVIPMove                                     = 1,
	E_VIPDeath                                         = 2,
	E_PlayerESCing                                     = 3,
	E_MAX                                              = 4
};*/

// Enum CombatGame.CombatAssasinMovie.EVIPIconType
/*enum EVIPIconType
{
	EVIP_ALLY                                          = 0,
	EVIP_ENEMY                                         = 1,
	EVIP_MAX                                           = 2
};*/

// Enum CombatGame.CombatAssasinMovie.EAssasinHUDIconType
/*enum EAssasinHUDIconType
{
	EAssasinHUDIcon_NONE                               = 0,
	EAssasinHUDIcon_VIP                                = 1,
	EAssasinHUDIcon_EXIT                               = 2,
	EAssasinHUDIcon_MAX                                = 3
};*/

// Enum CombatGame.CombatChannelTransaction.E_SINGLE_GAME_TYPE
/*enum E_SINGLE_GAME_TYPE
{
	E_SINGLE_GAME_TYPE_NONE                            = 0,
	E_SINGLE_GAME_TYPE_LEAVE                           = 1,
	E_SINGLE_GAME_TYPE_FINISH                          = 2,
	E_SINGLE_GAME_TYPE_MAX                             = 3
};*/

// Enum CombatGame.CombatCharacterTransaction.EMatchOnOffCheck
/*enum EMatchOnOffCheck
{
	EM_OnOff_PlayerPage                                = 0,
	EM_OnOff_MyPage                                    = 1,
	EM_OnOff_ClanPage                                  = 2,
	EM_OnOff_Max                                       = 3
};*/

// Enum CombatGame.CombatChatManager.EChatHeadErrorType
/*enum EChatHeadErrorType
{
	EChatHeadError_Success                             = 0,
	EChatHeadError_Wrong_Type                          = 1,
	EChatHeadError_NoLabel                             = 2,
	EChatHeadError_NoTarget                            = 3,
	EChatHeadError_Wrong_TargetType                    = 4,
	EChatHeadError_MAX                                 = 5
};*/

// Enum CombatGame.CombatCommon_Command.E_COMMAND_TYPE
/*enum E_COMMAND_TYPE
{
	E_COMMAND_TYPE_CONSOLE                             = 0,
	E_COMMAND_TYPE_TEAM_SHUFFLE                        = 1,
	E_COMMAND_TYPE_TEAM_SWAP                           = 2,
	E_COMMAND_TYPE_DEMO_REC                            = 3,
	E_COMMAND_TYPE_SPECTATOR_MODE                      = 4,
	E_COMMAND_TYPE_ALL_NOTICE                          = 5,
	E_COMMAND_TYPE_CHANNEL_NOTICE                      = 6,
	E_COMMAND_TYPE_BAN_USER                            = 7,
	E_COMMAND_TYPE_BLOCK_CHAT                          = 8,
	E_COMMAND_TYPE_SCR_NOTICE                          = 9,
	E_COMMAND_TYPE_SCR_NOTICE_TIME_OUT                 = 10,
	E_COMMAND_TYPE_SCR_NOTICE_DEL                      = 11,
	E_COMMAND_TYPE_ROUND_MONITORING                    = 12,
	E_COMMAND_TYPE_SET_MAXTICKRATE                     = 13,
	E_COMMAND_TYPE_MAX                                 = 14
};*/

// Enum CombatGame.CombatCommon_Option.E_CROSSHAIR_OPTION_ITEM_Index
/*enum E_CROSSHAIR_OPTION_ITEM_Index
{
	COID_Shape                                         = 0,
	COID_Color                                         = 1,
	COID_Scale                                         = 2,
	COID_Alpha                                         = 3,
	COID_Shadow                                        = 4,
	COID_Spread                                        = 5,
	COID_CustomColor                                   = 6,
	COID_MAX                                           = 7
};*/

// Enum CombatGame.CombatCommon_Option.E_VIDEO_OPTION_ITEM_Type
/*enum E_VIDEO_OPTION_ITEM_Type
{
	VOIT_GENERAL                                       = 0,
	VOIT_ADVANCED                                      = 1,
	VOIT_MAX                                           = 2
};*/

// Enum CombatGame.CombatCommon_Option.E_VIDEO_OPTION_ITEM_Index
/*enum E_VIDEO_OPTION_ITEM_Index
{
	VOIID_GraphicQuality                               = 0,
	VOIID_AspectRatio                                  = 1,
	VOIID_ScreenMode                                   = 2,
	VOIID_ScreenColors                                 = 3,
	VOIID_Gamma                                        = 4,
	VOIID_AntiAliasing                                 = 5,
	VOIID_Resolution                                   = 6,
	VOIID_ScanRate                                     = 7,
	VOIID_VSync                                        = 8,
	VOIID_Character                                    = 9,
	VOIID_BackGround                                   = 10,
	VOIID_Light                                        = 11,
	VOIID_LightReflect                                 = 12,
	VOIID_Shadow                                       = 13,
	VOIID_Effect                                       = 14,
	VOIID_Physical                                     = 15,
	VOIID_AmbOcclusion                                 = 16,
	VOIID_GoreTeenLevel                                = 17,
	VOIID_GoreAdultLevel                               = 18,
	VOIID_BackgroundShadow                             = 19,
	VOIID_GunTrail                                     = 20,
	VOIID_SceneTone                                    = 21,
	VOIID_FPSLimit                                     = 22,
	VOIID_SystemCounter                                = 23,
	VOIID_OneFrameThreadLag                            = 24,
	VOIID_MAX                                          = 25
};*/

// Enum CombatGame.CombatCommon_Option.E_Control_SUBTAB_Index
/*enum E_Control_SUBTAB_Index
{
	CSTI_MouseSens                                     = 0,
	CSTI_KeyBinding                                    = 1,
	CSTI_MAX                                           = 2
};*/

// Enum CombatGame.CombatCommon_Option.E_GAMEPLAY_OPTION_ITEM_Index
/*enum E_GAMEPLAY_OPTION_ITEM_Index
{
	GOIID_AllChat                                      = 0,
	GOIID_TeamChat                                     = 1,
	GOIID_DeadChat                                     = 2,
	GOIID_FOV                                          = 3,
	GOIID_FLIPMESH                                     = 4,
	GOIID_TeamIFFView                                  = 5,
	GOIID_ForegroundFOV                                = 6,
	GOIID_FriendRequestBlock                           = 7,
	GOIID_TeamOutline                                  = 8,
	GOIID_MAX                                          = 9
};*/

// Enum CombatGame.CombatCommon_Option.E_CONTROL_OPTION_ITEM_Index
/*enum E_CONTROL_OPTION_ITEM_Index
{
	COIID_MouseSensMode                                = 0,
	COIID_MasterMouseSensitivity                       = 1,
	COIID_Preset1MouseSensitivity                      = 2,
	COIID_Preset1MouseSensitivity_1stZoom              = 3,
	COIID_Preset1MouseSensitivity_2ndZoom              = 4,
	COIID_Preset2MouseSensitivity                      = 5,
	COIID_Preset2MouseSensitivity_1stZoom              = 6,
	COIID_Preset2MouseSensitivity_2ndZoom              = 7,
	COIID_Preset3MouseSensitivity                      = 8,
	COIID_Preset3MouseSensitivity_1stZoom              = 9,
	COIID_Preset3MouseSensitivity_2ndZoom              = 10,
	COIID_MouseInvert                                  = 11,
	COIID_AimAssist                                    = 12,
	COIID_Preset1MouseSensitivity_UseAll               = 13,
	COIID_Preset2MouseSensitivity_UseAll               = 14,
	COIID_Preset3MouseSensitivity_UseAll               = 15,
	COIID_Preset1MouseSensitivity_AutoScale            = 16,
	COIID_Preset2MouseSensitivity_AutoScale            = 17,
	COIID_Preset3MouseSensitivity_AutoScale            = 18,
	COIID_HoldtoAim                                    = 19,
	COIID_MAX                                          = 20
};*/

// Enum CombatGame.CombatCommon_Option.E_SOUND_OPTION_ITEM_Index
/*enum E_SOUND_OPTION_ITEM_Index
{
	SOIID_Master                                       = 0,
	SOIID_Effect                                       = 1,
	SOIID_EffectMute                                   = 2,
	SOIID_Bgm                                          = 3,
	SOIID_BgmMute                                      = 4,
	SOIID_InGameBgm                                    = 5,
	SOIID_InGameBgmMute                                = 6,
	SOIID_Voice                                        = 7,
	SOIID_VoiceMute                                    = 8,
	SOIID_Hit                                          = 9,
	SOIID_HitMute                                      = 10,
	SOIID_VoiceChatAutoLogin                           = 11,
	SOIID_VoiceChatInputMode                           = 12,
	SOIID_VoiceChatInputDevice                         = 13,
	SOIID_VoiceChatInputVolume                         = 14,
	SOIID_VoiceChatInputMute                           = 15,
	SOIID_VoiceChatOutputVolume                        = 16,
	SOIID_VoiceChatOutputMute                          = 17,
	SOIID_MAX                                          = 18
};*/

// Enum CombatGame.CombatCommon_Option.E_OPTION_MODE_Index
/*enum E_OPTION_MODE_Index
{
	OM_FrontEnd                                        = 0,
	OM_InGame                                          = 1,
	OM_MAX                                             = 2
};*/

// Enum CombatGame.CombatCommon_Option.E_OPTION_TAB_Index
/*enum E_OPTION_TAB_Index
{
	OTI_Graphic                                        = 0,
	OTI_Control                                        = 1,
	OTI_Sound                                          = 2,
	OTI_GamePlay                                       = 3,
	OTI_Rating                                         = 4,
	OTI_MAX                                            = 5
};*/

// Enum CombatGame.CombatCommon_Option.E_GAMEPLAY_SUBTAB_Index
/*enum E_GAMEPLAY_SUBTAB_Index
{
	GSTI_CrossHair                                     = 0,
	GSTI_GameEnv                                       = 1,
	GSTI_MAX                                           = 2
};*/

// Enum CombatGame.CombatProfileSettings.EGenericQualityLevel4
/*enum EGenericQualityLevel4
{
	CBPID_QUALITY4_Lowest                              = 0,
	CBPID_QUALITY4_Low                                 = 1,
	CBPID_QUALITY4_Normal                              = 2,
	CBPID_QUALITY4_High                                = 3,
	CBPID_QUALITY4_Highest                             = 4,
	CBPID_QUALITY4_MAX                                 = 5
};*/

// Enum CombatGame.CombatProfileSettings.EGenericQualityLevel5
/*enum EGenericQualityLevel5
{
	CBPID_QUALITY5_Disable                             = 0,
	CBPID_QUALITY5_Low                                 = 1,
	CBPID_QUALITY5_Normal                              = 2,
	CBPID_QUALITY5_High                                = 3,
	CBPID_QUALITY5_Highest                             = 4,
	CBPID_QUALITY5_MAX                                 = 5
};*/

// Enum CombatGame.CombatProfileSettings.EGenericYesNo
/*enum EGenericYesNo
{
	CBPID_VALUE_No                                     = 0,
	CBPID_VALUE_Yes                                    = 1,
	CBPID_VALUE_MAX                                    = 2
};*/

// Enum CombatGame.CombatProfileSettings.EGenericEnableDisable
/*enum EGenericEnableDisable
{
	CBPID_USE_Disable                                  = 0,
	CBPID_USE_Enable                                   = 1,
	CBPID_USE_MAX                                      = 2
};*/

// Enum CombatGame.CombatProfileSettings.EGraphicQuality
/*enum EGraphicQuality
{
	CBGQ_Lowest                                        = 0,
	CBGQ_Low                                           = 1,
	CBGQ_Normal                                        = 2,
	CBGQ_High                                          = 3,
	CBGQ_Highest                                       = 4,
	CBGQ_Custom                                        = 5,
	CBGQ_MAX                                           = 6
};*/

// Enum CombatGame.CombatProfileSettings.EScreenMode
/*enum EScreenMode
{
	CBSM_FullScreen                                    = 0,
	CBSM_Window                                        = 1,
	CBSM_FullWindow                                    = 2,
	CBSM_MAX                                           = 3
};*/

// Enum CombatGame.CombatProfileSettings.EScreenColor
/*enum EScreenColor
{
	CBEC_ORIGINAL                                      = 0,
	CBEC_COOL                                          = 1,
	CBEC_WARM                                          = 2,
	CBEC_FILM                                          = 3,
	CBEC_VINTAGE                                       = 4,
	CBEC_VIVID                                         = 5,
	CBEC_GRACEFUL                                      = 6,
	CBEC_DISABLE                                       = 7,
	CBEC_MAX                                           = 8
};*/

// Enum CombatGame.CombatProfileSettings.ETeenGoreLevel
/*enum ETeenGoreLevel
{
	CBTGL_BLOOD_White                                  = 0,
	CBTGL_BLOOD_None                                   = 1,
	CBTGL_BLOOD_MAX                                    = 2
};*/

// Enum CombatGame.CombatProfileSettings.EAdultGoreLevel
/*enum EAdultGoreLevel
{
	CBAGL_BLOOD_Red                                    = 0,
	CBAGL_BLOOD_White                                  = 1,
	CBAGL_BLOOD_None                                   = 2,
	CBAGL_BLOOD_MAX                                    = 3
};*/

// Enum CombatGame.CombatProfileSettings.EDigitalButtonActions
/*enum EDigitalButtonActions
{
	DBA_None                                           = 0,
	DBA_MoveForward                                    = 1,
	DBA_MoveBackward                                   = 2,
	DBA_StrafeLeft                                     = 3,
	DBA_StrafeRight                                    = 4,
	DBA_TurnLeft                                       = 5,
	DBA_TurnRight                                      = 6,
	DBA_Jump                                           = 7,
	DBA_Duck                                           = 8,
	DBA_Sprint                                         = 9,
	DBA_Fire                                           = 10,
	DBA_AltFire                                        = 11,
	DBA_Reload                                         = 12,
	DBA_Use                                            = 13,
	DBA_HostageTalk                                    = 14,
	DBA_SwitchToBestWeapon                             = 15,
	DBA_PrevWeapon                                     = 16,
	DBA_NextWeapon                                     = 17,
	DBA_UseSkill0                                      = 18,
	DBA_UseSkill1                                      = 19,
	DBA_UseSkill2                                      = 20,
	DBA_UseSkill3                                      = 21,
	DBA_SwitchPreWeapon                                = 22,
	DBA_SetWalking                                     = 23,
	DBA_ToggleSilencer                                 = 24,
	DBA_ToggleLaserSite                                = 25,
	DBA_ToggleGrenadeLauncher                          = 26,
	DBA_ThrowWeapon                                    = 27,
	DBA_PresetWeapon1                                  = 28,
	DBA_PresetWeapon2                                  = 29,
	DBA_PresetWeapon3                                  = 30,
	DBA_ShowMenu                                       = 31,
	DBA_ShowScores                                     = 32,
	DBA_ShowMap                                        = 33,
	DBA_ToggleMinimap                                  = 34,
	DBA_Jump_Gamepad                                   = 35,
	DBA_StrafeLeft_Gamepad                             = 36,
	DBA_MoveForward_Gamepad                            = 37,
	DBA_TurnLeft_Gamepad                               = 38,
	DBA_SwitchToBestWeapon_Gamepad                     = 39,
	DBA_SensitiveDown                                  = 40,
	DBA_SensitiveUp                                    = 41,
	DBA_AutoAssist                                     = 42,
	DBA_ToggleRadioChat1                               = 43,
	DBA_ToggleRadioChat2                               = 44,
	DBA_ShowHelpImage                                  = 45,
	DBA_ShowWholeMap                                   = 46,
	DBA_SwitchWeapon1                                  = 47,
	DBA_SwitchWeapon2                                  = 48,
	DBA_SwitchWeapon3                                  = 49,
	DBA_SwitchWeapon4                                  = 50,
	DBA_SwitchWeapon5                                  = 51,
	DBA_PrintScreen                                    = 52,
	DBA_PickupWeapon                                   = 53,
	DBA_Stare                                          = 54,
	DBA_DashSwap                                       = 55,
	DBA_ToggleHideHUD                                  = 56,
	DBA_ToggleChaItemFX                                = 57,
	DBA_Respawn_Ground                                 = 58,
	DBA_Respawn_Air                                    = 59,
	DBA_ToggleAllChat                                  = 60,
	DBA_ToggleTeamChat                                 = 61,
	DBA_LookBack                                       = 62,
	DBA_ToggleHideTeamIFF                              = 63,
	DBA_StartSecZoom                                   = 64,
	DBA_UseSpray                                       = 65,
	DBA_ToggleVivoxInput                               = 66,
	DBA_MAX                                            = 67
};*/

// Enum CombatGame.CombatProfileSettings.ECombatBindableKeys
/*enum ECombatBindableKeys
{
	CBBND_Unbound                                      = 0,
	CBBND_MouseX                                       = 1,
	CBBND_MouseY                                       = 2,
	CBBND_MouseScrollUp                                = 3,
	CBBND_MouseScrollDown                              = 4,
	CBBND_LeftMouseButton                              = 5,
	CBBND_RightMouseButton                             = 6,
	CBBND_MiddleMouseButton                            = 7,
	CBBND_ThumbMouseButton                             = 8,
	CBBND_ThumbMouseButton2                            = 9,
	CBBND_BackSpace                                    = 10,
	CBBND_Tab                                          = 11,
	CBBND_Enter                                        = 12,
	CBBND_Pause                                        = 13,
	CBBND_CapsLock                                     = 14,
	CBBND_Escape                                       = 15,
	CBBND_SpaceBar                                     = 16,
	CBBND_PageUp                                       = 17,
	CBBND_PageDown                                     = 18,
	CBBND_End                                          = 19,
	CBBND_Home                                         = 20,
	CBBND_Left                                         = 21,
	CBBND_Up                                           = 22,
	CBBND_Right                                        = 23,
	CBBND_Down                                         = 24,
	CBBND_Insert                                       = 25,
	CBBND_Delete                                       = 26,
	CBBND_Zero                                         = 27,
	CBBND_One                                          = 28,
	CBBND_Two                                          = 29,
	CBBND_Three                                        = 30,
	CBBND_Four                                         = 31,
	CBBND_Five                                         = 32,
	CBBND_Six                                          = 33,
	CBBND_Seven                                        = 34,
	CBBND_Eight                                        = 35,
	CBBND_Nine                                         = 36,
	CBBND_A                                            = 37,
	CBBND_B                                            = 38,
	CBBND_C                                            = 39,
	CBBND_D                                            = 40,
	CBBND_E                                            = 41,
	CBBND_F                                            = 42,
	CBBND_G                                            = 43,
	CBBND_H                                            = 44,
	CBBND_I                                            = 45,
	CBBND_J                                            = 46,
	CBBND_K                                            = 47,
	CBBND_L                                            = 48,
	CBBND_M                                            = 49,
	CBBND_N                                            = 50,
	CBBND_O                                            = 51,
	CBBND_P                                            = 52,
	CBBND_Q                                            = 53,
	CBBND_R                                            = 54,
	CBBND_S                                            = 55,
	CBBND_T                                            = 56,
	CBBND_U                                            = 57,
	CBBND_V                                            = 58,
	CBBND_W                                            = 59,
	CBBND_X                                            = 60,
	CBBND_Y                                            = 61,
	CBBND_Z                                            = 62,
	CBBND_NumPadZero                                   = 63,
	CBBND_NumPadOne                                    = 64,
	CBBND_NumPadTwo                                    = 65,
	CBBND_NumPadThree                                  = 66,
	CBBND_NumPadFour                                   = 67,
	CBBND_NumPadFive                                   = 68,
	CBBND_NumPadSix                                    = 69,
	CBBND_NumPadSeven                                  = 70,
	CBBND_NumPadEight                                  = 71,
	CBBND_NumPadNine                                   = 72,
	CBBND_Multiply                                     = 73,
	CBBND_Add                                          = 74,
	CBBND_Subtract                                     = 75,
	CBBND_Decimal                                      = 76,
	CBBND_Divide                                       = 77,
	CBBND_F1                                           = 78,
	CBBND_F2                                           = 79,
	CBBND_F3                                           = 80,
	CBBND_F4                                           = 81,
	CBBND_F5                                           = 82,
	CBBND_F6                                           = 83,
	CBBND_F7                                           = 84,
	CBBND_F8                                           = 85,
	CBBND_F9                                           = 86,
	CBBND_F10                                          = 87,
	CBBND_F11                                          = 88,
	CBBND_F12                                          = 89,
	CBBND_NumLock                                      = 90,
	CBBND_ScrollLock                                   = 91,
	CBBND_LeftShift                                    = 92,
	CBBND_RightShift                                   = 93,
	CBBND_LeftControl                                  = 94,
	CBBND_RightControl                                 = 95,
	CBBND_LeftAlt                                      = 96,
	CBBND_RightAlt                                     = 97,
	CBBND_Semicolon                                    = 98,
	CBBND_Equals                                       = 99,
	CBBND_Minus                                        = 100,
	CBBND_Comma                                        = 101,
	CBBND_Underscore                                   = 102,
	CBBND_Period                                       = 103,
	CBBND_Slash                                        = 104,
	CBBND_Tilde                                        = 105,
	CBBND_LeftBracket                                  = 106,
	CBBND_Backslash                                    = 107,
	CBBND_RightBracket                                 = 108,
	CBBND_Quote                                        = 109,
	CBBND_PrintScreen                                  = 110,
	CBBND_Convert                                      = 111,
	CBBND_NonConvert                                   = 112,
	CBBND_OEM102                                       = 113,
	CBBND_MAX                                          = 114
};*/

// Enum CombatGame.CombatCommon_OverImmersionGuard.E_RATINGICON
/*enum E_RATINGICON
{
	RATINGICON_All                                     = 0,
	RATINGICON_12Years                                 = 1,
	RATINGICON_15Years                                 = 2,
	RATINGICON_18Years                                 = 3,
	RATINGICON_Test                                    = 4,
	RATINGICON_Violence                                = 5,
	RATINGICON_Slang                                   = 6,
	RATINGICON_Sexuality                               = 7,
	RATINGICON_Horror                                  = 8,
	RATINGICON_Gambling                                = 9,
	RATINGICON_Drug                                    = 10,
	RATINGICON_Crime                                   = 11,
	RATINGICON_MAX                                     = 12
};*/

// Enum CombatGame.CombatCommon_SystemCounter.E_SYSTEM_COUNT_TYPE
/*enum E_SYSTEM_COUNT_TYPE
{
	E_SYSTEM_COUNT_TYPE_FPS                            = 0,
	E_SYSTEM_COUNT_TYPE_PING                           = 1,
	E_SYSTEM_COUNT_TYPE_VRAM                           = 2,
	E_SYSTEM_COUNT_TYPE_RAM                            = 3,
	E_SYSTEM_COUNT_TYPE_MAX                            = 4
};*/

// Enum CombatGame.CombatDataTableRefAchievement.ACHIEVEMENT_TYPE
/*enum ACHIEVEMENT_TYPE
{
	ACHIEVEMENT_NONE                                   = 0,
	ACHIEVEMENT_BADGE                                  = 1,
	ACHIEVEMENT_RIBBON                                 = 2,
	ACHIEVEMENT_MEDAL                                  = 3,
	ACHIEVEMENT_RIBBON_POST                            = 4,
	ACHIEVEMENT_MAX                                    = 5
};*/

// Enum CombatGame.CombatDataTableRefDefine.E_VALUE_TYPE
/*enum E_VALUE_TYPE
{
	E_VALUE_TYPE_NONE                                  = 0,
	E_VALUE_TYPE_INT                                   = 1,
	E_VALUE_TYPE_FLAOT                                 = 2,
	E_VALUE_TYPE_STRING                                = 3,
	E_VALUE_TYPE_MAX                                   = 4
};*/

// Enum CombatGame.CombatDataTableRefFilter.E_FILTER_ITEM_TYPE
/*enum E_FILTER_ITEM_TYPE
{
	E_FILTER_ITEM_TYPE                                 = 0,
	E_FILTER_ITEM_TYPE01                               = 1,
	E_FILTER_ITEM_TYPE02                               = 2,
	E_FILTER_ITEM_TYPE_MAX                             = 3
};*/

// Enum CombatGame.CombatDataTableRefItem.E_TICKET_TYPE
/*enum E_TICKET_TYPE
{
	E_TICKET_TYPE_NONE                                 = 0,
	E_TICKET_TYPE_ONLINE_CHAMPIONSHIP                  = 1,
	E_TICKET_TYPE_OFFLINE_CHAMPIONSHIP                 = 2,
	E_TICKET_TYPE_CLAN                                 = 3,
	E_TICKET_TYPE_TEST_CHANNEL                         = 4,
	E_TICKET_TYPE_MAX                                  = 5
};*/

// Enum CombatGame.CombatDataTableRefMailCategory.E_MAIL_TAB_TYPE
/*enum E_MAIL_TAB_TYPE
{
	E_MAIL_TAB_TYPE_NONE                               = 0,
	E_MAIL_TAB_TYPE_NORMAL                             = 1,
	E_MAIL_TAB_TYPE_CASH                               = 2,
	E_MAIL_TAB_TYPE_MAX                                = 3
};*/

// Enum CombatGame.CombatDataTableRefShopCategory.E_SERVICE_TYPE
/*enum E_SERVICE_TYPE
{
	EST_HIDE                                           = 0,
	EST_DISPLAY                                        = 1,
	EST_MAX                                            = 2
};*/

// Enum CombatGame.CombatDataTableRefShopCategory.E_SHOP_CATEGORY_TYPE
/*enum E_SHOP_CATEGORY_TYPE
{
	ESCT_NORMAL                                        = 0,
	ESCT_SPECIAL                                       = 1,
	ESCT_REFUND                                        = 2,
	ESCT_MAX                                           = 3
};*/

// Enum CombatGame.CombatDataTableRefShopItem.E_SHOPITEM_SERVICE_TYPE
/*enum E_SHOPITEM_SERVICE_TYPE
{
	ESIST_NONE                                         = 0,
	ESIST_NEW                                          = 1,
	ESIST_HOT                                          = 2,
	ESIST_EVENT                                        = 3,
	ESIST_MAX                                          = 4
};*/

// Enum CombatGame.CombatDataTableRefShopItem.E_SHOPITEM_LIMIT_BUY_TYPE
/*enum E_SHOPITEM_LIMIT_BUY_TYPE
{
	ESILBT_NONE                                        = 0,
	ESILBT_ONLY_ONE                                    = 1,
	ESILBT_DAY                                         = 2,
	ESILBT_MAX                                         = 3
};*/

// Enum CombatGame.CombatDataTableRefSystemImage.E_SYSTEM_IMAGE_TYPE
/*enum E_SYSTEM_IMAGE_TYPE
{
	E_SYSTEM_IMAGE_TYPE_INVEN_LIST_B                   = 0,
	E_SYSTEM_IMAGE_TYPE_INVEN_LIST_F                   = 1,
	E_SYSTEM_IMAGE_TYPE_SHOP_LIST_B                    = 2,
	E_SYSTEM_IMAGE_TYPE_SHOP_LIST_F                    = 3,
	E_SYSTEM_IMAGE_TYPE_PRESET_B                       = 4,
	E_SYSTEM_IMAGE_TYPE_PRESET_F                       = 5,
	E_SYSTEM_IMAGE_TYPE_PRESET_GRENADE_B               = 6,
	E_SYSTEM_IMAGE_TYPE_PRESET_GRENADE_F               = 7,
	E_SYSTEM_IMAGE_TYPE_BACKGROUND                     = 8,
	E_SYSTEM_IMAGE_TYPE_MAX                            = 9
};*/

// Enum CombatGame.CombatDroppedSupplies.ETeamIdentifyState
/*enum ETeamIdentifyState
{
	EVIS_Normal                                        = 0,
	EVIS_OurTeam                                       = 1,
	EVIS_EnemyTeam                                     = 2,
	EVIS_MAX                                           = 3
};*/

// Enum CombatGame.CombatErrorMessage.GameErrorMessageType
/*enum GameErrorMessageType
{
	EGEMT_ErrorPlayerStartCount                        = 0,
	EGEMT_ErrorHitStat_Attacker                        = 1,
	EGEMT_MAX                                          = 2
};*/

// Enum CombatGame.CombatFlashExplosionActor.EFlashEffectIntensityType
/*enum EFlashEffectIntensityType
{
	EFEIT_Flash                                        = 0,
	EFEIT_AfterImage                                   = 1,
	EFEIT_MAX                                          = 2
};*/

// Enum CombatGame.CombatFlashExplosionActor.EFalshEffectSettingType
/*enum EFalshEffectSettingType
{
	EFEST_Normal                                       = 0,
	EFEST_Obstacle                                     = 1,
	EFEST_MAX                                          = 2
};*/

// Enum CombatGame.CombatFrontEnd_Base.E_EQUIP_SOUND_TYPE
/*enum E_EQUIP_SOUND_TYPE
{
	E_EQUIP_SOUND_TYPE_PRI                             = 0,
	E_EQUIP_SOUND_TYPE_SUB                             = 1,
	E_EQUIP_SOUND_TYPE_MELEE                           = 2,
	E_EQUIP_SOUND_TYPE_THROW                           = 3,
	E_EQUIP_SOUND_TYPE_CHAR                            = 4,
	E_EQUIP_SOUND_TYPE_ACTIVE                          = 5,
	E_EQUIP_SOUND_TYPE_ARMOR                           = 6,
	E_EQUIP_SOUND_TYPE_MAX                             = 7
};*/

// Enum CombatGame.CombatFrontEnd_Achieve.E_SHOW_TYPE
/*enum E_SHOW_TYPE
{
	E_SHOW_TYPE_NONE                                   = 0,
	E_SHOW_TYPE_LEVEL_UP                               = 1,
	E_SHOW_TYPE_LEVEL_UP_REWARD                        = 2,
	E_SHOW_TYPE_TIER_UP                                = 3,
	E_SHOW_TYPE_MAX                                    = 4
};*/

// Enum CombatGame.CombatFrontEnd_AwaitList.EAwaitListShowType
/*enum EAwaitListShowType
{
	E_AL_ST_LOBBY                                      = 0,
	E_AL_ST_MATCHROOM                                  = 1,
	E_AL_ST_MAX                                        = 2
};*/

// Enum CombatGame.CombatFrontEnd_AwaitList.EAwaitListPopupType
/*enum EAwaitListPopupType
{
	E_AL_PT_USERINFO                                   = 0,
	E_AL_PT_ADD_FRIEND                                 = 1,
	E_AL_PT_WHISPER                                    = 2,
	E_AL_PT_INVITE_ROOM                                = 3,
	E_AL_PT_MAX                                        = 4
};*/

// Enum CombatGame.CombatFrontEnd_BaseShop.EShopButtonState
/*enum EShopButtonState
{
	E_STATE_DEFAULT                                    = 0,
	E_STATE_SELECTED                                   = 1,
	E_STATE_DISABLED                                   = 2,
	E_STATE_MAX                                        = 3
};*/

// Enum CombatGame.CombatFrontEnd_BaseShop.EShopPopupSetType
/*enum EShopPopupSetType
{
	E_TYPE_PRESET                                      = 0,
	E_TYPE_NONE                                        = 1,
	E_TYPE_PACKAGE                                     = 2,
	E_TYPE_MAX                                         = 3
};*/

// Enum CombatGame.CombatFrontEnd_BaseShop.EShopDetailScene
/*enum EShopDetailScene
{
	E_SCENE_SHOPLIST                                   = 0,
	E_SCENE_POPUP                                      = 1,
	E_SCENE_MAX                                        = 2
};*/

// Enum CombatGame.CombatFrontEnd_BaseShop.eShopWeaponIndex
/*enum eShopWeaponIndex
{
	SHOPWEAPON_PRIMARY_WEAPON                          = 0,
	SHOPWEAPON_SUB_WEAPON                              = 1,
	SHOPWEAPON_MELEE_WEAPON                            = 2,
	SHOPWEAPON_THROW_WEAPON                            = 3,
	SHOPWEAPON_CHARACTER                               = 4,
	SHOPWEAPON_MAX                                     = 5
};*/

// Enum CombatGame.CombatFrontEnd_BuyItem.EAbilityType
/*enum EAbilityType
{
	E_ABILITY_TYPE_ACCURACY                            = 0,
	E_ABILITY_TYPE_DAMAGE                              = 1,
	E_ABILITY_TYPE_RANGE                               = 2,
	E_ABILITY_TYPE_RATE_OF_FIRE                        = 3,
	E_ABILITY_TYPE_RECOIL                              = 4,
	E_ABILITY_TYPE_MOBILITY                            = 5,
	E_ABILITY_TYPE_AMMO                                = 6,
	E_ABILITY_TYPE_MAX                                 = 7
};*/

// Enum CombatGame.CombatFrontEnd_BuyItem.EPriceIconType
/*enum EPriceIconType
{
	E_PRICE_ICON_TYPE_MONEY                            = 0,
	E_PRICE_ICON_TYPE_CASH                             = 1,
	E_PRICE_ICON_TYPE_MEDAL                            = 2,
	E_PRICE_ICON_TYPE_HANCOIN                          = 3,
	E_PRICE_ICON_TYPE_BSCOIN                           = 4,
	E_PRICE_ICON_TYPE_BULLET                           = 5,
	E_PRICE_ICON_TYPE_MAX                              = 6
};*/

// Enum CombatGame.CombatFrontEnd_CallingCardPage.ECallingCardButton
/*enum ECallingCardButton
{
	E_CC_BTN_APPLY                                     = 0,
	E_CC_BTN_CLOSE                                     = 1,
	E_CC_BTN_MAX                                       = 2
};*/

// Enum CombatGame.CombatFrontEnd_CallingCardPage.ECallingCardTab
/*enum ECallingCardTab
{
	E_CC_TAB_ALL                                       = 0,
	E_CC_TAB_TEMP                                      = 1,
	E_CC_TAB_MAX                                       = 2
};*/

// Enum CombatGame.CombatFrontEnd_ChangePropernounPopup.PropernounPopupMode
/*enum PropernounPopupMode
{
	PPM_Callsign                                       = 0,
	PPM_MAX                                            = 1
};*/

// Enum CombatGame.CombatFrontEnd_Channel.E_CHANNEL_BUTTON_TYPE
/*enum E_CHANNEL_BUTTON_TYPE
{
	E_CHANNEL_BUTTON_TYPE_REFLESH                      = 0,
	E_CHANNEL_BUTTON_TYPE_TUTORIAL                     = 1,
	E_CHANNEL_BUTTON_TYPE_JOIN                         = 2,
	E_CHANNEL_BUTTON_TYPE_MAX                          = 3
};*/

// Enum CombatGame.CombatFrontEnd_Channel.E_CHANNEL_BOOSTER_TYPE
/*enum E_CHANNEL_BOOSTER_TYPE
{
	E_CHANNEL_BOOSTER_TYPE_EXP                         = 0,
	E_CHANNEL_BOOSTER_TYPE_GOLD                        = 1,
	E_CHANNEL_BOOSTER_TYPE_MAX                         = 2
};*/

// Enum CombatGame.CombatFrontEnd_Channel.E_CHANNEL_STATE
/*enum E_CHANNEL_STATE
{
	E_CHANNEL_STATE_NORMAL                             = 0,
	E_CHANNEL_STATE_NORMAL01                           = 1,
	E_CHANNEL_STATE_NORMAL02                           = 2,
	E_CHANNEL_STATE_NORMAL03                           = 3,
	E_CHANNEL_STATE_HOT                                = 4,
	E_CHANNEL_STATE_MAX                                = 5
};*/

// Enum CombatGame.CombatFrontEnd_CharacterInfo.CharacterInfoTab
/*enum CharacterInfoTab
{
	ECharTab_Profile                                   = 0,
	ECharTab_Battle                                    = 1,
	ECharTab_Weapon                                    = 2,
	ECharTab_Competitive                               = 3,
	ECharTab_MAX                                       = 4
};*/

// Enum CombatGame.CombatFrontEnd_Chat.EPopupType
/*enum EPopupType
{
	E_POPUP_TYPE_PLAYERINFO                            = 0,
	E_POPUP_TYPE_WHISPER                               = 1,
	E_POPUP_TYPE_ADDFRIEND                             = 2,
	E_POPUP_TYPE_INIVTE_TO_MY_CLAN                     = 3,
	E_POPUP_TYPE_BLOCK                                 = 4,
	E_POPUP_TYPE_MAX                                   = 5
};*/

// Enum CombatGame.CombatFrontEnd_Chat.ETabType
/*enum ETabType
{
	E_TAB_TYPE_ALL                                     = 0,
	E_TAB_TYPE_WHISPER                                 = 1,
	E_TAB_TYPE_CLAN                                    = 2,
	E_TAB_TYPE_MAX                                     = 3
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanAcceptErrorType
/*enum ClanAcceptErrorType
{
	ENNET_ClanAccept_NotSet                            = 0,
	ENNET_ClanAccept_Invalid_REQ                       = 1,
	ENNET_ClanAccept_Invalid_Clan                      = 2,
	ENNET_ClanAccept_AlreadyInClan                     = 3,
	ENNET_ClanAccept_Member_Is_Full                    = 4,
	ENNET_ClanAccept_Duplicate                         = 5,
	ENNET_ClanAccept_MAX                               = 6
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanSuggestErrorType
/*enum ClanSuggestErrorType
{
	ENNET_ClanSuggest_NotSet                           = 0,
	ENNET_ClanSuggest_Invalid_REQ                      = 1,
	ENNET_ClanSuggest_Duplicate                        = 2,
	ENNET_ClanSuggest_Invalid_User                     = 3,
	ENNET_ClanSuggest_AlreadyInClan                    = 4,
	ENNET_ClanSuggest_AuthLevel                        = 5,
	ENNET_ClanSuggest_OnPenalty                        = 6,
	ENNET_ClanSuggest_MAX                              = 7
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanBreakAwayErrorType
/*enum ClanBreakAwayErrorType
{
	ENNET_ClanBreakAway_NotSet                         = 0,
	ENNET_ClanBreakAway_Invalid_State                  = 1,
	ENNET_ClanBreakAway_Invalid_REQ                    = 2,
	ENNET_ClanBreakAway_Invalid_Operation              = 3,
	ENNET_ClanBreakAway_MAX                            = 4
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanKickMemberErrorType
/*enum ClanKickMemberErrorType
{
	ENNET_ClanKick_NotSet                              = 0,
	ENNET_ClanKick_Invalid_REQ                         = 1,
	ENNET_ClanKick_Invalid_Auth_Level                  = 2,
	ENNET_ClanKick_Invalid_User                        = 3,
	ENNET_ClanKick_MAX                                 = 4
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanNameErrorType
/*enum ClanNameErrorType
{
	ENNET_ClanName_NotSet                              = 0,
	ENNET_ClanName_InvalidLength                       = 1,
	ENNET_ClanName_HaveForbiddenWord                   = 2,
	ENNET_ClanName_UnableWord                          = 3,
	ENNET_ClanName_Duplicate                           = 4,
	ENNET_ClanName_ServerForbidden                     = 5,
	ENNET_ClanName_ConsecutivelyWord                   = 6,
	ENNET_ClanName_BadPassword                         = 7,
	ENNET_ClanName_OnPenalty                           = 8,
	ENNET_ClanName_RankNotQualified                    = 9,
	ENNET_ClanName_NotRequiredMoney                    = 10,
	ENNET_ClanName_MAX                                 = 11
};*/

// Enum CombatGame.OnlineSubsystemCombat.EMuteType
/*enum EMuteType
{
	MUTE_None                                          = 0,
	MUTE_AllButFriends                                 = 1,
	MUTE_All                                           = 2,
	MUTE_MAX                                           = 3
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanGradeChangeErrorType
/*enum ClanGradeChangeErrorType
{
	ENNET_ClanGradeChange_State                        = 0,
	ENNET_ClanGradeChange_FindTarget                   = 1,
	ENNET_ClanGradeChange_Permission                   = 2,
	ENNET_ClanGradeChange_Exists                       = 3,
	ENNET_ClanGradeChange_MAX                          = 4
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanMasterDelegateErrorType
/*enum ClanMasterDelegateErrorType
{
	ENNET_ClanMasterDelegate_State                     = 0,
	ENNET_ClanMasterDelegate_FindTarget                = 1,
	ENNET_ClanMasterDelegate_Permission                = 2,
	ENNET_ClanMasterDelegate_MAX                       = 3
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanJoinRefuseErrorType
/*enum ClanJoinRefuseErrorType
{
	ENNET_ClanJoinRefuse_State                         = 0,
	ENNET_ClanJoinRefuse_Permission                    = 1,
	ENNET_ClanJoinRefuse_Invalid                       = 2,
	ENNET_ClanJoinRefuse_MAX                           = 3
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanJoinApproveErrorType
/*enum ClanJoinApproveErrorType
{
	ENNET_ClanJoinApprove_State                        = 0,
	ENNET_ClanJoinApprove_Invalid                      = 1,
	ENNET_ClanJoinApprove_Exists                       = 2,
	ENNET_ClanJoinApprove_OverMaxCount                 = 3,
	ENNET_ClanJoinApprove_MAX                          = 4
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanJoinCancelErrorType
/*enum ClanJoinCancelErrorType
{
	ENNET_ClanJoinCancel_State                         = 0,
	ENNET_ClanJoinCancel_Invalid                       = 1,
	ENNET_ClanJoinCancel_MAX                           = 2
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanJoinApplyErrorType
/*enum ClanJoinApplyErrorType
{
	ENNET_ClanJoinApply_State                          = 0,
	ENNET_ClanJoinApply_Exists                         = 1,
	ENNET_ClanJoinApply_OverMaxCount                   = 2,
	ENNET_ClanJoinApply_Denied                         = 3,
	ENNET_ClanJoinApply_OnPenalty                      = 4,
	ENNET_ClanJoinApply_MAX                            = 5
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanShutDownErrorType
/*enum ClanShutDownErrorType
{
	ENNET_ClanShutDown_State                           = 0,
	ENNET_ClanShutDown_Permission                      = 1,
	ENNET_ClanShutDown_Operation                       = 2,
	ENNET_ClanShutDown_Password                        = 3,
	ENNET_ClanShutDown_MAX                             = 4
};*/

// Enum CombatGame.OnlineSubsystemCombat.ClanFindErrorType
/*enum ClanFindErrorType
{
	ENNET_ClanFind_NotSet                              = 0,
	ENNET_ClanFind_NoTARGE                             = 1,
	ENNET_ClanFind_Close                               = 2,
	ENNET_ClanFind_MAX                                 = 3
};*/

// Enum CombatGame.CombatFrontEnd_ClanHome.EClanHomePopupSetType
/*enum EClanHomePopupSetType
{
	E_TYPE_CLAN_NICK_NAME                              = 0,
	E_TYPE_CLAN_USERINFO                               = 1,
	E_TYPE_CLAN_ADD_FRIEND                             = 2,
	E_TYPE_CLAN_BREAK_AWAY                             = 3,
	E_TYPE_CLAN_KICK_AWAY                              = 4,
	E_TYPE_CLAN_GRADE_NAME                             = 5,
	E_TYPE_CLAN_MASTER                                 = 6,
	E_TYPE_CLAN_MANAGER                                = 7,
	E_TYPE_CALN_NORMAL                                 = 8,
	E_TYPE_CLAN_MAX                                    = 9,
	E_TYPE_MAX                                         = 10
};*/

// Enum CombatGame.CombatFrontEnd_ClanHome.EClanHomeUserOffLineType
/*enum EClanHomeUserOffLineType
{
	E_TYPE_ONLINE                                      = 0,
	E_TYPE_OFFLine                                     = 1,
	E_TYPE_MAX                                         = 2
};*/

// Enum CombatGame.CombatFrontEnd_ClanHome.EClanHomeUserDivisionType
/*enum EClanHomeUserDivisionType
{
	E_TYPE_CLAN_MEMBER_ME                              = 0,
	E_TYPE_CLAN_MEMBER_OTHER                           = 1,
	E_TYPE_CLAN_MEMBER_MAX                             = 2
};*/

// Enum CombatGame.CombatFrontEnd_ClanHome.EClanHomeButtonType
/*enum EClanHomeButtonType
{
	E_TYPE_CLAN_NOTICE                                 = 0,
	E_TYPE_CALN_INTRODUCE                              = 1,
	E_TYPE_MAX                                         = 2
};*/

// Enum CombatGame.CombatFrontEnd_ClanHome.EClanMatchTabType
/*enum EClanMatchTabType
{
	E_TYPE_CLAN_RECENTYLY                              = 0,
	E_TYPE_CLAN_RANKMATCH                              = 1,
	E_TYPE_CLAN_AMATCH                                 = 2,
	E_TYPE_CLAN_MAX                                    = 3
};*/

// Enum CombatGame.CombatFrontEnd_ClanJoinPopup.ClanPopupMode
/*enum ClanPopupMode
{
	CPM_InitPw                                         = 0,
	CPM_ChangePw                                       = 1,
	CPM_ShutdownPw                                     = 2,
	CPM_Join                                           = 3,
	CPM_Notice                                         = 4,
	CPM_Introduce                                      = 5,
	CPM_Max                                            = 6
};*/

// Enum CombatGame.CombatFrontEnd_ClanList.EClanListJoinType
/*enum EClanListJoinType
{
	E_TYPE_CLAN_HOLD                                   = 0,
	E_TYPE_CLAN_JOIN                                   = 1,
	E_TYPE_CLAN_CALCEL                                 = 2,
	E_TYPE_CLAN_MAX                                    = 3
};*/

// Enum CombatGame.CombatFrontEnd_ClanList.E_CLAN_LIST_WAY_BUTTON_TYPE
/*enum E_CLAN_LIST_WAY_BUTTON_TYPE
{
	E_CLAN_LIST_WAY_BUTTON_TYPE_PREV                   = 0,
	E_CLAN_LIST_WAY_BUTTON_TYPE_NEXT                   = 1,
	E_CLAN_LIST_WAY_BUTTON_TYPE_MAX                    = 2
};*/

// Enum CombatGame.CombatFrontEnd_Community.EMessengerUserStateType
/*enum EMessengerUserStateType
{
	MUSER_STATE_NONE                                   = 0,
	MUSER_STATE_OFFLINE                                = 1,
	MUSER_STATE_ONLINE                                 = 2,
	MUSER_STATE_PLAYING                                = 3,
	MUSER_STATE_AWAY                                   = 4,
	MUSER_STATE_MATCHROOM_WATING                       = 5,
	MUSER_STATE_MAX                                    = 6
};*/

// Enum CombatGame.CombatFrontEnd_Community.EMessengerPopupType
/*enum EMessengerPopupType
{
	MPOPUP_PLAYERINFO                                  = 0,
	MPOPUP_WHISPER                                     = 1,
	MPOPUP_FOLLOW                                      = 2,
	MPOPUP_INIVTE_TO_MATCHROOM                         = 3,
	MPOPUP_INIVTE_TO_MY_CLAN                           = 4,
	MPOPUP_DELETE                                      = 5,
	MPOPUP_BLOCK                                       = 6,
	MPOPUP_UNBLOCK                                     = 7,
	MPOPUP_FRIEND_REQUEST                              = 8,
	MPOPUP_MAX                                         = 9
};*/

// Enum CombatGame.CombatFrontEnd_Community.EMessengerListType
/*enum EMessengerListType
{
	MLIST_SUGGESTION                                   = 0,
	MLIST_FRIEND_ONLINE                                = 1,
	MLIST_FRIEND_OFFLINE                               = 2,
	MLIST_BLOCK                                        = 3,
	MLIST_CLAN_ONLINE                                  = 4,
	MLIST_CLAN_OFFLINE                                 = 5,
	MLIST_MAX                                          = 6
};*/

// Enum CombatGame.CombatFrontEnd_Community.EMessengerStateType
/*enum EMessengerStateType
{
	MESSENGER_STATE_FRIEND                             = 0,
	MESSENGER_STATE_CLAN                               = 1,
	MESSENGER_STATE_MAX                                = 2
};*/

// Enum CombatGame.CombatFrontEnd_Dashboard.EDashBoardPopupType
/*enum EDashBoardPopupType
{
	DBPOPUP_PLAYERINFO                                 = 0,
	DBPOPUP_CALLINGCARD                                = 1,
	DBPOPUP_MAX                                        = 2
};*/

// Enum CombatGame.CombatFrontEnd_Dashboard.EDashboardIconType
/*enum EDashboardIconType
{
	EDI_NONE                                           = 0,
	EDI_RED_ALERT                                      = 1,
	EDI_YELLOW_ALERT                                   = 2,
	EDI_NOTICE_COMPETITIVE                             = 3,
	EDI_MAX                                            = 4
};*/

// Enum CombatGame.CombatFrontEnd_Dashboard.EMyMoneyType
/*enum EMyMoneyType
{
	EMT_None                                           = 0,
	EMT_Point                                          = 1,
	EMT_Medal                                          = 2,
	EMT_BSCoin                                         = 3,
	EMT_Cash                                           = 4,
	EMT_HanCoin                                        = 5,
	EMT_Event                                          = 6,
	EMT_Bullet                                         = 7,
	EMT_Spring                                         = 8,
	EMT_SummerPoint                                    = 9,
	EMT_MAX                                            = 10
};*/

// Enum CombatGame.CombatFrontEnd_Dashboard.E_DASHBOARD_BUTTON_TYPE
/*enum E_DASHBOARD_BUTTON_TYPE
{
	E_DASHBOARD_BUTTON_TYPE_EVENT                      = 0,
	E_DASHBOARD_BUTTON_TYPE_MAIL                       = 1,
	E_DASHBOARD_BUTTON_TYPE_MESSENGER                  = 2,
	E_DASHBOARD_BUTTON_TYPE_BACK                       = 3,
	E_DASHBOARD_BUTTON_TYPE_NOTICE                     = 4,
	E_DASHBOARD_BUTTON_TYPE_INVEN                      = 5,
	E_DASHBOARD_BUTTON_TYPE_RECORD                     = 6,
	E_DASHBOARD_BUTTON_TYPE_CLAN_LIST                  = 7,
	E_DASHBOARD_BUTTON_TYPE_CLAN_HOME                  = 8,
	E_DASHBOARD_BUTTON_TYPE_SHOP                       = 9,
	E_DASHBOARD_BUTTON_TYPE_MEDAL_SHOP                 = 10,
	E_DASHBOARD_BUTTON_TYPE_RANDOM_BOX_SHOP            = 11,
	E_DASHBOARD_BUTTON_TYPE_OPTION                     = 12,
	E_DASHBOARD_BUTTON_TYPE_HELP                       = 13,
	E_DASHBOARD_BUTTON_TYPE_SUPPORT                    = 14,
	E_DASHBOARD_BUTTON_TYPE_MAX                        = 15
};*/

// Enum CombatGame.CombatFrontEnd_Dashboard.E_DASHBOARD_BUTTON_POSITION_TYPE
/*enum E_DASHBOARD_BUTTON_POSITION_TYPE
{
	E_DASHBOARD_BUTTON_POSITION_TYPE_TOP               = 0,
	E_DASHBOARD_BUTTON_POSITION_TYPE_BOTTOM            = 1,
	E_DASHBOARD_BUTTON_POSITION_TYPE_MAX               = 2
};*/

// Enum CombatGame.CombatFrontEnd_Event.EventPageTab
/*enum EventPageTab
{
	EEventPageTabe_AttendanceCheck                     = 0,
	EEventPageTabe_DailyMission                        = 1,
	EEventPageTabe_WeeklyMission                       = 2,
	EEventPageTabe_SpecialEvent                        = 3,
	EEventPageTabe_PCBangEvent                         = 4,
	EEventPageTabe_HiredSoldierEventTab                = 5,
	EEventPageTabe_AiEvent                             = 6,
	EEventPageTabe_Achievement                         = 7,
	EEventPageTabe_MAX                                 = 8
};*/

// Enum CombatGame.CombatFrontEnd_Exchange.EExchangeCoinType
/*enum EExchangeCoinType
{
	EExchangeCoinType_GCoin                            = 0,
	EExchangeCoinType_MCoin                            = 1,
	EExchangeCoinType_BSCoin                           = 2,
	EExchangeCoinType_MAX                              = 3
};*/

// Enum CombatGame.CombatFrontEnd_Exit.EQuestCountType
/*enum EQuestCountType
{
	EQCT_None                                          = 0,
	EQCT_Time                                          = 1,
	EQCT_MAX                                           = 2
};*/

// Enum CombatGame.CombatFrontEnd_Inventory.E_INVEN_ITEM_SET_TYPE
/*enum E_INVEN_ITEM_SET_TYPE
{
	E_INVEN_ITEM_SET_TYPE_CHECK                        = 0,
	E_INVEN_ITEM_SET_TYPE_PRESET                       = 1,
	E_INVEN_ITEM_SET_TYPE_REAL                         = 2,
	E_INVEN_ITEM_SET_TYPE_CONSUME                      = 3,
	E_INVEN_ITEM_SET_TYPE_MAX                          = 4
};*/

// Enum CombatGame.CombatFrontEnd_Inventory.E_INVEN_ITEM_BUTTON_TYPE
/*enum E_INVEN_ITEM_BUTTON_TYPE
{
	E_INVEN_ITEM_BUTTON_TYPE_PRESET                    = 0,
	E_INVEN_ITEM_BUTTON_TYPE_PRESET01                  = 1,
	E_INVEN_ITEM_BUTTON_TYPE_PRESET02                  = 2,
	E_INVEN_ITEM_BUTTON_TYPE_CHECK                     = 3,
	E_INVEN_ITEM_BUTTON_TYPE_REPAIR                    = 4,
	E_INVEN_ITEM_BUTTON_TYPE_SELL                      = 5,
	E_INVEN_ITEM_BUTTON_TYPE_USE                       = 6,
	E_INVEN_ITEM_BUTTON_TYPE_MAX                       = 7
};*/

// Enum CombatGame.CombatFrontEnd_Inventory.E_INVEN_ITEM_BUTTON_STATE_TYPE
/*enum E_INVEN_ITEM_BUTTON_STATE_TYPE
{
	E_INVEN_ITEM_BUTTON_STATE_TYPE_DEFAULT             = 0,
	E_INVEN_ITEM_BUTTON_STATE_TYPE_SELECTED            = 1,
	E_INVEN_ITEM_BUTTON_STATE_TYPE_DISABLED            = 2,
	E_INVEN_ITEM_BUTTON_STATE_TYPE_MAX                 = 3
};*/

// Enum CombatGame.CombatFrontEnd_Inventory.E_INVEN_ITEM_SORT_TYPE
/*enum E_INVEN_ITEM_SORT_TYPE
{
	E_INVEN_ITEM_SORT_TYPE_BASIC                       = 0,
	E_INVEN_ITEM_SORT_TYPE_EQUIP                       = 1,
	E_INVEN_ITEM_SORT_TYPE_NAME                        = 2,
	E_INVEN_ITEM_SORT_TYPE_KILL_COUNT                  = 3,
	E_INVEN_ITEM_SORT_TYPE_ITEM_GRADE                  = 4,
	E_INVEN_ITEM_SORT_TYPE_REMAIN_TIME                 = 5,
	E_INVEN_ITEM_SORT_TYPE_MAX                         = 6
};*/

// Enum CombatGame.CombatFrontEnd_ToolTip.EWeaponTooltip
/*enum EWeaponTooltip
{
	EWT_ACCURACY                                       = 0,
	EWT_DAMAGE                                         = 1,
	EWT_RANGE                                          = 2,
	EWT_FIREPOWER                                      = 3,
	EWT_STABILITY                                      = 4,
	EWT_AMMO                                           = 5,
	EWT_MAX                                            = 6
};*/

// Enum CombatGame.CombatFrontEnd_ToolTip.EClthesChipToolTip
/*enum EClthesChipToolTip
{
	ECCT_RAPID_RELOAD                                  = 0,
	ECCT_QUICK_CHANGE                                  = 1,
	ECCT_ADD_MAIN_AMMO                                 = 2,
	ECCT_ADD_SUB_AMMO                                  = 3,
	ECCT_MAX_HEALTH                                    = 4,
	ECCT_MAX_HEALTH_CURE_RATE                          = 5,
	ECCT_MAX_AUTO_CURE_HEALTH                          = 6,
	ECCT_GROUND_TPS_SPEED_RATE                         = 7,
	ECCT_GROUND_FPS_SPEED_RATE                         = 8,
	ECCT_GROUND_CROUCH_SPEED_RATE                      = 9,
	ECCT_GROUND_ACCELATION_SPEED_RATE                  = 10,
	ECCT_SPRINT_SPEED_RAGE                             = 11,
	ECCT_GUN_DAMAGE_RATE                               = 12,
	ECCT_GUN_GUARD_RATE                                = 13,
	ECCT_MELEE_DAMAGE_RATE                             = 14,
	ECCT_MELLE_GUARD_RATE                              = 15,
	ECCT_EXPLOSIVE_ATTACK_DAMAGE_RATE                  = 16,
	ECCT_EXPLOSIVE_ATTACK_GUARD_RATE                   = 17,
	ECCT_RADER_DETAIL_DISTANCE                         = 18,
	ECCT_RAGER_RANGE                                   = 19,
	ECCT_MAX                                           = 20
};*/

// Enum CombatGame.CombatFrontEnd_Login.ELoginTextInputError
/*enum ELoginTextInputError
{
	ELOGIN_ERROR_ID_NULL                               = 0,
	ELOGIN_ERROR_PW_NULL                               = 1,
	ELOGIN_ERROR_MAX                                   = 2
};*/

// Enum CombatGame.CombatFrontEnd_MainLobby.E_MAIN_LOBBY_SORT_BUTTON_TYPE
/*enum E_MAIN_LOBBY_SORT_BUTTON_TYPE
{
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_NO                   = 0,
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_TITLE                = 1,
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_MODE                 = 2,
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_MAP                  = 3,
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_PERSONS              = 4,
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_STATE                = 5,
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_PING                 = 6,
	E_MAIN_LOBBY_SORT_BUTTON_TYPE_MAX                  = 7
};*/

// Enum CombatGame.CombatFrontEnd_MainLobby.E_MAIN_LOBBY_ROOM_BUTTON_TYPE
/*enum E_MAIN_LOBBY_ROOM_BUTTON_TYPE
{
	E_MAIN_LOBBY_ROOM_BUTTON_TYPE_MAKE                 = 0,
	E_MAIN_LOBBY_ROOM_BUTTON_TYPE_PRACTICE             = 1,
	E_MAIN_LOBBY_ROOM_BUTTON_TYPE_JOIN                 = 2,
	E_MAIN_LOBBY_ROOM_BUTTON_TYPE_ENROLLMENT           = 3,
	E_MAIN_LOBBY_ROOM_BUTTON_TYPE_QUICK_MATCH          = 4,
	E_MAIN_LOBBY_ROOM_BUTTON_TYPE_MAX                  = 5
};*/

// Enum CombatGame.CombatFrontEnd_MainLobby.E_MAIN_LOBBY_LAY_OUT_TYPE
/*enum E_MAIN_LOBBY_LAY_OUT_TYPE
{
	E_MAIN_LOBBY_LAY_OUT_TYPE_DEFAULT                  = 0,
	E_MAIN_LOBBY_LAY_OUT_TYPE_QUICK_MATCH              = 1,
	E_MAIN_LOBBY_LAY_OUT_TYPE_COMPENTITION_MATCH       = 2,
	E_MAIN_LOBBY_LAY_OUT_TYPE_MAX                      = 3
};*/

// Enum CombatGame.CombatFrontEnd_MainLobby.E_MAIN_LOBBY_MATCH_ROOM_STATE_TYPE
/*enum E_MAIN_LOBBY_MATCH_ROOM_STATE_TYPE
{
	E_MAIN_LOBBY_MATCH_ROOM_STATE_TYPE_WAITING         = 0,
	E_MAIN_LOBBY_MATCH_ROOM_STATE_TYPE_PLAYING         = 1,
	E_MAIN_LOBBY_MATCH_ROOM_STATE_TYPE_MAX             = 2
};*/

// Enum CombatGame.CombatLobbyTransaction.E_UPDATE_MATCHROOM_TYPE
/*enum E_UPDATE_MATCHROOM_TYPE
{
	E_UPDATE_MATCHROOM_TYPE_ADD                        = 0,
	E_UPDATE_MATCHROOM_TYPE_DELETE                     = 1,
	E_UPDATE_MATCHROOM_TYPE_UPDATE                     = 2,
	E_UPDATE_MATCHROOM_TYPE_MAX                        = 3
};*/

// Enum CombatGame.CombatFrontEnd_MakeRoom.EMakeRoomButton
/*enum EMakeRoomButton
{
	E_MR_BTN_CANCEL                                    = 0,
	E_MR_BTN_CHANGE                                    = 1,
	E_MR_BTN_COMPLETE                                  = 2,
	E_MR_BTN_TOTAL                                     = 3,
	E_MR_BTN_LARGE                                     = 4,
	E_MR_BTN_MEDIUM                                    = 5,
	E_MR_BTN_SMALL                                     = 6,
	E_MR_BTN_MAX                                       = 7
};*/

// Enum CombatGame.CombatFrontEnd_MakeRoom.EMakeRoomScene
/*enum EMakeRoomScene
{
	ESCENE_SETUP_MODE                                  = 0,
	ESCENE_SETUP_MAP                                   = 1,
	ESCENE_SETUP_MAX                                   = 2
};*/

// Enum CombatGame.CombatFrontEnd_MakeRoom.EMakeRoomMode
/*enum EMakeRoomMode
{
	EMODE_CREATE                                       = 0,
	EMODE_CHANGE                                       = 1,
	EMODE_PRACTICE                                     = 2,
	EMODE_MAX                                          = 3
};*/

// Enum CombatGame.CombatFrontEnd_MakeRoom.EPassWord
/*enum EPassWord
{
	E_PASSWORD_TRUE                                    = 0,
	E_PASSWORD_FALSE                                   = 1,
	E_PASSWORD_MAX                                     = 2
};*/

// Enum CombatGame.CombatFrontEnd_MatchRoom.EMatchroomButton
/*enum EMatchroomButton
{
	EMB_TeamSwap                                       = 0,
	EMB_Change                                         = 1,
	EMB_KickUser                                       = 2,
	EMB_Watch                                          = 3,
	EMB_Invitation                                     = 4,
	EMB_Master                                         = 5,
	EMB_Ready                                          = 6,
	EMB_MODEMAP                                        = 7,
	EMB_MAX                                            = 8
};*/

// Enum CombatGame.CombatFrontEnd_MatchRoom.EAutoMatchState
/*enum EAutoMatchState
{
	EMS_Compose                                        = 0,
	EMS_StartPossible                                  = 1,
	EMS_TeamSearch                                     = 2,
	EMS_MAX                                            = 3
};*/

// Enum CombatGame.CombatFrontEnd_MatchRoom.EMatchInfo
/*enum EMatchInfo
{
	EMI_NormalMatch                                    = 0,
	EMI_AutoMatch                                      = 1,
	EMI_AiMatch                                        = 2,
	EMI_MAX                                            = 3
};*/

// Enum CombatGame.CombatFrontEnd_MatchRoom.ETeamIndex
/*enum ETeamIndex
{
	ETI_VcVsPm                                         = 0,
	ETI_PmVsVc                                         = 1,
	ETI_MAX                                            = 2
};*/

// Enum CombatGame.CombatFrontEnd_MatchRoom.EReadyButtonType
/*enum EReadyButtonType
{
	ERBT_Ready                                         = 0,
	ERBT_UnReady                                       = 1,
	ERBT_Intrude                                       = 2,
	ERBT_Start                                         = 3,
	ERBT_Abort                                         = 4,
	ERBT_MAX                                           = 5
};*/

// Enum CombatGame.CombatFrontEnd_MatchRoom.ERClickPopupMenu
/*enum ERClickPopupMenu
{
	E_RCPM_USERINFO                                    = 0,
	E_RCPM_WHISPER                                     = 1,
	E_RCPM_ADDFRIEND                                   = 2,
	E_RCPM_INVITE                                      = 3,
	E_RCPM_INVITE_TO_MY_CLAN                           = 4,
	E_RCPM_BLOCK                                       = 5,
	E_RCPM_CHANGEHOST                                  = 6,
	E_RCPM_KICK                                        = 7,
	E_RCPM_MAX                                         = 8
};*/

// Enum CombatGame.CombatFrontEnd_QuickStart.EQStartDropDown
/*enum EQStartDropDown
{
	E_QS_DDN_MISSIONS                                  = 0,
	E_QS_DDN_MODES                                     = 1,
	E_QS_DDN_MAPS                                      = 2,
	E_QS_DDN_STATUS                                    = 3,
	E_QS_DDN_PLAYERS                                   = 4,
	E_QS_DDN_MAX                                       = 5
};*/

// Enum CombatGame.CombatFrontEnd_QuickStart.EQStartButton
/*enum EQStartButton
{
	E_QS_BTN_CANCEL                                    = 0,
	E_QS_BTN_SAVEANDCLOSE                              = 1,
	E_QS_BTN_SAVEANDSTART                              = 2,
	E_QS_BTN_MAX                                       = 3
};*/

// Enum CombatGame.CombatFrontEnd_RandomBox.RandomBoxActionState
/*enum RandomBoxActionState
{
	E_RndBoxAct_MakeCard                               = 0,
	E_RndBoxAct_CardFaceUp                             = 1,
	E_RndBoxAct_CardAutoFaceUp                         = 2,
	E_RndBoxAct_AllCardOpened                          = 3,
	E_RndBoxAct_Finished                               = 4,
	E_RndBoxAct_MAX                                    = 5
};*/

// Enum CombatGame.CombatFrontEnd_Sort.E_INVENTORY_SORT_LIST_TYPE
/*enum E_INVENTORY_SORT_LIST_TYPE
{
	E_INVENTORY_SORT_LIST_TYPE_EQUIP                   = 0,
	E_INVENTORY_SORT_LIST_TYPE_NAME                    = 1,
	E_INVENTORY_SORT_LIST_TYPE_KILL                    = 2,
	E_INVENTORY_SORT_LIST_TYPE_GRADE                   = 3,
	E_INVENTORY_SORT_LIST_TYPE_TIME                    = 4,
	E_INVENTORY_SORT_LIST_TYPE_MAX                     = 5
};*/

// Enum CombatGame.CombatFrontEnd_Sort.E_BUTTON_SELECT_TYPE
/*enum E_BUTTON_SELECT_TYPE
{
	E_BUTTON_SELECT_TYPE_ASCEND                        = 0,
	E_BUTTON_SELECT_TYPE_DESCEND                       = 1,
	E_BUTTON_SELECT_TYPE_MAX                           = 2
};*/

// Enum CombatGame.CombatMailTransaction.E_MAIL_MONEY_TYPE
/*enum E_MAIL_MONEY_TYPE
{
	E_MAIL_MONEY_TYPE_GOLD                             = 0,
	E_MAIL_MONEY_TYPE_MEDAL                            = 1,
	E_MAIL_MONEY_TYPE_GCOIN                            = 2,
	E_MAIL_MONEY_TYPE_MCOIN                            = 3,
	E_MAIL_MONEY_TYPE_BSOIN                            = 4,
	E_MAIL_MONEY_TYPE_MAX                              = 5
};*/

// Enum CombatGame.CombatFrontEnd_Storage.E_STORAGE_BUTTON_TYPE
/*enum E_STORAGE_BUTTON_TYPE
{
	E_STORAGE_BUTTON_TYPE_STORAGE                      = 0,
	E_STORAGE_BUTTON_TYPE_GIFT                         = 1,
	E_STORAGE_BUTTON_TYPE_PREV                         = 2,
	E_STORAGE_BUTTON_TYPE_NEXT                         = 3,
	E_STORAGE_BUTTON_TYPE_RECEIVE                      = 4,
	E_STORAGE_BUTTON_TYPE_DELMSG                       = 5,
	E_STORAGE_BUTTON_TYPE_ALLRECEIVE                   = 6,
	E_STORAGE_BUTTON_TYPE_SELECTEDRECEIVE              = 7,
	E_STORAGE_BUTTON_TYPE_ALLCHECK                     = 8,
	E_STORAGE_BUTTON_TYPE_MAX                          = 9
};*/

// Enum CombatGame.CombatFrontEnd_Storage.E_STORAGE_CHECK_BOX_STATE
/*enum E_STORAGE_CHECK_BOX_STATE
{
	E_STORAGE_CHECK_BOX_STATE_UNCHECK                  = 0,
	E_STORAGE_CHECK_BOX_STATE_CHECK                    = 1,
	E_STORAGE_CHECK_BOX_STATE_DISABLED                 = 2,
	E_STORAGE_CHECK_BOX_STATE_MAX                      = 3
};*/

// Enum CombatGame.CombatFrontEnd_UserInfo.E_RECORD_TYPE
/*enum E_RECORD_TYPE
{
	E_RECORD_TYPE_RANK                                 = 0,
	E_RECORD_TYPE_TOTAL_PLAY_TIME                      = 1,
	E_RECORD_TYPE_EXP                                  = 2,
	E_RECORD_TYPE_ALL_CAREER                           = 3,
	E_RECORD_TYPE_KAD                                  = 4,
	E_RECORD_TYPE_KAD_RATIO                            = 5,
	E_RECORD_TYPE_HEAD_SHOT                            = 6,
	E_RECORD_TYPE_FATAL_SHOT                           = 7,
	E_RECORD_TYPE_RUNAWAY                              = 8,
	E_RECORD_TYPE_CLAN_CAREER                          = 9,
	E_RECORD_TYPE_CLAN_KAD                             = 10,
	E_RECORD_TYPE_CLAN_RUNAWAY                         = 11,
	E_RECORD_TYPE_RANKING_POINT                        = 12,
	E_RECORD_TYPE_MAX                                  = 13
};*/

// Enum CombatGame.CombatUserInfoTransaction.E_COMPETITION_TYPE
/*enum E_COMPETITION_TYPE
{
	E_COMPETITION_TYPE_SOLO_DUO                        = 0,
	E_COMPETITION_TYPE_SQUAD                           = 1,
	E_COMPETITION_TYPE_MAX                             = 2
};*/

// Enum CombatGame.CombatUserInfoTransaction.E_MATCH_HISTORY_TYPE
/*enum E_MATCH_HISTORY_TYPE
{
	E_MATCH_HISTORY_TYPE_ALL                           = 0,
	E_MATCH_HISTORY_TYPE_CLASSIC                       = 1,
	E_MATCH_HISTORY_TYPE_COMPETITION_SOLO_DUO          = 2,
	E_MATCH_HISTORY_TYPE_COMPETITION_SQUAD             = 3,
	E_MATCH_HISTORY_TYPE_CLAN_ALL                      = 4,
	E_MATCH_HISTORY_TYPE_CLAN_RANK                     = 5,
	E_MATCH_HISTORY_TYPE_CLAN_A                        = 6,
	E_MATCH_HISTORY_TYPE_CLAN_B                        = 7,
	E_MATCH_HISTORY_TYPE_MAX                           = 8
};*/

// Enum CombatGame.CombatUserInfoTransaction.E_MATCH_RESULT_TYPE
/*enum E_MATCH_RESULT_TYPE
{
	E_MATCH_RESULT_TYPE_LOSE                           = 0,
	E_MATCH_RESULT_TYPE_WIN                            = 1,
	E_MATCH_RESULT_TYPE_RUNAWAY                        = 2,
	E_MATCH_RESULT_TYPE_RUNAWAY_LOSE                   = 3,
	E_MATCH_RESULT_TYPE_RUNAWAY_WIN                    = 4,
	E_MATCH_RESULT_TYPE_MAX                            = 5
};*/

// Enum CombatGame.CombatFrontEndPC.FE_ZoomState
/*enum FE_ZoomState
{
	FEZoom_In                                          = 0,
	FEZoom_Out                                         = 1,
	FEZoom_MAX                                         = 2
};*/

// Enum CombatGame.CombatGameTableDepot.RefTableType
/*enum RefTableType
{
	ERTT_Map                                           = 0,
	ERTT_Mode                                          = 1,
	ERTT_ModeOption                                    = 2,
	ERTT_Mission                                       = 3,
	ERTT_ModeMap                                       = 4,
	ERTT_ModeGroupBindMode                             = 5,
	ERTT_Exp                                           = 6,
	ERTT_BasicChat                                     = 7,
	ERTT_Preset                                        = 8,
	ERTT_InitItem                                      = 9,
	ERTT_SteamItem                                     = 10,
	ERTT_Item                                          = 11,
	ERTT_Scoring                                       = 12,
	ERTT_Achievement                                   = 13,
	ERTT_StatGroup                                     = 14,
	ERTT_Pickup                                        = 15,
	ERTT_Drop                                          = 16,
	ERTT_MailForm                                      = 17,
	ERTT_Skill                                         = 18,
	ERTT_SkillLICENSE                                  = 19,
	ERTT_RankUp                                        = 20,
	ERTT_Rank                                          = 21,
	ERTT_ItemDetailinfo                                = 22,
	ERTT_Shop                                          = 23,
	ERTT_ShopTab                                       = 24,
	ERTT_ShopCategory                                  = 25,
	ERTT_ShopItem                                      = 26,
	ERTT_ShopValue                                     = 27,
	ERTT_Filter                                        = 28,
	ERTT_CallingCard                                   = 29,
	ERTT_Gear                                          = 30,
	ERTT_Emblem                                        = 31,
	ERTT_Quest                                         = 32,
	ERTT_BoosterItem                                   = 33,
	ERTT_HelpTab                                       = 34,
	ERTT_HelpTabDetailInfo                             = 35,
	ERTT_ModeGroup                                     = 36,
	ERTT_SystemImage                                   = 37,
	ERTT_GameServer                                    = 38,
	ERTT_GameChannel                                   = 39,
	ERTT_GameChannelProperty                           = 40,
	ERTT_RoomName                                      = 41,
	ERTT_Stat                                          = 42,
	ERTT_Reward                                        = 43,
	ERTT_ModeGuide                                     = 44,
	ERTT_FrontEndMode                                  = 45,
	ERTT_ModeTip                                       = 46,
	ERTT_BGM                                           = 47,
	ERTT_Attend                                        = 48,
	ERTT_REGION                                        = 49,
	ERTT_Define                                        = 50,
	ERTT_ClanExp                                       = 51,
	ERTT_RandomBox                                     = 52,
	ERTT_CubeBox                                       = 53,
	ERTT_RandomBoxCost                                 = 54,
	ERTT_ImagePath                                     = 55,
	ERTT_ResultReward                                  = 56,
	ERTT_Crosshair                                     = 57,
	ERTT_KillCombo                                     = 58,
	ERTT_AIRewardRank                                  = 59,
	ERTT_TypeDefine                                    = 60,
	ERTT_ShopSellItem                                  = 61,
	ERTT_ClanSection                                   = 62,
	ERTT_PickUpDisplay                                 = 63,
	ERTT_MoneyDisplay                                  = 64,
	ERTT_MatchMaking                                   = 65,
	ERTT_ExchangeCash                                  = 66,
	ERTT_SystemTextColor                               = 67,
	ERTT_LimitSale                                     = 68,
	ERTT_MailCategory                                  = 69,
	ERTT_Tier                                          = 70,
	ERTT_Penalty                                       = 71,
	ERTT_PenaltyBind                                   = 72,
	ERTT_Formula                                       = 73,
	ERTT_TodayGame                                     = 74,
	ERTT_TodayGameBindMode                             = 75,
	ERTT_ItemUnLockRecipe                              = 76,
	ERTT_TierSeason                                    = 77,
	ERTT_CompetitivePenalty                            = 78,
	ERTT_CompetitiveBindMode                           = 79,
	ERTT_ServiceRegion                                 = 80,
	ERTT_GameChannelBindRegion                         = 81,
	ERTT_CompetitiveSeason                             = 82,
	ERTT_Shortcut                                      = 83,
	ERTT_PingGroup                                     = 84,
	ERTT_PingGroupBindRegion                           = 85,
	ERTT_Nation                                        = 86,
	ERTT_SupportUserGroup                              = 87,
	ERTT_MAX                                           = 88
};*/

// Enum CombatGame.CombatHostageActor.HostageAnimType
/*enum HostageAnimType
{
	EHAT_Captivity                                     = 0,
	EHAT_Moving                                        = 1,
	EHAT_Groggy                                        = 2,
	EHAT_Waiting                                       = 3,
	EHAT_MAX                                           = 4
};*/

// Enum CombatGame.CombatHUDEntity_Base.EActivateType
/*enum EActivateType
{
	EAT_Ignore                                         = 0,
	EAT_Show                                           = 1,
	EAT_Hide                                           = 2,
	EAT_Custom                                         = 3,
	EAT_MAX                                            = 4
};*/

// Enum CombatGame.CombatHUD_ObserverInfo.E_HUDMode
/*enum E_HUDMode
{
	EHUD_NORMAL                                        = 0,
	EHUD_COMPETITIVE                                   = 1,
	EHUD_MAX                                           = 2
};*/

// Enum CombatGame.CombatHUD_RoundStatusBar.E_TIMER_STATE_TYPE
/*enum E_TIMER_STATE_TYPE
{
	E_TIMER_STATE_TYPE_OFF                             = 0,
	E_TIMER_STATE_TYPE_ON                              = 1,
	E_TIMER_STATE_TYPE_WAIT                            = 2,
	E_TIMER_STATE_TYPE_MAX                             = 3
};*/

// Enum CombatGame.CombatInGameBattleLog.EKillType
/*enum EKillType
{
	EKT_NORMAL                                         = 0,
	EKT_KILL                                           = 1,
	EKT_DEAD                                           = 2,
	EKT_MAX                                            = 3
};*/

// Enum CombatGame.CombatInGameOptionMenu.EMenuType
/*enum EMenuType
{
	E_MENU_TYPE_BACK                                   = 0,
	E_MENU_TYPE_VOICE_CHAT                             = 1,
	E_MENU_TYPE_OPTION                                 = 2,
	E_MENU_TYPE_BLOCKANDREPORT                         = 3,
	E_MENU_TYPE_SURRENDER                              = 4,
	E_MENU_TYPE_RETURNTOMATCHROOM                      = 5,
	E_MENU_TYPE_MAX                                    = 6
};*/

// Enum CombatGame.CombatItemFXBase.EItemFXView
/*enum EItemFXView
{
	EItemFXView_1P                                     = 0,
	EItemFXView_3P                                     = 1,
	EItemFXView_MAX                                    = 2
};*/

// Enum CombatGame.CombatLocalPlayer.eCombatPostProcess
/*enum eCombatPostProcess
{
	CBPP_NONE                                          = 0,
	CBPP_EXPOSED                                       = 1,
	CBPP_FLASHBANG                                     = 2,
	CBPP_WARMUP                                        = 3,
	CBPP_COUNTDOWN                                     = 4,
	CBPP_ROUND_WIN                                     = 5,
	CBPP_ROUND_OVER                                    = 6,
	CBPP_ROUND_LOSE                                    = 7,
	CBPP_MATCH_OVER_WIN                                = 8,
	CBPP_MATCH_OVER_LOSE                               = 9,
	CBPP_MAX                                           = 10
};*/

// Enum CombatGame.CombatLuaSystem.CombatLuaSystemCallback
/*enum CombatLuaSystemCallback
{
	E_LUA_STAT_UPDATE                                  = 0,
	E_LUA_ACHIEVEMENT_CHECK                            = 1,
	E_LUA_DISPLAY_AWARD                                = 2,
	E_LUA_PROGRESS_UPDATED                             = 3,
	E_LUA_POST_DISPLAY_AWARD                           = 4,
	E_LUA_REQUEST_PROGRESS                             = 5,
	E_LUA_MAX                                          = 6
};*/

// Enum CombatGame.CombatMain_Base.E_PLAY_SOUND_TYPE
/*enum E_PLAY_SOUND_TYPE
{
	E_PLAY_SOUND_TYPE_ESC_POPUP                        = 0,
	E_PLAY_SOUND_TYPE_MAX                              = 1
};*/

// Enum CombatGame.CombatMain_Base.E_SYSTEM_COUNTER_POSITION_TYPE
/*enum E_SYSTEM_COUNTER_POSITION_TYPE
{
	E_SYSTEM_COUNTER_POSITION_TYPE_TOP_LEFT            = 0,
	E_SYSTEM_COUNTER_POSITION_TYPE_TOP_RIGHT           = 1,
	E_SYSTEM_COUNTER_POSITION_TYPE_BOTTOM_RIGHT        = 2,
	E_SYSTEM_COUNTER_POSITION_TYPE_BOTTOM_LEFT         = 3,
	E_SYSTEM_COUNTER_POSITION_TYPE_MAX                 = 4
};*/

// Enum CombatGame.CombatMeshBuilder.EMeshGroup
/*enum EMeshGroup
{
	MESHGROUP_NONE                                     = 0,
	MESHGROUP_WEAPON_1STVIEW                           = 1,
	MESHGROUP_WEAPON_3RDVIEW                           = 2,
	MESHGROUP_MAX                                      = 3
};*/

// Enum CombatGame.CombatMeshBuilder.EMeshCompositionType
/*enum EMeshCompositionType
{
	MESHCOMPOSITIONTYPE_COMPONENT                      = 0,
	MESHCOMPOSITIONTYPE_MERGE                          = 1,
	MESHCOMPOSITIONTYPE_MAX                            = 2
};*/

// Enum CombatGame.CombatOccupiedAreaVolume.EOccupyState
/*enum EOccupyState
{
	EOS_Unoccupied                                     = 0,
	EOS_Battling                                       = 1,
	EOS_Occupying                                      = 2,
	EOS_Occupied                                       = 3,
	EOS_MAX                                            = 4
};*/

// Enum CombatGame.CombatPawn_FlyingVehicle.DamageEffectStep
/*enum DamageEffectStep
{
	DamageEffectStep_None                              = 0,
	DamageEffectStep_Damage                            = 1,
	DamageEffectStep_Explosion                         = 2,
	DamageEffectStep_MAX                               = 3
};*/

// Enum CombatGame.CombatPawn_TrophyTurret.ETrophyState
/*enum ETrophyState
{
	TrophyState_Idle                                   = 0,
	TrophyState_Aimming                                = 1,
	TrophyState_AimmingComplete                        = 2,
	TrophyState_MAX                                    = 3
};*/

// Enum CombatGame.CombatRSCGameReplicationInfo.SceneType
/*enum SceneType
{
	eSCENE_Waiting                                     = 0,
	eSCENE_Moving                                      = 1,
	eSCENE_LastScene                                   = 2,
	eSCENE_MAX                                         = 3
};*/

// Enum CombatGame.CombatSteamAchivementManager.ESteamAchievements
/*enum ESteamAchievements
{
	ESA_NewBeginning                                   = 0,
	ESA_SeniorSoldier                                  = 1,
	ESA_Officer                                        = 2,
	ESA_SeniorOfficer                                  = 3,
	ESA_HigherOfficer                                  = 4,
	ESA_FieldOfficer                                   = 5,
	ESA_ShiningStar                                    = 6,
	ESA_BlackSquad                                     = 7,
	ESA_BestSniper                                     = 8,
	ESA_SeniorSniper                                   = 9,
	ESA_SniperMaster                                   = 10,
	ESA_WarVeteran                                     = 11,
	ESA_MassDestruction                                = 12,
	ESA_OneManArmy                                     = 13,
	ESA_Slaughterer                                    = 14,
	ESA_Samurai                                        = 15,
	ESA_GoodMelee                                      = 16,
	ESA_PlayTime                                       = 17,
	ESA_WinnerI                                        = 18,
	ESA_WinnerII                                       = 19,
	ESA_WinnerIII                                      = 20,
	ESA_FirstBlood                                     = 21,
	ESA_BombDefusal                                    = 22,
	ESA_LastMan                                        = 23,
	ESA_Terminator                                     = 24,
	ESA_POTG                                           = 25,
	ESA_SuicideSquad                                   = 26,
	ESA_ClanMember                                     = 27,
	ESA_FirstClanMatch                                 = 28,
	ESA_ItemPurchase                                   = 29,
	ESA_theBoss                                        = 30,
	ESA_LuckyDay                                       = 31,
	ESA_ItemDelivery                                   = 32,
	ESA_GoodFriends                                    = 33,
	ESA_PartyTime                                      = 34,
	ESA_Destroyer                                      = 35,
	ESA_MAX                                            = 36
};*/

// Enum CombatGame.CombatTrigger_Bomb.EBombIndicatorState
/*enum EBombIndicatorState
{
	EBIS_Default                                       = 0,
	EBIS_Planted                                       = 1,
	EBIS_Explode                                       = 2,
	EBIS_Defused                                       = 3,
	EBIS_MAX                                           = 4
};*/

// Enum CombatGame.CombatTrigger_Bomb.EBombTickState
/*enum EBombTickState
{
	EBTS_Tic                                           = 0,
	EBTS_Tac                                           = 1,
	EBTS_MAX                                           = 2
};*/

// Enum CombatGame.CombatTutorialLevelObject.Tutorial_LO_Type
/*enum Tutorial_LO_Type
{
	TLOT_Target                                        = 0,
	TLOT_Waypoint                                      = 1,
	TLOT_MAX                                           = 2
};*/

// Enum CombatGame.CombatVoiceChatUserList.VOICE_CHAT_STATE
/*enum VOICE_CHAT_STATE
{
	EVS_DISABLE                                        = 0,
	EVS_ON                                             = 1,
	EVS_TALK                                           = 2,
	EVS_OFF                                            = 3,
	EVS_MAX                                            = 4
};*/

// Enum CombatGame.CombatWeapon.EBoneGimmickType
/*enum EBoneGimmickType
{
	E_BG_None                                          = 0,
	E_BG_BulletBelt                                    = 1,
	E_BG_Reverse_BulletBelt                            = 2,
	E_BG_Revolver                                      = 3,
	E_BG_MAX                                           = 4
};*/

// Enum CombatGame.CombatWeapon.EBloodTexOnWeaponStatus
/*enum EBloodTexOnWeaponStatus
{
	E_Blood_Tex_None                                   = 0,
	E_Blood_Tex_Start                                  = 1,
	E_Blood_Tex_First                                  = 2,
	E_Blood_Tex_Next                                   = 3,
	E_Blood_Tex_Random                                 = 4,
	E_Blood_Tex_Duration                               = 5,
	E_Blood_Tex_FadeOut                                = 6,
	E_Blood_Tex_Finish                                 = 7,
	E_Blood_Tex_MAX                                    = 8
};*/

// Enum CombatGame.CombatWeapon.EAltFireBlockStatus
/*enum EAltFireBlockStatus
{
	EAltFireBlock_WeaponEquipping                      = 0,
	EAltFireBlock_NotZoomToZoomLev1                    = 1,
	EAltFireBlock_ZoomLev1ToZoomLev2                   = 2,
	EAltFireBlock_ZoomLev1ToNotZoom                    = 3,
	EAltFireBlock_ZoomLev2ToNotZoom                    = 4,
	EAltFireBlock_MAX                                  = 5
};*/

// Enum CombatGame.CombatWeapon.MovingSkelControlType
/*enum MovingSkelControlType
{
	FW                                                 = 0,
	BW                                                 = 1,
	TR_LT                                              = 2,
	TR_RT                                              = 3,
	MovingSkelControlType_MAX                          = 4
};*/

// Enum CombatGame.CombatWeapon.RecoilYawSkelControlType
/*enum RecoilYawSkelControlType
{
	LT                                                 = 0,
	RT                                                 = 1,
	RecoilYawSkelControlType_MAX                       = 2
};*/

// Enum CombatGame.CombatWeapon.RecoilPitchSkelControlType
/*enum RecoilPitchSkelControlType
{
	Up                                                 = 0,
	DN                                                 = 1,
	RecoilPitchSkelControlType_MAX                     = 2
};*/

// Enum CombatGame.CombatWeapon.EFirstRecoilDir
/*enum EFirstRecoilDir
{
	E_Recolil_Random                                   = 0,
	E_Recolil_Left_Dir                                 = 1,
	E_Recolil_Right_Dir                                = 2,
	E_Recolil_MAX                                      = 3
};*/

// Enum CombatGame.GamePlayEvent_Kill.EKillTargetType
/*enum EKillTargetType
{
	EKillType_Player                                   = 0,
	EKillType_AIPawn                                   = 1,
	EKillType_Suicide                                  = 2,
	EKillType_MAX                                      = 3
};*/

// Enum CombatGame.ParticleModuleKillVolume.ParticleKillVolumeType
/*enum ParticleKillVolumeType
{
	ParticleKillVolumeType_None                        = 0,
	ParticleKillVolumeType_Height                      = 1,
	ParticleKillVolumeType_AABB                        = 2,
	ParticleKillVolumeType_MAX                         = 3
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class CombatGame.ActorFactoryCombatWeapAttachMeshActor
// 0x000C (0x0084 - 0x0078)
class UActorFactoryCombatWeapAttachMeshActor : public UActorFactorySkeletalMesh
{
public:
	struct FString                                     DefaultSkeletalMesh;                              		// 0x0078 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1491 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatWeapAttachMeshActor::pClassPointer = NULL;

// Class CombatGame.AIBeacon
// 0x0014 (0x02A8 - 0x0294)
class AAIBeacon : public ANavigationPoint
{
public:
	unsigned char                                      EnableAITypeIndex;                                		// 0x0294 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EnableTeamIndex;                                  		// 0x0295 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                EnableMaxClaim;                                   		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ACombatBotController* >              ClaimAIArray;                                     		// 0x029C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1492 ];

		return pClassPointer;
	};

	void RefreshClaim ( );
	void UnClaim ( class ACombatBotController* InAI );
	void Claim ( class ACombatBotController* InAI );
	bool IsUsable ( class ACombatBotController* InAI );
	int GetCurClaimNumber ( );
	bool IsVaildTeam ( class ACombatBotController* InAI );
	void Reset ( );
};

UClass* AAIBeacon::pClassPointer = NULL;

// Class CombatGame.AIDebugCameraHUD
// 0x0014 (0x0474 - 0x0460)
class AAIDebugCameraHUD : public ADebugCameraHUD
{
public:
	int                                                CrossHairLength;                                  		// 0x0460 (0x0004) [0x0000000000000000]              
	TArray< class ALadderVolume* >                     LadderVolumeArray;                                		// 0x0464 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bInit : 1;                                        		// 0x0470 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1493 ];

		return pClassPointer;
	};

	void eventPostRender ( );
	void DrawActorText ( struct FString inString, class AActor* inTargetActor, struct FVector inOverridePos, struct FColor InColor );
	void DrawGripHUD ( class UCanvas* InCanvas, float* YPos );
};

UClass* AAIDebugCameraHUD::pClassPointer = NULL;

// Class CombatGame.AISpawnPoint
// 0x0010 (0x02A4 - 0x0294)
class AAISpawnPoint : public ANavigationPoint
{
public:
	unsigned char                                      TeamIndex;                                        		// 0x0294 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      TeamColor[ 0x3 ];                                 		// 0x0298 (0x000C) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1494 ];

		return pClassPointer;
	};

};

UClass* AAISpawnPoint::pClassPointer = NULL;

// Class CombatGame.CBCheatManager
// 0x0094 (0x02A0 - 0x020C)
class ACBCheatManager : public AGripCheatManager
{
public:
	class UCombatGameTableDepot*                       TableDepot;                                       		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDSConnectionDelayInfo >            DSConnectionDelay;                                		// 0x0210 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	float                                              CameraRollSpeed;                                  		// 0x021C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CameraRollAcceleration;                           		// 0x0220 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CameraRollFriction;                               		// 0x0224 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CurrentCamRollAcceleration;                       		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentCamRollSpeed;                              		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FFontRenderInfo                             FontInfo;                                         		// 0x0230 (0x0028) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bShowMyPawnAnimNodeSeq : 1;                       		// 0x0258 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShowOtherPawnAnimNodeSeq : 1;                    		// 0x0258 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bShowDebugOtherPawn : 1;                          		// 0x0258 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bShowWeaponAnimNodeSeq : 1;                       		// 0x0258 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bShowWeapAttachAnimNodeSeq : 1;                   		// 0x0258 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bShowFirstZoomAnimNodeSeq : 1;                    		// 0x0258 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bShowPawnBuff : 1;                                		// 0x0258 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bDisplayClassSystemLog : 1;                       		// 0x0258 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bDebugSoundMode : 1;                              		// 0x0258 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bScreenShotMode : 1;                              		// 0x0258 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bSwitchObjectuse : 1;                             		// 0x0258 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bWeaponAsyncLoadedActor : 1;                      		// 0x0258 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bDrawArcAttackLine : 1;                           		// 0x0258 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	struct FName                                       PawnBoneName;                                     		// 0x025C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             CameraTypeList;                                   		// 0x0264 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      TestProjectileClass;                              		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TestProjectileRadius;                             		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TestProjectileHeight;                             		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      TestProjectileNum;                                		// 0x027C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      TestProjectileTeamNum;                            		// 0x027D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              TestProjectileDelay;                              		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     TestProjectileDestination;                        		// 0x0284 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UCombatStatUnitTest*                         StatUnitTest;                                     		// 0x0290 (0x0004) [0x0000000000000000]              
	TArray< int >                                      MatchroomPlayMapList;                             		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1495 ];

		return pClassPointer;
	};

	void SetServerMaxTickRate ( float NewValue );
	void ResetVoiceMeterEnergyValue ( );
	void SetVoiceMeterEnergyValue ( float val );
	void GetPCTeamNum ( );
	void VivoxSetParticipantAudioOutputDeviceVolumeForMe ( int targetUserID, int Volume );
	void VivoxSetParticipantMutedForMe ( int targetUserID, unsigned long muted );
	void VivoxCombineLogin ( );
	void VivoxSetAudioOutputDeviceMuted ( unsigned long bMute );
	void VivoxSetMasterAudioOutputDeviceVolume ( int NewVolume );
	void VivoxSetAudioInputDeviceMuted ( unsigned long bMute );
	void VivoxSetMasterAudioInputDeviceVolume ( int NewVolume );
	void VivoxTeamChannelLogin ( );
	void VivoxEchoChannelLogin ( );
	void VivoxNoChannelLogin ( );
	void VivoxSetPlayerName ( struct FString NewName );
	void VivoxConnect ( );
	void TrophyTurret1P ( );
	void Sentry1P ( );
	void SetOneFrameThreadLag ( unsigned long bSet );
	void ServerSetInvulnerable ( unsigned long bSet );
	void SetInvulnerable ( unsigned long bSet );
	void UnlockForceSpamGrade ( );
	void SetForceSpamGradeLevel ( int NewLevel );
	void UpdateWeaponForegroundFOV ( );
	void GetPing ( int MaxRegionID );
	void SetPing ( int Region_ID, int Ping );
	void SetImmersionCylcleTime ( float Time );
	void ClearAllSteamAcheivement ( );
	void ClearSteamAcheivement ( int Index );
	void SetSteamAcheivement ( int Index );
	void RequestSteamStats ( );
	void SetMouseAutoScale ( unsigned char CurPreset, unsigned long bSet );
	void ProjectileHackTest ( );
	void ProjectileHack ( unsigned long bFlag );
	void IsLocalPlayerTalking ( );
	void StopSpeechRecognition ( );
	void StartSpeechRecognition ( );
	void AddGearSet ( );
	void SetAdvancedColor ( int SelectIndex );
	void SetFPS ( int MaxFPS );
	void RandomBoxSMT ( struct FString RandomBoxCodeName, int SimulateCount );
	void ServerCombo ( int killcount );
	void Combo ( int killcount );
	void GetProfileValueIntByName ( struct FName SettingName );
	void SetProfileValueIntByName ( struct FName SettingName, int Value );
	void GetProfileValueFloatByName ( struct FName SettingName );
	void SetProfileValueFloatByName ( struct FName SettingName, float Value );
	void GetProfileValueStringByName ( struct FName SettingName );
	void SetProfileValueStringByName ( struct FName SettingName, struct FString Value );
	void ServerMissionActorGod ( unsigned long bGod );
	void MissionActorGod ( unsigned long bGod );
	void ServerMissionActorHealth ( int NewHealth );
	void TestItemREVISAL ( int prestindex );
	void MissionActorHealth ( int NewHealth );
	void NextAIWave ( );
	void ServerNextAIWave ( );
	void OnRequestComplete ( class UHttpRequestInterface* OriginalRequest, class UHttpResponseInterface* Response, unsigned long bDidSucceed );
	void TestHttpCombat ( unsigned long bSendParallelRequest );
	void KillPawns ( );
	void Loaded ( );
	void ViewClass ( class UClass* aClass );
	void ViewBot ( );
	void ViewActor ( struct FName ActorName );
	void ViewPlayer ( struct FString S );
	void ViewSelf ( unsigned long bQuiet );
	void KillAllPawns ( class UClass* aClass );
	void KillAll ( class UClass* aClass );
	void Summon ( struct FString ClassName );
	void SetSpeed ( float F );
	void SetGravity ( float F );
	void SetJumpZ ( float F );
	void ChangeSize ( float F );
	void Teleport ( );
	void KillViewedActor ( );
	void FreezeFrame ( float Delay );
	void ServerTotalKill ( unsigned char TeamIndex );
	void VCKill ( );
	void PMKill ( );
	void ClientSetCameraMode ( unsigned char InCameraMode );
	void ServerSetCameraMode ( unsigned char InCameraMode );
	void SetCameraMode ( unsigned char InCameraMode );
	void DisplayHit ( int Damage );
	void ForceLog ( struct FString TestMessage, unsigned long bScriptTrace );
	void PrevCameraMode ( );
	void NextCameraMode ( );
	int GetCurrentCameraType ( );
	void ServerScreenshotMode ( );
	void ClientScreenshotMode ( unsigned long bFlag );
	void ScreenshotMode ( );
	void ServerInfiniteAmmo ( unsigned long Infinity );
	void InfiniteAmmoInner ( unsigned long Infinity );
	void ClientInfiniteAmmo ( unsigned long Infinity );
	void InfiniteAmmo ( unsigned long Infinity );
	void ServerGhost ( );
	void Ghost ( );
	void ServerWalk ( );
	void Walk ( );
	void ServerFly ( );
	void Fly ( );
	void ServerGod ( );
	void God ( );
	void ServerSlomo ( float T );
	void Slomo ( float T );
	void BroadCastCheatMessage ( struct FString msg );
	void SetInputExpireTimer ( unsigned long bFlag );
	void RemoveSuppress ( struct FString SuppressName );
	void AddSuppress ( struct FString SuppressName );
	void DisplaySuppressList ( );
	void ClientAddRankExp ( int RankExp );
	void Server_AddRankExp ( int Value );
	void AddRankExp ( int Value );
	void ServerAddCR ( int NewInGameMoney );
	void AddCR ( int NewInGameMoney );
	void ServerSetRemainingTime ( );
	void SetRemainingTime ( );
	void ServerEndRound ( unsigned char TeamIndex );
	void EndRound ( unsigned char TeamIndex );
	void ServerEndGame ( unsigned char TeamIndex );
	void EndGame ( unsigned char TeamIndex );
	void ServerAddCRAndExp ( int IncCr, int IncExp );
	void AddCRAndExp ( int IncCr, int IncExp );
	void ServerBusterScore ( int TeamIndex, int Score );
	void PMBusterScore ( int Score );
	void VCBusterScore ( int Score );
	void ClearDebugLines ( );
	void TeenVersionTest ( );
	void SetGoreLevel ( int NewLevel );
	class UCombatGameTableDepot* GetTableDepot ( );
	void PostBeginPlay ( );
	void TestC4Defuse ( );
	void TestC4Planted ( );
	void ResetQuest ( unsigned char QuestType );
	void ResetQuestTime ( unsigned char QuestType, unsigned char ResetHour );
	void BoosterScheduleRegister ( int BoosterID );
	void RemoveAllPingInstance ( );
	void SetMatchroomPlayedMapSize ( int Count );
	void ClearMatchroomPlayedMapList ( );
	void SendMatchroomPlayedMapList ( );
	void AddMatchroomPlayedMapList ( struct FString MapCodeName );
	void TestCompetitiveMatchEnd ( unsigned long isPenalty );
	void SetSteamItemBuyAutoConfirm ( unsigned long flag );
	void BEStop ( );
	void BECommand ( struct FString Command );
	void RootDir ( );
	void SilentScreenFileName ( );
	void SetCameraRollSpeed ( float NewSpeed );
	void CookReferenceShaderCache ( );
	void SaveLocalShaderCaches ( unsigned long bCompressionForSize );
	void SetForceCPUSkinning ( unsigned long bForceActive );
	void RandomStreamTest ( int seed );
	void ResCheck ( );
	void ClearBoosterItem ( );
	void SetActiveBoosterItem ( int ItemID, unsigned long bActive );
	void RemoveBoosterItem ( int ItemID );
	void AddBoosterItem ( int ItemID );
	void QRReportSend ( );
	void SetUseQPC ( unsigned long bUse );
	void GetSecurePackageName ( struct FString* PackageName );
	void FlushAsyncLoading ( );
	void DebugAsyncLoading ( unsigned long bShow );
	void SetTitleMsg ( struct FString TitleMsg );
	void ShowSplineViewModeFlag ( unsigned long bShow );
	void SaveINI ( struct FString Filename );
	void IgnoreDropDetail ( unsigned long bIgnore );
	void ReloadCfgRunTime ( struct FName inClassName );
};

UClass* ACBCheatManager::pClassPointer = NULL;

// Class CombatGame.CBEmitter
// 0x0000 (0x01E0 - 0x01E0)
class ACBEmitter : public AEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1496 ];

		return pClassPointer;
	};

	void ForceNetRelevant ( );
	void SetLightEnvironment ( class ULightEnvironmentComponent* Light );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
};

UClass* ACBEmitter::pClassPointer = NULL;

// Class CombatGame.CBFamilyInfo
// 0x0120 (0x015C - 0x003C)
class UCBFamilyInfo : public UObject
{
public:
	struct FMeshPart                                   CharacterMesh;                                    		// 0x003C (0x0014) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PortraitIconPath;                                 		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USkeletalMesh*                               ArmMesh;                                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               PhysAsset;                                        		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               PhysAssetForDeath;                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      SoundGroupClass;                                  		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DefaultRadioVoiceClassName;                       		// 0x0078 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           RadioVoice_TargetModeName;                        		// 0x0084 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInstance* >                 BloodSplatterDecalMaterials;                      		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMaterialInstance* >                 BloodSplatterDecalMaterialFloors;                 		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMaterialInstance* >                 LowGoreBloodSplatterDecalMaterials;               		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMaterialInstance* >                 LowGoreBloodSplatterDecalMaterialFloors;          		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UParticleSystem*                             HeadBloodForFPPSCTemplate;                        		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BloodForFPMuzzleFlashPSCTemplate;                 		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             LowgoreHeadBloodloodForFPPSCTemplate;             		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             LowGoreBloodForFPMuzzleFlashPSCTemplate;          		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultMeshScale;                                 		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxHealthRate_Buff;                               		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAutoCureHealthModifier_Buff;                   		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthCureRate_Buff;                              		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddMainAmmo_Buff;                                 		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddSubAmmo_Buff;                                  		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddMainMagazineAmmo_Buff;                         		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddSubMagazineAmmo_Buff;                          		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxMainMagazineAmmo_Buff;                         		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSubMagazineAmmo_Buff;                          		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponReloadSpeedRate_Buff;                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponChangeRate_Buff;                            		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundCrouchSpeedRate_Buff;                       		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundWalkingSpeedRate_Buff;                      		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundRunSpeedRate_Buff;                          		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxGroundSpeed;                                   		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundAccelationRate_Buff;                        		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GunAttackRate_Buff;                               		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GunGuardRate_Buff;                                		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeAttackRate_Buff;                             		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeGuardRate_Buff;                              		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosiveAttackRate_Buff;                         		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosiveGuardRate_Buff;                          		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailedRadarDistance_Buff;                       		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadarRange_Buff;                                  		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShortenRespawnDelay_Buff;                         		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RefDropCodeName;                                  		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdditionalDamagedDecelerationRatio;               		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDamagedDecelerationRatio;                      		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FamilyInfoType;                                   		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                OverridePostProcessChain;                         		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OverrideLowPostProcessChain;                      		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsFemale : 1;                                    		// 0x0158 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCanPickupWeapon : 1;                             		// 0x0158 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCanSelectSkillClass : 1;                         		// 0x0158 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCanPickupSupplies : 1;                           		// 0x0158 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1497 ];

		return pClassPointer;
	};

	void GetCachedResources ( unsigned long bIsDedicatedServer, TArray< class UObject* >* ResourceList );
	class UParticleSystem* GetFPBloodEffect ( unsigned long bHead, unsigned long bGore );
	class UMaterialInstance* GetBloodMaterial ( unsigned long bOnFloor, unsigned long bGore );
	float GetMaxDamagedDecelerationRatio ( );
	float GetAdditionalDamagedDecelerationRatio ( );
	float GetRadarRange_Buff ( );
	float GetDetailedRadarDistance_Buff ( );
	float GetExplosiveGuardRate_Buff ( );
	float GetExplosiveAttackRate_Buff ( );
	float GetMeleeGuardRate_Buff ( );
	float GetMeleeAttackRate_Buff ( );
	float GetGunGuardRate_Buff ( );
	float GetGunAttackRate_Buff ( );
	float GetGroundAccelationRate_Buff ( );
	float GetMaxGroundSpeed ( );
	float GetGroundRunSpeedRate_Buff ( );
	float GetGroundFPSpeedRate_Buff ( );
	float GetGroundCrouchSpeedRate_Buff ( );
	float GetWeaponChangeRate_Buff ( );
	float GetWeaponReloadSpeedRate_Buff ( );
	float GetMaxSubMagazineAmmo_Buff ( );
	float GetMaxMainMagazineAmmo_Buff ( );
	float GetAddSubMagazineAmmo_Buff ( );
	float GetAddMainMagazineAmmo_Buff ( );
	float GetAddSubAmmo_Buff ( );
	float GetAddMainAmmo_Buff ( );
	float GetHealthCureRate_Buff ( );
	float GetMaxAutoCureHealthModifier_Buff ( );
	float GetMaxHealthRate_Buff ( );
	int GetOverridePostProcessChain ( );
	struct FName GetFamilyInfoType ( );
	bool CanPickupSupplies ( );
	bool CanSelectSkillClass ( );
	bool CanPickupWeapon ( );
	class USkeletalMesh* GetFirstPersonArms ( );
};

UClass* UCBFamilyInfo::pClassPointer = NULL;

// Class CombatGame.CBInventoryManager
// 0x0008 (0x01F8 - 0x01F0)
class ACBInventoryManager : public AInventoryManager
{
public:
	unsigned long                                      bInfiniteAmmo : 1;                                		// 0x01F0 (0x0004) [0x0000000000000000] [0x00000001] 
	class ACombatWeapon*                               PreviousWeapon;                                   		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1498 ];

		return pClassPointer;
	};

	void SetBuff ( class ACombatPawn* TargetPawn );
	bool ReleaseUse ( );
	bool Use ( );
	void NotifyAllWeaponAmmoChanged ( );
	class ACombatWeapon* GetSkillRelatedWeaponsByID ( int SkillGroupID );
	void RemoveSkillRelatedWeaponsByID ( int SkillGroupID );
	void ClearAllSkillRelatedWeapons ( );
	class ACombatWeapon* FindWeaponByGroup ( unsigned char Group );
	class ACombatWeapon* FindPickupableWeaponByGroup ( unsigned char Group );
	class AWeapon* GetPendingWeapon ( );
	bool GetWeaponRefList ( unsigned long bOnlyGun, TArray< class UCombatDataTableRefItem* >* refList, TArray< unsigned char >* weaponGroupList );
	float GetWeaponRatingFor ( class AWeapon* W );
	void SwitchToPreviousWeapon ( );
	void ClientSwitchToPreviousWeapon ( );
	void SwapInventory ( class AInventory* ItemToRemove, class AInventory* ItemToAdd );
	void RemoveFromInventory ( class AInventory* ItemToRemove, unsigned long bIngoreWeaponChange );
	void DiscardInventory ( class AController* Killer, unsigned long bPreventDropOnDeath );
	void eventSetPreviousWeapon ( class ACombatWeapon* InPreviousWeapon );
	void SetInventoryInstigator ( class AInventory* NewItem );
	void ClientDiscardInventory ( unsigned long bPreventDropOnDeath );
	void SetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void ClientSwapWeapon ( class AInventory* ItemToRemove, class AWeapon* DesiredWeapon );
	void SwitchToBestWeapon ( unsigned long bForceADifferentWeapon );
	void ReselectCurrentWeapon ( class AWeapon* DesiredWeapon );
	void NextWeapon ( );
	void PrevWeapon ( );
	void AdjustWeapon ( int NewOffset );
	class AInventory* CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate );
	class AWeapon* SwitchWeapon ( unsigned char NewGroup );
	int WeaponSlotSort ( class ACombatWeapon* A, class ACombatWeapon* B );
	void GetWeaponList ( unsigned long bFilter, int GroupFilter, unsigned long bNoEmpty, unsigned long bNoGrenade, TArray< class ACombatWeapon* >* WeaponList );
	void OwnerEvent ( struct FName EventName );
};

UClass* ACBInventoryManager::pClassPointer = NULL;

// Class CombatGame.CBPawnSoundGroup
// 0x0764 (0x07A0 - 0x003C)
class UCBPawnSoundGroup : public UObject
{
public:
	class USoundCue*                                   DyingSound;                                       		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   HealStartSound;                                   		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   HealEndSound;                                     		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FFootstepSoundInfo >                FootstepSounds;                                   		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   DefaultFootstepSound;                             		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DefaultCrouchFootstepSound;                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FFootstepSoundInfo >                JumpingSounds;                                    		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   DefaultJumpingSound;                              		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FFootstepSoundInfo >                LandingSounds;                                    		// 0x006C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   DefaultLandingSound;                              		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FallingDamageLandSound;                           		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FTextWithVoice                              ReloadingSound;                                   		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FTextWithVoice                              SeeOurTeamDeathSound;                             		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FTextWithVoice                              SeeEnemyDeathSound;                               		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FTextWithVoice                              ThrowGreSound;                                    		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FTextWithVoice                              GrenadeWarningSound;                              		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FTextWithVoice                              SpecialGreSound;                                  		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   KillVoiceSound;                                   		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   OutOfAmmoVoice;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   AutoHealVoice;                                    		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SpawnVoice;                                       		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FEffectTypeHitSound                         EffectTypeHitSounds[ 0xB ];                       		// 0x00C0 (0x06E0) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1499 ];

		return pClassPointer;
	};

	void PlayKillVoice ( class APawn* P );
	void PlaySpawnVoice ( class APawn* P );
	void PlayAutoHealVoice ( class APawn* P );
	void PlayOutOfAmmoVoice ( class APawn* P );
	int PlayGrenadeWarningSound ( class APawn* P );
	int PlayThrowSpecialGreSound ( class APawn* P );
	bool HasGrenadeWarningSound ( );
	int PlayThrowGreSound ( class APawn* P );
	bool HasThrowGreSound ( );
	int PlaySeeEnemyDeathSound ( class APawn* P );
	bool HasSeeEnemyDeathSound ( );
	int PlaySeeOurTeamDeathSound ( class APawn* P );
	bool HasSeeOurTeamDeathSound ( );
	int PlayReloadingSound ( class APawn* P );
	bool HasReloadingSound ( );
	void PlayHealEndSound ( class APawn* P );
	void PlayHealStartSound ( class APawn* P );
	struct FHitSound GetHitSound ( unsigned char HitBodyType, class UClass* DamageType, unsigned long LastHitEffect );
	void PlayHitSound ( class ACombatPawn* P, unsigned char TempletType, unsigned long LastHit, unsigned long bIsFirstPerson, struct FCBTakeHitInfo* LastTakeHitInfo );
	void PlayDyingSound ( class APawn* P );
	class USoundCue* GetLandSound ( struct FName MaterialType );
	class USoundCue* GetJumpSound ( struct FName MaterialType );
	class USoundCue* GetFootstepSound ( int FootDown, struct FName MaterialType, unsigned long bCrouched );
	void PlayFallingDamageLandSound ( class APawn* P );
	void PlayFootStepSound ( class APawn* P, class UCBPhysicalMaterialProperty* PM, int FootDown, float fVolumeMultiplier );
	void PlayLandSound ( class ACombatPawn* CP );
	void PlayJumpSound ( class ACombatPawn* CP );
};

UClass* UCBPawnSoundGroup::pClassPointer = NULL;

// Class CombatGame.CBPhysicalMaterialProperty
// 0x005C (0x0098 - 0x003C)
class UCBPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	struct FName                                       MaterialType;                                     		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TempletType;                                      		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PenetrationType;                                  		// 0x0045 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMaterialImpactEffect >             ImpactEffects;                                    		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMaterialImpactEffect >             LowGoreImpactEffects;                             		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   FootStepSound;                                    		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   JumpingSound;                                     		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   LandedSound;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FootStepParticleTemplate;                         		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HitPriority;                                      		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointLightInfo                             ImpactPointLightInfo;                             		// 0x0074 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FExplosionDatum >                   ExplosionData;                                    		// 0x008C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1500 ];

		return pClassPointer;
	};

	void DetermineExplosionResource ( class UClass* MyCombatProjectile, class USoundCue** ExplosionSound, class UParticleSystem** ExplosionPS, struct FDecalData* ExplosionDecalData, struct FPointLightInfo* ExplosionPointLightInfo );
	struct FMaterialImpactEffect GetEffectByGoreLevel ( unsigned char EType, unsigned long bGore );
	struct FMaterialImpactEffect GetMaterialImpactEffect ( class UClass* HitDamageType, unsigned long LastHitEffect, unsigned long bGore );
	struct FMaterialImpactEffect GetImpactEffect ( class UPhysicalMaterial* HitMaterial, class UClass* HitDamageType, struct FPointLightInfo* ImpactLightInfo );
	unsigned char GetPentrationType ( );
};

UClass* UCBPhysicalMaterialProperty::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_ETC
// 0x016C (0x01D4 - 0x0068)
class UCBUIDataStore_ETC : public UUIDataStore_Settings
{
public:
	unsigned char                                      InputExpireGoalScene;                             		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           ModeCodenameSetForSingleRoundUI;                  		// 0x006C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           ModeCodenameSetForMultiRoundUI;                   		// 0x0078 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     LoadingUI_Title;                                  		// 0x0084 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     LoadingUI_DefaultBGImage;                         		// 0x0090 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     LoadingUI_DefaultBGImagePath;                     		// 0x009C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     LoadingUI_DefaultMinimapImage;                    		// 0x00A8 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     LoadingUI_DefaultMinimapImagePath;                		// 0x00B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FLoadingUIInfo                              LoadingUIInfos;                                   		// 0x00C0 (0x010C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                ClanRankGradePoint;                               		// 0x01CC (0x0004) [0x0000000000000000]              
	unsigned long                                      IntrudeState : 1;                                 		// 0x01D0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1501 ];

		return pClassPointer;
	};

	struct FString GetModeTipMessage ( struct FString ModeCodeName );
	struct FString GetLoadingUIMimimapImagePath ( struct FString ModeCodeName, struct FString MapCodeName );
	struct FString GetLoadingUIBGImagePath ( int RefMapIndex );
	class UCombatDataTableRefCallingCard* GetRefCallingCardTable ( int CallingCardID );
	class UCombatDataTableRefModeMap* GetRefModeMapTable ( struct FString ModeCodeName, struct FString MapCodeName );
	class UCombatDataTableRefMap* GetRefMapTable ( int Index );
	class UCombatDataTableRefMode* GetRefModeTable ( int Index );
	void SetIntrudeState ( unsigned long Intrude );
	void eventSetLoadingUILabels ( );
	void eventClearLoadingUILabels ( );
	void SetLoadingCompUserData ( struct FMatchroomPlayerStruct CompUserInfo, struct FLoadingCompUserData* CompUserData );
	void InitClanRankGradePoint ( );
	void InitLoadingUIDatas ( );
	unsigned char GetRoundCountTypeByModeIndex ( struct FString wantedModeCodename );
};

UClass* UCBUIDataStore_ETC::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_HUD
// 0x015D (0x01C5 - 0x0068)
class UCBUIDataStore_HUD : public UUIDataStore_Settings
{
public:
	struct FCachedWeaponInfo_BaseInfo                  myCachedWeaponInfo_BaseInfo;                      		// 0x0068 (0x001C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FCachedWeaponInfo_AmmoCntInfo               myCachedWeaponInfo_AmmoCntInfo;                   		// 0x0084 (0x001C) [0x0000000000000000]              
	struct FCachedWeaponInfo_GrenadeInfo               myCachedWeaponInfo_GrenadeInfo;                   		// 0x00A0 (0x0014) [0x0000000000000000]              
	TArray< struct FCachedPlayerInfo >                 CachedPlayerInfoList;                             		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FCachedPlayerInfo                           MyInfo;                                           		// 0x00C0 (0x00B4) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bNeedUpdateMyInfo : 1;                            		// 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNeedUpdateScoreboard_VC : 1;                     		// 0x0174 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedUpdateScoreboard_PM : 1;                     		// 0x0174 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNeedUpdataScoreboard_FPS : 1;                    		// 0x0174 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShowLog : 1;                                     		// 0x0174 (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                LastFPS;                                          		// 0x0178 (0x0004) [0x0000000000000000]              
	int                                                LastAIPlayTime;                                   		// 0x017C (0x0004) [0x0000000000000000]              
	struct FKillerInfoStruct                           KillerInfoForUI;                                  		// 0x0180 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCachedChampionshipPlayerInfoStruct > CachedChampionshipPlayerInfoList;                 		// 0x01B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FChampionshipObserverKeyState               ObserverKeyState;                                 		// 0x01BC (0x0004) [0x0000000000000000]              
	struct FSuicideStateStruct                         SuicideStateForUI;                                		// 0x01C0 (0x0004) [0x0000000000000000]              
	unsigned char                                      RoundWinType;                                     		// 0x01C4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1502 ];

		return pClassPointer;
	};

	void PrintCachedPlayerInfoList ( );
	unsigned char GetRoundWinType ( );
	void SetRoundWinType ( unsigned char winType );
	void InitRoundWinType ( );
	void SetSuicideState ( );
	void SaveKillerInfo ( struct FString KillerName, int KillCount_Killer, int KillCount_Me, int killTypeStrID, int KillCauserStrID, int KillCauserIconImageID, struct FString KillCauserGradeImagePath );
	void InitObserverKeyState ( );
	void InitDeathRecord ( );
	void SortScoreboard ( );
	void InitScoreboardInfo ( );
	void InitWeaponInfo ( );
	void InitChampionshipPlayerInfoList ( );
	void InitAllData ( );
	bool NotifyGameSessionEnded ( );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
};

UClass* UCBUIDataStore_HUD::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_Mission
// 0x0090 (0x00F8 - 0x0068)
class UCBUIDataStore_Mission : public UUIDataStore_Settings
{
public:
	TArray< struct FUIMissionStruct >                  MissionList;                                      		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUIModeGroupStruct >                ModeGroupList;                                    		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUIModeStruct >                     ModeList;                                         		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUIMapStruct >                      MapList;                                          		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUIModeGroupBindStruct >            ModeGroupBindList;                                		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUIModeMapStruct >                  ModeMapList;                                      		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      MissionServiceOffList;                            		// 0x00B0 (0x000C) [0x0000000000500002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      MissionModeServiceOffList;                        		// 0x00BC (0x000C) [0x0000000000500002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ModeServiceOffList;                               		// 0x00C8 (0x000C) [0x0000000000500002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ModeMapServiceOffList;                            		// 0x00D4 (0x000C) [0x0000000000500002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      MapServiceOffList;                                		// 0x00E0 (0x000C) [0x0000000000500002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ModeGroupServiceOffList;                          		// 0x00EC (0x000C) [0x0000000000500002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1503 ];

		return pClassPointer;
	};

	void GetMakeroomnumberData ( int OpenChannel, int* out_missionIdx, int* out_modeGroupIdx, int* out_modeIdx, int* out_mapIdx );
	struct FString GetDefaultGoalString ( int RefModeID );
	int GetStarableMinUser ( int modeRefIndex );
	void GetAllGameOptionDataProviders ( class UClass* ProviderClass, TArray< class UCombatUIDataProvider_MenuOption* >* Providers );
	unsigned char eventGetDefaultOptionIndex ( int missionRefIdx, int modeRefIdx, int mapRefIdx, unsigned char OptionType );
	int eventGetClanRequiredMember ( int modeRefIndex );
	bool IsChangeabelGameOption ( int modeRefIdx, unsigned char OptionType );
	unsigned char eventGetModeOptionValue_MaxUser ( int modeGroupRefIdx, int modeRefIdx, int OptionIndex );
	bool GetBetaByModeGroupBindMode ( int modeGroupRefIdx, int modeRefIdx );
	bool GetBetaByModeMap ( int modeRefIdx, int mapRefIdx );
	struct FString GetMapNameBy ( int mapRefIdx );
	bool GetMapListBy ( int modeRefIdx, TArray< struct FUIMapStruct >* out_List );
	struct FString GetModeGroupNameBy ( int modeGroupRefIdx );
	struct FString GetModeNameBy ( int modeRefIdx );
	bool GetModeBy ( int modeRefIdx, struct FUIModeStruct* out_modeInfo );
	struct FString GetModeCodenameBy ( int modeRefIdx );
	bool GetMapListByModeList ( int modeGroupIndex, TArray< struct FUIModeStruct >* mode_list, TArray< struct FUIMapStruct >* out_List );
	bool GetModeListByModeGroup ( int modeGroupRefIdx, TArray< struct FUIModeStruct >* out_List );
	int GetHudType ( int modeRefIdx );
	int GetModeUIType ( int modeRefIdx );
	bool eventIsAiMatchingSystem ( int modeRefIdx );
	bool eventIsAutoMatchingSystem ( int modeGroupRefIdx );
	bool GetModeGroupListByMission ( int missionRefIdx, TArray< struct FUIModeGroupStruct >* out_List );
	void ClearUIModeStruct ( struct FUIModeStruct* cout_modeStruct );
	void SetUIModeOptionData ( class UCombatGameTableDepot** const_out_tableDepot, class UCombatDataTableRefMode** const_out_RefMode, struct FUIModeStruct* out_ModeStruct );
	bool InitModeGroupList ( );
	bool InitModeMapList ( );
	bool InitModeGroupBindList ( );
	bool InitMapList ( );
	bool InitModeList ( );
	void InitMissionList ( );
	void InitUIGameInfo ( );
};

UClass* UCBUIDataStore_Mission::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_PendingDialogMessage
// 0x000C (0x0074 - 0x0068)
class UCBUIDataStore_PendingDialogMessage : public UUIDataStore_Settings
{
public:
	TArray< struct FDialogMessage >                    DialogMessageList;                                		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1504 ];

		return pClassPointer;
	};

};

UClass* UCBUIDataStore_PendingDialogMessage::pClassPointer = NULL;

// Class CombatGame.CCSActorFactory
// 0x0054 (0x00BC - 0x0068)
class UCCSActorFactory : public UActorFactory
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCCSBTTree*                                  BehaviorTree;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PawnClass;                                        		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PawnName;                                         		// 0x0074 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FCCSSystemConfigData                        Config;                                           		// 0x0080 (0x0028) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bGiveDefaultInventory : 1;                        		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UClass* >                            InventoryList;                                    		// 0x00AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                TeamIndex;                                        		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1505 ];

		return pClassPointer;
	};

};

UClass* UCCSActorFactory::pClassPointer = NULL;

// Class CombatGame.ActorFactoryTutorialAI
// 0x0004 (0x00C0 - 0x00BC)
class UActorFactoryTutorialAI : public UCCSActorFactory
{
public:
	int                                                PawnNameLocalizationID;                           		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1506 ];

		return pClassPointer;
	};

	void eventSetPawnNameLocalization ( );
};

UClass* UActorFactoryTutorialAI::pClassPointer = NULL;

// Class CombatGame.CombatCCSActorFactory
// 0x0010 (0x00CC - 0x00BC)
class UCombatCCSActorFactory : public UCCSActorFactory
{
public:
	int                                                AISpreadMin;                                      		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AISpreadRandom;                                   		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Health;                                           		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AIGroundSpeed;                                    		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1507 ];

		return pClassPointer;
	};

};

UClass* UCombatCCSActorFactory::pClassPointer = NULL;

// Class CombatGame.CCSAFEnterCover
// 0x0008 (0x0048 - 0x0040)
class UCCSAFEnterCover : public UGripAFActionHandle
{
public:
	class ACoverLink*                                  CoverLink;                                        		// 0x0040 (0x0004) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1508 ];

		return pClassPointer;
	};

};

UClass* UCCSAFEnterCover::pClassPointer = NULL;

// Class CombatGame.CCSAFExitCover
// 0x0000 (0x0040 - 0x0040)
class UCCSAFExitCover : public UGripAFActionHandle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1509 ];

		return pClassPointer;
	};

};

UClass* UCCSAFExitCover::pClassPointer = NULL;

// Class CombatGame.CCSAFFireBurst
// 0x0004 (0x0044 - 0x0040)
class UCCSAFFireBurst : public UGripAFActionHandle
{
public:
	class AActor*                                      Target;                                           		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1510 ];

		return pClassPointer;
	};

};

UClass* UCCSAFFireBurst::pClassPointer = NULL;

// Class CombatGame.CCSAFGetInCover
// 0x0008 (0x0048 - 0x0040)
class UCCSAFGetInCover : public UGripAFActionHandle
{
public:
	class ACoverLink*                                  CoverLink;                                        		// 0x0040 (0x0004) [0x0000000000000000]              
	class APawn*                                       Target;                                           		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1511 ];

		return pClassPointer;
	};

};

UClass* UCCSAFGetInCover::pClassPointer = NULL;

// Class CombatGame.CCSAFGetOutCover
// 0x0008 (0x0048 - 0x0040)
class UCCSAFGetOutCover : public UGripAFActionHandle
{
public:
	class ACoverLink*                                  CoverLink;                                        		// 0x0040 (0x0004) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1512 ];

		return pClassPointer;
	};

};

UClass* UCCSAFGetOutCover::pClassPointer = NULL;

// Class CombatGame.CCSAFIdle
// 0x0001 (0x0041 - 0x0040)
class UCCSAFIdle : public UGripAFActionHandle
{
public:
	unsigned char                                      Alertness;                                        		// 0x0040 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1513 ];

		return pClassPointer;
	};

};

UClass* UCCSAFIdle::pClassPointer = NULL;

// Class CombatGame.CCSAFMoveTo
// 0x000E (0x004E - 0x0040)
class UCCSAFMoveTo : public UGripAFActionHandle
{
public:
	struct FVector                                     Target;                                           		// 0x0040 (0x000C) [0x0000000000000000]              
	unsigned char                                      MovementType;                                     		// 0x004C (0x0001) [0x0000000000000000]              
	unsigned char                                      Alertness;                                        		// 0x004D (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1514 ];

		return pClassPointer;
	};

};

UClass* UCCSAFMoveTo::pClassPointer = NULL;

// Class CombatGame.CCSAFMoveToActor
// 0x0006 (0x0046 - 0x0040)
class UCCSAFMoveToActor : public UGripAFActionHandle
{
public:
	class AActor*                                      Target;                                           		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned char                                      MovementType;                                     		// 0x0044 (0x0001) [0x0000000000000000]              
	unsigned char                                      Alertness;                                        		// 0x0045 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1515 ];

		return pClassPointer;
	};

};

UClass* UCCSAFMoveToActor::pClassPointer = NULL;

// Class CombatGame.CCSAFOrientToward
// 0x000D (0x004D - 0x0040)
class UCCSAFOrientToward : public UGripAFActionHandle
{
public:
	struct FVector                                     Target;                                           		// 0x0040 (0x000C) [0x0000000000000000]              
	unsigned char                                      Alertness;                                        		// 0x004C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1516 ];

		return pClassPointer;
	};

};

UClass* UCCSAFOrientToward::pClassPointer = NULL;

// Class CombatGame.CCSATAnimNodeSlot
// 0x0000 (0x00E8 - 0x00E8)
class UCCSATAnimNodeSlot : public UAnimNodeSlot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1517 ];

		return pClassPointer;
	};

	void ActivateChild ( int ChildIdx, float BlendTime );
	float eventActivateInput ( struct FName InputName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, float StartTime );
};

UClass* UCCSATAnimNodeSlot::pClassPointer = NULL;

// Class CombatGame.CCSATBlendListBase
// 0x0004 (0x00E8 - 0x00E4)
class UCCSATBlendListBase : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1518 ];

		return pClassPointer;
	};

};

UClass* UCCSATBlendListBase::pClassPointer = NULL;

// Class CombatGame.USSATBlendByAlertness
// 0x0000 (0x00E8 - 0x00E8)
class UUSSATBlendByAlertness : public UCCSATBlendListBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1519 ];

		return pClassPointer;
	};

};

UClass* UUSSATBlendByAlertness::pClassPointer = NULL;

// Class CombatGame.USSATBlendByCover
// 0x0000 (0x00E8 - 0x00E8)
class UUSSATBlendByCover : public UCCSATBlendListBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1520 ];

		return pClassPointer;
	};

};

UClass* UUSSATBlendByCover::pClassPointer = NULL;

// Class CombatGame.USSATBlendByCoverPose
// 0x0000 (0x00E8 - 0x00E8)
class UUSSATBlendByCoverPose : public UCCSATBlendListBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1521 ];

		return pClassPointer;
	};

};

UClass* UUSSATBlendByCoverPose::pClassPointer = NULL;

// Class CombatGame.USSATBlendByMove
// 0x0000 (0x00E8 - 0x00E8)
class UUSSATBlendByMove : public UCCSATBlendListBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1522 ];

		return pClassPointer;
	};

};

UClass* UUSSATBlendByMove::pClassPointer = NULL;

// Class CombatGame.USSATBlendByPosture
// 0x0000 (0x00E8 - 0x00E8)
class UUSSATBlendByPosture : public UCCSATBlendListBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1523 ];

		return pClassPointer;
	};

};

UClass* UUSSATBlendByPosture::pClassPointer = NULL;

// Class CombatGame.CCSBlackboard
// 0x0000 (0x0040 - 0x0040)
class UCCSBlackboard : public UGripBlackboard
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1524 ];

		return pClassPointer;
	};

	void FlagTargetsAsUsed ( );
	void FlagCoversAsUsed ( );
	void FlagHealthAsUsed ( );
	struct FCCSTargetData GetClosestMissionActor ( );
	struct FCCSTargetData GetClosestPlayer ( );
	struct FCCSTargetData GetClosestVisibleEnemy ( );
	struct FCCSTargetData GetClosestEnemy ( );
	void ClearMoveCommand ( );
	struct FCCSMoveCmdData GetMoveCommand ( );
	void GetTargets ( TArray< struct FCCSTargetData >* Targets );
	struct FCCSTargetData GetCurrentTarget ( );
	void GetCovers ( TArray< struct FCCSCoverData >* Covers );
	void SetHealth ( int Health );
	int GetHealth ( );
	class AActor* GetCurTargetActor ( class ACombatBotController* inBot, unsigned char inAITarget );
};

UClass* UCCSBlackboard::pClassPointer = NULL;

// Class CombatGame.CCSBTEnemyAware
// 0x0000 (0x008C - 0x008C)
class UCCSBTEnemyAware : public UGripBTBooleanCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1525 ];

		return pClassPointer;
	};

};

UClass* UCCSBTEnemyAware::pClassPointer = NULL;

// Class CombatGame.CCSBTEnemyClosestRange
// 0x0000 (0x0094 - 0x0094)
class UCCSBTEnemyClosestRange : public UGripBTNumericCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1526 ];

		return pClassPointer;
	};

};

UClass* UCCSBTEnemyClosestRange::pClassPointer = NULL;

// Class CombatGame.CCSBTEnemyLowestLKPAge
// 0x0000 (0x0094 - 0x0094)
class UCCSBTEnemyLowestLKPAge : public UGripBTFloatCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1527 ];

		return pClassPointer;
	};

};

UClass* UCCSBTEnemyLowestLKPAge::pClassPointer = NULL;

// Class CombatGame.CCSBTIdle
// 0x0001 (0x0089 - 0x0088)
class UCCSBTIdle : public UGripBTNode
{
public:
	unsigned char                                      Alertness;                                        		// 0x0088 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1528 ];

		return pClassPointer;
	};

};

UClass* UCCSBTIdle::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveTo
// 0x0007 (0x008F - 0x0088)
class UCCSBTMoveTo : public UGripBTNode
{
public:
	unsigned long                                      DummyVarToAvoidUnrealScriptCompilerErrorWhenDeclaringAnEnumVarAsFirstVariable : 1;		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      Speed;                                            		// 0x008C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Alertness;                                        		// 0x008D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MovementType;                                     		// 0x008E (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1529 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveTo::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveIntoCover
// 0x0001 (0x0090 - 0x008F)
class UCCSBTMoveIntoCover : public UCCSBTMoveTo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1530 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveIntoCover::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveIntoBestCover
// 0x0008 (0x0098 - 0x0090)
class UCCSBTMoveIntoBestCover : public UCCSBTMoveIntoCover
{
public:
	float                                              IdealShootingDistance;                            		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ExcludeCurrentCover : 1;                          		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1531 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveIntoBestCover::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveIntoClosestCover
// 0x0000 (0x0090 - 0x0090)
class UCCSBTMoveIntoClosestCover : public UCCSBTMoveIntoCover
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1532 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveIntoClosestCover::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveIntoInitialCover
// 0x0000 (0x0090 - 0x0090)
class UCCSBTMoveIntoInitialCover : public UCCSBTMoveIntoCover
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1533 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveIntoInitialCover::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveToActor
// 0x0001 (0x0090 - 0x008F)
class UCCSBTMoveToActor : public UCCSBTMoveTo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1534 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveToActor::pClassPointer = NULL;

// Class CombatGame.CCSBTMoveToTarget
// 0x0001 (0x0090 - 0x008F)
class UCCSBTMoveToTarget : public UCCSBTMoveTo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1535 ];

		return pClassPointer;
	};

};

UClass* UCCSBTMoveToTarget::pClassPointer = NULL;

// Class CombatGame.CCSBTSearch
// 0x0001 (0x0090 - 0x008F)
class UCCSBTSearch : public UCCSBTMoveTo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1536 ];

		return pClassPointer;
	};

};

UClass* UCCSBTSearch::pClassPointer = NULL;

// Class CombatGame.CCSBTOrientTowardTarget
// 0x0001 (0x0089 - 0x0088)
class UCCSBTOrientTowardTarget : public UGripBTNode
{
public:
	unsigned char                                      Alertness;                                        		// 0x0088 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1537 ];

		return pClassPointer;
	};

};

UClass* UCCSBTOrientTowardTarget::pClassPointer = NULL;

// Class CombatGame.CCSBTScriptBehavior
// 0x0004 (0x0098 - 0x0094)
class UCCSBTScriptBehavior : public UGripBTScriptBehavior
{
public:
	class ACCSController*                              Controller;                                       		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1538 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UCCSBTScriptBehavior::pClassPointer = NULL;

// Class CombatGame.CCSBTScriptCover
// 0x0035 (0x00CD - 0x0098)
class UCCSBTScriptCover : public UCCSBTScriptBehavior
{
public:
	class UGripAFActionHandle*                         CurrHandle;                                       		// 0x0098 (0x0004) [0x0000000000000000]              
	class UCCSAFEnterCover*                            EnterHandle;                                      		// 0x009C (0x0004) [0x0000000000000000]              
	class UCCSAFGetOutCover*                           GetOutHandle;                                     		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UCCSAFFireBurst*                             FireHandle;                                       		// 0x00A4 (0x0004) [0x0000000000000000]              
	class UCCSAFExitCover*                             ExitHandle;                                       		// 0x00A8 (0x0004) [0x0000000000000000]              
	struct FCCSCoverData                               Cover;                                            		// 0x00AC (0x0020) [0x0000000000000000]              
	unsigned char                                      CoverState;                                       		// 0x00CC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1539 ];

		return pClassPointer;
	};

	struct FCCSCoverData FindClosestValidCover ( class UGripBlackboard* BB );
	void ExecutePost ( class UGripBTInterface* BTInterface );
	unsigned char Execute ( class UGripBTInterface* BTInterface, unsigned long PushToFinish );
	bool ExecutePre ( class UGripBTInterface* BTInterface );
	void FlagUsedBBMembers ( class UGripBlackboard* Blackboard );
};

UClass* UCCSBTScriptCover::pClassPointer = NULL;

// Class CombatGame.CombatAIActionNodeBase
// 0x0010 (0x00A8 - 0x0098)
class UCombatAIActionNodeBase : public UCCSBTScriptBehavior
{
public:
	class UClass*                                      AIActionClass;                                    		// 0x0098 (0x0004) [0x0000000000000000]              
	class ACombatBotController*                        Bot;                                              		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatAIActionBase*                         AIAction;                                         		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCCSBlackboard*                              Blackboard;                                       		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1540 ];

		return pClassPointer;
	};

	void ExecutePost ( class UGripBTInterface* BTInterface );
	unsigned char Execute ( class UGripBTInterface* BTInterface, unsigned long PushToFinish );
	bool ExecutePre ( class UGripBTInterface* BTInterface );
	void Initialize ( );
	void SetGripDirty ( );
};

UClass* UCombatAIActionNodeBase::pClassPointer = NULL;

// Class CombatGame.CombatAIActionNode_MoveToward
// 0x0004 (0x00AC - 0x00A8)
class UCombatAIActionNode_MoveToward : public UCombatAIActionNodeBase
{
public:
	unsigned long                                      bIsWalking : 1;                                   		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1541 ];

		return pClassPointer;
	};

	class AActor* GetGoal ( );
};

UClass* UCombatAIActionNode_MoveToward::pClassPointer = NULL;

// Class CombatGame.CombatAIActionNode_Roamming
// 0x0008 (0x00B0 - 0x00A8)
class UCombatAIActionNode_Roamming : public UCombatAIActionNodeBase
{
public:
	unsigned long                                      bIsWalking : 1;                                   		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              MaxPathLength;                                    		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1542 ];

		return pClassPointer;
	};

};

UClass* UCombatAIActionNode_Roamming::pClassPointer = NULL;

// Class CombatGame.CombatAIActionNode_SelectTarget
// 0x001C (0x00C4 - 0x00A8)
class UCombatAIActionNode_SelectTarget : public UCombatAIActionNodeBase
{
public:
	float                                              VisibleWeight;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceWeight;                                   		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OrientWeight;                                     		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RecentlyDamagedWeight;                            		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSClassAgroScore >                  ClassAgroScores;                                  		// 0x00B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1543 ];

		return pClassPointer;
	};

	bool ExecutePre ( class UGripBTInterface* BTInterface );
	void Initialize ( );
};

UClass* UCombatAIActionNode_SelectTarget::pClassPointer = NULL;

// Class CombatGame.GripActionNode_MoveRightAndLeft
// 0x0008 (0x00B0 - 0x00A8)
class UGripActionNode_MoveRightAndLeft : public UCombatAIActionNodeBase
{
public:
	unsigned long                                      bIsWalking : 1;                                   		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              DirChangeTime;                                    		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1544 ];

		return pClassPointer;
	};

	struct FString eventGetNodeTitle ( );
};

UClass* UGripActionNode_MoveRightAndLeft::pClassPointer = NULL;

// Class CombatGame.GripActionNode_MoveToward
// 0x000C (0x00B4 - 0x00A8)
class UGripActionNode_MoveToward : public UCombatAIActionNodeBase
{
public:
	unsigned char                                      DestinationType;                                  		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsWalking : 1;                                   		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              RePathFindChangeDist;                             		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1545 ];

		return pClassPointer;
	};

	struct FString eventGetNodeTitle ( );
};

UClass* UGripActionNode_MoveToward::pClassPointer = NULL;

// Class CombatGame.GripActionNode_SelectEnemy
// 0x001C (0x00C4 - 0x00A8)
class UGripActionNode_SelectEnemy : public UCombatAIActionNodeBase
{
public:
	unsigned char                                      AITargetSelectType;                               		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDistanceCheck : 1;                               		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bVisibleCheck : 1;                                		// 0x00AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bReachableCheck : 1;                              		// 0x00AC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FSDistanceCheck                             DistanceCheckInfo;                                		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSVsibleCheck                               VisibleCheckInfo;                                 		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FSReachableCheck                            ReachableCheckInfo;                               		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1546 ];

		return pClassPointer;
	};

	unsigned char Execute ( class UGripBTInterface* BTInterface, unsigned long PushToFinish );
	void FlagUsedBBMembers ( class UGripBlackboard* inBlackboard );
	struct FString eventGetNodeTitle ( );
	unsigned char NativeExecute ( );
};

UClass* UGripActionNode_SelectEnemy::pClassPointer = NULL;

// Class CombatGame.CCSBTScriptCondition
// 0x0004 (0x0098 - 0x0094)
class UCCSBTScriptCondition : public UGripBTScriptCondition
{
public:
	class ACCSController*                              Controller;                                       		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1547 ];

		return pClassPointer;
	};

	void Initialize ( );
};

UClass* UCCSBTScriptCondition::pClassPointer = NULL;

// Class CombatGame.GripConditionNode
// 0x000C (0x00A4 - 0x0098)
class UGripConditionNode : public UCCSBTScriptCondition
{
public:
	class UCCSBlackboard*                              ScriptBlackBoard;                                 		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatBotController*                        Bot;                                              		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatPawn*                                 BotPawn;                                          		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1548 ];

		return pClassPointer;
	};

	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	void Initialize ( );
};

UClass* UGripConditionNode::pClassPointer = NULL;

// Class CombatGame.GripCondNode_TargetDirection
// 0x0008 (0x00AC - 0x00A4)
class UGripCondNode_TargetDirection : public UGripConditionNode
{
public:
	unsigned char                                      CurAITarget;                                      		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Op;                                               		// 0x00A5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              dotValue;                                         		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1549 ];

		return pClassPointer;
	};

	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	struct FString eventGetNodeTitle ( );
	bool NativeComputeCondition ( );
};

UClass* UGripCondNode_TargetDirection::pClassPointer = NULL;

// Class CombatGame.GripCondNode_TargetExistence
// 0x0008 (0x00AC - 0x00A4)
class UGripCondNode_TargetExistence : public UGripConditionNode
{
public:
	unsigned char                                      CurAITarget;                                      		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNegative : 1;                                    		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1550 ];

		return pClassPointer;
	};

	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	struct FString eventGetNodeTitle ( );
	bool NativeComputeCondition ( );
};

UClass* UGripCondNode_TargetExistence::pClassPointer = NULL;

// Class CombatGame.GripCondNode_TargetRange
// 0x000C (0x00B0 - 0x00A4)
class UGripCondNode_TargetRange : public UGripConditionNode
{
public:
	unsigned char                                      CurAITarget;                                      		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Op;                                               		// 0x00A5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIs2DRange : 1;                                   		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              Distance;                                         		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1551 ];

		return pClassPointer;
	};

	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	struct FString eventGetNodeTitle ( );
	bool NativeComputeCondition ( );
};

UClass* UGripCondNode_TargetRange::pClassPointer = NULL;

// Class CombatGame.GripCondNode_TargetReachable
// 0x0008 (0x00AC - 0x00A4)
class UGripCondNode_TargetReachable : public UGripConditionNode
{
public:
	unsigned char                                      CurAITarget;                                      		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNegative : 1;                                    		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1552 ];

		return pClassPointer;
	};

	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	struct FString eventGetNodeTitle ( );
	bool NativeComputeCondition ( );
};

UClass* UGripCondNode_TargetReachable::pClassPointer = NULL;

// Class CombatGame.GripCondNode_TargetVisible
// 0x0008 (0x00AC - 0x00A4)
class UGripCondNode_TargetVisible : public UGripConditionNode
{
public:
	unsigned char                                      CurAITarget;                                      		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNegative : 1;                                    		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1553 ];

		return pClassPointer;
	};

	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	struct FString eventGetNodeTitle ( );
	bool NativeComputeCondition ( );
};

UClass* UGripCondNode_TargetVisible::pClassPointer = NULL;

// Class CombatGame.CCSBTSelectTarget
// 0x0001 (0x0089 - 0x0088)
class UCCSBTSelectTarget : public UGripBTNode
{
public:
	unsigned char                                      TargetSelectionAlgorithm;                         		// 0x0088 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1554 ];

		return pClassPointer;
	};

};

UClass* UCCSBTSelectTarget::pClassPointer = NULL;

// Class CombatGame.CCSBTShoot
// 0x0008 (0x0090 - 0x0088)
class UCCSBTShoot : public UGripBTNode
{
public:
	int                                                FireBurstPerShot;                                 		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayBetweenBursts;                               		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1555 ];

		return pClassPointer;
	};

};

UClass* UCCSBTShoot::pClassPointer = NULL;

// Class CombatGame.CCSBTShootFromCover
// 0x0008 (0x0090 - 0x0088)
class UCCSBTShootFromCover : public UGripBTNode
{
public:
	int                                                FireBurstPerShot;                                 		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayBetweenBursts;                               		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1556 ];

		return pClassPointer;
	};

};

UClass* UCCSBTShootFromCover::pClassPointer = NULL;

// Class CombatGame.CCSBTTargetHealth
// 0x0000 (0x0094 - 0x0094)
class UCCSBTTargetHealth : public UGripBTNumericCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1557 ];

		return pClassPointer;
	};

};

UClass* UCCSBTTargetHealth::pClassPointer = NULL;

// Class CombatGame.CCSBTTargetRange
// 0x0000 (0x0094 - 0x0094)
class UCCSBTTargetRange : public UGripBTNumericCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1558 ];

		return pClassPointer;
	};

};

UClass* UCCSBTTargetRange::pClassPointer = NULL;

// Class CombatGame.CCSBTTargetShootable
// 0x0000 (0x008C - 0x008C)
class UCCSBTTargetShootable : public UGripBTBooleanCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1559 ];

		return pClassPointer;
	};

};

UClass* UCCSBTTargetShootable::pClassPointer = NULL;

// Class CombatGame.CCSBTTargetVisible
// 0x0000 (0x008C - 0x008C)
class UCCSBTTargetVisible : public UGripBTBooleanCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1560 ];

		return pClassPointer;
	};

};

UClass* UCCSBTTargetVisible::pClassPointer = NULL;

// Class CombatGame.CCSBTTimeSinceDamage
// 0x0000 (0x0094 - 0x0094)
class UCCSBTTimeSinceDamage : public UGripBTFloatCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1561 ];

		return pClassPointer;
	};

};

UClass* UCCSBTTimeSinceDamage::pClassPointer = NULL;

// Class CombatGame.CCSBTVisibleToPlayerCamera
// 0x0000 (0x008C - 0x008C)
class UCCSBTVisibleToPlayerCamera : public UGripBTBooleanCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1562 ];

		return pClassPointer;
	};

};

UClass* UCCSBTVisibleToPlayerCamera::pClassPointer = NULL;

// Class CombatGame.CCSBTWaitInCover
// 0x0000 (0x0088 - 0x0088)
class UCCSBTWaitInCover : public UGripBTNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1563 ];

		return pClassPointer;
	};

};

UClass* UCCSBTWaitInCover::pClassPointer = NULL;

// Class CombatGame.CCSController
// 0x00A0 (0x0410 - 0x0370)
class ACCSController : public AAIController
{
public:
	class UCCSBTTree*                                  BehaviorTreeTemplate;                             		// 0x0370 (0x0004) [0x0000000000000000]              
	class UGripBTScriptNodeCache*                      ScriptNodeCache;                                  		// 0x0374 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UGripBTInterface*                            BTInterface;                                      		// 0x0378 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FPointer                                    Brain;                                            		// 0x037C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    MeatPuppet;                                       		// 0x0380 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FCCSSystemConfigData                        SystemConfig;                                     		// 0x0384 (0x0028) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            TargetSelection;                                  		// 0x03AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UCCSPawn*                                    CCSPawn;                                          		// 0x03B8 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x03BC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UNavigationHandle*                           SecondaryNavigationHandle;                        		// 0x03C0 (0x0004) [0x0000000000000000]              
	int                                                FireBurstCount;                                   		// 0x03C4 (0x0004) [0x0000000000000000]              
	class AActor*                                      AimingFocus;                                      		// 0x03C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    AimingRot;                                        		// 0x03CC (0x000C) [0x0000000000000000]              
	unsigned char                                      CCSTeam;                                          		// 0x03D8 (0x0001) [0x0000000000000000]              
	unsigned char                                      TargetType;                                       		// 0x03D9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PathFindErrCount;                                 		// 0x03DA (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UCCSVisualizationComponent*                  DebugVizComponent;                                		// 0x03DC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class AActor* >                            NoiseMakers;                                      		// 0x03E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSMoveTowardState                           paramMoveTowardState;                             		// 0x03EC (0x0010) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bPauseBTWhenScriptedMove : 1;                     		// 0x03FC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FVector                                     PathFindDestPosition;                             		// 0x0400 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      PathFindPrevPathActor;                            		// 0x040C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1564 ];

		return pClassPointer;
	};

	void eventPushMoveTowardState ( class AActor* Goal, class AActor* ViewFocus, float DesiredOffset, unsigned long bStrafe, unsigned long bShouldWalk );
	void SetDisableBrain ( unsigned long inDisabel );
	bool IsForceScripteMoving ( );
	void PollMoveComplete ( );
	void TriggerEvent ( struct FString EventType );
	void SetInitialCover ( class AActor* localLink );
	void RemoveState ( struct FString stateToRemove );
	void SetState ( struct FString stateToSet );
	void TakePossession ( );
	void eventCreateDebugVizComponent ( );
	void OnCCSTriggerEvent ( class USeqAct_CCSTriggerEvent* Action );
	void OnSetInitialCover ( class USeqAct_SetInitialCover* Action );
	void OnRemoveState ( class USeqAct_RemoveState* Action );
	void OnSetState ( class USeqAct_SetState* Action );
	unsigned char GetTeamNum ( );
	void DebugTrace ( struct FString Trace );
	bool eventFindNavMeshDistance ( struct FVector targetPos, float* Distance );
	bool eventFindNavMeshPath ( struct FVector targetPos );
	struct FRotator GetAdjustedAimFor ( class AWeapon* InWeapon, struct FVector projStart );
	void NotifyBurstFinished ( class AWeapon* W, unsigned char FireMode );
	void eventActionStopFiring ( );
	bool eventFireWeapon ( );
	void UpdateAimingRotation ( );
	bool CanHitTarget ( class AActor* Target );
	bool eventStopFireBurst ( );
	bool eventStartFireBurst ( class AActor* Target );
	bool CanFireAtFromLoc ( struct FVector TraceStart, class APawn* Target );
	bool eventCanFireAt ( class AActor* Target );
	void SetDesiredPosition ( class AActor* Actor );
	void eventNotifyAIMoveToActorCompleted ( );
	void OnAIMoveToActor ( class USeqAct_AIMoveToActor* Action );
	void UnPossess ( );
	void Possess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void InitNavigationHandle ( );
};

UClass* ACCSController::pClassPointer = NULL;

// Class CombatGame.CombatBotController
// 0x0084 (0x0494 - 0x0410)
class ACombatBotController : public ACCSController
{
public:
	struct FPointer                                    VfTable_Iinterface_SplinePath;                    		// 0x0410 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bCanTick : 1;                                     		// 0x0414 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHasCaller : 1;                                   		// 0x0414 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      FixedRotation : 1;                                		// 0x0414 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWriteDamagedActorList : 1;                       		// 0x0414 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	int                                                AISpreadMin;                                      		// 0x0418 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AISpreadRandom;                                   		// 0x041C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageMultiflyer;                                 		// 0x0420 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACombatGuy_NPC*                              CombatPawn;                                       		// 0x0424 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 CallerController;                                 		// 0x0428 (0x0004) [0x0000000000000000]              
	class ACombatSplineActor*                          StartSplineActor;                                 		// 0x042C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatSplineActor*                          GoalSplineActor;                                  		// 0x0430 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ACombatSplineActor* >                SplineRoute;                                      		// 0x0434 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              PassedSplineLength;                               		// 0x0440 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     SplineCenter;                                     		// 0x0444 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     SplinePositionOffset;                             		// 0x0450 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      SplineAIType;                                     		// 0x045C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UCombatAIActionBase* >               AIActionList;                                     		// 0x0460 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ACombatAIManager*                            AIManager;                                        		// 0x046C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OverrideShotPerFireBurst;                         		// 0x0470 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FSDamagedActorInfo >                DamagedActorList;                                 		// 0x0474 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPointer                                    CCSBB;                                            		// 0x0480 (0x0004) [0x0000000000001000]              ( CPF_Native )
	class AAIBeacon*                                   CurAIBeacon;                                      		// 0x0484 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FSAIBeaconVisitInfo >               AIBeaconVisitInfoArray;                           		// 0x0488 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1565 ];

		return pClassPointer;
	};

	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void UpdateDamagedActorList ( class AController* InstigatedBy, int Damage );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void SetEnemy ( class AActor* NewEnemy );
	void eventActionStopFiring ( );
	void DoReload ( );
	void SwitchWeapon ( unsigned char T );
	bool CanSwitchWeapon ( );
	void PawnDied ( class APawn* inPawn );
	bool CanHitTarget ( class AActor* Target );
	void Possess ( class APawn* inPawn, unsigned long bVehicleTransition );
	void eventSetPassedSplineLength ( float NewPassedSplineLength );
	float eventGetPassedSplineLength ( );
	void UpdateMovementSpeedModifier ( );
	void eventSetStartSplineActor ( class ACombatSplineActor* NewStartActor, unsigned long bSkipDestroy );
	struct FVector eventGetSplinePositionOffset ( );
	class ACombatSplineActor* eventGetNextSplineActor ( class ACombatSplineActor* NewSplineActor );
	class ACombatSplineActor* eventGetGoalSplineActor ( );
	class ACombatSplineActor* eventGetStartSplineActor ( );
	void eventClearPathContraint ( );
	void eventAddPathConstraint_AvoidActor ( class AActor* inAvoidTarget );
	void UpdateSplinePositionOffset ( );
	void InitStartSplineActor ( );
	void InitPlayerReplicationInfo ( );
	unsigned char GetTeamNum ( );
	void Reset ( );
	void SetCaller ( class AController* C );
	void OnAIMoveToActor ( class USeqAct_AIMoveToActor* Action );
	void UnClaimAIBeacon ( );
	void ClaimAIBeacon ( class AAIBeacon* inAIBeacon );
	int GetAIBeaconVisit ( class AAIBeacon* inAIBeacon );
	void ClearAIBeaconVisit ( );
	void AddAIBeaconVisit ( class AAIBeacon* inAIBeacon );
	void SetCurAIBeacon ( class AAIBeacon* inAIBeacon );
	void ClearAIAction ( );
	void DestroyAIAction ( class UCombatAIActionBase* inAIAction );
	void RegisterAIAction ( class UCombatAIActionBase* inAIAction );
	void NotifyBurstFinished ( class AWeapon* W, unsigned char FireMode );
	int GetUsableAIBeaconIndex ( );
};

UClass* ACombatBotController::pClassPointer = NULL;

// Class CombatGame.CombatBotController_GuyBase
// 0x0000 (0x0494 - 0x0494)
class ACombatBotController_GuyBase : public ACombatBotController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1566 ];

		return pClassPointer;
	};

	void NotifyChangedWeapon ( class AWeapon* PrevWeapon, class AWeapon* NewWeapon );
	void ActionStopFiring ( );
	struct FRotator GetAdjustedAimFor ( class AWeapon* InWeapon, struct FVector projStart );
	void JumpOverWall ( struct FVector WallNormal );
};

UClass* ACombatBotController_GuyBase::pClassPointer = NULL;

// Class CombatGame.USSController
// 0x0000 (0x0410 - 0x0410)
class AUSSController : public ACCSController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1567 ];

		return pClassPointer;
	};

};

UClass* AUSSController::pClassPointer = NULL;

// Class CombatGame.CCSCover
// 0x0000 (0x003C - 0x003C)
class UCCSCover : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1568 ];

		return pClassPointer;
	};

	bool UnlockCover ( struct FCCSCoverData CoverData, class APawn* ThePawn );
	bool LockCover ( struct FCCSCoverData CoverData, class APawn* ThePawn );
	bool IsLocked ( struct FCCSCoverData CoverData );
};

UClass* UCCSCover::pClassPointer = NULL;

// Class CombatGame.CCSPawn
// 0x0000 (0x003C - 0x003C)
class UCCSPawn : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1569 ];

		return pClassPointer;
	};

	bool IsInCover ( );
	void MoveToInCover ( struct FVector Dest );
	bool CoverPoseTransitionOver ( );
	void SetNoCoverPose ( );
	void SetCoverPose ( unsigned char NewCoverPose, float BlendTime );
	bool CanAim ( struct FRotator AimRotation );
	bool PostureTransitionOver ( );
	void SetPostureDefault ( );
	void SetCrouched ( unsigned long bCrouched );
	bool IsCrouched ( );
	void SetMovementSpeedDefault ( );
	void SetSpeed ( unsigned char Speed );
	unsigned char GetSpeed ( );
	void SetAlertnessDefault ( );
	void SetAlertness ( unsigned char NewAlertness );
	unsigned char GetAlertness ( );
	void SetMovementTypeDefault ( );
	void SetMovementType ( unsigned char NewMovementType );
	unsigned char GetMovementType ( );
};

UClass* UCCSPawn::pClassPointer = NULL;

// Class CombatGame.CCSSystemConfig
// 0x0000 (0x003C - 0x003C)
class UCCSSystemConfig : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1570 ];

		return pClassPointer;
	};

};

UClass* UCCSSystemConfig::pClassPointer = NULL;

// Class CombatGame.CCSTarget
// 0x0000 (0x003C - 0x003C)
class UCCSTarget : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1571 ];

		return pClassPointer;
	};

};

UClass* UCCSTarget::pClassPointer = NULL;

// Class CombatGame.CCSVisualizationComponent
// 0x0004 (0x01F0 - 0x01EC)
class UCCSVisualizationComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    SceneProxy;                                       		// 0x01EC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1572 ];

		return pClassPointer;
	};

};

UClass* UCCSVisualizationComponent::pClassPointer = NULL;

// Class CombatGame.ColorGradingEffect
// 0x001E (0x0080 - 0x0062)
class UColorGradingEffect : public UPostProcessEffect
{
public:
	struct FLUTBlender                                 PreviousLUTBlender;                               		// 0x0064 (0x001C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1573 ];

		return pClassPointer;
	};

};

UClass* UColorGradingEffect::pClassPointer = NULL;

// Class CombatGame.CombatAIActionBase
// 0x0014 (0x0050 - 0x003C)
class UCombatAIActionBase : public UObject
{
public:
	unsigned long                                      bUseScriptTick : 1;                               		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      LastExecuteResult;                                		// 0x0040 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class ACombatBotController*                        Bot;                                              		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       DebugName;                                        		// 0x0048 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1574 ];

		return pClassPointer;
	};

	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ExecutePost ( class UGripBTInterface* inBTInterface );
	void eventScriptTick ( );
	bool ExecutePre ( class UGripBTInterface* inBTInterface, class UCombatAIActionNodeBase* inActionNode );
	class UCombatAIActionBase* CreateAIAction ( class ACombatBotController* InAI );
};

UClass* UCombatAIActionBase::pClassPointer = NULL;

// Class CombatGame.CombatAIAction_MoveToward
// 0x0008 (0x0058 - 0x0050)
class UCombatAIAction_MoveToward : public UCombatAIActionBase
{
public:
	class UCombatAIActionNode_MoveToward*              ActionNode;                                       		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      LastPathFindResultActor;                          		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1575 ];

		return pClassPointer;
	};

	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ExecutePost ( class UGripBTInterface* inBTInterface );
	bool ExecutePre ( class UGripBTInterface* inBTInterface, class UCombatAIActionNodeBase* inActionNode );
};

UClass* UCombatAIAction_MoveToward::pClassPointer = NULL;

// Class CombatGame.CombatAIAction_Roamming
// 0x000C (0x005C - 0x0050)
class UCombatAIAction_Roamming : public UCombatAIActionBase
{
public:
	class UCombatAIActionNode_Roamming*                ActionNode;                                       		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      Goal;                                             		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      NextActor;                                        		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1576 ];

		return pClassPointer;
	};

	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ExecutePost ( class UGripBTInterface* inBTInterface );
	bool ExecutePre ( class UGripBTInterface* inBTInterface, class UCombatAIActionNodeBase* inActionNode );
};

UClass* UCombatAIAction_Roamming::pClassPointer = NULL;

// Class CombatGame.CombatAIAction_SelectTarget
// 0x0004 (0x0054 - 0x0050)
class UCombatAIAction_SelectTarget : public UCombatAIActionBase
{
public:
	class UCombatAIActionNode_SelectTarget*            ActionNode;                                       		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1577 ];

		return pClassPointer;
	};

	bool ExecutePre ( class UGripBTInterface* inBTInterface, class UCombatAIActionNodeBase* inActionNode );
};

UClass* UCombatAIAction_SelectTarget::pClassPointer = NULL;

// Class CombatGame.GripAction_MoveRightAndLeft
// 0x000C (0x005C - 0x0050)
class UGripAction_MoveRightAndLeft : public UCombatAIActionBase
{
public:
	class UGripActionNode_MoveRightAndLeft*            ActionNode;                                       		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurDir;                                           		// 0x0054 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveStartTime;                                    		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1578 ];

		return pClassPointer;
	};

	void ExecutePost ( class UGripBTInterface* inBTInterface );
	bool ExecutePre ( class UGripBTInterface* inBTInterface, class UCombatAIActionNodeBase* inActionNode );
};

UClass* UGripAction_MoveRightAndLeft::pClassPointer = NULL;

// Class CombatGame.GripAction_MoveToward
// 0x0004 (0x0054 - 0x0050)
class UGripAction_MoveToward : public UCombatAIActionBase
{
public:
	class UGripActionNode_MoveToward*                  ActionNode;                                       		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1579 ];

		return pClassPointer;
	};

	void ExecutePost ( class UGripBTInterface* inBTInterface );
	bool ExecutePre ( class UGripBTInterface* inBTInterface, class UCombatAIActionNodeBase* inActionNode );
};

UClass* UGripAction_MoveToward::pClassPointer = NULL;

// Class CombatGame.CombatAIDecisionComponent
// 0x0007 (0x005C - 0x0055)
class UCombatAIDecisionComponent : public UActorComponent
{
public:
	unsigned long                                      bTriggered : 1;                                   		// 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1580 ];

		return pClassPointer;
	};

};

UClass* UCombatAIDecisionComponent::pClassPointer = NULL;

// Class CombatGame.CombatAudioChannelSystem
// 0x0048 (0x0084 - 0x003C)
class UCombatAudioChannelSystem : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x003C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatAudioChannelSystem.ChannelMap
	TArray< struct FChannelData >                      Channels;                                         		// 0x0078 (0x000C) [0x0000000000580000]              ( CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1581 ];

		return pClassPointer;
	};

	void PlaySound ( struct FName ChannelName, class UAudioComponent* AudioComponent, struct FVector Location, unsigned long bStopWhenPlayNewSound, unsigned long bNotPlayWhenPlaying );
	int AddChannel ( struct FName ChannelName );
};

UClass* UCombatAudioChannelSystem::pClassPointer = NULL;

// Class CombatGame.CombatAwaitTransaction
// 0x007C (0x00B8 - 0x003C)
class UCombatAwaitTransaction : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x003C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatAwaitTransaction.AwaitListMap
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0078 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatAwaitTransaction.InviteInfoMap
	int                                                AwaitListTotalPage;                               		// 0x00B4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1582 ];

		return pClassPointer;
	};

	int GetAwaitListTotalPage ( );
	void ClearInviteInfo ( );
	bool GetInviteInfo ( struct FInviteInfo* out_InviteInfo );
	bool AddNewInviteInfo ( struct FInviteInfo* newInfo );
	void ClearAwaitListInfo ( );
	bool GetAwaitListDataByUserID ( int userID, struct FAwaitList* GetData );
	int GetAwaitListCount ( );
	bool GetAwaitListInfo ( int Index, struct FAwaitList* out_AwaitList );
	bool AddNewAwaitListInfo ( int Index, struct FAwaitList* newInfo );
};

UClass* UCombatAwaitTransaction::pClassPointer = NULL;

// Class CombatGame.CombatAwesomium
// 0x0014 (0x0050 - 0x003C)
class UCombatAwesomium : public UObject
{
public:
	TArray< struct FAwesomiumInfo >                    AwesomiumList;                                    		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              AwesomiumDurationTime;                            		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AwesomiumLastTime;                                		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1583 ];

		return pClassPointer;
	};

};

UClass* UCombatAwesomium::pClassPointer = NULL;

// Class CombatGame.CombatBarricade
// 0x00C4 (0x02A4 - 0x01E0)
class ACombatBarricade : public ATrigger
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x01E0 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	int                                                Health;                                           		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OldHealth;                                        		// 0x01E8 (0x0004) [0x0000000000000000]              
	int                                                HealthMax;                                        		// 0x01EC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                CurrentHealth;                                    		// 0x01F0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                LastSubObjectIndex;                               		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsActive : 1;                                    		// 0x01F8 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      OldbIsActive : 1;                                 		// 0x01F8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIgnoreSameTeamDamage : 1;                        		// 0x01F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bGod : 1;                                         		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned char                                      OwnerTeam;                                        		// 0x01FC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UIState;                                          		// 0x01FD (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FOutlineProperty                            OutlineColorForComrade;                           		// 0x0200 (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FOutlineProperty                            OutlineColorForEnemy;                             		// 0x0234 (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UCombatExplosion*                            ExplosionTemplate;                                		// 0x0268 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FSubObjectInfo >                    SubObjectInfos;                                   		// 0x026C (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FDamageInfo >                       DamageInfoList;                                   		// 0x0278 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0284 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class AActor* >                            DestinationList;                                  		// 0x0288 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSOccupyPawnInfo >                  OccupyDestination;                                		// 0x0294 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CurOccupyDestIndex;                               		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1584 ];

		return pClassPointer;
	};

	int GetMissionActorSortPriority ( );
	void InitMissionActor ( class ACBGameReplicationInfo* CBGRI, int ArrayIndex );
	void AddDamageInfo ( class AController* Controller, int DamageAmount );
	int eventGetHealth ( );
	void SetHealth ( int NewHealth );
	void DoExplosion ( class UCombatExplosion* InExplosionTemplate );
	void StopDamagedParticle ( int SubObjectIndex );
	void PlayDamagedParticle ( int SubObjectIndex );
	void PlayDamagedSound ( int SubObjectIndex );
	void eventDeactivate ( );
	void eventActivate ( );
	unsigned char ScriptGetTeamNum ( );
	class AController* GetHighestDamageDealer ( );
	void ClearDamagedUIState ( );
	void UpdateUIState ( );
	void ApplySubObjectInfo ( );
	void RestoreSubObjectInfo ( );
	int GetSubObjectIndex ( );
	void eventNotifyChangedHealth ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void InitHealth ( );
	void Reset ( );
	void RoundEnd ( unsigned long bGameEnded, unsigned char WinnerTeamIndex );
	void PostBeginPlay ( );
	struct FVector GetDestination ( class AController* C );
};

UClass* ACombatBarricade::pClassPointer = NULL;

// Class CombatGame.CombatBGMPlayer
// 0x0008 (0x0044 - 0x003C)
class UCombatBGMPlayer : public UObject
{
public:
	class UAudioComponent*                             BGM_AC;                                           		// 0x003C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   BGMSoundCue;                                      		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1585 ];

		return pClassPointer;
	};

	struct FString SetSoundCuePath ( unsigned char CurrentScene );
	void PlayBGM ( unsigned char CurrentScene );
};

UClass* UCombatBGMPlayer::pClassPointer = NULL;

// Class CombatGame.CombatBot
// 0x00CC (0x043C - 0x0370)
class ACombatBot : public AAIController
{
public:
	class ACombatSquadAI*                              Squad;                                            		// 0x0370 (0x0004) [0x0000000000000000]              
	class UCombatAIDecisionComponent*                  DecisionComponent;                                		// 0x0374 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AActor*                                      TemporaryFocus;                                   		// 0x0378 (0x0004) [0x0000000000000000]              
	unsigned long                                      bExecutingWhatToDoNext : 1;                       		// 0x037C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bScriptSpecialJumpCost : 1;                       		// 0x037C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bForceRefreshRoute : 1;                           		// 0x037C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bTargetAlternateLoc : 1;                          		// 0x037C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bEnemyInfoValid : 1;                              		// 0x037C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bEnemyIsVisible : 1;                              		// 0x037C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bLeadTarget : 1;                                  		// 0x037C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bJumpOverWall : 1;                                		// 0x037C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bPlannedJump : 1;                                 		// 0x037C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bInDodgeMove : 1;                                 		// 0x037C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bEnemyAcquired : 1;                               		// 0x037C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bNeedDelayedLeaveVehicle : 1;                     		// 0x037C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bAllowRouteReuse : 1;                             		// 0x037C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bUsingSquadRoute : 1;                             		// 0x037C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bUsePreviousSquadRoute : 1;                       		// 0x037C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned char                                      ScriptedFireMode;                                 		// 0x0380 (0x0001) [0x0000000000000000]              
	float                                              EnemyVisibilityTime;                              		// 0x0384 (0x0004) [0x0000000000000000]              
	class AActor*                                      VisibleEnemy;                                     		// 0x0388 (0x0004) [0x0000000000000000]              
	class AVehicle*                                    LastBlockingVehicle;                              		// 0x038C (0x0004) [0x0000000000000000]              
	class AActor*                                      CurrentlyTrackedEnemy;                            		// 0x0390 (0x0004) [0x0000000000000000]              
	TArray< struct FEnemyPosition >                    SavedPositions;                                   		// 0x0394 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     ImpactVelocity;                                   		// 0x03A0 (0x000C) [0x0000000000000000]              
	int                                                AcquisitionYawRate;                               		// 0x03AC (0x0004) [0x0000000000000000]              
	float                                              HearingThreshold;                                 		// 0x03B0 (0x0004) [0x0000000000000000]              
	float                                              RespawnPredictionTime;                            		// 0x03B4 (0x0004) [0x0000000000000000]              
	float                                              WarningDelay;                                     		// 0x03B8 (0x0004) [0x0000000000000000]              
	class AProjectile*                                 WarningProjectile;                                		// 0x03BC (0x0004) [0x0000000000000000]              
	struct FVector                                     MonitorStartLoc;                                  		// 0x03C0 (0x000C) [0x0000000000000000]              
	class APawn*                                       MonitoredPawn;                                    		// 0x03CC (0x0004) [0x0000000000000000]              
	float                                              MonitorMaxDistSq;                                 		// 0x03D0 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastSeenPos;                                      		// 0x03D4 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastSeeingPos;                                    		// 0x03E0 (0x000C) [0x0000000000000000]              
	float                                              LastSeenTime;                                     		// 0x03EC (0x0004) [0x0000000000000000]              
	float                                              TrackingReactionTime;                             		// 0x03F0 (0x0004) [0x0000000000000000]              
	float                                              BaseTrackingReactionTime;                         		// 0x03F4 (0x0004) [0x0000000000000000]              
	struct FVector                                     TrackedVelocity;                                  		// 0x03F8 (0x000C) [0x0000000000000000]              
	class ANavigationPoint*                            SquadRouteGoal;                                   		// 0x0404 (0x0004) [0x0000000000000000]              
	class AActor*                                      BlockedAimTarget;                                 		// 0x0408 (0x0004) [0x0000000000000000]              
	float                                              LastIterativeCheck;                               		// 0x040C (0x0004) [0x0000000000000000]              
	float                                              AimUpdateFrequency;                               		// 0x0410 (0x0004) [0x0000000000000000]              
	float                                              LastAimUpdateTime;                                		// 0x0414 (0x0004) [0x0000000000000000]              
	float                                              ErrorUpdateFrequency;                             		// 0x0418 (0x0004) [0x0000000000000000]              
	float                                              LastErrorUpdateTime;                              		// 0x041C (0x0004) [0x0000000000000000]              
	float                                              CurrentAimError;                                  		// 0x0420 (0x0004) [0x0000000000000000]              
	float                                              DodgeLandZ;                                       		// 0x0424 (0x0004) [0x0000000000000000]              
	class AActor*                                      FearSpots[ 0x2 ];                                 		// 0x0428 (0x0008) [0x0000000000000000]              
	float                                              DodgeToGoalPct;                                   		// 0x0430 (0x0004) [0x0000000000000000]              
	float                                              MultiJumpZ;                                       		// 0x0434 (0x0004) [0x0000000000000000]              
	class UPresetManager*                              PresetManager;                                    		// 0x0438 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1586 ];

		return pClassPointer;
	};

	void eventDelayedLeaveVehicle ( );
	void eventDelayedWarning ( );
	void eventMissedDodge ( );
	float eventAdjustAimError ( float TargetDist, unsigned long bInstantProj );
	float eventSuperDesireability ( class APickupFactory* P );
	bool eventSpecialJumpCost ( float RequiredJumpZ, float* Cost );
	void eventMayDodgeToMoveTarget ( );
	void eventTimeDJReset ( );
	void eventMonitoredPawnAlert ( );
	void eventWhatToDoNext ( );
	class AActor* FindBestSuperPickup ( float MaxDist );
	void BuildSquadRoute ( );
	class AActor* FindPathToSquadRoute ( unsigned long bWeightDetours );
	class AActor* FindBestInventoryPath ( float* MinWeight );
	bool CanMakePathTo ( class AActor* A );
	void LatentWhatToDoNext ( );
	void WaitToSeeEnemy ( );
	void eventExecuteWhatToDoNext ( );
	class AActor* FaceActor ( float StrafingModifier );
};

UClass* ACombatBot::pClassPointer = NULL;

// Class CombatGame.CBBot
// 0x0000 (0x043C - 0x043C)
class ACBBot : public ACombatBot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1587 ];

		return pClassPointer;
	};

};

UClass* ACBBot::pClassPointer = NULL;

// Class CombatGame.CombatCameraLensEffect
// 0x0003 (0x0208 - 0x0205)
class ACombatCameraLensEffect : public AEmitterCameraLensEffectBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1588 ];

		return pClassPointer;
	};

};

UClass* ACombatCameraLensEffect::pClassPointer = NULL;

// Class CombatGame.CombatChampionshipCameraManager
// 0x0024 (0x0060 - 0x003C)
class UCombatChampionshipCameraManager : public UObject
{
public:
	struct FString                                     filePath;                                         		// 0x003C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Section_MapName;                                  		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           Key_SpotName;                                     		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1589 ];

		return pClassPointer;
	};

	bool GetFreeCam ( int Index, struct FVector* pos, struct FRotator* Rot );
	void SaveFreeCam ( int Index, struct FVector pos, struct FRotator Rot );
	void Init ( );
};

UClass* UCombatChampionshipCameraManager::pClassPointer = NULL;

// Class CombatGame.CombatChampionshipManager
// 0x000C (0x0048 - 0x003C)
class UCombatChampionshipManager : public UObject
{
public:
	TArray< struct FChampionshipTeamData >             ChampionshipTeamList;                             		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1590 ];

		return pClassPointer;
	};

	void GarbageDataRemove ( class ACombatPlayerReplicationInfo* PRI );
	void RemovePlayer ( class ACombatPlayerReplicationInfo* PRI );
	unsigned char AddPlayer ( class ACombatPlayerReplicationInfo* PRI );
	bool IsPlayingPlayer ( int PlayerID );
	class ACombatPlayerReplicationInfo* FindTargetPlayer ( unsigned char TargetTeamIndex, unsigned char playerIndex_zeroBase );
	bool IsAlivePlayer ( unsigned char TargetTeamIndex );
	int GetTeamPlayerNum ( unsigned char TargetTeamIndex );
};

UClass* UCombatChampionshipManager::pClassPointer = NULL;

// Class CombatGame.CombatChannelTransaction
// 0x007C (0x00B8 - 0x003C)
class UCombatChannelTransaction : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x003C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatChannelTransaction.ServerInfoMap
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0078 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatChannelTransaction.ChannelInfoMap
	int                                                SigleGameType;                                    		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1591 ];

		return pClassPointer;
	};

	int GetSigleGameType ( );
	void SetSigleGameType ( int _Value );
	bool GetChannelList ( TArray< struct FChannelInfo >* _List );
	bool GetChannelInfo ( int Index, struct FChannelInfo* _ChannelInfo );
	bool InitChannelList ( );
	bool GetServerData ( int Id, struct FServerInfo* Info );
	bool GetServerList ( TArray< struct FServerInfo >* _List );
	bool InitServerList ( );
};

UClass* UCombatChannelTransaction::pClassPointer = NULL;

// Class CombatGame.CombatCharacterTransaction
// 0x019C (0x01D8 - 0x003C)
class UCombatCharacterTransaction : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x003C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatCharacterTransaction.PlayerCompetitionPointInfo
	unsigned long                                      NeedBackToCompetitionGame : 1;                    		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FCharacterTransactionData                   PlayerData;                                       		// 0x007C (0x00F8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRecordRecentlyPlayed >             TempMyRecordRecentlyPlayed;                       		// 0x0174 (0x000C) [0x0000000000502000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FRecordRecentlyPlayedList >         MyRecordRecentlyPlayedList;                       		// 0x0180 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	unsigned char                                      MAX_RECORD_RECENTLY_PLAYED;                       		// 0x018C (0x0001) [0x0000000000000002]              ( CPF_Const )
	struct FLevelExpData                               UI_LevelData;                                     		// 0x0190 (0x0008) [0x0000000000000000]              
	int                                                UI_Money;                                         		// 0x0198 (0x0004) [0x0000000000000000]              
	TArray< struct FMatchOnOffInfo >                   PlayerPageMatchOnOffInfoList;                     		// 0x019C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMatchOnOffInfo >                   MyPageMatchOnOffInfoList;                         		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMatchOnOffInfo >                   ClanPageMatchOnOffInfoList;                       		// 0x01B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      CurrentCompetitiveModeList;                       		// 0x01C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRandomBoxOpenData >                RandomBoxOpenList;                                		// 0x01CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1592 ];

		return pClassPointer;
	};

	void SetRandomBoxOpenData ( struct FRandomBoxOpenData Data );
	bool GetRandomBoxOpenData ( int random_box_id, struct FRandomBoxOpenData* out_random_box_data );
	bool isCurrentCompetitiveMode ( int ModeID );
	void DelCurrentCompetitiveModeList ( int ModeID );
	void AddCurrentCompetitiveModeList ( int ModeID );
	void SetNeedBackToCompetitionGame ( unsigned long flag );
	bool GetNeedBackToCompetitionGame ( );
	bool IsStartMatchBlockPenalty ( int ModeGroupID );
	int GetStartMatchBlockRemainCount ( int OpenChannelID );
	int GetStartMatchBlockPenalty ( int OpenChannelID );
	int GetChannelEnterBlockPenalty ( int OpenChannelID );
	int GetCurrentAvailableSquadSeason ( );
	int GetCurrentAvailableSoloDuoSeason ( );
	int GetSquadModeID ( );
	int GetSoloDuoModeID ( );
	int GetMaxPlacementCount ( int ModeID );
	int GetCurrentPlacementCount ( int ModeID );
	int GetPrevTier ( int ModeID, unsigned long CheckPlacement );
	int GetMaxTier ( int ModeID, unsigned long CheckPlacement );
	int GetCurrentTier ( int ModeID, unsigned long CheckPlacement );
	int GetMostHighTierModeID ( unsigned long MaxTier, unsigned long CheckPlacement );
	int GetMostHighTierPoint ( unsigned long MaxTier, unsigned long CheckPlacement );
	bool GetCategoryHide ( unsigned char CheckType, int Index );
	bool GetMatchOnOffInfoListByCheckType ( unsigned char CheckType, TArray< struct FMatchOnOffInfo >* _out_list );
	struct Fdword GetMTS ( int* Hour, int* Min, int* Sec );
	void AddMTS ( struct Fdword Sec );
	void SetMTS ( struct Fdword Sec );
	struct FString GetLastTakeStat ( );
	bool GetWeaponKillCount ( class UCombatDataTableRefItem* itemData, int* killcount );
	int eventGetUserID ( );
	float GetClassicKAD ( int* Kill, int* Death, int* Assist );
	void SetNeedDisplayTierPointPenalty ( unsigned char CompType, unsigned long needDisplay );
	bool isNeedDisplayTierPointPenalty ( unsigned char CompType );
	int GetTierPointPenaltyNextTimeUI ( unsigned char CompType );
	bool GetOnClanShutdownPenalty ( );
	void SetOnClanShutdownPenalty ( unsigned char val );
	int GetPrevMoney ( );
	struct FLevelExpData GetPrevLevelData ( );
	int GetStartingLevelExp ( );
	int GetStartingLevel ( );
	int GetAccountExp ( );
	int GetAccountLevel ( );
	struct FTimeData eventGetCreateIDTime ( );
	struct FTimeData GetLastAccessTime ( );
	void SetTutorialFinishes ( int Finishes );
	int GetTutorialFinishes ( );
	int GetLastRank ( );
	int GetRank ( );
	struct FString GetNickname ( );
	void SavePrevLevelData ( );
	void UpdateCurrentLevelData ( unsigned long bLogin, int* Exp );
};

UClass* UCombatCharacterTransaction::pClassPointer = NULL;

// Class CombatGame.CombatClanTransaction
// 0x00B4 (0x00F0 - 0x003C)
class UCombatClanTransaction : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x003C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatClanTransaction.ClanListMap
	int                                                ClanListTotalPage;                                		// 0x0078 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x007C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatClanTransaction.ClanJoinMap
	struct FClanListDetailData                         ClanListDetailInfo;                               		// 0x00B8 (0x0038) [0x0000000000500000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1593 ];

		return pClassPointer;
	};

	struct FClanListDetailData GetClanDetailData ( );
	int GetClanListTotalPage ( );
	void ClearClanListDetailData ( );
	void ClearJoinClanList ( );
	int GetJoinClanListCount ( );
	bool CompareJoinClanList ( int ClanID );
	bool RemoveJoinClanList ( int ClanID );
	bool AddJoinClanList ( struct FClanJoinList* newInfo );
	void ClearClanListInfo ( );
	struct FString FindClanListName ( int ClanID );
	bool GetClanListInfoByClanID ( int ClanID, struct FClanList* out_ClanListInfo );
	bool GetClanListInfo ( int Index, struct FClanList* out_ClanListInfo );
	int GetClanListCount ( );
	bool AddNewClanListInfo ( int Index, struct FClanList* newInfo );
};

UClass* UCombatClanTransaction::pClassPointer = NULL;

// Class CombatGame.CombatClassSystem
// 0x0010 (0x004C - 0x003C)
class UCombatClassSystem : public UObject
{
public:
	class ACombatPlayerReplicationInfo*                OwnerActor;                                       		// 0x003C (0x0004) [0x0000000000000000]              
	unsigned long                                      bTestMode : 1;                                    		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAlreadySeverChangeClassNotify : 1;               		// 0x0040 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAlreadySelectMilitaryClass : 1;                  		// 0x0040 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSelectMilitaryClass : 1;                         		// 0x0040 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      BeforGroupIndex;                                  		// 0x0044 (0x0001) [0x0000000000000000]              
	float                                              AutoSelectMilitaryClassTime;                      		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1594 ];

		return pClassPointer;
	};

	void UseGroupKey ( unsigned char GroupIndex );
	void ForcedSelectedClass ( );
	void ForcedSelectAnyClass ( );
	void NotifyRankUp ( int PrevRank, int newRank );
	void SetMilitaryClass ( unsigned char selectedClass );
	void ResetMilitaryClass ( );
	void SelectingClass ( unsigned char selectedClass );
	bool CanSelectClass ( );
	bool CheckUnlockClass ( unsigned char GroupIndex );
	void SetTestMode ( unsigned long bTest );
	bool IsDisplayLog ( );
	void Init ( class ACombatPlayerReplicationInfo* Target );
};

UClass* UCombatClassSystem::pClassPointer = NULL;

// Class CombatGame.CombatCommon_Base
// 0x0008 (0x0080 - 0x0078)
class UCombatCommon_Base : public UGFxObject
{
public:
	class UCombatGFxMoviePlayer*                       Owner;                                            		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNeedInit : 1;                                    		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPopUp : 1;                                       		// 0x007C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDisplayed : 1;                                   		// 0x007C (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1595 ];

		return pClassPointer;
	};

	void CallHide ( );
	void CallShow ( );
	void SetOwner ( class UCombatGFxMoviePlayer* Movie );
	void HideScene ( );
	void ShowScene ( );
	void Close ( );
	void Init ( );
};

UClass* UCombatCommon_Base::pClassPointer = NULL;

// Class CombatGame.CombatCommon_Command
// 0x00A8 (0x0128 - 0x0080)
class UCombatCommon_Command : public UCombatCommon_Base
{
public:
	struct FString                                     CommandList[ 0xE ];                               		// 0x0080 (0x00A8) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1596 ];

		return pClassPointer;
	};

	void registerCommandMessage ( struct FString CommandMsg );
	void HideScene ( );
	void ShowScene ( );
	void CheckCommand ( struct FString msg );
};

UClass* UCombatCommon_Command::pClassPointer = NULL;

// Class CombatGame.CombatCommon_SystemCounter
// 0x000C (0x008C - 0x0080)
class UCombatCommon_SystemCounter : public UCombatCommon_Base
{
public:
	TArray< struct FSystemCountInfo >                  SystemCountList;                                  		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1597 ];

		return pClassPointer;
	};

	void CallTextAllClear ( );
	void CallUpdateText ( int Number, struct FString Text );
	void CallSetVisible ( unsigned long bVisible, int Number );
	int GetSystemCountListCount ( );
	void Update ( );
	void LastInfo ( );
	int GetPing ( );
	void InitData ( );
	void HideScene ( );
	void ShowScene ( );
	void Close ( );
	void Init ( );
};

UClass* UCombatCommon_SystemCounter::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_SystemCounter
// 0x0000 (0x008C - 0x008C)
class UCombatFrontEnd_SystemCounter : public UCombatCommon_SystemCounter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1598 ];

		return pClassPointer;
	};

	int GetPing ( );
	void InitData ( );
};

UClass* UCombatFrontEnd_SystemCounter::pClassPointer = NULL;

// Class CombatGame.CombatHUD_SystemCounter
// 0x0008 (0x0094 - 0x008C)
class UCombatHUD_SystemCounter : public UCombatCommon_SystemCounter
{
public:
	class UCBUIDataStore_HUD*                          UIDataStore_HUD;                                  		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                MyUserID;                                         		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1599 ];

		return pClassPointer;
	};

	int GetPing ( );
	void InitData ( );
};

UClass* UCombatHUD_SystemCounter::pClassPointer = NULL;

// Class CombatGame.CombatCommunityTransaction
// 0x01B8 (0x01F4 - 0x003C)
class UCombatCommunityTransaction : public UObject
{
public:
	unsigned char                                      MySessionState;                                   		// 0x003C (0x0001) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bMyAFKState : 1;                                  		// 0x0040 (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned long                                      bInMaintenanceScene : 1;                          		// 0x0040 (0x0004) [0x0000000000001002] [0x00000002] ( CPF_Const | CPF_Native )
	unsigned long                                      bNeedChangeClanPassword : 1;                      		// 0x0040 (0x0004) [0x0000000000001002] [0x00000004] ( CPF_Const | CPF_Native )
	unsigned long                                      bMessengerVisible : 1;                            		// 0x0040 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsGMChatPenalty : 1;                             		// 0x0040 (0x0004) [0x0000000000001000] [0x00000010] ( CPF_Native )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0044 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatCommunityTransaction.MessengerMap
	int                                                Count_SuggestionList;                             		// 0x0080 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                Count_FriendList;                                 		// 0x0084 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                Count_BlockList;                                  		// 0x0088 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ClanID;                                           		// 0x008C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FString                                     ClanName;                                         		// 0x0090 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ClanPoint;                                        		// 0x009C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ClanLevel;                                        		// 0x00A0 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FString                                     ClanLevelColor;                                   		// 0x00A4 (0x000C) [0x0000000000001000]              ( CPF_Native )
	int                                                ClanTotalPoint;                                   		// 0x00B0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ClanMaxMember;                                    		// 0x00B4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FClanMatchData                              ClanMatchRecord;                                  		// 0x00B8 (0x0028) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x00E0 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatCommunityTransaction.ClanNameMap
	TArray< struct FClanMatchRecordData >              ClanRankMatchRecordDataList;                      		// 0x011C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FClanMatchRecordData >              ClanAMatchRecordDataList;                         		// 0x0128 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FClanMatchRecordData >              ClanBMatchRecordDataList;                         		// 0x0134 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FClanMatchRecordData >              ClanAllMatchRecordDataList;                       		// 0x0140 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                Count_ClanList;                                   		// 0x014C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData02[ 0x2 ];                             		// 0x0150 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatCommunityTransaction.EmblemID
	struct FTimeData                                   ClanRegistrationTime;                             		// 0x0154 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData03[ 0x2 ];                             		// 0x015C (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatCommunityTransaction.RegionID
	int                                                ClanRankPoint;                                    		// 0x0160 (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                MyRankPoint;                                      		// 0x0164 (0x0004) [0x0000000000001000]              ( CPF_Native )
	unsigned char                                      UnknownData04[ 0x3C ];                            		// 0x0168 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatCommunityTransaction.ClanJoinMemberMap
	TArray< struct FString >                           LastWhisperList;                                  		// 0x01A4 (0x000C) [0x0000000000001000]              ( CPF_Native )
	unsigned char                                      UnknownData05[ 0x2 ];                             		// 0x01B0 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatCommunityTransaction.CCardID
	unsigned char                                      UnknownData06[ 0x3C ];                            		// 0x01B4 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatCommunityTransaction.ScrNoticeInfoMap
	float                                              PenaltySec;                                       		// 0x01F0 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1600 ];

		return pClassPointer;
	};

	struct FString GetClanLevelColor ( );
	int GetClanLevel ( );
	void UpdateCurrentClanLevelData ( );
	int GetClanRecordInfo ( int MatchType, TArray< struct FClanMatchRecordData >* List );
	int GetMyRankPoint ( );
	int GetClanRankPoint ( );
	struct FClanMatchData GetClanMatchRecord ( );
	int GetClanMaxMember ( );
	int GetClanTotalPoint ( );
	int GetClanPoint ( );
	TArray< struct FString > GetLastWhisperList ( );
	struct FString GetClanName ( );
	int GetClanID ( );
	struct FTimeData GetClanRegistrationTime ( );
	void SetClanRegionID ( );
	void GetClanRegionID ( );
	void GetClanEmblemID ( );
	int GetScrNoticeListCount ( );
	bool GetScrNotice ( unsigned char Index, struct FScrNoticeInfo* out_Data );
	bool TimeoutScrNotice ( unsigned char Index, int End_Time );
	bool DelScrnotice ( unsigned char Index );
	bool SetScrNotice ( unsigned char Index, struct FString msg, int End_Time );
	void ClearJoinMemberList ( );
	int GetClanJoinMemberCount ( );
	bool GetClanJoinInfoList ( TArray< struct FClanJoinMemberList >* out_clanJoinList );
	struct FString FindClanJoinMember ( int userID );
	bool RemoveClanJoinMemberInfo ( int userID, struct FString NickName );
	bool AddNewClanJoinMemberInfo ( struct FClanJoinMemberList* newInfo );
	bool GetClanInfoList ( TArray< struct FMessengerInfo >* out_clanInfoList );
	bool GetClanInfo ( int userID, struct FString NickName, struct FMessengerInfo* out_ClanInfo );
	void GetCCardID ( );
	bool IsUsedCCardID ( int Index );
	bool IsNeedChangeClanPassword ( );
	void SetNeedChangeClanPassword ( unsigned long bFlag );
	bool AmIInClan ( );
	void ClearClanList ( );
	int GetClanListCount ( );
	struct FString FindClanMember ( int userID );
	bool ChangeRankPoint ( int userID, int gainPoint );
	bool ChangeClanPoint ( int userID, int gainPoint );
	bool RemoveClanInfo ( int userID, struct FString NickName );
	bool AddNewClanInfo ( struct FMessengerInfo* newInfo );
	int GetClanGradeInfo ( int userID );
	void ClearClanMessengerList ( );
	int GetClanManagerList ( TArray< struct FMessengerInfo >* out_clanManagerList );
	int GetClanMasterID ( );
	bool GetClanMasterList ( struct FMessengerInfo* out_clanMasterInfo );
	int GetClanList_Offline ( TArray< struct FMessengerInfo >* out_clanInfoList );
	int GetClanList_Online ( TArray< struct FMessengerInfo >* out_clanInfoList );
	bool ChangeClanMessengerInfo ( struct FMessengerInfo* changeInfo );
	void ClearClanUserTierPointData ( );
	void ClearMessengerTierPointData ( );
	bool GetMessengerVisible ( );
	void SetMessengerVisible ( unsigned long bVisible );
	bool IsOffline ( unsigned char SessionState );
	bool IsOnline ( unsigned char SessionState );
	int GetFriendListCount_Online ( );
	int GetBlockListCount ( );
	int GetFriendListCount ( );
	int GetSuggestionListCount ( );
	bool IsSameMessengerType ( unsigned char wantedType, int userID, struct FString NickName );
	int GetFriendList_Offline ( TArray< struct FMessengerInfo >* out_messengerInfoList );
	int GetFriendList_Online ( TArray< struct FMessengerInfo >* out_messengerInfoList );
	bool GetMessengerInfoListByType ( unsigned char Type, TArray< struct FMessengerInfo >* out_messengerInfoList );
	bool GetMessengerInfo ( int userID, struct FString NickName, struct FMessengerInfo* out_messengerInfo );
	bool ChangeMessengerInfo ( struct FMessengerInfo* changeInfo );
	void ClearMessengerList ( );
	bool RemoveMessengerInfo ( int userID, struct FString NickName );
	bool AddNewMessengerInfo ( struct FMessengerInfo* newInfo );
	bool IsInMaintenanceScene ( );
	void SetInMaintenanceScene ( unsigned long bIn );
	bool IsMyAFKState ( );
	unsigned char GetMySessionState ( );
	void SetMySessionState ( unsigned char NewState );
	void UpdateLastWhisperList ( struct FString Recipient );
	void UpdateClanMatchRecord ( );
	float GetPenaltySec ( );
	void SetPenaltySec ( float Value );
	bool IsGMChatPenalty ( );
	void SetGMChatPenalty ( unsigned long bFlag );
};

UClass* UCombatCommunityTransaction::pClassPointer = NULL;

// Class CombatGame.CombatCubeMapActor
// 0x0004 (0x01E4 - 0x01E0)
class ACombatCubeMapActor : public ASceneCaptureCubeMapActor
{
public:
	class UTextureCube*                                CapturedTextureCube;                              		// 0x01E0 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1601 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
	void ForceNetRelevant ( );
};

UClass* ACombatCubeMapActor::pClassPointer = NULL;

// Class CombatGame.CombatCubeMapBoxVolume
// 0x0034 (0x0234 - 0x0200)
class ACombatCubeMapBoxVolume : public AVolume
{
public:
	struct FBoxSphereBounds                            BrushBounds;                                      		// 0x0200 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoxMin;                                           		// 0x021C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoxMax;                                           		// 0x0228 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1602 ];

		return pClassPointer;
	};

	void ForceNetRelevant ( );
	void PostBeginPlay ( );
};

UClass* ACombatCubeMapBoxVolume::pClassPointer = NULL;

// Class CombatGame.CombatDamageType
// 0x006C (0x00D0 - 0x0064)
class UCombatDamageType : public UDamageType
{
public:
	struct FPointer                                    VfTable_IInterface_CombatWeaponType;              		// 0x0064 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bCausesBlood : 1;                                 		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSimplifiedAnimDeath : 1;                         		// 0x0068 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCausesBloodSplatterDecals : 1;                   		// 0x0068 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFriendlyFire : 1;                                		// 0x0068 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIgnoreReward : 1;                                		// 0x0068 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bPlacedWorld : 1;                                 		// 0x0068 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDamagedBySkill : 1;                              		// 0x0068 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDamagedByPlayer : 1;                             		// 0x0068 (0x0004) [0x0000000000000000] [0x00000080] 
	class UTimeDilationAnim*                           DeathTimeDilationAnim;                            		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SimplifiedMomentumFactor;                         		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              SimplifiedDeathUpkick;                            		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FName                                       DeathStatsName;                                   		// 0x0078 (0x0008) [0x0000000000000000]              
	struct FName                                       SuicideStatsName;                                 		// 0x0080 (0x0008) [0x0000000000000000]              
	struct FString                                     DeathString;                                      		// 0x0088 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FemaleSuicide;                                    		// 0x0094 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaleSuicide;                                      		// 0x00A0 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              TeammateDamageRate;                               		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              SelfDamageRate;                                   		// 0x00B0 (0x0004) [0x0000000000000000]              
	unsigned char                                      WeaponType;                                       		// 0x00B4 (0x0001) [0x0000000000000000]              
	unsigned char                                      DamageType;                                       		// 0x00B5 (0x0001) [0x0000000000000000]              
	unsigned char                                      DamageAnimIndex;                                  		// 0x00B6 (0x0001) [0x0000000000000000]              
	unsigned char                                      SubIndex;                                         		// 0x00B7 (0x0001) [0x0000000000000000]              
	struct FString                                     WeaponStatType;                                   		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             WeaponTypeName;                                   		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1603 ];

		return pClassPointer;
	};

	bool IsGunWeapon ( );
	bool IsExplosionWeapon ( );
	bool IsBulletWeapon ( );
	bool IsGrenade ( );
	bool IsMeleeWeapon ( );
	int GetWeaponStatType ( );
	unsigned char GetWeaponType ( );
	bool IsEquipWeapon ( );
	bool IsPlacedUseItem ( );
	bool IsPlacedWeapon ( );
	bool IsPlacedActor ( );
	bool IsSkillUseItem ( );
	bool IsSkillWeapon ( );
	bool IsSkillActor ( );
	unsigned char GetDamageType ( );
	bool IsSimpleAnimDeath ( );
	void CalcDeathCamera ( class ACombatPawn* P, float DeltaTime, struct FVector* CameraLocation, struct FRotator* CameraRotation, float* CameraFOV );
	void DoCustomDamageEffects ( class ACombatPawn* ThePawn, class UClass* TheDamageType, struct FVector HitLocation, struct FTraceHitInfo* HitInfo );
	void PawnTornOff ( class ACombatPawn* DeadPawn );
	void IncrementSuicides ( class ACombatPlayerReplicationInfo* KilledPRI );
	void IncrementDeaths ( class ACombatPlayerReplicationInfo* KilledPRI );
	int IncrementKills ( class ACombatPlayerReplicationInfo* KillerPRI );
	float GetHitEffectDuration ( class APawn* P, float Damage );
	void SpawnHitEffect ( class APawn* P, float Damage, struct FVector Momentum, struct FName BoneName, struct FVector HitLocation );
	struct FString SuicideMessage ( class APlayerReplicationInfo* Victim );
	struct FString DeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim );
};

UClass* UCombatDamageType::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_BulletWeapon
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_BulletWeapon : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1604 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_BulletWeapon::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Buzz
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_Buzz : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1605 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Buzz::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Explosion
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_Explosion : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1606 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Explosion::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_AirStrike
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_AirStrike : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1607 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_AirStrike::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_C4
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_C4 : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1608 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_C4::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Claymore
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_Claymore : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1609 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Claymore::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_ExplosionWeapon
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_ExplosionWeapon : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1610 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_ExplosionWeapon::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_AttachGL
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_AttachGL : public UCombatDamageType_ExplosionWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1611 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_AttachGL::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Grenade
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_Grenade : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1612 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Grenade::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Howitzer
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_Howitzer : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1613 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Howitzer::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Predator
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_Predator : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1614 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Predator::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Fell
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_Fell : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1615 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Fell::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_HelicopterCannon
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_HelicopterCannon : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1616 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_HelicopterCannon::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Melee
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_Melee : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1617 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Melee::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_SentrygunCannon
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_SentrygunCannon : public UCombatDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1618 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_SentrygunCannon::pClassPointer = NULL;

// Class CombatGame.CombatDataTable
// 0x0084 (0x00C0 - 0x003C)
class UCombatDataTable : public UObject
{
public:
	class UClass*                                      EntryClass;                                       		// 0x003C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< struct FDataEntry >                        table;                                            		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     XMLPath;                                          		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ReferenceDataTablePath;                           		// 0x0064 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                CopyIndex;                                        		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned long                                      bForcedProperty : 1;                              		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      AutoSortEnable : 1;                               		// 0x0074 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0078 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatDataTable.TableMap
	TArray< struct FTypeAliasInfo >                    TypeAlias;                                        		// 0x00B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1619 ];

		return pClassPointer;
	};

	void GetAllTableObject ( TArray< class UCombatDataTableType* >* out_Object );
	void eventForcedProperty ( );
	class UCombatDataTableType* GetTableObject ( int tableIndex );
	int eventFindItemByIndex ( int DataIndex );
	class UCombatDataTable* CreateTable ( struct FString PathName );
	int GetTableDataCount ( );
	void AddEntry ( int Index, class UObject* Data );
	void Empty ( );
	void MergeTable ( class UCombatDataTable* SrcTable );
	class UObject* FindEntryBySubIndex ( int SubIndex );
	class UObject* FindEntry ( int Index );
	void UnloadAllEntries ( );
	void LoadAllEntries ( );
	void SetEntryIndex ( );
};

UClass* UCombatDataTable::pClassPointer = NULL;

// Class CombatGame.CombatDataTableType
// 0x0008 (0x0044 - 0x003C)
class UCombatDataTableType : public UObject
{
public:
	int                                                EntryIndex;                                       		// 0x003C (0x0004) [0x0000000000000000]              
	class UCombatDataTable*                            DataTable;                                        		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1620 ];

		return pClassPointer;
	};

};

UClass* UCombatDataTableType::pClassPointer = NULL;

// Class CombatGame.CombatDataRefAttend
// 0x0020 (0x0064 - 0x0044)
class UCombatDataRefAttend : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                Day;                                              		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     RewardTableCodeName;                              		// 0x0058 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1621 ];

		return pClassPointer;
	};

	struct FString GetRewardTableCodeName ( );
	int GetDay ( );
};

UClass* UCombatDataRefAttend::pClassPointer = NULL;

// Class CombatGame.CombatDataRefDecorationColor
// 0x0007 (0x004B - 0x0044)
class UCombatDataRefDecorationColor : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      Color_R;                                          		// 0x0048 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      Color_G;                                          		// 0x0049 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      Color_B;                                          		// 0x004A (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1622 ];

		return pClassPointer;
	};

	struct FLinearColor GetLinearColor ( );
};

UClass* UCombatDataRefDecorationColor::pClassPointer = NULL;

// Class CombatGame.CombatDataRefDecorationDecal
// 0x0010 (0x0054 - 0x0044)
class UCombatDataRefDecorationDecal : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     DecalTexture;                                     		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1623 ];

		return pClassPointer;
	};

};

UClass* UCombatDataRefDecorationDecal::pClassPointer = NULL;

// Class CombatGame.CombatDataRefDecorationParticle
// 0x0010 (0x0054 - 0x0044)
class UCombatDataRefDecorationParticle : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     DecalParticle;                                    		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1624 ];

		return pClassPointer;
	};

};

UClass* UCombatDataRefDecorationParticle::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefAchievement
// 0x0060 (0x00A4 - 0x0044)
class UCombatDataTableRefAchievement : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     Stat;                                             		// 0x0054 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                Type;                                             		// 0x0060 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Activation;                                       		// 0x0064 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Level;                                            		// 0x0068 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                RelativeGoal;                                     		// 0x006C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Goal;                                             		// 0x0070 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Money;                                            		// 0x0074 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ExpPoint;                                         		// 0x0078 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                AchievementPoint;                                 		// 0x007C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Param[ 0x3 ];                                     		// 0x0080 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                NameCode;                                         		// 0x008C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Step;                                             		// 0x0090 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     ImagePath;                                        		// 0x0094 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                StatNumber;                                       		// 0x00A0 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1625 ];

		return pClassPointer;
	};

	bool IsActivated ( );
	int GetAchievementPoint ( );
	struct FString GetImagePath ( );
	int GetStep ( );
	int GetRefStatNumber ( );
	int GetRelativeGoal ( );
	int GetType ( );
	struct FString GetStat ( );
	int GetScoringType ( );
	int GetNameCode ( );
	int GetGoal ( );
	struct FString GetCodeName ( );
	int GetID ( );
};

UClass* UCombatDataTableRefAchievement::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefAIRewardRank
// 0x0018 (0x005C - 0x0044)
class UCombatDataTableRefAIRewardRank : public UCombatDataTableType
{
public:
	struct FString                                     ModeCodeName;                                     		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      GRADE;                                            		// 0x0050 (0x0001) [0x0000000000000000]              
	int                                                Object_Min;                                       		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                Object_Max;                                       		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1626 ];

		return pClassPointer;
	};

};

UClass* UCombatDataTableRefAIRewardRank::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefBasicChat
// 0x0020 (0x0064 - 0x0044)
class UCombatDataTableRefBasicChat : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                Size;                                             		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     DisplayName;                                      		// 0x0058 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1627 ];

		return pClassPointer;
	};

	struct FString GetDisplayName ( );
	int GetSize ( );
	int GetID ( );
};

UClass* UCombatDataTableRefBasicChat::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefBGM
// 0x0030 (0x0074 - 0x0044)
class UCombatDataTableRefBGM : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     Country;                                          		// 0x0054 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	unsigned char                                      SceneIndex;                                       		// 0x0060 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      StartMonth;                                       		// 0x0061 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      StartDate;                                        		// 0x0062 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      EndMonth;                                         		// 0x0063 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      EndDate;                                          		// 0x0064 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     BGMPath;                                          		// 0x0068 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1628 ];

		return pClassPointer;
	};

	struct FString eventGetBGMPath ( );
	unsigned char eventGetEndDate ( );
	unsigned char eventGetEndMonth ( );
	unsigned char eventGetStartDate ( );
	unsigned char eventGetStartMonth ( );
	unsigned char eventGetSceneIndex ( );
	struct FString eventGetCountry ( );
	struct FString eventGetCodeName ( );
};

UClass* UCombatDataTableRefBGM::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefBoosterItem
// 0x004F (0x0093 - 0x0044)
class UCombatDataTableRefBoosterItem : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CHANNEL_CODENAME;                                 		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ITEM_CODENAME;                                    		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TOOLTIP_ID;                                       		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                BUFF_EXP;                                         		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                BUFF_GOLD;                                        		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                BUFF_ATTEND_REWARD;                               		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                DAY_INFO;                                         		// 0x007C (0x0004) [0x0000000000000000]              
	struct FTimeData                                   BOOSTER_START;                                    		// 0x0080 (0x0008) [0x0000000000000000]              
	struct FTimeData                                   BOOSTER_END;                                      		// 0x0088 (0x0008) [0x0000000000000000]              
	unsigned char                                      BOOSTER_TYPE;                                     		// 0x0090 (0x0001) [0x0000000000000000]              
	unsigned char                                      Level;                                            		// 0x0091 (0x0001) [0x0000000000000000]              
	unsigned char                                      UI_VISIBLE;                                       		// 0x0092 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1629 ];

		return pClassPointer;
	};

	bool IsUIVisible ( );
	int GetLevel ( );
	int GetAttendReward ( );
	int GetGold ( );
	int GetExp ( );
	int GetToolTipID ( );
	bool IsChannelCodeName ( struct FString ChannelCodeName );
	unsigned char GetBoosterType ( );
};

UClass* UCombatDataTableRefBoosterItem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefCallingCard
// 0x0024 (0x0068 - 0x0044)
class UCombatDataTableRefCallingCard : public UCombatDataTableType
{
public:
	int                                                NAME_TEXT;                                        		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Id;                                               		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ImageID;                                          		// 0x004C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CCard_AssetName;                                  		// 0x0050 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     CodeName;                                         		// 0x005C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1630 ];

		return pClassPointer;
	};

	struct FString GetCodeName ( );
	int GetImageID ( );
	struct FString GetAsset ( );
	int GetID ( );
	int GetNameText ( );
};

UClass* UCombatDataTableRefCallingCard::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefChannelBindRegion
// 0x0010 (0x0054 - 0x0044)
class UCombatDataTableRefChannelBindRegion : public UCombatDataTableType
{
public:
	struct FString                                     ChannelCodeName;                                  		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ServiceRegionID;                                  		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1631 ];

		return pClassPointer;
	};

	int GetServiceRegionID ( );
	struct FString GetChannelCodeName ( );
};

UClass* UCombatDataTableRefChannelBindRegion::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefClanExp
// 0x0014 (0x0058 - 0x0044)
class UCombatDataTableRefClanExp : public UCombatDataTableType
{
public:
	int                                                Level;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                GoalExp;                                          		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     LevelColor;                                       		// 0x004C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1632 ];

		return pClassPointer;
	};

	struct FString GetLevelColor ( );
	int GetGoalExp ( );
	int GetLevel ( );
};

UClass* UCombatDataTableRefClanExp::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefClanRegion
// 0x0008 (0x004C - 0x0044)
class UCombatDataTableRefClanRegion : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                RegionStringID;                                   		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1633 ];

		return pClassPointer;
	};

	int GetLegionIndex ( );
};

UClass* UCombatDataTableRefClanRegion::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefClanSection
// 0x000C (0x0050 - 0x0044)
class UCombatDataTableRefClanSection : public UCombatDataTableType
{
public:
	unsigned char                                      GRADE;                                            		// 0x0044 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                SectionStart;                                     		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                SectionEnd;                                       		// 0x004C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1634 ];

		return pClassPointer;
	};

	int GetSectionEnd ( );
	int GetSectionStart ( );
	unsigned char GetGrade ( );
};

UClass* UCombatDataTableRefClanSection::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefCompetitiveBindMode
// 0x0040 (0x0084 - 0x0044)
class UCombatDataTableRefCompetitiveBindMode : public UCombatDataTableType
{
public:
	struct FString                                     SeasonCodeName;                                   		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ModeCodeName;                                     		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SeasonGroup;                                      		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      SeasonHistory : 1;                                		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsRegularMode : 1;                                		// 0x0068 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FTimeData                                   ModeStart;                                        		// 0x006C (0x0008) [0x0000000000000000]              
	struct FTimeData                                   ModeEnd;                                          		// 0x0074 (0x0008) [0x0000000000000000]              
	int                                                PlacementMatchCount;                              		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                DefaultTierPoint;                                 		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1635 ];

		return pClassPointer;
	};

	int GetModeEndTimeSeconds ( );
	int GetModeStartTimeSeconds ( );
	int GetDefaultTierPoint ( );
	int GetPlacementMatchCount ( );
	bool GetIsRegularMode ( );
	struct FTimeData GetModeEnd ( );
	struct FTimeData GetModeStart ( );
	bool GetSeasonHistory ( );
	struct FString GetSeasonGroup ( );
	struct FString GetModeCodeName ( );
	struct FString GetSeasonCodeName ( );
	struct FString GetModeGroupCodeName ( int ModeID );
	int GetDefaultTierPointModeID ( int ModeID );
	bool IsRegularSeasonTime ( );
};

UClass* UCombatDataTableRefCompetitiveBindMode::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefCompetitivePenalty
// 0x0020 (0x0064 - 0x0044)
class UCombatDataTableRefCompetitivePenalty : public UCombatDataTableType
{
public:
	struct FString                                     ModeGroupCodename;                                		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                AcceptPoint;                                      		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                AcceptAlertTime;                                  		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                AcceptTime;                                       		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                AcceptInterval;                                   		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                DecreasePoint;                                    		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1636 ];

		return pClassPointer;
	};

	int GetDecreasePoint ( );
	int GetAcceptInterval ( );
	int GetAcceptTime ( );
	int GetAcceptAlertTime ( );
	int GetAcceptPoint ( );
	struct FString GetModeGroupCodeName ( );
	class UCombatDataTableRefCompetitivePenalty* GetCompetitivePenaltyTableFromScore ( struct FString _ModeCodeName, int Score );
};

UClass* UCombatDataTableRefCompetitivePenalty::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefCompetitiveSeason
// 0x0018 (0x005C - 0x0044)
class UCombatDataTableRefCompetitiveSeason : public UCombatDataTableType
{
public:
	struct FString                                     SeasonCodeName;                                   		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ModeGroupCodename;                                		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1637 ];

		return pClassPointer;
	};

	struct FString GetModeGroupCodeName ( );
	struct FString GetSeasonCodeName ( );
};

UClass* UCombatDataTableRefCompetitiveSeason::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefCrosshair
// 0x000A (0x004E - 0x0044)
class UCombatDataTableRefCrosshair : public UCombatDataTableType
{
public:
	int                                                Id;                                               		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      DotOnly : 1;                                      		// 0x0048 (0x0004) [0x0000000000020001] [0x00000001] ( CPF_Edit | CPF_EditConst )
	unsigned long                                      UseCenterDot : 1;                                 		// 0x0048 (0x0004) [0x0000000000020001] [0x00000002] ( CPF_Edit | CPF_EditConst )
	unsigned char                                      BasicCrosshairType;                               		// 0x004C (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      Thickness;                                        		// 0x004D (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1638 ];

		return pClassPointer;
	};

	unsigned char GetThickness ( );
	bool GetUseCenterDot ( );
	unsigned char GetBasicCrosshairType ( );
	bool GetDotOnly ( );
	int GetID ( );
};

UClass* UCombatDataTableRefCrosshair::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefCubeBox
// 0x0038 (0x007C - 0x0044)
class UCombatDataTableRefCubeBox : public UCombatDataTableType
{
public:
	struct FString                                     CubeCodeName;                                     		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                GiveType;                                         		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueMin;                                         		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueMax;                                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     OutputCodeName;                                   		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                JackpotValue;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OutputGrade;                                      		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EffectType;                                       		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FrameType;                                        		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TagType;                                          		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1639 ];

		return pClassPointer;
	};

	int eventGetTagType ( );
	int GetFrameType ( );
	int GetEffectType ( );
	int GetOutputGrade ( );
	int GetJackpotValue ( );
	struct FString GetOutputCodeName ( );
	int GetValueMax ( );
	int GetValueMin ( );
	int eventGetGiveType ( );
	struct FString GetCubeCodeName ( );
	int eventGetIndex ( );
};

UClass* UCombatDataTableRefCubeBox::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefDefine
// 0x0020 (0x0064 - 0x0044)
class UCombatDataTableRefDefine : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020000]              ( CPF_EditConst )
	struct FString                                     DefineName;                                       		// 0x0048 (0x000C) [0x0000000000420000]              ( CPF_EditConst | CPF_NeedCtorLink )
	unsigned char                                      ValueType;                                        		// 0x0054 (0x0001) [0x0000000000020000]              ( CPF_EditConst )
	struct FString                                     Value;                                            		// 0x0058 (0x000C) [0x0000000000420000]              ( CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1640 ];

		return pClassPointer;
	};

	struct FString GetValue_String ( struct FString _DefineName );
	float GetValue_Float ( struct FString _DefineName );
	int GetValue_Int ( struct FString _DefineName );
};

UClass* UCombatDataTableRefDefine::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefDrop
// 0x0060 (0x00A4 - 0x0044)
class UCombatDataTableRefDrop : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     RefPickupCodeName[ 0x5 ];                         		// 0x0054 (0x003C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                DropRate[ 0x5 ];                                  		// 0x0090 (0x0014) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1641 ];

		return pClassPointer;
	};

	struct FString GetPickup ( int ArrayIndex );
	int GetDropRate ( int ArrayIndex );
};

UClass* UCombatDataTableRefDrop::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefEmblem
// 0x0014 (0x0058 - 0x0044)
class UCombatDataTableRefEmblem : public UCombatDataTableType
{
public:
	int                                                Id;                                               		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ImageID;                                          		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     Emblem_AssetName;                                 		// 0x004C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1642 ];

		return pClassPointer;
	};

	int GetImageID ( );
	struct FString GetAsset ( );
	int GetID ( );
};

UClass* UCombatDataTableRefEmblem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefExchangeCash
// 0x00A8 (0x00EC - 0x0044)
class UCombatDataTableRefExchangeCash : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                CashType;                                         		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                Value[ 0xA ];                                     		// 0x004C (0x0028) [0x0000000000000000]              
	int                                                Price[ 0xA ];                                     		// 0x0074 (0x0028) [0x0000000000000000]              
	int                                                SalePrice[ 0xA ];                                 		// 0x009C (0x0028) [0x0000000000000000]              
	struct FString                                     ItemCodeName;                                     		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SaleCategoryString;                               		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                LobbyNotifierString;                              		// 0x00D4 (0x0004) [0x0000000000000000]              
	unsigned long                                      PopupNotifier : 1;                                		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FTimeData                                   SaleTimeStart;                                    		// 0x00DC (0x0008) [0x0000000000000000]              
	struct FTimeData                                   SaleTimeEnd;                                      		// 0x00E4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1643 ];

		return pClassPointer;
	};

	int GetSaleTimeEndSeconds ( );
	int GetSaleTimeStartSeconds ( );
	bool isSalePrice ( int I );
	bool isSale ( );
	struct FString GetSalePrice ( int I );
	struct FString GetPrice ( int I );
	struct FTimeData GetSaleTimeEnd ( );
	struct FTimeData GetSaleTimeStart ( );
	bool GetPopupNotifier ( );
	int GetLobbyNotifierString ( );
	int GetSaleCategoryString ( );
	struct FString GetItemCodeName ( );
	int GetValue ( int I );
	int GetCashType ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefExchangeCash::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefExp
// 0x005C (0x00A0 - 0x0044)
class UCombatDataTableRefExp : public UCombatDataTableType
{
public:
	int                                                Level;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                GoalExp;                                          		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     SmallImage;                                       		// 0x004C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ImageID_Small;                                    		// 0x0058 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     BigImage;                                         		// 0x005C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ImageID_Big;                                      		// 0x0068 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                LevelNameID;                                      		// 0x006C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     LevelUpTopImage;                                  		// 0x0070 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ImageID_LevelUpTop;                               		// 0x007C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     LevelUpBottomImage;                               		// 0x0080 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ImageID_LevelUpBottom;                            		// 0x008C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     RewardCodeName;                                   		// 0x0090 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ImageID_RewardCode;                               		// 0x009C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1644 ];

		return pClassPointer;
	};

	int GetRewardCodeID ( );
	struct FString GetRewardCodeName ( );
	int GetLevelUpBottomImageID ( );
	struct FString GetLevelUpBottomImage ( );
	int GetLevelUpTopImageID ( );
	struct FString GetLevelUpTopImage ( );
	int eventGetLevelNameID ( );
	int eventGetLevelImageID ( unsigned char iconType );
	struct FString eventGetLevelImageName ( unsigned char iconType );
	int GetGoalExp ( );
	int GetLevel ( );
};

UClass* UCombatDataTableRefExp::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefFilter
// 0x0020 (0x0064 - 0x0044)
class UCombatDataTableRefFilter : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                SceneType;                                        		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                MainMenu;                                         		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                SubMenu;                                          		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                MenuNameID;                                       		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                ItemType[ 0x3 ];                                  		// 0x0058 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1645 ];

		return pClassPointer;
	};

	int GetItemType ( int _Type );
	int GetMenuNameID ( );
	int GetSubMenu ( );
	int GetMainMenu ( );
	int GetSceneType ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefFilter::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefFormula
// 0x0084 (0x00C8 - 0x0044)
class UCombatDataTableRefFormula : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Params[ 0xA ];                                    		// 0x0050 (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1646 ];

		return pClassPointer;
	};

	struct FString GetParam ( int Index );
	struct FString GetCodeName ( );
	int GetFomulaParamInt ( struct FString _CodeName, int _Index );
	float GetFomulaParamFloat ( struct FString _CodeName, int _Index );
};

UClass* UCombatDataTableRefFormula::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefFrontEndMode
// 0x000D (0x0051 - 0x0044)
class UCombatDataTableRefFrontEndMode : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      ActivationType;                                   		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1647 ];

		return pClassPointer;
	};

	bool IsHide ( );
	bool IsDisable ( );
	struct FString GetCodeName ( );
};

UClass* UCombatDataTableRefFrontEndMode::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefGameChannel
// 0x0058 (0x009C - 0x0044)
class UCombatDataTableRefGameChannel : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	int                                                Level_Block;                                      		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                Level_Low;                                        		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                Level_High;                                       		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                KAD_Block;                                        		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                KAD_Min;                                          		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                KAD_Max;                                          		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                Clan_Block;                                       		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                Championship_Block;                               		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                ChampionshipTF;                                   		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                OpenChannel;                                      		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                TitleId;                                          		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                DescriptionID;                                    		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                Ping_Block;                                       		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                PingCount;                                        		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                PingTolerance;                                    		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                DesignType;                                       		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                Server;                                           		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                ChannelState;                                     		// 0x0098 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1648 ];

		return pClassPointer;
	};

	int GetChannelState ( );
	int GetServer ( );
	int GetDesignType ( );
	int GetPingTolerance ( );
	int GetPingCount ( );
	int GetPingBlock ( );
	int GetDescriptionID ( );
	int GetTitleID ( );
	int GetOpenChannel ( );
	int GetChampionshipTF ( );
	int GetChampionshipBlock ( );
	int GetClanBlock ( );
	int GetKADMax ( );
	int GetKADMin ( );
	int GetKADBlock ( );
	int GetLevelHigh ( );
	int GetLevelLow ( );
	int GetLevelBlock ( );
	struct FString GetCodeName ( );
	int GetIndex ( );
	class UCombatDataTableRefGameChannel* GetRefGameChannel ( int _Index );
};

UClass* UCombatDataTableRefGameChannel::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefGameChannelProperty
// 0x0010 (0x0054 - 0x0044)
class UCombatDataTableRefGameChannelProperty : public UCombatDataTableType
{
public:
	struct FString                                     GameChannel;                                      		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DescriptionID;                                    		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1649 ];

		return pClassPointer;
	};

	int GetDescriptionID ( struct FString _GameChannel );
};

UClass* UCombatDataTableRefGameChannelProperty::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefGameScoring
// 0x0050 (0x0094 - 0x0044)
class UCombatDataTableRefGameScoring : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                Score;                                            		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                SeizeScore;                                       		// 0x0058 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                CreditPoint;                                      		// 0x005C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                RankExp;                                          		// 0x0060 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ScoreName;                                        		// 0x0064 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     ImagePath;                                        		// 0x0068 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ImageID;                                          		// 0x0074 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                BGImgType;                                        		// 0x0078 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                CountImgType;                                     		// 0x007C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Count;                                            		// 0x0080 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      Type;                                             		// 0x0084 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      GRADE;                                            		// 0x0085 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      ScoringDisplayLocation;                           		// 0x0086 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      ScoringTextColorNumber;                           		// 0x0087 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     SoundPath;                                        		// 0x0088 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1650 ];

		return pClassPointer;
	};

	unsigned char GetScoringTextColorNumber ( );
	unsigned char GetScoringDisplayLocation ( );
	int GetModeDependencyScore ( struct FName modeType );
	unsigned char GetGrade ( );
	struct FString GetSoundPath ( );
	unsigned char GetDisplayType ( );
	int GetCount ( );
	int GetCountImage ( );
	int GetBGImage ( );
	int GetImageID ( );
	struct FString GetImagePath ( );
	int GetRankExp ( );
	int GetCreditPoint ( );
	struct FString GetCodeName ( );
	int GetScore ( );
	int GetNameID ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefGameScoring::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefGameServer
// 0x000C (0x0050 - 0x0044)
class UCombatDataTableRefGameServer : public UCombatDataTableType
{
public:
	int                                                Server;                                           		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                TitleId;                                          		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                DescriptionID;                                    		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1651 ];

		return pClassPointer;
	};

	int GetDescriptionID ( int _Index );
	int GetTitleID ( int _Index );
};

UClass* UCombatDataTableRefGameServer::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefGear
// 0x0028 (0x006C - 0x0044)
class UCombatDataTableRefGear : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Cost;                                             		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                NameID;                                           		// 0x004C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                TooltipDescID;                                    		// 0x0050 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     IconName;                                         		// 0x0054 (0x000C) [0x0000000000520001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     ScriptFile;                                       		// 0x0060 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1652 ];

		return pClassPointer;
	};

	struct FString GetScriptFile ( );
	struct FString GetIconName ( );
	int GetTooltipDescID ( );
	int GetNameID ( );
	int GetCost ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefGear::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefHelpDetailInfo
// 0x0028 (0x006C - 0x0044)
class UCombatDataTableRefHelpDetailInfo : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x0044 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                TabNameID;                                        		// 0x0050 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                HighlightTextID;                                  		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                DetailInfoTextID;                                 		// 0x0058 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     ImageName;                                        		// 0x005C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ImageID;                                          		// 0x0068 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1653 ];

		return pClassPointer;
	};

	int GetImageID ( );
	struct FString GetImageName ( );
	int GetDetailInfoTextID ( );
	int GetHighlightTextID ( );
	int GetTabNameID ( );
	struct FString GetCodeName ( );
};

UClass* UCombatDataTableRefHelpDetailInfo::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefHelpTab
// 0x0104 (0x0148 - 0x0044)
class UCombatDataTableRefHelpTab : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x0044 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                Category;                                         		// 0x0050 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                TabNameID;                                        		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     SubCodeName[ 0x14 ];                              		// 0x0058 (0x00F0) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1654 ];

		return pClassPointer;
	};

	struct FString GetSubCodeName ( int I );
	int GetTabNameID ( );
	int GetCategory ( );
	struct FString GetCodeName ( );
};

UClass* UCombatDataTableRefHelpTab::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefImagePath
// 0x0010 (0x0054 - 0x0044)
class UCombatDataTableRefImagePath : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     FullImagePath;                                    		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1655 ];

		return pClassPointer;
	};

	struct FString GetFullImagePath ( );
};

UClass* UCombatDataTableRefImagePath::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefInitItem
// 0x001C (0x0060 - 0x0044)
class UCombatDataTableRefInitItem : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                bActive;                                          		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                PresetEquip[ 0x3 ];                               		// 0x0054 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1656 ];

		return pClassPointer;
	};

	bool IsPresetEquip ( int preset );
	bool IsActive ( );
	struct FString GetCodeName ( );
	class UCombatDataTableRefInitItem* GetRefInitItem ( struct FString _CodeName );
};

UClass* UCombatDataTableRefInitItem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefItem
// 0x00AC (0x00F0 - 0x0044)
class UCombatDataTableRefItem : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                ItemStringID;                                     		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                ChaNameID;                                        		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                ExclusiveMode;                                    		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                RequireLevel;                                     		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                DetailOverall;                                    		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                ItemGrade;                                        		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                ImageID_HUDWeaapon;                               		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                ImageID_Lobby;                                    		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                ImageID_Preset;                                   		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                AbilityDescriptionID;                             		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                DescriptionID;                                    		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned char                                      Service;                                          		// 0x0074 (0x0001) [0x0000000000000000]              
	unsigned char                                      Type1;                                            		// 0x0075 (0x0001) [0x0000000000000000]              
	unsigned char                                      Type2;                                            		// 0x0076 (0x0001) [0x0000000000000000]              
	unsigned char                                      Type3;                                            		// 0x0077 (0x0001) [0x0000000000000000]              
	unsigned char                                      Type4;                                            		// 0x0078 (0x0001) [0x0000000000000000]              
	unsigned char                                      RequireTarget;                                    		// 0x0079 (0x0001) [0x0000000000000000]              
	unsigned char                                      StackCount;                                       		// 0x007A (0x0001) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     OriginalCodeName;                                 		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PRIScriptFile;                                    		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SUBScriptFile;                                    		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PRIVoiceFile;                                     		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SUBVoiceFile;                                     		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StackViewCodeName;                                		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       PRIAttachmentWeapon;                              		// 0x00D0 (0x0008) [0x0000000000000000]              
	struct FName                                       SUBAttachmentWeapon;                              		// 0x00D8 (0x0008) [0x0000000000000000]              
	unsigned long                                      bSteamItem : 1;                                   		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     ScriptPrePix;                                     		// 0x00E4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1657 ];

		return pClassPointer;
	};

	bool IsMCoinItem ( );
	bool IsBSCoinItem ( );
	bool IsGCoinItem ( );
	bool IsMedalItem ( );
	bool IsGameMoneyItem ( );
	bool IsSkillReconItem4 ( );
	bool IsSkillReconItem3 ( );
	bool IsSkillReconItem2 ( );
	bool IsSkillReconItem1 ( );
	bool IsSkillCommandItem4 ( );
	bool IsSkillCommandItem3 ( );
	bool IsSkillCommandItem2 ( );
	bool IsSkillCommandItem1 ( );
	bool IsSkillSupportItem4 ( );
	bool IsSkillSupportItem3 ( );
	bool IsSkillSupportItem2 ( );
	bool IsSkillSupportItem1 ( );
	bool IsSkillAssaultItem4 ( );
	bool IsSkillAssaultItem3 ( );
	bool IsSkillAssaultItem2 ( );
	bool IsSkillAssaultItem1 ( );
	bool IsPlaceWeaponPistolItem ( );
	bool IsPlaceWeaponGLItem ( );
	bool IsPlaceWeaponRLItem ( );
	bool IsPlaceUseTiggerItem ( );
	bool IsSkillWeaponGLItem ( );
	bool IsSkillWeaponRLItem ( );
	bool IsClaymoreItem ( );
	bool IsHowitzerItem ( );
	bool IsPredatorItem ( );
	bool IsChopperItem ( );
	bool IsAirstrikeItem ( );
	bool IsUAVItem ( );
	bool IsAmmokitItem ( );
	bool IsMedikitItem ( );
	bool IsTestChannelTicketItem ( );
	bool IsClanTicketItem ( );
	bool IsOfflineChampionshipItem ( );
	bool IsOnlineChampionshipItem ( );
	bool IsResetCompetitiveItem ( );
	bool IsResetStatItem ( );
	bool IsCallsignChangeItem ( );
	bool IsKeyItem ( );
	bool IsLockedBoxItem ( );
	bool IsRandomBoxItem ( );
	bool IsMoneyTypeItem ( );
	bool IsCallingCardItem ( );
	bool IsAddMedalItem ( );
	bool IsAddGoldItem ( );
	bool IsAddIncreaseClanMemberItem ( );
	bool IsArmorCommonItem ( );
	bool IsSkillReconItem ( );
	bool IsSkillCommandItem ( );
	bool IsSkillSupportItem ( );
	bool IsSkillAssaultItem ( );
	bool IsBoosterAttendRewardItem ( );
	bool IsBoosterGoldItem ( );
	bool IsBoosterExpItem ( );
	bool IsBoosterGoldExpItem ( );
	bool IsChaFXUpperItem ( );
	bool IsChaFXFootItem ( );
	bool IsC4KitItem ( );
	bool IsMachinePistolItem ( );
	bool IsPistolItem ( );
	bool IsShotGunItem ( );
	bool IsBASRItem ( );
	bool IsLMGItem ( );
	bool IsDMRItem ( );
	bool IsRifleItem ( );
	bool IsSMGItem ( );
	bool IsPlaceWeaponItem ( );
	bool IsPlaceUseItem ( );
	bool IsSkillWeaponItem ( );
	bool IsSkillUseItem ( );
	bool IsEventItem ( );
	bool IsPermissionItem ( );
	bool IsConsumeHiddenItem ( );
	bool IsInitializeItem ( );
	bool IsPackageItem ( );
	bool IsImmediateUseItem ( );
	bool IsAddMoneyItem ( );
	bool IsAddIncreaseItem ( );
	bool IsSprayItem ( );
	bool IsArmorItem ( );
	bool IsHiddenItem ( );
	bool IsSkillLicenseItem ( );
	bool IsBoosterItem ( );
	bool IsVisualItem ( );
	bool IsFunctionItem ( );
	bool IsSpecialAvatar ( );
	bool IsNormalAvatar ( );
	bool IsChip ( );
	bool IsThrowWeapon ( );
	bool IsWeapon ( );
	bool IsChipC ( );
	bool IsChipB ( );
	bool IsChipA ( );
	bool IsGrenadeC ( );
	bool IsGrenadeB ( );
	bool IsGrenadeA ( );
	bool IsMeleeWeapon ( );
	bool IsSubWeapon ( );
	bool IsPrimaryWeapon ( );
	bool IsInGamePlaceItem ( );
	bool IsInGameSkillItem ( );
	bool IsRealItem ( );
	bool IsPassiveItem ( );
	bool IsConsumeItem ( );
	bool IsActiveItem ( );
	bool IsClothsItem ( );
	bool IsEquipItem ( );
	struct FString GetSystemImagePath ( unsigned char ImageType );
	int GetItemCategoryStringID ( );
	int GetTypeDefineCodeID ( );
	int GetEquipType ( );
	bool IsAlwaysActiveItem ( );
	struct FString GetSuitScriptFileName ( unsigned char TeamNum );
	bool IsSteamItem ( );
	struct FString GetStackViewCodeName ( );
	struct FString GetSUBAttachmentWeaponName ( );
	struct FString GetPRIAttachmentWeaponName ( );
	struct FString GetVoiceFile ( unsigned char TeamNum );
	struct FString GetSUBScriptFileName ( );
	struct FString GetPRIScriptFileName ( );
	struct FString GetOriginalCodeName ( );
	struct FString GetCodeName ( );
	unsigned char GetStackCount ( );
	unsigned char GetRequireTarget ( );
	unsigned char GetType4 ( );
	unsigned char GetType3 ( );
	unsigned char GetType2 ( );
	unsigned char GetType1 ( );
	unsigned char GetService ( );
	int GetDescriptionID ( );
	int GetAbilityDescriptionID ( );
	int GetImageID_Preset ( );
	int GetImageID_Lobby ( );
	int GetImageID_HUDWeaapon ( );
	int GetItemGrade ( );
	bool IsDestroyable ( );
	int GetRequiredLevel ( );
	int GetExclusiveMode ( );
	int GetChaNameID ( );
	int GetItemStringID ( );
	int GetIndex ( );
	class UCombatDataTableRefItem* GetRefItem ( int _Index );
};

UClass* UCombatDataTableRefItem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefItemDetailinfo
// 0x0120 (0x0164 - 0x0044)
class UCombatDataTableRefItemDetailinfo : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                Accuracy;                                         		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                Damage;                                           		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                Range;                                            		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                RateOfFire;                                       		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                Recoil;                                           		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                Mobility;                                         		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                CurrentAmmo;                                      		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                ReserveAmmo;                                      		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     AddImage_Path[ 0xA ];                             		// 0x0074 (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                AddImage_ID[ 0xA ];                               		// 0x00EC (0x0028) [0x0000000000000000]              
	int                                                AddImage_NameID[ 0xA ];                           		// 0x0114 (0x0028) [0x0000000000000000]              
	int                                                AddImage_DescID[ 0xA ];                           		// 0x013C (0x0028) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1658 ];

		return pClassPointer;
	};

	int GetAddImage_DescID ( int _Index );
	int GetAddImage_NameID ( int _Index );
	int GetAddImage_ID ( int _Index );
	struct FString eventGetAddImage_Path ( int _Index );
	int GetReserveAmmo ( );
	int GetCurrentAmmo ( );
	int GetMobility ( );
	int GetRecoil ( );
	int GetRateOfFire ( );
	int GetRange ( );
	int GetDamage ( );
	int GetAccuracy ( );
	struct FString GetCodeName ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefItemDetailinfo::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefItemUnLockRecipe
// 0x0024 (0x0068 - 0x0044)
class UCombatDataTableRefItemUnLockRecipe : public UCombatDataTableType
{
public:
	struct FString                                     ItemCodeName;                                     		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     KeyCodeName;                                      		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     OutPutItemCodeName;                               		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1659 ];

		return pClassPointer;
	};

	struct FString GetOutPutItemCodeName ( );
	struct FString GetKeyCodeName ( );
	struct FString GetItemCodeName ( );
};

UClass* UCombatDataTableRefItemUnLockRecipe::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefKillCombo
// 0x002C (0x0070 - 0x0044)
class UCombatDataTableRefKillCombo : public UCombatDataTableType
{
public:
	struct FString                                     ModeCodeName;                                     		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ComboTime;                                        		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                Count;                                            		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                Description;                                      		// 0x0058 (0x0004) [0x0000000000000000]              
	struct FString                                     SoundCue;                                         		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                BonusPoint;                                       		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                ModeID;                                           		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1660 ];

		return pClassPointer;
	};

	int GetBonusPoint ( );
	struct FString GetSoundCue ( );
	int GetDescription ( );
	int GetCount ( );
	int eventGetComboTime ( );
};

UClass* UCombatDataTableRefKillCombo::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefLimitSale
// 0x0014 (0x0058 - 0x0044)
class UCombatDataTableRefLimitSale : public UCombatDataTableType
{
public:
	struct FString                                     ItemCodeName;                                     		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                Level;                                            		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                LimitCount;                                       		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1661 ];

		return pClassPointer;
	};

	int GetLimitCount ( );
	int GetLevel ( );
	struct FString GetItemCodeName ( );
};

UClass* UCombatDataTableRefLimitSale::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMailCategory
// 0x0008 (0x004C - 0x0044)
class UCombatDataTableRefMailCategory : public UCombatDataTableType
{
public:
	int                                                TabType;                                          		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                MailType;                                         		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1662 ];

		return pClassPointer;
	};

	int GetMailType ( );
	int GetTabType ( );
	int GetTabTypeFromMailType ( int MAIL_TYPE );
};

UClass* UCombatDataTableRefMailCategory::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMailForm
// 0x001C (0x0060 - 0x0044)
class UCombatDataTableRefMailForm : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                WriterStringID;                                   		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                TitleStringID;                                    		// 0x0058 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                DescStringID;                                     		// 0x005C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1663 ];

		return pClassPointer;
	};

	int GetDescStringID ( );
	int GetTitleStringID ( );
	int GetWriterStringID ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefMailForm::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMap
// 0x003C (0x0080 - 0x0044)
class UCombatDataTableRefMap : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     Filename;                                         		// 0x0054 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                DisplayName;                                      		// 0x0060 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      MapSize;                                          		// 0x0064 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                DescAi;                                           		// 0x0068 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ImageID_DisplayThumbnail;                         		// 0x006C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ImageID_Title;                                    		// 0x0070 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ImageID_Loading;                                  		// 0x0074 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ImageID_Minimap;                                  		// 0x0078 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ImageID_BGThumbnail;                              		// 0x007C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1664 ];

		return pClassPointer;
	};

	int GetDescAi ( );
	int GetImageID_BGThumbnail ( );
	unsigned char GetMapSize ( );
	int GetImageID_Minimap ( );
	int GetImageID_Loading ( );
	int GetImageID_Title ( );
	int GetImageID_DisplayThumbnail ( );
	struct FString eventGetFilename ( );
	int GetDisplayName ( );
	struct FString eventGetCodeName ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefMap::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMatchMaking
// 0x0038 (0x007C - 0x0044)
class UCombatDataTableRefMatchMaking : public UCombatDataTableType
{
public:
	int                                                Id;                                               		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                MaxUser;                                          		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                StartableMinUser;                                 		// 0x004C (0x0004) [0x0000000000000000]              
	struct FString                                     SupportGroupCodeName;                             		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      ReturnBackPlayedGame : 1;                         		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                RatingLowLock;                                    		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                RatingHighLock;                                   		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                SearchTimeOut;                                    		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                RefusePrevMatch;                                  		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                RefuseCommunityGroupMatchup;                      		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                TeamGroupLimit;                                   		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                PingID;                                           		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1665 ];

		return pClassPointer;
	};

	int GetPingID ( );
	int GetTeamGroupLimit ( );
	int GetRefuseCommunityGroupMatchup ( );
	int GetRefusePrevMatch ( );
	int GetSearchTimeOut ( );
	int GetRatingHighLock ( );
	int GetRatingLowLock ( );
	bool GetReturnBackPlayedGame ( );
	struct FString GetSupportGroupCodeName ( );
	int GetStartableMinUser ( );
	int GetMaxUser ( );
	int GetID ( );
};

UClass* UCombatDataTableRefMatchMaking::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMission
// 0x0034 (0x0078 - 0x0044)
class UCombatDataTableRefMission : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultModeCodename;                              		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DisplayName;                                      		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultModeGroupCodename;                         		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                OpenChannel;                                      		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                ImageID_Bg;                                       		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1666 ];

		return pClassPointer;
	};

	int GetImageID_Bg ( );
	int GetOpenChannel ( );
	struct FString GetDefaultModeGroupCodename ( );
	int GetDisplayName ( );
	struct FString GetDefaultModeCodename ( );
	struct FString GetCodeName ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefMission::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMode
// 0x0150 (0x0194 - 0x0044)
class UCombatDataTableRefMode : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     DefaultMapCodename;                               		// 0x0054 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     modeType;                                         		// 0x0060 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ModeUIType;                                       		// 0x006C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                HUDType;                                          		// 0x0070 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                RankSysID;                                        		// 0x0074 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                DisplayName;                                      		// 0x0078 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                DisplayOption;                                    		// 0x007C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                DisplayName_NoHtml;                               		// 0x0080 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     AiModeMatchRoomThumbnail;                         		// 0x0084 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     AiModeSocreBoardThumbnail;                        		// 0x0090 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ImageID;                                          		// 0x009C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                AiModeMatchRoomThumbnailID;                       		// 0x00A0 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                AiModeSocreBoardThumbnailID;                      		// 0x00A4 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     MaxUser;                                          		// 0x00A8 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     Goal;                                             		// 0x00B4 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     Mission;                                          		// 0x00C0 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     MatchEndScore;                                    		// 0x00CC (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     PlayTime;                                         		// 0x00D8 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     ThirdCameraView;                                  		// 0x00E4 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     FreeCameraView;                                   		// 0x00F0 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     DeathChat;                                        		// 0x00FC (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     AllChat;                                          		// 0x0108 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     Rush;                                             		// 0x0114 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     AutoTeamBalance;                                  		// 0x0120 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     LimitLevel;                                       		// 0x012C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     Observer;                                         		// 0x0138 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     Difficulty;                                       		// 0x0144 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     HalfChange;                                       		// 0x0150 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	unsigned char                                      ApplyGearSet;                                     		// 0x015C (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     AutoTeamChange;                                   		// 0x0160 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     ApplyClanRecord;                                  		// 0x016C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     RequiredClanMember;                               		// 0x0178 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                Category;                                         		// 0x0184 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                StartableMinUser;                                 		// 0x0188 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                PasswordSet;                                      		// 0x018C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                LimitedClanMember;                                		// 0x0190 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1667 ];

		return pClassPointer;
	};

	class UCombatDataTableRefMode* GetRefMode ( int _Index );
	int GetLimitedClanMember ( );
	int GetPasswordSet ( );
	int GetAiModeSocreBoardThumbnailID ( );
	int GetAiModeMatchRoomThumbnailID ( );
	struct FString GetAiModeSocreBoardThumbnail ( );
	struct FString GetAiModeMatchRoomThumbnail ( );
	struct FString GetOptionBy ( int OptionType );
	int GetStartableMinUser ( );
	int GetCategory ( );
	struct FString GetRequiredClanMember ( );
	struct FString GetApplyClanRecord ( );
	struct FString GetAutoTeamChange ( );
	unsigned char GetApplyGearSet ( );
	struct FString GetHalfChange ( );
	struct FString GetDifficulty ( );
	struct FString GetObserver ( );
	struct FString GetLimitLevel ( );
	struct FString GetAutoTeamBalance ( );
	struct FString GetRush ( );
	struct FString GetAllChat ( );
	struct FString GetDeathChat ( );
	struct FString GetFreeCameraView ( );
	struct FString GetThirdCameraView ( );
	struct FString GetPlayTime ( );
	struct FString GetMatchEndScore ( );
	struct FString GetMission ( );
	struct FString GetGoal ( );
	struct FString GetMaxUser ( );
	int GetRankSystemID ( );
	int GetImageID ( );
	int GetDisplayName_NoHtml ( );
	int GetDisplayOption ( );
	int GetDisplayName ( );
	int GetHudType ( );
	int GetModeUIType ( );
	struct FString GetModeType ( );
	struct FString GetDefaultMapCodename ( );
	struct FString GetCodeName ( );
	int eventGetIndex ( );
};

UClass* UCombatDataTableRefMode::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefModeGroup
// 0x0050 (0x0094 - 0x0044)
class UCombatDataTableRefModeGroup : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                Index;                                            		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FString                                     BindMission;                                      		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultMode;                                      		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectType;                                       		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                DisplayName;                                      		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                DisplayDescription;                               		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                DisplayModeName;                                  		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                ImageID_DisplayThumbnail;                         		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                ImageID_BGThumbnail;                              		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                ImageID_Title;                                    		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                ImageID_ModeThumbnail;                            		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                MatchMakingID;                                    		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                RegionPingGroupID;                                		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1668 ];

		return pClassPointer;
	};

	int GetRegionPingGroupID ( );
	int GetMatchMakingID ( );
	int GetImageID_ModeThumbnail ( );
	int GetDisplayModeName ( );
	int GetSelectType ( );
	int GetDisplayDescription ( );
	int GetImageID_Title ( );
	int GetImageID_BGThumbnail ( );
	int GetImageID_DisplayThumbnail ( );
	int GetDisplayName ( );
	struct FString GetDefaultMode ( );
	struct FString GetBindMission ( );
	struct FString GetCodeName ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefModeGroup::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefModeGroupBindMode
// 0x001C (0x0060 - 0x0044)
class UCombatDataTableRefModeGroupBindMode : public UCombatDataTableType
{
public:
	struct FString                                     ModeCodeName;                                     		// 0x0044 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     ModeGroupCodename;                                		// 0x0050 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                BetaVersion;                                      		// 0x005C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1669 ];

		return pClassPointer;
	};

	bool GetBetaVersion ( );
	struct FString GetModeCodeName ( );
	struct FString GetModeGroupCodeName ( );
};

UClass* UCombatDataTableRefModeGroupBindMode::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefModeGuide
// 0x0054 (0x0098 - 0x0044)
class UCombatDataTableRefModeGuide : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                Type;                                             		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ModeNameText;                                     		// 0x0058 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ModeHighlightText;                                		// 0x005C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                AttackTitleText;                                  		// 0x0060 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                DefenseTitleText;                                 		// 0x0064 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                AttackDetailText;                                 		// 0x0068 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                DefenseDetailText;                                		// 0x006C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     ImageName;                                        		// 0x0070 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ImageID;                                          		// 0x007C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                WeaponText[ 0x3 ];                                		// 0x0080 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     ModeCodeName;                                     		// 0x008C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1670 ];

		return pClassPointer;
	};

	struct FString GetModeCodeName ( );
	int GetWeaponText ( int ArrayIndex );
	int GetImageID ( );
	struct FString GetImageName ( );
	int GetDefenseDetailText ( );
	int GetAttackDetailText ( );
	int GetDefenseTitleText ( );
	int GetAttackTitleText ( );
	int GetModeHighlightText ( );
	int GetModeNameText ( );
	int GetType ( );
	struct FString GetCodeName ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefModeGuide::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefModeMap
// 0x002C (0x0070 - 0x0044)
class UCombatDataTableRefModeMap : public UCombatDataTableType
{
public:
	struct FString                                     ModeCodeName;                                     		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ModeGroupName;                                    		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MapCodeName;                                      		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ImageID_Minimap;                                  		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                BetaVersion;                                      		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1671 ];

		return pClassPointer;
	};

	bool GetBetaVersion ( );
	int GetImageID_Minimap ( );
	struct FString GetMapCodename ( );
	struct FString GetModeGroupname ( );
	struct FString GetModeCodeName ( );
};

UClass* UCombatDataTableRefModeMap::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefModeOption
// 0x003C (0x0080 - 0x0044)
class UCombatDataTableRefModeOption : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                Show;                                             		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                DefaultOption;                                    		// 0x0058 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                OptionCount;                                      		// 0x005C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< int >                                      Option;                                           		// 0x0060 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                UsingStringAll;                                   		// 0x006C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                StringAll;                                        		// 0x0070 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                String0;                                          		// 0x0074 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                String1;                                          		// 0x0078 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                String2;                                          		// 0x007C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1672 ];

		return pClassPointer;
	};

	int GetDefaultOptionValue ( );
	int GetDescriptionID ( int optionID_ );
	int GetOption ( int Num );
	int GetOptionCount ( );
	int GetDefaultOption ( );
	bool IsShow ( );
	struct FString GetCodeName ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefModeOption::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefModeTip
// 0x0024 (0x0068 - 0x0044)
class UCombatDataTableRefModeTip : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     Reference;                                        		// 0x0054 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                StringID_MIN;                                     		// 0x0060 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                StringID_MAX;                                     		// 0x0064 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1673 ];

		return pClassPointer;
	};

	int GetStringID_MAX ( );
	int GetStringID_MIN ( );
	struct FString GetReference ( );
	struct FString GetCodeName ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefModeTip::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefMoneyDisplay
// 0x0014 (0x0058 - 0x0044)
class UCombatDataTableRefMoneyDisplay : public UCombatDataTableType
{
public:
	int                                                MoneyID;                                          		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                Display_Tooltip;                                  		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                Renew_Tooltip;                                    		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                Charge_Tooltip;                                   		// 0x0050 (0x0004) [0x0000000000000000]              
	unsigned long                                      Toggle_Renew : 1;                                 		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      Toggle_Charge : 1;                                		// 0x0054 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1674 ];

		return pClassPointer;
	};

	bool GetToggle_Charge ( );
	bool GetToggle_Renew ( );
	int GetCharge_Tooltip ( );
	int GetRenew_Tooltip ( );
	int GetDisplay_Tooltip ( );
	int GetMoneyID ( );
};

UClass* UCombatDataTableRefMoneyDisplay::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefNation
// 0x0020 (0x0064 - 0x0044)
class UCombatDataTableRefNation : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                Order;                                            		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                LauncherStringID;                                 		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                RegionID;                                         		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                DefaultServiceRegionID;                           		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                DefaultPing;                                      		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1675 ];

		return pClassPointer;
	};

	int GetDefaultPing ( );
	int GetDefaultServiceRegionID ( );
	int GetRegionID ( );
	int GetLauncherStringID ( );
	int GetOrder ( );
	struct FString GetCodeName ( );
	void GetCurrentRegionDefaultPingByLanguage ( int* out_RegionID, int* out_DefaultPing );
};

UClass* UCombatDataTableRefNation::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefPenalty
// 0x0018 (0x005C - 0x0044)
class UCombatDataTableRefPenalty : public UCombatDataTableType
{
public:
	int                                                Idx;                                              		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ApplyRunawayCount;                                		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                CountAlleviationMinute;                           		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1676 ];

		return pClassPointer;
	};

	int GetCountAlleviationMinute ( );
	int GetApplyRunawayCount ( );
	struct FString GetCodeName ( );
	int GetIdx ( );
};

UClass* UCombatDataTableRefPenalty::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefPenaltyBind
// 0x0018 (0x005C - 0x0044)
class UCombatDataTableRefPenaltyBind : public UCombatDataTableType
{
public:
	struct FString                                     Penalty;                                          		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ModeGroup;                                        		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1677 ];

		return pClassPointer;
	};

	struct FString GetModeGroup ( );
	struct FString GetPenalty ( );
};

UClass* UCombatDataTableRefPenaltyBind::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefPickup
// 0x0038 (0x007C - 0x0044)
class UCombatDataTableRefPickup : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                MainAmmoRate;                                     		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                SubAmmoRate;                                      		// 0x0058 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                GrenadeRate_A;                                    		// 0x005C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                GrenadeRate_B;                                    		// 0x0060 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                GrenadeRate_C;                                    		// 0x0064 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                CureHealthRate;                                   		// 0x0068 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     ScriptFileName;                                   		// 0x006C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                StringID;                                         		// 0x0078 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1678 ];

		return pClassPointer;
	};

	struct FString GetScriptFileName ( );
	int GetCureHealthRate ( );
	int GetGrenadeRate_C ( );
	int GetGrenadeRate_B ( );
	int GetGrenadeRate_A ( );
	int GetSubAmmoRate ( );
	int GetMainAmmoRate ( );
};

UClass* UCombatDataTableRefPickup::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefPickUpDisplay
// 0x000C (0x0050 - 0x0044)
class UCombatDataTableRefPickUpDisplay : public UCombatDataTableType
{
public:
	int                                                Min;                                              		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                Max;                                              		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                String_ID;                                        		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1679 ];

		return pClassPointer;
	};

	int GetStringID ( );
	int GetMax ( );
	int GetMin ( );
};

UClass* UCombatDataTableRefPickUpDisplay::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefPingGroup
// 0x0008 (0x004C - 0x0044)
class UCombatDataTableRefPingGroup : public UCombatDataTableType
{
public:
	int                                                GroupID;                                          		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                PingUpper;                                        		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1680 ];

		return pClassPointer;
	};

	int GetPingUpper ( );
	int GetGroupID ( );
	int GetPingState ( int RegionID, int _GroupID, int Ping );
};

UClass* UCombatDataTableRefPingGroup::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefPingGroupBindRegion
// 0x000C (0x0050 - 0x0044)
class UCombatDataTableRefPingGroupBindRegion : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                ServiceRegionID;                                  		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                PingGroupID;                                      		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1681 ];

		return pClassPointer;
	};

	int GetPingGroupID ( );
	int GetServiceRegionID ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefPingGroupBindRegion::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefPreset
// 0x0080 (0x00C4 - 0x0044)
class UCombatDataTableRefPreset : public UCombatDataTableType
{
public:
	int                                                PresetNum;                                        		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                PresetNameID;                                     		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     PrimaryWeapon;                                    		// 0x004C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     SubWeapon;                                        		// 0x0058 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     MeleeWeapon;                                      		// 0x0064 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     GrenadeA;                                         		// 0x0070 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     GrenadeB;                                         		// 0x007C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     GrenadeC;                                         		// 0x0088 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     Chip_A;                                           		// 0x0094 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     Chip_B;                                           		// 0x00A0 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     Chip_C;                                           		// 0x00AC (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     Chip_D;                                           		// 0x00B8 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1682 ];

		return pClassPointer;
	};

	struct FString GetChip_D ( );
	struct FString GetChip_C ( );
	struct FString GetChip_B ( );
	struct FString GetChip_A ( );
	struct FString GetGrenadeC ( );
	struct FString GetGrenadeB ( );
	struct FString GetGrenadeA ( );
	struct FString GetMeleeWeapon ( );
	struct FString GetSubWeapon ( );
	struct FString GetPrimaryWeapon ( );
	int GetPresetNameID ( );
	int GetPresetNum ( );
};

UClass* UCombatDataTableRefPreset::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefQuest
// 0x0030 (0x0074 - 0x0044)
class UCombatDataTableRefQuest : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                QuestNameID;                                      		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                QuestObjectiveID;                                 		// 0x004C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                QuestDescriptionID;                               		// 0x0050 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                TotalCount;                                       		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                TotalCountType;                                   		// 0x0058 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                TotalStep;                                        		// 0x005C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                MissionProgressStringID;                          		// 0x0060 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      QuestGroup;                                       		// 0x0064 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      QuestType;                                        		// 0x0065 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< struct FStepByStepRewardType >             StepByStepReward;                                 		// 0x0068 (0x000C) [0x0000000000520001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1683 ];

		return pClassPointer;
	};

	TArray< struct FStepByStepRewardType > GetStepByStepReward ( );
	unsigned char GetQuestType ( );
	unsigned char GetQuestGroup ( );
	int GetMissionProgressStringID ( );
	int GetTotalStep ( );
	int GetTotalCountType ( );
	int GetTotalCount ( );
	int GetQuestDescriptionID ( );
	int GetQuestObjectiveID ( );
	int GetQuestNameID ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefQuest::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefRandomBox
// 0x0028 (0x006C - 0x0044)
class UCombatDataTableRefRandomBox : public UCombatDataTableType
{
public:
	struct FString                                     ItemCodeName;                                     		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CubeCodeName;                                     		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DrawType;                                         		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                CubeGivePercent;                                  		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                JackpotGuranteeCount;                             		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                JackpotGuranteeReset;                             		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1684 ];

		return pClassPointer;
	};

	int GetJackpotGuranteeReset ( );
	int GetJackpotGuranteeCount ( );
	int GetCubeGivePercent ( );
	int GetDrawType ( );
	struct FString GetCubeCodeName ( );
	struct FString GetItemCodeName ( );
};

UClass* UCombatDataTableRefRandomBox::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefRandomBoxCost
// 0x0014 (0x0058 - 0x0044)
class UCombatDataTableRefRandomBoxCost : public UCombatDataTableType
{
public:
	struct FString                                     ItemCodeName;                                     		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                BoxResourceIndex;                                 		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bChangeScene : 1;                                 		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1685 ];

		return pClassPointer;
	};

	int GetBoxResourceIndex ( );
	bool IsChangeScene ( );
	struct FString GetItemCodeName ( );
};

UClass* UCombatDataTableRefRandomBoxCost::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefRank
// 0x0034 (0x0078 - 0x0044)
class UCombatDataTableRefRank : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                RankName;                                         		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     BigIconName;                                      		// 0x0058 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     SmallIconName;                                    		// 0x0064 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ImageID_Big;                                      		// 0x0070 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ImageID_Small;                                    		// 0x0074 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1686 ];

		return pClassPointer;
	};

	int GetImageID_Small ( );
	int GetImageID_Big ( );
	struct FString GetSmallIconName ( );
	struct FString GetBigIconName ( );
	struct FString GetCodeName ( );
	int GetRankName ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefRank::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefRankUp
// 0x0028 (0x006C - 0x0044)
class UCombatDataTableRefRankUp : public UCombatDataTableType
{
public:
	int                                                Id;                                               		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Rank;                                             		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                GoalExp;                                          		// 0x004C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< struct FUnlockSkillData >                  UnlockSkillList;                                  		// 0x0050 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	unsigned long                                      bLastRank : 1;                                    		// 0x005C (0x0004) [0x0000000000020001] [0x00000001] ( CPF_Edit | CPF_EditConst )
	struct FString                                     RankCodeName;                                     		// 0x0060 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1687 ];

		return pClassPointer;
	};

	void GetActiveSkill ( TArray< struct FString >* List );
	struct FString GetUnlockSkill ( unsigned char ClassType, unsigned char Skilltype );
	bool CheckLastRank ( );
	struct FString GetRankTableCodeName ( );
	int GetGoalExp ( );
	int GetRank ( );
	int GetID ( );
};

UClass* UCombatDataTableRefRankUp::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefResultReward
// 0x001C (0x0060 - 0x0044)
class UCombatDataTableRefResultReward : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ItemCodeName;                                     		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                EffectType;                                       		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StringID;                                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SmallIconID;                                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1688 ];

		return pClassPointer;
	};

	int GetSmallIconID ( );
	int GetStringID ( );
	int GetEffectType ( );
	struct FString GetItemCodeName ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefResultReward::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefReward
// 0x0040 (0x0084 - 0x0044)
class UCombatDataTableRefReward : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ShowItemImage;                                    		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                RewardGameMoney;                                  		// 0x0058 (0x0004) [0x0000000000000000]              
	TArray< struct FRewardData >                       RewardDataList;                                   		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MailFormCodename;                                 		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                Medal;                                            		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                BSCoin;                                           		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                MCoin;                                            		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                GCoin;                                            		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1689 ];

		return pClassPointer;
	};

	int GetRewardItemSize ( );
	int GetRewardItemValueType ( int ItemIndex );
	int GetRewardItemValue ( int ItemIndex );
	struct FString GetRewardItemCodeName ( int ItemIndex );
	int GetRewardGCoin ( );
	int GetRewardMCoin ( );
	int GetRewardBSCoin ( );
	int GetRewardMedal ( );
	int GetRewardGameMoney ( );
	int GetShowItemImage ( );
};

UClass* UCombatDataTableRefReward::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefRoomName
// 0x0008 (0x004C - 0x0044)
class UCombatDataTableRefRoomName : public UCombatDataTableType
{
public:
	int                                                Code;                                             		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                DisplayID;                                        		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1690 ];

		return pClassPointer;
	};

	int GetDisplayID ( int _Code );
};

UClass* UCombatDataTableRefRoomName::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefServiceRegion
// 0x0020 (0x0064 - 0x0044)
class UCombatDataTableRefServiceRegion : public UCombatDataTableType
{
public:
	int                                                Id;                                               		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     URL;                                              		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RegionNameID;                                     		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1691 ];

		return pClassPointer;
	};

	struct FString GetURL ( );
	struct FString GetCodeName ( );
	int GetID ( );
	int GetRegionNameID ( int RegionID );
};

UClass* UCombatDataTableRefServiceRegion::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefShop
// 0x0014 (0x0058 - 0x0044)
class UCombatDataTableRefShop : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ShopNameID;                                       		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1692 ];

		return pClassPointer;
	};

	int GetShopNameID ( );
	struct FString GetCodeName ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefShop::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefShopCategory
// 0x0028 (0x006C - 0x0044)
class UCombatDataTableRefShopCategory : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     ShopCodename;                                     		// 0x0054 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ServiceType;                                      		// 0x0060 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                SubCategoryType;                                  		// 0x0064 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                DisplaynameID;                                    		// 0x0068 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1693 ];

		return pClassPointer;
	};

	struct FString GetShopCodename ( );
	struct FString GetCodeName ( );
	int GetDisplaynameID ( );
	int GetCategoryType ( );
	bool IsService ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefShopCategory::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefShopItem
// 0x0064 (0x00A8 - 0x0044)
class UCombatDataTableRefShopItem : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CategoryIndex;                                    		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                Service;                                          		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                LimitBuyType;                                     		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                LimitBuyCount;                                    		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FTimeData                                   SellStart;                                        		// 0x0064 (0x0008) [0x0000000000000000]              
	struct FTimeData                                   SellEnd;                                          		// 0x006C (0x0008) [0x0000000000000000]              
	struct FTimeData                                   RentalEndDate;                                    		// 0x0074 (0x0008) [0x0000000000000000]              
	int                                                RentalID;                                         		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                DisplaynameID;                                    		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FString                                     Thumbnail;                                        		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                BackImage;                                        		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                ImageID;                                          		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                EffectDescID;                                     		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                ItemDescID;                                       		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                ItemTag;                                          		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                GetType;                                          		// 0x00A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1694 ];

		return pClassPointer;
	};

	int GetLimitBuyCount ( );
	int GetLimitBuyType ( );
	int GetGetType ( );
	int GetItemDescID ( );
	int GetEffectDescID ( );
	bool eventIsHotTagShopItem ( );
	bool eventIsNewTagShopItem ( );
	int eventGetBackImage ( );
	int eventGetImageID ( );
	struct FString eventGetThumbnail ( );
	int eventGetDisplaynameID ( );
	int eventGetRentalID ( );
	struct FTimeData GetRentalEndDate ( );
	struct FString eventGetCodeName ( );
	int eventGetIndex ( );
	bool IsCashItem ( );
	struct FTimeData GetSellEnd ( );
	struct FTimeData GetSellStart ( );
	int GetCategoryIndex ( );
};

UClass* UCombatDataTableRefShopItem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefShopSellItem
// 0x001C (0x0060 - 0x0044)
class UCombatDataTableRefShopSellItem : public UCombatDataTableType
{
public:
	int                                                TimeCondition;                                    		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                OverlapCondition;                                 		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                MoneyType;                                        		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                SellCost;                                         		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1695 ];

		return pClassPointer;
	};

	struct FString GetCodeName ( );
	int GetSellCost ( );
	int GetMoneyType ( );
	int GetOverlapCondition ( );
	int GetTimeCondition ( );
	class UCombatDataTableRefShopSellItem* GetRefShopSellItem ( struct FString _CodeName );
};

UClass* UCombatDataTableRefShopSellItem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefShopTab
// 0x001C (0x0060 - 0x0044)
class UCombatDataTableRefShopTab : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     MainTab;                                          		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     SubTab;                                           		// 0x0054 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1696 ];

		return pClassPointer;
	};

	struct FString GetSubTab ( );
	struct FString GetMainTab ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefShopTab::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefShopValue
// 0x0090 (0x00D4 - 0x0044)
class UCombatDataTableRefShopValue : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                RentalID;                                         		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ValueType;                                        		// 0x004C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ValueRange[ 0x5 ];                                		// 0x0050 (0x0014) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                PriceType;                                        		// 0x0064 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ItemPrice[ 0x5 ];                                 		// 0x0068 (0x0014) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Mainprice;                                        		// 0x007C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                SalePrice[ 0x5 ];                                 		// 0x0080 (0x0014) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                AddPriceType;                                     		// 0x0094 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                AddPrice[ 0x5 ];                                  		// 0x0098 (0x0014) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FTimeData                                   SellStart;                                        		// 0x00AC (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FTimeData                                   SellEnd;                                          		// 0x00B4 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     AddReplaceItem;                                   		// 0x00BC (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     MailFormCodename;                                 		// 0x00C8 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1697 ];

		return pClassPointer;
	};

	int GetSalePrice ( int I );
	int GetMainPrice ( );
	int GetItemPrice ( int I );
	int GetPriceType ( );
	int GetItemValueRange ( int I );
	int GetValueType ( );
	int GetRentalID ( );
	int GetIndex ( );
	struct FTimeData GetSaleEnd ( );
	struct FTimeData GetSaleStart ( );
};

UClass* UCombatDataTableRefShopValue::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefShortcut
// 0x0034 (0x0078 - 0x0044)
class UCombatDataTableRefShortcut : public UCombatDataTableType
{
public:
	struct FString                                     ChannelCodeName;                                  		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MissionCodename;                                  		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ModeGroupCodename;                                		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      Disable : 1;                                      		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                Group;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                ShortcutImageID;                                  		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                ShortcutNameID;                                   		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1698 ];

		return pClassPointer;
	};

	int GetShortcutNameID ( );
	int GetShortcutImageID ( );
	int GetGroup ( );
	bool GetDisable ( );
	struct FString GetModeGroupCodeName ( );
	struct FString GetMissionCodeName ( );
	struct FString GetChannelCodeName ( );
};

UClass* UCombatDataTableRefShortcut::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefSkill
// 0x006C (0x00B0 - 0x0044)
class UCombatDataTableRefSkill : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     GroupCodeName;                                    		// 0x0054 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     LicenseCodeName;                                  		// 0x0060 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                ActiveUser;                                       		// 0x006C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Skilltype;                                        		// 0x0070 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                SkillCategory;                                    		// 0x0074 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Cost;                                             		// 0x0078 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                Count;                                            		// 0x007C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      CoolTimeType;                                     		// 0x0080 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                CoolTime;                                         		// 0x0084 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     ScriptFile;                                       		// 0x0088 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	unsigned long                                      HoldSkill : 1;                                    		// 0x0094 (0x0004) [0x0000000000020001] [0x00000001] ( CPF_Edit | CPF_EditConst )
	int                                                ItemName;                                         		// 0x0098 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     HUDIcon;                                          		// 0x009C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                Description;                                      		// 0x00A8 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ImageID;                                          		// 0x00AC (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1699 ];

		return pClassPointer;
	};

	bool GetHoldSkill ( );
	int GetImageID ( );
	struct FString GetHUDIcon ( );
	struct FString GetScriptFile ( );
	float GetCoolTime ( );
	unsigned char GetCoolTimeType ( );
	int GetCategory ( );
	int GetCount ( );
	int GetCost ( );
	struct FString GetGroupCodeName ( );
	struct FString eventGetLicenseCodeName ( );
	struct FString GetCodeName ( );
	int eventGetSkillType ( );
	int DescriptionID ( );
	int GetNameID ( );
	int eventGetIndex ( );
};

UClass* UCombatDataTableRefSkill::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefSkillLicense
// 0x0020 (0x0064 - 0x0044)
class UCombatDataTableRefSkillLicense : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                GRADE;                                            		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     LicenseCodeName;                                  		// 0x004C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     ItemCodeName;                                     		// 0x0058 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1700 ];

		return pClassPointer;
	};

	struct FString GetItemCodeName ( );
	struct FString eventGetLicenseCodeName ( );
	int GetSkillGrade ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefSkillLicense::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefStat
// 0x006C (0x00B0 - 0x0044)
class UCombatDataTableRefStat : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                StatName;                                         		// 0x0054 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                StatDesc;                                         		// 0x0058 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                RecordType;                                       		// 0x005C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      GameSetTableKey;                                  		// 0x0060 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      DataSetTableKey;                                  		// 0x0061 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      ConstValueKey;                                    		// 0x0062 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0064 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatDataTableRefStat.Event
	struct FString                                     RefModeCodeName;                                  		// 0x0068 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     RefMapCodeName;                                   		// 0x0074 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     RefStatGroupCodeName;                             		// 0x0080 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     RefItemCodeName;                                  		// 0x008C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     RefRankCodeName;                                  		// 0x0098 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     RefScoringCodeName;                               		// 0x00A4 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1701 ];

		return pClassPointer;
	};

	void GetEventIndex ( struct FName EventName );
	struct Fdword GetStatId ( struct FString _ModeName, struct FString _StatName );
	int GetRecordType ( );
	int GetStatDesc ( );
	int GetStatName ( );
	struct FString GetCodeName ( );
	int GetIndex ( );
};

UClass* UCombatDataTableRefStat::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefSteamItem
// 0x000C (0x0050 - 0x0044)
class UCombatDataTableRefSteamItem : public UCombatDataTableType
{
public:
	struct FString                                     ITEM_CODE_NAME;                                   		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1702 ];

		return pClassPointer;
	};

	struct FString GetItemCodeName ( );
};

UClass* UCombatDataTableRefSteamItem::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefSupportUserGroup
// 0x0010 (0x0054 - 0x0044)
class UCombatDataTableRefSupportUserGroup : public UCombatDataTableType
{
public:
	struct FString                                     CodeName;                                         		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                UserCount;                                        		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1703 ];

		return pClassPointer;
	};

	int GetUserCount ( );
	struct FString GetCodeName ( );
	int GetPlayMinCount ( struct FString GroupCodeName );
	int GetPlayMaxCount ( struct FString GroupCodeName );
	bool IsCanPlayUserCount ( struct FString GroupCodeName, int CurrentUserCount );
};

UClass* UCombatDataTableRefSupportUserGroup::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefSystemImage
// 0x0009 (0x004D - 0x0044)
class UCombatDataTableRefSystemImage : public UCombatDataTableType
{
public:
	int                                                ImageID;                                          		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                GRADE;                                            		// 0x0048 (0x0004) [0x0000000000000000]              
	unsigned char                                      ImageType;                                        		// 0x004C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1704 ];

		return pClassPointer;
	};

	int GetImageID ( unsigned char _ImageType, int _Grade );
};

UClass* UCombatDataTableRefSystemImage::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefSystemTextColor
// 0x0010 (0x0054 - 0x0044)
class UCombatDataTableRefSystemTextColor : public UCombatDataTableType
{
public:
	int                                                GRADE;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     TextColor;                                        		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1705 ];

		return pClassPointer;
	};

	int GetGrade ( );
	struct FString GetTextColor ( int _Grade );
};

UClass* UCombatDataTableRefSystemTextColor::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefTier
// 0x004C (0x0090 - 0x0044)
class UCombatDataTableRefTier : public UCombatDataTableType
{
public:
	struct FString                                     TierCodeName;                                     		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                Tier;                                             		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                GoalTierPoint;                                    		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                NameID;                                           		// 0x0058 (0x0004) [0x0000000000000000]              
	struct FString                                     Img1;                                             		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Img2;                                             		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TierUpImg;                                        		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ImageID_Small;                                    		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                ImageID_Big;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                ImageID_TierUp;                                   		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                Profile_Tier_Edge;                                		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1706 ];

		return pClassPointer;
	};

	int GetProfile_Tier_Edge ( );
	int GetImageID_TierUp ( );
	int GetImageID_Big ( );
	int GetImageID_Small ( );
	struct FString GetTierUpImg ( );
	struct FString GetImg2 ( );
	struct FString GetImg1 ( );
	int GetNameID ( );
	int GetGoalTierPoint ( );
	int GetTier ( );
	struct FString GetTierCodeName ( );
	class UCombatDataTableRefTier* GetTierTableFromScore ( int ModeID, int Score );
};

UClass* UCombatDataTableRefTier::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefTierSeason
// 0x0028 (0x006C - 0x0044)
class UCombatDataTableRefTierSeason : public UCombatDataTableType
{
public:
	struct FString                                     ModeCodeName;                                     		// 0x0044 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FString                                     TierCodeName;                                     		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SeasonStringID;                                   		// 0x005C (0x0004) [0x0000000000000000]              
	struct FString                                     SeasonNumber;                                     		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1707 ];

		return pClassPointer;
	};

	struct FString GetSeasonNumber ( );
	int GetSeasonStringID ( );
	struct FString GetTierCodeName ( );
	struct FString GetModeCodeName ( );
	struct FString GetSeasonStringFromModeCodeName ( struct FString BaseStr, struct FString _ModeCodeName );
	class UCombatDataTableRefTierSeason* GetTierSeasonTableFromModeCodeName ( struct FString _ModeCodeName );
};

UClass* UCombatDataTableRefTierSeason::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefTodayGame
// 0x0030 (0x0074 - 0x0044)
class UCombatDataTableRefTodayGame : public UCombatDataTableType
{
public:
	int                                                Idx;                                              		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FString                                     CodeName;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DayInfo;                                          		// 0x0054 (0x0004) [0x0000000000000000]              
	struct FString                                     ModeGroupCodename;                                		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTimeData                                   StartDay;                                         		// 0x0064 (0x0008) [0x0000000000000000]              
	struct FTimeData                                   EndDay;                                           		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1708 ];

		return pClassPointer;
	};

	struct FTimeData GetEndDay ( );
	struct FTimeData GetStartDay ( );
	struct FString GetModeGroupCodeName ( );
	int GetDayInfo ( );
	struct FString GetCodeName ( );
	int GetIdx ( );
};

UClass* UCombatDataTableRefTodayGame::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefTodayGameBindMode
// 0x0030 (0x0074 - 0x0044)
class UCombatDataTableRefTodayGameBindMode : public UCombatDataTableType
{
public:
	struct FString                                     TodayGameCodeName;                                		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ModeCodeName;                                     		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DisplaynameID;                                    		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                DisplayDescriptionID;                             		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                DisplayModeNameID;                                		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                DisplayThumbnailImageID;                          		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                BGThumbnailImageID;                               		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                ModeThumbnailImageID;                             		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1709 ];

		return pClassPointer;
	};

	int GetModeThumbnailImageID ( );
	int GetBGThumbnailImageID ( );
	int GetDisplayThumbnailImageID ( );
	int GetDisplayModeNameID ( );
	int GetDisplayDescriptionID ( );
	int GetDisplaynameID ( );
	struct FString GetModeCodeName ( );
	struct FString GetTodayGameCodeName ( );
};

UClass* UCombatDataTableRefTodayGameBindMode::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefTypeDefine
// 0x0024 (0x0068 - 0x0044)
class UCombatDataTableRefTypeDefine : public UCombatDataTableType
{
public:
	int                                                CodeID;                                           		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      BUY_AFTER;                                        		// 0x0048 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     BUY_UC_FILE;                                      		// 0x004C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	int                                                String_ID;                                        		// 0x0058 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     CODE_NAME;                                        		// 0x005C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1710 ];

		return pClassPointer;
	};

	struct FString GetCodeName ( );
	struct FString GetUCFile ( );
	unsigned char GetBuyAfter ( );
	int GetStringID ( );
};

UClass* UCombatDataTableRefTypeDefine::pClassPointer = NULL;

// Class CombatGame.CombatDataTableRefWeaponGroup
// 0x0010 (0x0054 - 0x0044)
class UCombatDataTableRefWeaponGroup : public UCombatDataTableType
{
public:
	int                                                Id;                                               		// 0x0044 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     GroupName;                                        		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1711 ];

		return pClassPointer;
	};

};

UClass* UCombatDataTableRefWeaponGroup::pClassPointer = NULL;

// Class CombatGame.CombatLocaizedChatCommandData
// 0x001C (0x0060 - 0x0044)
class UCombatLocaizedChatCommandData : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     StringVal_INT;                                    		// 0x0048 (0x000C) [0x0000000000500001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     StringVal_LOCAL;                                  		// 0x0054 (0x000C) [0x0000000000500001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1712 ];

		return pClassPointer;
	};

};

UClass* UCombatLocaizedChatCommandData::pClassPointer = NULL;

// Class CombatGame.CombatLocaizedTextData
// 0x0010 (0x0054 - 0x0044)
class UCombatLocaizedTextData : public UCombatDataTableType
{
public:
	int                                                Index;                                            		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     StringVal;                                        		// 0x0048 (0x000C) [0x0000000000500001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1713 ];

		return pClassPointer;
	};

};

UClass* UCombatLocaizedTextData::pClassPointer = NULL;

// Class CombatGame.CombatDBManager
// 0x0078 (0x00B4 - 0x003C)
class UCombatDBManager : public UObject
{
public:
	TArray< struct FExcelExternalCallType >            ExcelExternalCallStorage;                         		// 0x003C (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0048 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatDBManager.ModeGrouping
	TArray< int >                                      PrimaryWeaponGroupping;                           		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      SubWeaponGroupping;                               		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      MeleeWeaponGroupping;                             		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ThrowWeaponGroupping;                             		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1714 ];

		return pClassPointer;
	};

	int GetMyStatModeID ( int ModeID, unsigned char DataOpt, int DataKey, unsigned long bConnectTimeRecord );
	int GetMyStatEx ( unsigned char GameOpt, int GameKey, int CategoryFlag, unsigned char DataOpt, int DataKey, unsigned long bConnectTimeRecord );
	int GetMyStat ( struct FString StatTableCodeName, unsigned long bConnectTimeRecord );
	bool GetMakeID ( unsigned char GameSetTableKey, unsigned char DataSetTableKey, int* PublicID );
	bool GetStatDBID ( int PublicID, int PersonalID, int GameSetID, int* DBID );
	bool IsExternalCallItem ( int PublicID, int PersonalID, int GameSetID );
	bool GetExternalCallItemData ( class UCombatDataTableRefStat* pRef, int* PublicID, int* PersonalID, int* GameSetID, int* DBID, struct FString* Error );
	void AddExternalCallItem ( int PublicID, int PersonalID, int GameSetID, int DBID );
	void InitExternalCallData ( );
};

UClass* UCombatDBManager::pClassPointer = NULL;

// Class CombatGame.CombatDecalManager
// 0x0030 (0x0234 - 0x0204)
class ACombatDecalManager : public ADecalManager
{
public:
	float                                              MinDecalDistanceSq;                               		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ACombatSprayDecalActor* >            ActiveSprays;                                     		// 0x0208 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ADecalActorBase* >                   LevelDecals;                                      		// 0x0214 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              SprayDecalBaseDepthBias;                          		// 0x0220 (0x0004) [0x0000000000000000]              
	float                                              LevelDecalBaseDepthBias;                          		// 0x0224 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __SpraySort__Delegate;                            		// 0x0228 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1715 ];

		return pClassPointer;
	};

	void CacheLevelDecals ( );
	int SpraySort ( class ACombatSprayDecalActor* A, class ACombatSprayDecalActor* B );
	bool IsSprayOverlapped ( class ADecalActorBase* A, class ADecalActorBase* B );
	float CalcSprayDepth ( class ADecalActorBase* NewSpray, int EndIndex, TArray< class ACombatSprayDecalActor* >* SprayList );
	void ReCalculateDepthBiasOfDynamicDecals ( float* LastDepthBias );
	void ReCalculateDepthBiasOfImpactDecals ( float* LastDepthBias );
	void ReCalculateDepthBiasOfLevelDecals ( float* LastDepthBias );
	void OnSprayMoved ( class ACombatSprayDecalActor* Spray );
	void UnRegisterSpray ( class ACombatSprayDecalActor* Spray );
	void RegisterSpray ( class ACombatSprayDecalActor* Spray );
	void ClientReset ( );
	void Reset ( );
	class UCombatDecal* SpawnDecalMinimal ( struct FVector DecalLocation, class UMaterialInterface* InDecalMaterial, float InDecalLifeSpan, unsigned long bForce );
	bool TooCloseToActiveDecal ( struct FVector* DecalLocation );
	class UDecalComponent* GetPooledComponent ( );
	void eventPostBeginPlay ( );
};

UClass* ACombatDecalManager::pClassPointer = NULL;

// Class CombatGame.CombatDedicatedSvrNetwork
// 0x0000 (0x003C - 0x003C)
class UCombatDedicatedSvrNetwork : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1716 ];

		return pClassPointer;
	};

	void eventEndGame ( );
	int GetOpenChannelType ( );
	int GetChannelPingTolerance ( );
	int GetChannelPingCount ( );
	bool IsChannelPingBlock ( );
	bool GetClanMatchRefModeID ( unsigned char Team, int* Mode_ID );
	bool GetClanID ( int user_id, int* clan_id );
	bool GetClanMatchClanID ( unsigned char Team, int* clan_id );
	void SetEnteringState ( unsigned long entering_state );
	void InvalidateTheMatch ( unsigned char Reason );
	void SetReadyToMatch ( unsigned char MatchStartError );
	void SetSessionDisconnected ( int Uid, unsigned char Reason );
	void SetSessionConnected ( int Uid, struct FString IP );
	unsigned char GetDemoRec ( );
	bool GetSlotNumber ( int Uid, unsigned char* slot_number );
	bool GetNickname ( int Uid, struct FString* NickName );
	int GetHostUserID ( );
	int GetActivePlayerCount_Clan ( int clan_id );
	int GetActivePlayerCount_Team ( unsigned char Team );
	int GetActivePlayerCount ( );
	int GetConnectingPlayersCount_ClanDetail ( int clan_id, unsigned char PC_TYPE );
	int GetConnectingPlayersCount_Clan ( int clan_id );
	int GetConnectingPlayersCount_Detail ( unsigned char Team, unsigned char PC_TYPE );
	int GetConnectingPlayersCount_PCType ( unsigned char PC_TYPE );
	int GetConnectingPlayersCount_Team ( unsigned char Team );
	int GetConnectingPlayersCount ( );
	bool GetPlayerType ( int Uid, unsigned char* PlayerType );
	bool GetGrade ( int Uid, unsigned char* GRADE );
	bool GetTeam ( int Uid, unsigned char* SessionTeam );
	bool GetSessionInformation ( int Uid, struct FString* PlayerName, unsigned char* GRADE, unsigned char* SessionTeam, unsigned char* PlayerType, unsigned char* spectatorMode, unsigned char* gear_set_id, int* clan_id );
	bool CheckSecurityCode ( int Uid, int* SecurityCode );
	bool GetChampionShipChannel ( unsigned char* Value );
	bool GetCurrentBindRegion ( unsigned char* Value );
	bool GetCurrentGame_ChangeTeam ( unsigned char* Value );
	bool GetCurrentGame_Difficulty ( unsigned char* Value );
	bool GetCurrentGame_Observer ( unsigned char* Value );
	bool GetCurrentGame_DeathChat ( unsigned char* Value );
	bool GetCurrentGame_FreeCameraView ( unsigned char* Value );
	bool GetCurrentGame_ThirdCameraView ( unsigned char* Value );
	bool GetCurrentGame_PlayTime ( );
	bool GetCurrentGame_GoalScore ( int* Value );
	bool GetCurrentGame_GoalMission ( int* Value );
	bool GetCurrentGame_GoalRound ( int* Value );
	bool GetCurrentGame_RefMapID ( int* Value );
	bool GetCurrentGame_RefModeID ( int* Value );
	bool IsDedicatedServer ( );
};

UClass* UCombatDedicatedSvrNetwork::pClassPointer = NULL;

// Class CombatGame.CombatDedicatedSvrProfiler
// 0x0000 (0x003C - 0x003C)
class UCombatDedicatedSvrProfiler : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1717 ];

		return pClassPointer;
	};

	void NSSProfiler_Exec ( struct FString cmd_, class AGamePlayerController* gpc_ );
	void NSSProfiler_SetAutoStart ( unsigned long onoff_ );
	bool NSSProfiler_IsAutoStart ( );
	int NSSProfiler_ForcedTimeLimitsSecForTesting ( );
	void NSSProfiler_Stop ( );
	void NSSProfiler_Start ( );
};

UClass* UCombatDedicatedSvrProfiler::pClassPointer = NULL;

// Class CombatGame.CombatDestroyableActor
// 0x000C (0x01E0 - 0x01D4)
class ACombatDestroyableActor : public AActor
{
public:
	int                                                Health;                                           		// 0x01D4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      TeamIndex;                                        		// 0x01D8 (0x0001) [0x0000000000000020]              ( CPF_Net )
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x01DC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1718 ];

		return pClassPointer;
	};

	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	unsigned char eventScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	void eventReplicatedEvent ( struct FName VarName );
	int eventGetHealth ( );
	bool SupportTakeDamageDataSave ( );
};

UClass* ACombatDestroyableActor::pClassPointer = NULL;

// Class CombatGame.CombatSkillActor_UAV
// 0x0030 (0x0210 - 0x01E0)
class ACombatSkillActor_UAV : public ACombatDestroyableActor
{
public:
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x01E0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      SmokingHot : 1;                                   		// 0x01E4 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	float                                              DetectionArea;                                    		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetectionAreaSquare;                              		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DeathTime;                                        		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SmokeThreshold;                                   		// 0x01F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystem*                             ExploEmitter;                                     		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SmokePSCTemplate;                                 		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    SmokePSC;                                         		// 0x0200 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULensFlareComponent*                         IFF_Effect;                                       		// 0x0204 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULensFlare*                                  IFF_FriendTemplate;                               		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ULensFlare*                                  IFF_FoeTemplate;                                  		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1719 ];

		return pClassPointer;
	};

	void StopDamageEffect ( );
	void PlayDamageEffect ( );
	bool SpawnExplosionParticleSystem ( class UParticleSystem* Template );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void SetIFFBeacon ( unsigned long bIsFriend );
	void RemoveFromLocalPC ( );
	void eventDestroyed ( );
	void RegisterAtLocalPC ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	struct FName eventGetActorName ( );
};

UClass* ACombatSkillActor_UAV::pClassPointer = NULL;

// Class CombatGame.CombatDestructibleObject
// 0x01A4 (0x0378 - 0x01D4)
class ACombatDestructibleObject : public AActor
{
public:
	class USoundCue*                                   AmbientSoundCue;                                  		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             AmbientSoundComponent;                            		// 0x01D8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                ObjInstanceVersion;                               		// 0x01DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bComponentsSetUp : 1;                             		// 0x01E0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShutDown : 1;                                    		// 0x01E0 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bHasBeenDestroyed : 1;                            		// 0x01E0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bInitRBPhysCalled : 1;                            		// 0x01E0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bLimitDamageTypes : 1;                            		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAllowCompleteDestruction : 1;                    		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCastStaticShadow : 1;                            		// 0x01E0 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bInternalPathsEnabled : 1;                        		// 0x01E0 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	TArray< class UClass* >                            VulnerableToDamageType;                           		// 0x01E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            InstaKillDamageType;                              		// 0x01F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            IgnoreDamageType;                                 		// 0x01FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SelfDestructAllDelay;                             		// 0x0208 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x020C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironmentToUseForActorSpawnParams;         		// 0x0210 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FLightingChannelContainer                   LightingChannelsToUseForActorSpawnParams;         		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCombatExplosion*                            ExplosionTemplate;                                		// 0x0218 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class AController*                                 CauserController;                                 		// 0x021C (0x0004) [0x0000000000000000]              
	TArray< struct FDestructibleSubobject >            SubObjects;                                       		// 0x0220 (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FSubObjectStaticLightingInfo >      SubObjectLightingInfos;                           		// 0x022C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< float >                                    SubObjectHealths;                                 		// 0x0238 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    TempDamageCache;                                  		// 0x0244 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      ResetCount;                                       		// 0x0250 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      ProcessedMods[ 0x20 ];                            		// 0x0251 (0x0020) [0x0000000000000000]              
	struct FReplicatedDamageModInfo                    ReplicatedDamageMods[ 0x20 ];                     		// 0x0274 (0x0100) [0x0000000000000020]              ( CPF_Net )
	float                                              ClosestLocalPlayerSqDist;                         		// 0x0374 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1720 ];

		return pClassPointer;
	};

	int GetBP ( unsigned char Part );
	unsigned char GetGrade ( );
	void Reset ( );
	void ClearResetCount ( );
	void eventExplosion ( struct FDestructibleSubobject* SubObj, struct FObjectDamageModifier* Mod );
	void eventApplySplashDamage ( struct FVector* Origin, struct FSplashDamageParams* DamageParams );
	void eventReplicateDamageMod ( int ObjIdx, int ModIdx, unsigned long bPartial );
	void eventReplicatedEvent ( struct FName VarName );
	void eventTriggerDestroyedEvent ( class AController* EventInstigator );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void MoveCollidingPawns ( );
	void eventUnShutDownObject ( );
	void eventShutDownSubObject ( struct FDestructibleSubobject* SubObj );
	void eventDelayedShutDownObject ( );
	void ShutDownObject ( );
	void DamageSubObject ( int ObjIdx, int Damage, class AController* EventInstigator, class UClass* DamType );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void SetInternalPathsEnabled ( unsigned long bEnabled );
	void OneTimeInit ( );
	void RemoveDecals ( );
	void ApplyDamageMod ( int ObjIdx, int ModIdx, unsigned long bPartial, class AController* DamageInstigator );
	void SetSubObjectStaticMesh ( int ObjIdx, int ModIdx );
	void SetupComponents ( );
	void UnDestroy ( );
	bool IsAlive ( );
};

UClass* ACombatDestructibleObject::pClassPointer = NULL;

// Class CombatGame.CombatDialogCombiinationAudio
// 0x001C (0x0058 - 0x003C)
class UCombatDialogCombiinationAudio : public UObject
{
public:
	TArray< class USoundCue* >                         CombiinationSoundCues;                            		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                TotalWords;                                       		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                nowPlayingWordNum;                                		// 0x004C (0x0004) [0x0000000000000000]              
	class AActor*                                      Owner;                                            		// 0x0050 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             DialogAC;                                         		// 0x0054 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1721 ];

		return pClassPointer;
	};

	void OnWordFinished ( class UAudioComponent* AC );
	void PlayWords ( class AActor* Speaker, class USoundCue* SC1, class USoundCue* SC2, class USoundCue* SC3 );
	void ResetDialog ( );
};

UClass* UCombatDialogCombiinationAudio::pClassPointer = NULL;

// Class CombatGame.CombatDroppedBase
// 0x0099 (0x027D - 0x01E4)
class ACombatDroppedBase : public ADroppedPickup
{
public:
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x01E4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           MyLightEnvironment;                               		// 0x01E8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x01EC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              PickupableDist;                                   		// 0x01F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    DropRotation;                                     		// 0x01F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    LandedRotation;                                   		// 0x0200 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TossSpeed;                                        		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TossZ;                                            		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderRadiusOnFalling;                          		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomGravityScaling;                             		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PickupableDelayTime;                              		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FOutlineProperty                            OutlineProperty;                                  		// 0x0220 (0x0034) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	class USoundCue*                                   PickupSound;                                      		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   EnemyPickupSound;                                 		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DroppedSound;                                     		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PickupableDistSq;                                 		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MeshHeightOffset;                                 		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InitialLifeSpan;                                  		// 0x0268 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FName >                             AdditionalHideBone;                               		// 0x026C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bPickupable : 1;                                  		// 0x0278 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInitDroppedPickupMesh : 1;                       		// 0x0278 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPickUpByTouching : 1;                            		// 0x0278 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDropSameInventoryGroup : 1;                      		// 0x0278 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDestroySameInventoryGroup : 1;                   		// 0x0278 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bGiveInventory : 1;                               		// 0x0278 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned char                                      ValidTeamIndex;                                   		// 0x027C (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1722 ];

		return pClassPointer;
	};

	void eventToggleCylinderSize ( unsigned long bRestore );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void SetPickupable ( );
	void eventDestroyed ( );
	void Release ( );
	bool IsValidMesh ( );
	unsigned char eventScriptGetTeamNum ( );
	bool CanPickup ( class ACombatPlayerControllerBase* LocalPC );
	void eventLandedMesh ( );
	void PlayPickupSound ( );
	void eventTornOff ( );
	void GiveTo ( class APawn* P );
	void CheckTouching ( );
	void eventSetPickupMesh ( class UPrimitiveComponent* PickupMesh );
	void SetDrawOutLine ( unsigned long bFlag );
	void SetTeamIdentify ( );
	void SetLifeSpan ( float NewLifeSpan );
	void Init ( class AInventory* NewInventory, struct FVector* Direction );
	void NotifyLocalPlayerTeamReceived ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void GotoFadeOut ( );
	struct FRotator FindSlopeRotation ( struct FVector* FloorNormal, struct FRotator* NewRotation );
	bool InitPickupMesh ( class USkeletalMeshComponent* InPickupMeshComp );
	void UpdateAlwaysHideBone ( );
	void ApplyMaxMipMapOffset ( );
};

UClass* ACombatDroppedBase::pClassPointer = NULL;

// Class CombatGame.CombatDroppedWeapon
// 0x0015 (0x0292 - 0x027D)
class ACombatDroppedWeapon : public ACombatDroppedBase
{
public:
	unsigned long                                      bUseMeshInterpolation : 1;                        		// 0x0280 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClearRemainAmmo : 1;                             		// 0x0280 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShowPickupWeaponUI : 1;                          		// 0x0280 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class ACombatWeapon*                               Weapon;                                           		// 0x0284 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ACombatPlayerReplicationInfoBase*            KillerPRI;                                        		// 0x0288 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x028C (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatDroppedWeapon.RemainAmmoCount
	unsigned char                                      RemainSubAmmoCount;                               		// 0x028E (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      RemainSubMagazineAmmo;                            		// 0x028F (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      UnknownData01[ 0x2 ];                             		// 0x0290 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatDroppedWeapon.RemainMagazineAmmo

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1723 ];

		return pClassPointer;
	};

	void SetIronSight ( );
	void SetDecal ( );
	bool IsDisplayLocator ( );
	void InvalidatePickup ( );
	bool ValidPickup ( );
	void eventDestroyed ( );
	int GetObjectIconType ( );
	void OnDetachDroppedWeapon ( );
	void UpdatePickupWeaponUI ( );
	void eventLandedMesh ( );
	void eventSetPickupMesh ( class UPrimitiveComponent* PickupMesh );
	bool CanPickup ( class ACombatPlayerControllerBase* LocalPC );
	void eventUpdateMagazineAmmo ( );
	bool IsValidInstigatorForInterpolatedMesh ( );
	struct FName GetAttachmentSocketName ( );
	struct FString GetPickupWeaponName ( );
	void Release ( );
	void SetInventory ( class AInventory* NewInventory );
	void UpdateAlwaysHideBone ( );
	bool InitPickupMesh ( class USkeletalMeshComponent* InPickupMeshComp );
};

UClass* ACombatDroppedWeapon::pClassPointer = NULL;

// Class CombatGame.CombatDummyClient
// 0x0000 (0x003C - 0x003C)
class UCombatDummyClient : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1724 ];

		return pClassPointer;
	};

	int GetMatchRoomIDFromArgument ( );
	struct FString GetDummyPasswd ( );
	struct FString GetDummyLoginId ( );
	bool IsDummy ( );
	bool IsAlreadyLogin ( );
};

UClass* UCombatDummyClient::pClassPointer = NULL;

// Class CombatGame.CombatDynamicDecal
// 0x000C (0x034C - 0x0340)
class UCombatDynamicDecal : public UDecalComponent
{
public:
	class UMaterialInstanceTimeVarying*                MITV_Decal;                                       		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   MIC_Decal;                                        		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Lifetime;                                         		// 0x0348 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1725 ];

		return pClassPointer;
	};

	void SetMIC ( class UMaterialInterface* MI );
	void SetMITV ( class UMaterialInterface* MI );
	void eventSetMaterial ( class UMaterialInterface* MI );
	void eventOnDecalFinished ( );
};

UClass* UCombatDynamicDecal::pClassPointer = NULL;

// Class CombatGame.CombatExplosionLight
// 0x0024 (0x022C - 0x0208)
class UCombatExplosionLight : public UPointLightComponent
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x0208 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              Lifetime;                                         		// 0x020C (0x0004) [0x0000000000000000]              
	int                                                TimeShiftIndex;                                   		// 0x0210 (0x0004) [0x0000000000000000]              
	TArray< struct FLightValues >                      TimeShift;                                        		// 0x0214 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLightFinished__Delegate;                      		// 0x0220 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1726 ];

		return pClassPointer;
	};

	void ApplyDynamicLightOptions ( unsigned long bDropDetail );
	void OnLightFinished ( class UCombatExplosionLight* Light );
	void ResetLight ( );
};

UClass* UCombatExplosionLight::pClassPointer = NULL;

// Class CombatGame.CombatFlocking
// 0x0020 (0x005C - 0x003C)
class UCombatFlocking : public UObject
{
public:
	float                                              Apply_Distance;                                   		// 0x003C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Cohesion_Force;                                   		// 0x0040 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Alignment_Force;                                  		// 0x0044 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Separation_Force;                                 		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Separation_MaxDistance;                           		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Avoidance_Force;                                  		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Avoidance_MaxDistance;                            		// 0x0054 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Target_Weight;                                    		// 0x0058 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1727 ];

		return pClassPointer;
	};

};

UClass* UCombatFlocking::pClassPointer = NULL;

// Class CombatGame.CombatFPMuzzleFlashLight
// 0x0024 (0x022C - 0x0208)
class UCombatFPMuzzleFlashLight : public UPointLightComponent
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x0208 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              Lifetime;                                         		// 0x020C (0x0004) [0x0000000000000000]              
	int                                                TimeShiftIndex;                                   		// 0x0210 (0x0004) [0x0000000000000000]              
	TArray< struct FLightValues >                      TimeShift;                                        		// 0x0214 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLightFinished__Delegate;                      		// 0x0220 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1728 ];

		return pClassPointer;
	};

	void ApplyDynamicLightOptions ( unsigned long bDropDetail );
	void OnLightFinished ( class UCombatFPMuzzleFlashLight* Light );
	void ResetLight ( );
};

UClass* UCombatFPMuzzleFlashLight::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Base
// 0x0020 (0x0098 - 0x0078)
class UCombatFrontEnd_Base : public UGFxObject
{
public:
	class UCombatFrontEndMoviePlayer*                  Owner;                                            		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNeedInit : 1;                                    		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     ShowAction;                                       		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     HideAction;                                       		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1729 ];

		return pClassPointer;
	};

	struct FString FloatToString ( float _Value );
	float GetKADRatio ( int Kill, int Assist, int Death, unsigned long bNeedKDCount );
	struct FString GetKADRatioText ( int Kill, int Assist, int Death, unsigned long bNeedKDCount );
	struct FString FormatAsNumber ( int _Value );
	bool CheckClan ( );
	int GetEquipSoundType ( class UCombatDataTableRefItem* _RefItem );
	bool GetMissionListData ( class UGFxObject** out_gfx_data );
	struct FString GetRegionName ( int RegionIndex );
	int GetRegionPingState ( int ModeGroupID, int RegionIndex );
	struct FString eventGetItemPeriod ( class UCombatDataTableRefItem* _RefItem, int _Value, unsigned char _Type );
	struct FString eventCalcDayPeriod ( int _Value, unsigned long bShopItem );
	struct FString GetPriceTypeLocalizeText ( unsigned char PriceType );
	struct FString eventCalcRandomMinMax ( int MinValue, int MaxValue, int Type );
	struct FString eventCalcDayPeriodMinMax ( int MinTime, int MaxTime );
	struct FString CalcPeriod ( int Time );
	struct FString TimeDataToString ( struct FTimeData* Time );
	void HideFrontEndPlayerActor ( );
	void ShowFrontEndPlayerActor ( );
	void OnInvalidPasswordDialogOK ( struct FEventData ev );
	void DisplayInvalidPasswordDialog ( );
	void HideDialog ( int Id );
	int ShowDialog ( int Type, struct FScriptDelegate DelegateOK, struct FScriptDelegate DelegateCancel, struct FDialogLocalizingData* out_dialogData );
	class UCombatUserInfoTransaction* GetUserInfoTran ( );
	class UCombatGameOptionTransaction* GetGameOptionTran ( );
	class UCombatRandomBoxTransaction* GetRandomBoxTran ( );
	class UCombatAwaitTransaction* GetAwaitTran ( );
	class UCombatMailTransaction* GetMailTran ( );
	class UCombatClanTransaction* GetClanTran ( );
	class UCombatCommunityTransaction* GetCommunityTran ( );
	class UCombatLobbyTransaction* GetLobbyTran ( );
	class UCombatStatisticsTransaction* GetStatisticsTran ( );
	class UCombatItemTransaction* GetItemTran ( );
	class UCombatCharacterTransaction* GetCharacterTran ( );
	class UCombatLobbyChatTransaction* GetLobbyChatTran ( );
	class UCombatChannelTransaction* GetChannelTran ( );
	class UOnlineSubsystemCombat* GetOnlineSubsystem ( );
	class UCombatGameClientTableDepot* GetClientTableDepot ( );
	bool OnFilterButtonInput ( struct FName ButtonName, unsigned char InputEvent );
	class ACombatFrontEndInfo* GetGameInfo ( );
	class UCombatFrontEndLocalSoundGroup_Base* GetSoundGroup ( );
	class UCombatFrontEndMoviePlayer* GetOwner ( );
	void SetOwner ( class UCombatFrontEndMoviePlayer* Movie );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void Close ( );
	void Init ( );
	void UnLock ( );
	void Lock ( );
	void Hide ( );
	void Show ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatFrontEnd_Base::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Object
// 0x0004 (0x009C - 0x0098)
class UCombatFrontEnd_Object : public UCombatFrontEnd_Base
{
public:
	unsigned long                                      bPopUp : 1;                                       		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisplayed : 1;                                   		// 0x0098 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1730 ];

		return pClassPointer;
	};

	void RemovePopUp ( unsigned long bAddPopUp );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatFrontEnd_Object::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Exchange
// 0x0074 (0x0110 - 0x009C)
class UCombatFrontEnd_Exchange : public UCombatFrontEnd_Object
{
public:
	class UGFxObject*                                  ExchangePopupClass;                               		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                CurrentSelectedIndex;                             		// 0x00A0 (0x0004) [0x0000000000000000]              
	struct FString                                     CurrentMoneyCodeName;                             		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentExchangeMoneyIndex;                        		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                BuyMoneyType;                                     		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                CurrentExchangeMoneyType;                         		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                ChangedMoneyType;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                ChangedMainMoney;                                 		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                ChangedBonusMoney;                                		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                BuyBulletItemIndex;                               		// 0x00C8 (0x0004) [0x0000000000000000]              
	unsigned long                                      OnSaleMoney : 1;                                  		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShow : 1;                                        		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< int >                                      BulletSaleList;                                   		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ExchangeMoneyCoinCodeName[ 0x3 ];                 		// 0x00DC (0x0024) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                ExchangeBulletTableIndex;                         		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< int >                                      SpecialDiscountIndexList;                         		// 0x0104 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1731 ];

		return pClassPointer;
	};

	void CallSetPriceHead ( int Idx, struct FString PriceHead );
	void CallSetPriceList ( int Idx, class UGFxObject* Object );
	void CallsetSaleTxt ( struct FString saleTxt );
	void CallsetSaleIconVisible ( unsigned long isSale );
	void CallvisibleHoldingsAndBalance ( unsigned long Show );
	void CallsetBalanceMoney ( int Index );
	void CallsetHoldingsMoney ( int Index );
	void CalldisalbeCancelBtn ( unsigned long Disable );
	void CalldisableBuyBtn ( unsigned long Disable );
	void CalllabelingCancelBtn ( struct FString CancelBtn );
	void CalllabelingBuyBtn ( struct FString BuyBtn );
	void CallSetBalanceValue ( struct FString BalanceValue );
	void CallsetBalanceHead ( struct FString BalanceHead );
	void CallsetHoldingsValue ( struct FString HoldingsValue );
	void CallsetHoldingsHead ( struct FString HoldingsHead );
	void CalldisablePriceGroup ( int Index, unsigned long Disable );
	void CallshowTimer ( int Index, unsigned long Visible );
	void CallsetTimer ( int Index, struct FString TimeStr );
	void CallselectPurchasePriceList ( int Id, int Tab );
	void CallsetPriceExplanation ( struct FString Str );
	void CallsetSecondSpecialPriceList ( class UGFxObject* Object );
	void CallsetFirstSpecialPriceList ( class UGFxObject* Object );
	void CallsetPurchasePriceList ( class UGFxObject* Object );
	void CallsetSecondSpecialPriceHead ( struct FString SecondSpecialPriceHead );
	void CallsetFirstSpecialPriceHead ( struct FString FirstSpecialPriceHead );
	void CallsetPurchasePriceHead ( struct FString PriceHead );
	void CallsetExchangeCoin ( int Index );
	void CallsetClanPwTitleTxt ( struct FString Title );
	void receiveRandomBoxShopExchangeListClick ( int Index, int Tab );
	void receiveRandomBoxShopExchangeCancelBtnClick ( );
	void RecvSuccessExchange ( );
	TArray< int > GetSpecialDiscountIndexList ( );
	int GetExchangeBulletTableIndex ( );
	void OnBulletBuySuccess ( );
	void OnCashExchangeOK ( );
	void OnPopupBuyExchangeCancel ( struct FEventData ev );
	void OnPopupCashExchangeOK ( struct FEventData ev );
	void OnPopupExchangeOK ( struct FEventData ev );
	bool isCanBuyBulletSpecialSale ( int Index );
	bool isBulletSpecialSale ( );
	bool isBulletSale ( );
	void receiveRandomBoxShopExchangeBuyBtnClick ( );
	void GetExchangeData ( struct FBuyExchangeStruct* BuyPriceInfo, class UGFxObject** out_Data );
	struct FExchangeAddMoneyStruct GetExchangedMoney ( );
	void CalcSetMoney ( int CurrentIndex );
	void CalcBonusMoney ( int CurrentIndex );
	void BulletSaleTimer ( );
	void SetBulletSaleTimerText ( );
	void SetBulletPurchaseSpecialPriceList ( );
	void SetBulletPurchasePriceList ( );
	void SetPurchasePriceList ( );
	void SetExchangeCoinList ( int Index );
	void Close ( );
	void HideShopPopup ( );
	void ShowShopPopup ( );
	bool IsShow ( );
	void HideScene ( );
	void ShowScene ( );
	void InitBulletLabel ( );
	void InitLabel ( );
	void Init ( );
	void SetExchangePopup ( class UGFxObject* M );
};

UClass* UCombatFrontEnd_Exchange::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Repurchase
// 0x003C (0x00D8 - 0x009C)
class UCombatFrontEnd_Repurchase : public UCombatFrontEnd_Object
{
public:
	unsigned long                                      IsBuyAndEquip : 1;                                		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInit : 1;                                        		// 0x009C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsShow : 1;                                      		// 0x009C (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                CashUnit;                                         		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                priceID;                                          		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                BuyShopItemID;                                    		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                BuyItemSlotIndex;                                 		// 0x00AC (0x0004) [0x0000000000000000]              
	unsigned char                                      CurrentPresetTab;                                 		// 0x00B0 (0x0001) [0x0000000000000000]              
	struct FString                                     CurrentCodeName;                                  		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRepurchaseItem >                   RepurchaseItemList;                               		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentSpendonMoney;                              		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                CurrentSpendonCash;                               		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                CurrentSpendonMedal;                              		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1732 ];

		return pClassPointer;
	};

	void ClearRepurchaseItemList ( );
	struct FRepurchaseItem eventFindRepurchaseItem ( int InvenSlot );
	void eventCallUpdateItemList ( class UGFxObject* Object );
	void eventCallSetItemList ( class UGFxObject* Object );
	void CallsetRepurchaseBtnLabel ( struct FString Close );
	void CallsetRepurchaseText ( struct FString Title, struct FString Desc );
	void HideRepurchasePopup ( );
	void ShowRepurchasePopup ( );
	void receiveRepurchaseCloseBtn ( );
	void receiveRepurchaseGoShopBtn ( );
	void RepurchaseAllSelected ( );
	void receiveRepurchaseItemView ( int Id );
	bool IsPossibleBuyItem ( int RefItemIndex );
	bool eventIsVisibleItem ( int RefItemIndex );
	int GetRepurchaseExpiredItemCount ( );
	int GetRepurchaseItemListCount ( );
	void ShowRepurchase ( );
	void StartShowRepurchase ( );
	void Close ( );
	bool IsShow ( );
	void HideScene ( );
	void ShowScene ( );
	void InitLabel ( );
	void Init ( );
	void GetRepurchaseItemData ( struct FRepurchaseItemStruct* const_ItemInfo, class UGFxObject** out_Data );
	void UpdateRepurchaseItem ( int InvenSlotIndex );
	void SetRepurchaseItemList ( );
};

UClass* UCombatFrontEnd_Repurchase::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Scene
// 0x0004 (0x009C - 0x0098)
class UCombatFrontEnd_Scene : public UCombatFrontEnd_Base
{
public:
	unsigned long                                      bShowTopBar : 1;                                  		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNeedBGM : 1;                                     		// 0x0098 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseMouse : 1;                                    		// 0x0098 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWhiteListCheck : 1;                              		// 0x0098 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1733 ];

		return pClassPointer;
	};

	int GetShopType ( );
	void GotoPrevScene ( );
	void Hide ( );
	void Show ( );
	void Init ( );
	class ACombatFrontEndInfo* GetGameInfo ( );
};

UClass* UCombatFrontEnd_Scene::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CharacterInfo
// 0x0010 (0x00AC - 0x009C)
class UCombatFrontEnd_CharacterInfo : public UCombatFrontEnd_Scene
{
public:
	class UCombatFrontEnd_CharacterInfo_TabBase*       TabList[ 0x4 ];                                   		// 0x009C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1734 ];

		return pClassPointer;
	};

	void CallSelectMyInfoTab ( int Index );
	void CallSetMyInfoTab ( class UGFxObject* Data );
	void Init ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void GotoPrevScene ( );
};

UClass* UCombatFrontEnd_CharacterInfo::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Maintenance
// 0x0010 (0x00AC - 0x009C)
class UCombatFrontEnd_Maintenance : public UCombatFrontEnd_Scene
{
public:
	int                                                ShopType;                                         		// 0x009C (0x0004) [0x0000000000000000]              
	TArray< struct FRISListDescStruct >                RISInfoList;                                      		// 0x00A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1735 ];

		return pClassPointer;
	};

	void ShowFXItem ( );
	int GetShopType ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatFrontEnd_Maintenance::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BaseShop
// 0x00D4 (0x0180 - 0x00AC)
class UCombatFrontEnd_BaseShop : public UCombatFrontEnd_Maintenance
{
public:
	class UGFxObject*                                  ItemListClass;                                    		// 0x00AC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ItemDetailinfoClass;                              		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                SelectedMainTab;                                  		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                SelectedSubTab;                                   		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                SelectedInfoTab;                                  		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                SelectedInfoTabType;                              		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                CashUnit;                                         		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                priceID;                                          		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FString                                     CurrentCodeName;                                  		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CurrentSearchtext;                                		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      CurrentPresetTab;                                 		// 0x00E4 (0x0001) [0x0000000000000000]              
	int                                                CurrentClothItemRefIndex;                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                CurrentSelectedItemID;                            		// 0x00EC (0x0004) [0x0000000000000000]              
	unsigned long                                      bSortRepurchaseItems : 1;                         		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSelectedHotItem : 1;                             		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSelectedNewItem : 1;                             		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSelectedCashItem : 1;                            		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bMoveShop : 1;                                    		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000010] 
	struct FString                                     ShopCodename;                                     		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FShopTabStruct >                    MainTabInfo;                                      		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FShopTabStruct                              SubTabAllInfo;                                    		// 0x010C (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FShopTabStruct >                    SubTabWeaponInfo;                                 		// 0x012C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FShopTabStruct >                    SubTabCharInfo;                                   		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FShopTabStruct >                    SubTabItemInfo;                                   		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FShopTabStruct >                    SubTabPackageInfo;                                		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInfoTabStruct                              ItemTabInfo[ 0x3 ];                               		// 0x015C (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1736 ];

		return pClassPointer;
	};

	void CallSetInfoDesc ( class UGFxObject* BasicData );
	void CallSetAddon ( class UGFxObject* BasicData );
	void CallSetAttachmentTitle ( struct FString Title );
	void CallSetAbility ( class UGFxObject* BasicData );
	void CallSelectInfoTab ( int Index );
	void CallSetInfoTab ( class UGFxObject* TabData );
	void CallSetInfoExtendMode ( );
	void CallSetInfoMiniMode ( );
	void eventCallUpdateItemList ( class UGFxObject* TabData );
	void eventCallSetItemList ( class UGFxObject* TabData, unsigned long moveshop );
	void GetBuyItemData ( struct FBuyItemStruct* BuyItemInfo, class UGFxObject** out_Data );
	void GetItemDescStructData ( struct FItemDescStruct* const_ItemDescInfo, class UGFxObject** out_Data );
	void GetItemAddonStructData ( struct FItemAddonStruct* ItemAddonInfo, class UGFxObject** out_Data );
	void RestItemAbilityInfoData ( struct FItemAbilityInfoStruct* ItemAbilityInfo );
	void GetItemAbilityInfoData ( struct FItemAbilityInfoStruct* ItemAbilityInfo, class UGFxObject** out_Data );
	void GetItemBasicInfoData ( struct FItemBasicInfoStruct* const_ItemBasicInfo, class UGFxObject** out_Data );
	void GetItemInfoTabData ( struct FInfoTabStruct* const_ItemInfotab, class UGFxObject** out_Data );
	void eventResetItemData ( struct FUIShopItemInfo* ItemInfo );
	void GetShopItemData ( struct FUIShopItemInfo* const_ItemInfo, class UGFxObject** out_Data );
	void CallsetFilterButtonLayOut ( int Index );
	void CallsetCashBtnSelected ( unsigned long bSelected );
	void CallsetNewBtnSelected ( unsigned long bSelected );
	void CallsetHotBtnSelected ( unsigned long bSelected );
	void CallSetSearchWindowLabel ( struct FString setLabe );
	void CallSelectMainTab ( int Index );
	void CallscrollingItemList ( int Id );
	void eventCallSelectItemList ( int Id );
	void CallSetPackageTab ( class UGFxObject* TabData );
	void CallSetItemTab ( class UGFxObject* TabData );
	void CallSetCharacterTab ( class UGFxObject* TabData );
	void CallSetWeaponTab ( class UGFxObject* TabData );
	void CallSetAllTab ( class UGFxObject* TabData );
	void CallSetMainTab ( class UGFxObject* TabData );
	void GotoPrevScene ( );
	void SetInfoItem ( struct FString CodeName );
	void OnRefreshCashItemBuy ( );
	void receiveShopListItemDoubleClick ( int Id );
	void receiveShopListItemBuyBtn ( int Id );
	void receiveShopListItemBtn ( int Id );
	void receiveShopListItemView ( int Id );
	void receiveShopInfoClose ( );
	void receiveShopInfoOpen ( );
	void UpdateShopItemList ( );
	void ResetTagBtn ( );
	void receiveShopCashBtn ( );
	void receiveShopNewBtn ( );
	void receiveShopHotBtn ( );
	void receiveShopSearchWord ( struct FString searchtext );
	void receiveShopInfoTabBtn ( int Index );
	void receiveShopListSubTabBtn ( int Id );
	void receiveShopListMainTabBtn ( int Id );
	struct FString eventGetShopButtonStringByRank ( unsigned long IsRank );
	struct FString eventGetToolTipByLimitCount ( int Type );
	struct FString eventGetToolTipByRank ( class UCombatDataTableRefExp* RefExp );
	bool eventIsPurchasableItemByLimitCount ( struct FLimitBuyItemData limit_data );
	bool eventIsPurchasableItemByRank ( int Id );
	struct FTimeData GetServerTime ( );
	void ShowVisibleItem ( int Index );
	void SetShopItemList ( int MaintabIndex, int SubtabIndex, unsigned long bForceUpdate, unsigned long bApplyTag );
	void GetSubTabAllData ( class UGFxObject** out_Data );
	void GetTabData ( struct FShopTabStruct inData, int Type, class UGFxObject** out_Data );
	void SetSubTabPackageDataAll ( );
	void SetSubTabItemDataAll ( );
	void SetSubTabCharDataAll ( );
	void SetSubTabWeaponDataAll ( );
	void SetMainTabDataAll ( );
	void SetSubTabAllDataAll ( );
	int GetSelectedSubTab ( );
	int GetSelectedMainTab ( );
	void InitSubTab ( );
	bool InitMainLabel ( );
	void SetFilterType ( int Id );
	int GetSelectSlotClothRefID ( );
	void SetSelectSlotClothRefID ( int NewId );
	void SetSortRepurchaseItems ( unsigned long IsSort );
	void ResetShop ( );
	void Init ( );
	void HideScene ( );
	void ShowScene ( );
	void HideItemInfo ( );
	void ShowItemInfo ( );
	void HideItemList ( );
	void ShowItemList ( );
	void UnLock ( );
	void Lock ( );
	void Close ( );
	void Hide ( );
	void SetitemDetailinfo ( class UGFxObject* M );
	void SetItemList ( class UGFxObject* M );
};

UClass* UCombatFrontEnd_BaseShop::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_MedalShop
// 0x0000 (0x0180 - 0x0180)
class UCombatFrontEnd_MedalShop : public UCombatFrontEnd_BaseShop
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1737 ];

		return pClassPointer;
	};

	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void ShowFrontEndPlayerActor ( );
	void SetTabDataAll ( );
	void InitSubTab ( );
	bool InitMainLabel ( );
	void Init ( );
	void ShowScene ( );
	void SetShopItemList ( int MaintabIndex, int SubtabIndex, unsigned long bForceUpdate, unsigned long bApplyTag );
};

UClass* UCombatFrontEnd_MedalShop::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Shop
// 0x0000 (0x0180 - 0x0180)
class UCombatFrontEnd_Shop : public UCombatFrontEnd_BaseShop
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1738 ];

		return pClassPointer;
	};

	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void ShowFrontEndPlayerActor ( );
	void SetTabDataAll ( );
	void InitSubTab ( );
	bool InitMainLabel ( );
	void Init ( );
	void ShowScene ( );
	void SetShopItemList ( int MaintabIndex, int SubtabIndex, unsigned long bForceUpdate, unsigned long bApplyTag );
};

UClass* UCombatFrontEnd_Shop::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Inventory
// 0x01E8 (0x0294 - 0x00AC)
class UCombatFrontEnd_Inventory : public UCombatFrontEnd_Maintenance
{
public:
	struct FInvenTabStruct                             MainTabInfo[ 0x4 ];                               		// 0x00AC (0x0050) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInvenTabStruct                             SubTabAllInfo;                                    		// 0x00FC (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInvenTabStruct                             SubTabWeaponInfo[ 0x6 ];                          		// 0x0110 (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInvenTabStruct                             SubTabCharInfo[ 0x2 ];                            		// 0x0188 (0x0028) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInvenTabStruct                             SubTabItemInfo[ 0x5 ];                            		// 0x01B0 (0x0064) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInfoTabStruct                              ItemTabInfo[ 0x3 ];                               		// 0x0214 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedMainTab;                                  		// 0x0238 (0x0004) [0x0000000000000000]              
	int                                                SelectedSubTab;                                   		// 0x023C (0x0004) [0x0000000000000000]              
	int                                                SelectedInfoTabType;                              		// 0x0240 (0x0004) [0x0000000000000000]              
	int                                                SelectedInfoTab;                                  		// 0x0244 (0x0004) [0x0000000000000000]              
	TArray< struct FS_BaseItemInfo >                   PresetItemlist;                                   		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bInvenOpen : 1;                                   		// 0x0254 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitforChangeStateActiveItem : 1;                		// 0x0254 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSelectAscending : 1;                             		// 0x0254 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                CurrentPresetTab;                                 		// 0x0258 (0x0004) [0x0000000000000000]              
	int                                                CurrentPresetSlotIndex;                           		// 0x025C (0x0004) [0x0000000000000000]              
	int                                                CurrentSelectedItemListSlotIndex;                 		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                CurrentClothItemRefIndex;                         		// 0x0264 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ItemPresetClass;                                  		// 0x0268 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ItemListClass;                                    		// 0x026C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ItemDetailinfoClass;                              		// 0x0270 (0x0004) [0x0000000000000000]              
	int                                                PendingConsumeItemRefIndex;                       		// 0x0274 (0x0004) [0x0000000000000000]              
	struct FString                                     CurrentSearchtext;                                		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FInvenItemInfo >                    InvenItemList;                                    		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectSortType;                                   		// 0x0290 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1739 ];

		return pClassPointer;
	};

	void UnEquipItem ( struct FEquipItemInfo _EquipItemInfo, unsigned long bIsExpiredItem );
	void EquipItem ( struct FEquipItemInfo _EquipItemInfo, unsigned long bIsExpiredItem );
	void CheckDeActivateUpdateCharacter ( int SlotIndex );
	void CheckActivateUpdateCharacter ( int SlotIndex );
	void SetInvenItemState ( int Activated_SlotIndex, int DeActivated_SlotIndex );
	void OnItemDeActivated ( int Error_Code, int DeActivated_SlotIndex );
	void OnItemActivated ( int Error_Code, int Activated_SlotIndex, int DeActivated_SlotIndex );
	bool IsAbleDeActiveItem ( int SlotIndex );
	void SetDeActiveItem ( );
	void SetActiveItem ( );
	bool IsSellInvenItem ( struct FInvenItemInfo _InvenItemInfo );
	void UpdateInventoryItemUIData ( );
	void ShowPresetWeaponMeshBySlotIndex ( int PresetIndex, int Id );
	bool IsWaitforActiveItem ( );
	void SetWaitforActiveItem ( unsigned long bWait );
	void receiveInventoryListItemView ( int Id );
	void receiveInventoryInfoTabBtn ( int TabIndex );
	void DisplayDialog_ResetCompetitiveItemFailureOK ( struct FEventData ev );
	void DisplayDialog_ResetCompetitiveItemFailure ( );
	void DisplayDialog_UnLockItemFailureOK ( struct FEventData ev );
	void DisplayDialog_UnLockItemFailure ( unsigned char Error_Code );
	void OnItemUnLock ( unsigned char Error_Code );
	void UseLockedBoxItem ( );
	void OnDisplayDialog_UseItem_Cancel ( struct FEventData ev );
	void OnDisplayDialog_UseItem_OK ( struct FEventData ev );
	void DisplayDialog_UseItem ( int ItemStringID );
	void receiveInventorySearchWord ( struct FString searchtext );
	void receiveInventoryListUseUpBtn ( int Id );
	void receiveInventoryListItemDoubleClick ( int Id );
	void receiveInventoryListFunctionThreeBtn ( int Id );
	void receiveInventoryListFunctionTwoBtn ( int Id );
	void receiveInventoryListFunctionOneBtn ( int Id );
	void receiveInventoryListDestroyBtn ( int Id );
	void receiveInventoryListRepairBtn ( int Id );
	void receiveInventoryListCheckBtn ( int Id );
	void receiveInventoryListItemBtn ( int Id );
	void receiveInventoryItemEquipBtn ( int Id );
	void receiveInventoryListSubTabBtn ( int Code );
	void receiveInventoryListMainTabBtn ( int Code );
	void receiveInventoryPresetRepairBtn ( int Id );
	void receiveInventoryPresetDoubleClick ( int Id );
	void receiveInventoryPresetUnequipBtn ( int Id );
	void receiveInventoryPresetSlotBtn ( int Id );
	void receiveInventoryPresetUiToggleBtn ( );
	void receiveInventoryPresetTabBtn ( int Index );
	void SetEffectItemIconTooltips ( );
	void eventCallTooltipFootItem ( struct FString ToolTip );
	void eventCallTooltipUpperItem ( struct FString ToolTip );
	void HideAllEffectItemIcons ( );
	void ShowCurrentEffectItemIcons ( );
	void eventCallSetFootItem ( unsigned long bEquip );
	void eventCallSetUpperItem ( unsigned long bEquip );
	void SetUnEquipPresetItem ( int Id, int PresetTab, unsigned long IsExpiredItem );
	void SetAllUnEquipPresetItem ( int Id );
	void SelectPresetTab ( int Index );
	void SetInfoItem ( int Id, unsigned long IsSelectPreset );
	void CallPresetPlayEquipSound ( int Index );
	void CallInvenListPlayEquipSound ( int Index );
	void CallSetInfoDesc ( class UGFxObject* BasicData );
	void CallSetAddon ( class UGFxObject* BasicData );
	void CallSetAttachmentTitle ( struct FString Title );
	void CallSetAbility ( class UGFxObject* BasicData );
	void CallSetBasicInfo ( class UGFxObject* BasicData );
	void CallSelectInfoTab ( int Index );
	void CallSetInfoTab ( class UGFxObject* TabData );
	void CallSetInfoExtendMode ( );
	void CallSetInfoMiniMode ( );
	void CallscrollingItemList ( int Index );
	void eventCallSelectItemList ( int Index );
	void eventCallRemoveItemList ( int Index );
	void eventCallUpdateItemList ( class UGFxObject* TabData );
	void eventCallSetItemList ( class UGFxObject* TabData );
	void CallSetItemTab ( class UGFxObject* TabData );
	void CallSetCharacterTab ( class UGFxObject* TabData );
	void CallSetWeaponTab ( class UGFxObject* TabData );
	void CallSelectMainTab ( int Index );
	void CallSetAllTab ( class UGFxObject* TabData );
	void CallSetMainTab ( class UGFxObject* TabData );
	void CallSetComparisonSlot ( int Index );
	void CallSetUnequipBtnDisabled ( int Index, unsigned long Disable );
	void CallSetRepairBtnDisabled ( int Index, unsigned long Disable );
	void CallSetEquipSlot ( int Index );
	void ResetAllCallSetEquipSlot ( );
	void CallSetEquipArmorSlotData ( class UGFxObject* SlotData );
	void CallSetEquipSlotData ( class UGFxObject* SlotData );
	void CallSelectPresetTab ( int Index );
	void CallSetPresetTab ( class UGFxObject* TabData );
	void CallSetSpreadMenuOnOff ( unsigned long Open );
	void CallSetSpreadMenuText ( struct FString Open, struct FString Close );
	bool IsEquipItem ( int InventorySlotIndex, int PresetIndex );
	bool eventIsActiveItem ( int InventorySlotIndex );
	void UpdateItemRemainTime ( TArray< int > updateItemList );
	void SetEquipItem ( int Id, int PresetIndex );
	void RefreshEquipItem ( int InvenSlot );
	void SetUnEquipItem ( int Id, int PresetIndex, unsigned long IsExpiredItem );
	struct FString eventGetToolTip ( class UCombatDataTableRefExp* RefExp );
	void UpdateInvenItemList ( );
	void UpdateInvenForDestroyedItem ( );
	void ResetIsNewInventoryItem ( );
	bool eventIsCheckEquipItemRank ( int Id );
	void SetEffectItemIconTooltip ( int Index );
	void ShowEffectItemIcon ( int Index );
	void ShowVisibleItem ( int Index );
	void SetInvenItemList ( int MaintabIndex, int SubtabIndex, unsigned long bForceUpdate );
	int GetSelectedSubTab ( );
	int GetSelectedMainTab ( );
	void InitSetInfoItem ( );
	void SetDefaultPresetItemList ( );
	bool SetPresetItemList ( int PresetIndex );
	void InitEquipSlot ( int EquipSlotType );
	void SetEquipSlotItem ( int InventorySlotIndex, int EquipSlotType, class UCombatDataTableRefItem* RefItem );
	bool IsGrenadeSlot ( int slotType );
	void SetPresetTabInfo ( );
	void GetArmorSlotStructData ( struct FEquipSlotStruct* const_EquipSlotInfo, class UGFxObject** out_Data );
	void GetEquipSlotStructData ( struct FEquipSlotStruct* const_EquipSlotInfo, class UGFxObject** out_Data );
	void GetItemDescStructData ( struct FItemDescStruct* const_ItemDescInfo, class UGFxObject** out_Data );
	void GetItemAddonStructData ( struct FItemAddonStruct* ItemAddonInfo, class UGFxObject** out_Data );
	void RestItemAbilityInfoData ( struct FItemAbilityInfoStruct* ItemAbilityInfo );
	void GetItemAbilityInfoData ( struct FItemAbilityInfoStruct* ItemAbilityInfo, class UGFxObject** out_Data );
	void GetItemBasicInfoData ( struct FItemBasicInfoStruct* const_ItemBasicInfo, class UGFxObject** out_Data );
	void GetItemInfoTabData ( struct FInfoTabStruct* const_ItemInfotab, class UGFxObject** out_Data );
	void GetPresetTabData ( struct FPresetTabStruct* const_PresetTabInfo, class UGFxObject** out_Data );
	void GotoPrevScene ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void GetSubTabItemData ( int Type, class UGFxObject** out_Data );
	void SetSubTabItemDataAll ( );
	void GetSubTabCharData ( int Type, class UGFxObject** out_Data );
	void SetSubTabCharDataAll ( );
	void GetSubTabWeaponData ( int Type, class UGFxObject** out_Data );
	void SetSubTabWeaponDataAll ( );
	void GetSubTabAllData ( class UGFxObject** out_Data );
	void SetSubTabAllDataAll ( );
	void GetMainTabData ( int Type, class UGFxObject** out_Data );
	void SetMainTabDataAll ( );
	void InitTab ( );
	bool InitLabel ( );
	void SetFilterType ( int Id );
	int GetSelectSlotClothRefID ( );
	void ResetInventory ( );
	void ShowFrontEndPlayerActor ( );
	void Init ( );
	void HideScene ( );
	void ShowScene ( );
	void HideItemInfo ( );
	void ShowItemInfo ( );
	void HideItemList ( );
	void ShowItemList ( );
	void HideItemPreset ( );
	void ShowItemPreset ( );
	void UnLock ( );
	void Lock ( );
	void Close ( );
	void SetitemDetailinfo ( class UGFxObject* M );
	void SetItemList ( class UGFxObject* M );
	void SetItemPreset ( class UGFxObject* M );
	void Hide ( );
	void SortInventoryItem ( int SortType, unsigned long bAscending );
	bool GetInvenItemInfo ( int SlotIndex, struct FInvenItemInfo* _InvenItemInfo );
	void ClearInvenItemList ( );
	void InitInvenItemList ( );
};

UClass* UCombatFrontEnd_Inventory::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_RandomBoxShop
// 0x0038 (0x00E4 - 0x00AC)
class UCombatFrontEnd_RandomBoxShop : public UCombatFrontEnd_Maintenance
{
public:
	class UGFxObject*                                  PkgItemListGFxObj;                                		// 0x00AC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PkgItemInfoGFxObj;                                		// 0x00B0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CoinBarGFxObj;                                    		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                SelectedMainTab;                                  		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                SelectedItemID;                                   		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                SelectedInfoTab;                                  		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                SelectedInfoTabType;                              		// 0x00C4 (0x0004) [0x0000000000000000]              
	TArray< struct FShopTabStruct >                    MainCoinTabInfo;                                  		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bViewItemInfo : 1;                                		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< int >                                      CheckList;                                        		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1740 ];

		return pClassPointer;
	};

	struct FString eventGetJackpotGuranteeRandomboxTooltip ( );
	bool eventIsPickUpRandomBoxCube ( int Index );
	bool eventIsPickUpRandomBox ( struct FString ItemCodeName );
	void CoinBar_BSCoinSetActiveChargeBtn ( unsigned long bDisable );
	void CoinBar_BSCoinSetValue ( struct FString CoinValue );
	void CoinBar_BSCoinSetChargeBtnLabel ( struct FString Label );
	void CoinBar_MCoinSetActiveChargeBtn ( unsigned long bDisable );
	void CoinBar_MCoinSetValue ( struct FString CoinValue );
	void CoinBar_MCoinSetChargeBtnLabel ( struct FString Label );
	void CoinBar_GCoinSetActiveChargeBtn ( unsigned long bDisable );
	void CoinBar_GCoinSetValue ( struct FString CoinValue );
	void CoinBar_GCoinSetChargeBtnLabel ( struct FString Label );
	void CoinBar_HideUI ( );
	void CoinBar_ShowUI ( );
	void eventPkgItemInfo_SetInfoDesc ( class UGFxObject* DataObj );
	void PkgItemInfo_SetAttachmentTitle ( struct FString Title );
	void PkgItemInfo_AddOn ( class UGFxObject* DataObj );
	void PkgItemInfo_SetAbility ( class UGFxObject* AbilityObj );
	void PkgItemInfo_SelectInfoTab ( int TabIndex );
	void PkgItemInfo_SetInfoTab ( class UGFxObject* TabObj );
	void eventPkgItemInfo_ScrollList ( int Id );
	void PkgItemInfo_SelectItemList ( int Id );
	void eventPkgItemInfo_SetItemList ( class UGFxObject* ItemListObj );
	void PkgItemInfo_SetTitle ( struct FString Title );
	void PkgItemList_SetActiveOpenBtn ( unsigned long bDisable );
	void PkgItemList_SetOpenBtnLabel ( struct FString Label );
	void eventPkgItemList_ScrollList ( int Id );
	void eventPkgItemList_SelectItem ( int Id );
	void eventPkgItemList_SetItemList ( class UGFxObject* ItemList );
	void PkgItemList_SelectCoinTab ( int Index );
	void PkgItemList_SetCoinTab ( class UGFxObject* CoinTabObj );
	void PkgItemList_SetTitle ( struct FString Title );
	void OnBuyItem_Failure ( );
	void OnRandomBoxUsedFail_OK ( struct FEventData ev );
	void RandomBoxUsedFail ( );
	void eventSelectRandomBoxShopPackageItemList ( int Id );
	bool IsBuyableRandomBoxItem ( int BoxItemId );
	void UpdateCoinInfo ( );
	void OpenPackageItem ( int itemInvenslot );
	void OnBuyPackageDialogCancel ( struct FEventData ev );
	void OnBuyPackageDialogOK ( struct FEventData ev );
	void OnNotOpenDialogOK ( struct FEventData ev );
	void BuyPackageItem ( );
	void CallSetCoinBarUI ( class UGFxObject* M );
	void CallSetPackageItemInfoUI ( class UGFxObject* M );
	void CallSetPackageItemListUI ( class UGFxObject* M );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void GetItemDescStructData ( struct FItemDescStruct* const_ItemDescInfo, class UGFxObject** out_Data );
	void GetItemAddonStructData ( struct FItemAddonStruct ItemAddonInfo, class UGFxObject** out_Data );
	void RestItemAbilityInfoData ( struct FItemAbilityInfoStruct* ItemAbilityInfo );
	void GetItemAbilityInfoData ( struct FItemAbilityInfoStruct* ItemAbilityInfo, class UGFxObject** out_Data );
	void eventPackageItemListItemClick ( int RefCubeIndex );
	void SetInfoItem ( struct FString SelectedItemCodeName );
	void ResetShop ( unsigned long bFirstRandomBoxSeleted );
	void SetCoinChargeBtnDisable ( int Index );
	unsigned char GetTabIconType ( int Index );
	void InitShopSetting ( );
	void eventSetViewItemInfoList ( unsigned long bShow );
	void CoinBar_Hide ( );
	void CoinBar_Show ( );
	void PkgItemInfo_Hide ( );
	void PkgItemInfo_Show ( );
	void PkgItemList_Hide ( );
	void PkgItemList_Show ( );
	void GotoPrevScene ( );
	void UnLock ( );
	void Lock ( );
	void Hide ( );
	void Show ( );
	void Init ( );
	void PickOutViewItems ( TArray< class UCombatDataTableRefCubeBox* >* pickViewItemList );
	void SetPackageItemUIData ( int ItemID, class UGFxObject** out_Data );
	void SetPackageItemInfo ( int PkgItemID );
	void SetPackageItemList ( int MaintabIndex, unsigned long bForceUpdate, unsigned long bApplyTag );
};

UClass* UCombatFrontEnd_RandomBoxShop::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CharacterInfo_TabBase
// 0x0004 (0x0040 - 0x003C)
class UCombatFrontEnd_CharacterInfo_TabBase : public UObject
{
public:
	class UCombatFrontEndMoviePlayer*                  ParentMoviePlayer;                                		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1741 ];

		return pClassPointer;
	};

	struct FString eventGetLocalizeCombinationText ( struct FString Text, struct FString Replace, struct FString With, struct FString Replace01, struct FString With01, struct FString Replace02, struct FString With02, struct FString Replace03, struct FString With03 );
	void CalcTime ( int InSec, int* Day, int* Hour, int* Min );
	void InitData ( );
	void InitCategoryButton ( class UGFxObject** Data );
	void Init ( class UCombatFrontEndMoviePlayer* ParentGFxMoviePlayer );
};

UClass* UCombatFrontEnd_CharacterInfo_TabBase::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CharacterInfo_BattleTab
// 0x000C (0x004C - 0x0040)
class UCombatFrontEnd_CharacterInfo_BattleTab : public UCombatFrontEnd_CharacterInfo_TabBase
{
public:
	TArray< int >                                      BattleTabList;                                    		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1742 ];

		return pClassPointer;
	};

	void SetTabData ( int Index, class UGFxObject** _out_Data );
	void CallSetCombatTitle ( struct FString Latest, struct FString Total );
	void CallSetCombat ( class UGFxObject* Data );
	void InitData ( );
	void InitCategoryButton ( class UGFxObject** Data );
};

UClass* UCombatFrontEnd_CharacterInfo_BattleTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CharacterInfo_CompetitiveTab
// 0x0000 (0x0040 - 0x0040)
class UCombatFrontEnd_CharacterInfo_CompetitiveTab : public UCombatFrontEnd_CharacterInfo_TabBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1743 ];

		return pClassPointer;
	};

	void CallSetCompetition ( class UGFxObject* Data );
	void SetModeStatData ( int ModeID, class UGFxObject** _out_Data );
	void SetSquadTierDataNone ( class UGFxObject** _out_Data );
	void SetSoloDuoTierDataNone ( class UGFxObject** _out_Data );
	void InitData ( );
	void InitCategoryButton ( class UGFxObject** Data );
};

UClass* UCombatFrontEnd_CharacterInfo_CompetitiveTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CharacterInfo_ProfileTab
// 0x0000 (0x0040 - 0x0040)
class UCombatFrontEnd_CharacterInfo_ProfileTab : public UCombatFrontEnd_CharacterInfo_TabBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1744 ];

		return pClassPointer;
	};

	void GetProfileStatData ( struct FProfileStatData* out_stat_data );
	void InitGameData ( class UGFxObject** Result );
	void InitTierData ( class UGFxObject** Result );
	void InitRankData ( class UGFxObject** Result );
	void CallSetSummary ( class UGFxObject* Data );
	void InitData ( );
	void InitCategoryButton ( class UGFxObject** Data );
};

UClass* UCombatFrontEnd_CharacterInfo_ProfileTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CharacterInfo_WeaponTab
// 0x0000 (0x0040 - 0x0040)
class UCombatFrontEnd_CharacterInfo_WeaponTab : public UCombatFrontEnd_CharacterInfo_TabBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1745 ];

		return pClassPointer;
	};

	void InitMeleeWeapon ( int TabIndex, class UGFxObject** Data );
	void InitThrowWeapon ( int TabIndex, class UGFxObject** Data );
	void InitSubWeapon ( int TabIndex, class UGFxObject** Data );
	void InitPrimaryWeapon ( int TabIndex, class UGFxObject** Data );
	void CallSetWeapon ( class UGFxObject* Data );
	void InitData ( );
	void InitCategoryButton ( class UGFxObject** Data );
};

UClass* UCombatFrontEnd_CharacterInfo_WeaponTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEndBannerManager
// 0x0064 (0x00A0 - 0x003C)
class UCombatFrontEndBannerManager : public UObject
{
public:
	float                                              ImageDurationTime;                                		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              ImageLastTime;                                    		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                NumberOfImages;                                   		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsReady : 1;                                     		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                BannerTextureWidth;                               		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                BannerTextureHeight;                              		// 0x0050 (0x0004) [0x0000000000000000]              
	TArray< struct UCombatFrontEndBannerManager_FOnlineBannerInfo > OnlineBannerInfos;                                		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FDisplayBannerInfo                          DisplayBannerInfos[ 0x2 ];                        		// 0x0060 (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1746 ];

		return pClassPointer;
	};

	void Uninitialize ( );
	bool IsReady ( );
	void SetReady ( unsigned long bSet );
	class UTexture2D* CreateTexture2D ( class UTexture2DDynamic* DynTex, int TexIndex );
	void OnBannerOnlineImageDownloaded ( struct FOnlineImageDownload CachedEntry );
	void Init ( );
};

UClass* UCombatFrontEndBannerManager::pClassPointer = NULL;

// Class CombatGame.CombatGameDataCollector
// 0x0000 (0x003C - 0x003C)
class UCombatGameDataCollector : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1747 ];

		return pClassPointer;
	};

	void OnMatchRoundEnd ( unsigned char Winner );
	void OnMatchRoundHasBegun ( );
	void OnMatchEnd ( unsigned char Winner, unsigned char end_reason );
	void OnMatchHasBegun ( );
};

UClass* UCombatGameDataCollector::pClassPointer = NULL;

// Class CombatGame.CombatGameEngine
// 0x007C (0x08F0 - 0x0874)
class UCombatGameEngine : public UGameEngine
{
public:
	class UClass*                                      OnlineSubsystemDedicatedSvrClass;                 		// 0x0874 (0x0004) [0x0000000000000000]              
	class UCombatGameTableDepot*                       TableDepot;                                       		// 0x0878 (0x0004) [0x0000000000000000]              
	class UClass*                                      ServerTableDepotClass;                            		// 0x087C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      ClientTableDepotClass;                            		// 0x0880 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UCombatBGMPlayer*                            BGMPlayer;                                        		// 0x0884 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           SuppressList;                                     		// 0x0888 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSYSTEMSETTING_DATA >               ChangedInGameSystemSetting;                       		// 0x0894 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSYSTEMSETTING_DATA >               CacheInGameSystemSetting;                         		// 0x08A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      IsFrontEndScene : 1;                              		// 0x08AC (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FWorldCube >                        WorldCubeList;                                    		// 0x08B0 (0x000C) [0x0000000000502000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPackage*                                    PendingLevelPackage;                              		// 0x08BC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class ULinkerLoad*                                 PendingLevelLinkerLoad;                           		// 0x08C0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UWorld*                                      PendingLevelWorld;                                		// 0x08C4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              DefaultMapLoadingDelay;                           		// 0x08C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatAwesomium*                            AE;                                               		// 0x08CC (0x0004) [0x0000000000000000]              
	int                                                UpdateEnterFrameTime;                             		// 0x08D0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                GDIBrushCounter;                                  		// 0x08D4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                GDIDCCounter;                                     		// 0x08D8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                GDIFontCounter;                                   		// 0x08DC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ObjectPoolTimerDelta;                             		// 0x08E0 (0x0004) [0x0000000000000000]              
	class UCombatVoiceInterfaceVivox*                  Vivox;                                            		// 0x08E4 (0x0004) [0x0000000000000000]              
	class UCombatVoiceChatUserList*                    VoiceChatUsers;                                   		// 0x08E8 (0x0004) [0x0000000000000000]              
	class UCombatFrontEndBannerManager*                BannerManager;                                    		// 0x08EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1748 ];

		return pClassPointer;
	};

	void eventUninitializeFrontEndBannerManager ( );
	void eventInitializeFrontEndBannerManager ( );
	void eventUninitializeVivox ( );
	class UCombatVoiceInterfaceVivox* GetVivox ( );
	void eventInitializeVivox ( );
	void eventReleaseObjectPool ( );
	void GetLoadingUI ( struct FLoadingUIInfo* out_UIInfo );
	void InitLoadingUIDatas ( );
	int GetAccountMinClanLevel ( );
	int GetAccountMaxClanLevel ( );
	int GetAccountMinLevel ( );
	int GetAccountMaxLevel ( );
	int GetAccountLevelImageID ( unsigned char iconType, int Level, int Exp );
	struct FString GetAccountLevelIcon ( unsigned char iconType, int Level, int Exp );
	void SetLoadingUILabels ( );
	void ClearLoadingUILabels ( );
	int GetClanEmblemImageID ( int EmblemID );
	struct FString GetClanEmblemName ( int EmblemID );
	bool GetClanLevelByExp ( int Exp, int* out_level, struct FString* out_Color );
	bool GetLevelByExp ( int Exp, int* out_level );
	class UCombatProfileSettings* GetCombatProfileSettings ( );
	unsigned char eventGetRoundCountTypeByModeIndex ( int ModeIndex );
	bool IsShowGoreEffect ( );
	void SetGoreLevel ( int Level );
	class UCombatDataTableRefModeOption* GetRefModeOptionDataByCodename ( struct FString CodeName );
	class UCombatDataTableRefRank* GetRefRankTableByRefModeIndex ( int RefModeIndex, int rankID );
	class UCombatDataTableRefRankUp* eventGetRefRankUpTableForInGame ( int Rank );
	class UCombatDataTableRefRank* eventGetRefRankTableForInGame ( int Rank );
	class UCombatMeshBuilder* GetMeshBuilder ( );
	bool IsTeenVersion ( );
	void DisplaySuppressList ( );
	bool eventHasSuppress ( struct FString SuppressName );
	void RemoveSuppress ( struct FString SuppressName );
	void AddSuppress ( struct FString SuppressName );
	int GetRAM ( );
	int GetVRM ( );
	int GetFPS ( );
	void SetFPS ( int MaxFPS );
	void SetLocAndRotation ( class AActor* Target, unsigned long bAttachedMove, struct FVector* NewLoc, struct FRotator* NewRot );
	void SetForceRotation ( class AActor* Target, struct FRotator* NewRotation );
	void SetForceLocation ( class AActor* Target, unsigned long bAttachedMove, struct FVector* NewLocation );
	void PerformGarbageCollection ( );
	struct FString GetMapFileNameByMapCodeName ( struct FString MapCodeName );
	class UCombatObjectPool* GetObjectPool ( );
	void SetRelevantDelay ( unsigned long bUse );
	void eventStartLoginForNative ( int Param );
	class UCombatDataTableRefGameScoring* eventGetRefScoringTable ( int Index );
	class UObject* eventGetRefSkillDataByCodename ( struct FString CodeName, TArray< struct FString > AcceptSkillList, unsigned long bTest );
	class UCombatDataTableRefDrop* eventGetRefDropDataByCodeName ( struct FString CodeName );
	class UCombatDataTableRefPickup* eventGetRefPickupDataByCodeName ( struct FString CodeName );
	class UCombatDataTableRefAchievement* eventGetRefAchievementDataByCodename ( struct FString CodeName );
	class UCombatDataTableRefMap* eventGetRefMapDataByCodename ( struct FString CodeName );
	class UCombatDataTableRefItemDetailinfo* eventGetRefItemDetailinfo ( struct FString CodeName );
	class UObject* eventGetRefModeDataByCodename ( struct FString CodeName );
	int eventGetRefAchievementTableDataCount ( );
	int eventGetRefAchievementTableItemByIndex ( int DataIndex );
	class UCombatDataTableRefAchievement* eventGetRefAchievementTable ( int Index );
	int eventGetLocalizedChatCommandID ( struct FString inString );
	struct FString eventGetLocalizedString ( int Id );
	void eventLoadAllDataTableForServer ( );
	void eventLoadAllDataTableForClient ( );
	bool eventCalculateExpToLevel ( int Exp, int* Level );
	class UCombatDataTableRefExp* GetRefExpTable ( int Level );
	class UCombatDataTableRefItemDetailinfo* eventGetRefItemDetailinfoTable ( int Id );
	class UCombatDataTableRefMode* eventGetRefModeTable ( int Id );
	int eventGetRefMapTableFileName ( struct FString Filename, unsigned long bCodeName );
	class UCombatDataTableRefMap* eventGetRefMapTable ( int Id );
	class UCombatDataTableRefQuest* eventGetRefQuestTable ( int Id );
	class UObject* GetTableDepot ( );
	bool IsFinishedLoadAllTables ( );
	void BGMPlay ( unsigned char SceneIndex );
	class UCombatBGMPlayer* GetBGMPlayer ( );
	int GetPublisher ( );
	void SetForceMatchRoomInfo ( int InModeIndex, int InMapIndex );
	int GetSpawnProtectionType ( );
	void EnableIME ( unsigned long bEnable );
	void SetIMEConversionMode ( int NewMode );
	void RestoreIMEConversionMode ( );
	void BackupIMEConversionMode ( );
	bool CheckSecondsPerCycle ( );
	void CheckGDICounter ( );
	void CheckDXTable ( );
	void SendPingHigh ( int Uid );
	void SendHackReport ( unsigned char HackType, int Uid, struct FString InComment );
	void JPGScreenShot ( unsigned long bCaptureAndReport, unsigned char EReportType );
	void QRReportSendString ( struct FString ReportMessage );
	void ClearWorldCubeList ( );
	void InitWorldCube ( );
	void AddWorldCube ( class UTextureCube* CubeTexture, struct FVector* CubeLocation );
	void TerminateOtherProcess ( );
	void StackTrace ( );
	void Warn ( struct FString Message );
	void Log ( struct FString Message );
	void ConsoleCommand ( struct FString Command );
	void GFXMemReport ( unsigned long bFullReport );
	void ClearPendingLevel ( );
	void LoadPendingLevel ( struct FString MapfileName );
	bool StandAloneBrowse ( TArray< struct FString > inOptions, struct FString* InFilename, struct FString* OutError );
	bool DefaultMapBrowse ( struct FString* Error );
	bool IPPortBrowse ( struct FString URL_IP, int URL_Port, TArray< struct FString > Options, struct FString* Error );
};

UClass* UCombatGameEngine::pClassPointer = NULL;

// Class CombatGame.CombatGameEventBase
// 0x000C (0x0048 - 0x003C)
class UCombatGameEventBase : public UObject
{
public:
	struct FScriptDelegate                             __OnGetReward__Delegate;                          		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1749 ];

		return pClassPointer;
	};

	void UpdateScore ( class ACombatPlayerReplicationInfo* targetPRI, int AchievementIndex, struct FScriptDelegate GetRewardFunc );
	bool OnGetReward ( class ACombatPlayerReplicationInfo* targetPRI, int AchievementIndex, int* Score, int* RankExp, int* CreditPoint, int* ModeDependencyScore, int* tableIndex );
	struct FName eventGetMode ( );
	bool eventIsMode ( struct FName modeType );
	bool eventIsCanUsingSkill ( );
	void OnGameEvent ( struct FName Event );
};

UClass* UCombatGameEventBase::pClassPointer = NULL;

// Class CombatGame.CombatGameFrame
// 0x0000 (0x03A4 - 0x03A4)
class ACombatGameFrame : public AGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1750 ];

		return pClassPointer;
	};

	bool AllowCheats ( class APlayerController* P );
	class USequenceObject* GetSequence ( class UClass* Seq );
	void SetActiveDOF ( unsigned long bDOF );
	bool IsDefaultMap ( struct FString MapName );
	class UClass* eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal );
};

UClass* ACombatGameFrame::pClassPointer = NULL;

// Class CombatGame.CombatFrontEndInfo
// 0x002C (0x03D0 - 0x03A4)
class ACombatFrontEndInfo : public ACombatGameFrame
{
public:
	TArray< struct FSceneInfo >                        SceneList;                                        		// 0x03A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      CurrentScene;                                     		// 0x03B0 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentMainScene;                                 		// 0x03B1 (0x0001) [0x0000000000000000]              
	struct FName                                       CurrentCameraName;                                		// 0x03B4 (0x0008) [0x0000000000000000]              
	unsigned long                                      bShowSceneMessege : 1;                            		// 0x03BC (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              GameTitleDisplaySec;                              		// 0x03C0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              GameTitleDisplaySec_WithoutAge;                   		// 0x03C4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              LoadingSceneTime;                                 		// 0x03C8 (0x0004) [0x0000000000000000]              
	float                                              LoadingSceneTimeLimit;                            		// 0x03CC (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1751 ];

		return pClassPointer;
	};

	void ClearCheckLoaded ( );
	void CheckLoaded ( );
	void DisplayTierPointPenaltyDialog ( );
	void ShowRepurchase ( );
	void OnFrontendLoaded ( );
	struct FString GetNotifyMessage ( );
	void AddChangeSceneMessage ( struct FName PreviousStateName );
	void ChangeWindow ( struct FName CameraName );
	void ChangeCamera ( struct FName PreviousStateName );
	class ACombatFrontEndHUD* GetHUD ( );
	struct FName GetStateNameBy ( unsigned char scene_ );
	unsigned char GetCurrentSceneType ( );
	bool IsAvailableScene ( unsigned char aScene );
	unsigned char GetUIState ( );
	unsigned char eventGetCurrentMainScene ( );
	unsigned char GetCurrentScene ( );
	void GotoSceneState ( unsigned char NextScene );
	void GotoNextScene ( );
	void GotoPreviousScene ( );
};

UClass* ACombatFrontEndInfo::pClassPointer = NULL;

// Class CombatGame.CombatGame
// 0x0158 (0x04FC - 0x03A4)
class ACombatGame : public ACombatGameFrame
{
public:
	class UClass*                                      CombatGameMessageClass;                           		// 0x03A4 (0x0004) [0x0000000000000000]              
	class UClass*                                      CombatErrorMessageClass;                          		// 0x03A8 (0x0004) [0x0000000000000000]              
	class UClass*                                      CombatStatStorageClass;                           		// 0x03AC (0x0004) [0x0000000000000000]              
	class UClass*                                      BotReplicationInfoClass;                          		// 0x03B0 (0x0004) [0x0000000000000000]              
	class UClass*                                      CombatGameScoreClass;                             		// 0x03B4 (0x0004) [0x0000000000000000]              
	unsigned char                                      ModeDifficulty;                                   		// 0x03B8 (0x0001) [0x0000000000000000]              
	unsigned char                                      RoundResultReason;                                		// 0x03B9 (0x0001) [0x0000000000000000]              
	unsigned char                                      RankSystemID;                                     		// 0x03BA (0x0001) [0x0000000000000000]              
	unsigned char                                      BindRegion;                                       		// 0x03BB (0x0001) [0x0000000000000000]              
	unsigned char                                      e_MatchType;                                      		// 0x03BC (0x0001) [0x0000000000000000]              
	class ACombatSentinelManager*                      SentinelManager;                                  		// 0x03C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseSentinel : 1;                                 		// 0x03C4 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bCheckForceGameOver : 1;                          		// 0x03C4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSupportsRespawn : 1;                             		// 0x03C4 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCountDown : 1;                                   		// 0x03C4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDirtyRoundOverCheck : 1;                         		// 0x03C4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bCanBeBaseForPawns : 1;                           		// 0x03C4 (0x0004) [0x0000000000004001] [0x00000020] ( CPF_Edit | CPF_Config )
	unsigned long                                      bIsWarmupHolding : 1;                             		// 0x03C4 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bUseClassSystem : 1;                              		// 0x03C4 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bInitPSListInGroup : 1;                           		// 0x03C4 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bCanTeamChange : 1;                               		// 0x03C4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsBlockingJoin : 1;                              		// 0x03C4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bUseParachuteRespawn : 1;                         		// 0x03C4 (0x0004) [0x0000000000004001] [0x00000800] ( CPF_Edit | CPF_Config )
	unsigned long                                      bForfeitedMatch : 1;                              		// 0x03C4 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bSkipSkillLicense : 1;                            		// 0x03C4 (0x0004) [0x0000000000004001] [0x00002000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bOpenNewMatch : 1;                                		// 0x03C4 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bDemoRec : 1;                                     		// 0x03C4 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bInfiniteWeaponReload : 1;                        		// 0x03C4 (0x0004) [0x0000000000000000] [0x00010000] 
	TArray< class UClass* >                            PlayerStartClass;                                 		// 0x03C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           PlayerStartClassPath;                             		// 0x03D4 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SavePortal;                                       		// 0x03E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ReadiedPlayerList;                                		// 0x03EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GoalRound;                                        		// 0x03F8 (0x0004) [0x0000000000000000]              
	int                                                GoalMission;                                      		// 0x03FC (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0400 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatGame.TimeLimitSec
	int                                                InitCR;                                           		// 0x0404 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DefaultInvulnerableTime;                          		// 0x0408 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< float >                                    RespawnDelay;                                     		// 0x040C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	float                                              DroppedWeaponLifeSpan;                            		// 0x0418 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ReasonMsgWaitTime;                                		// 0x041C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              WinnerMsgWaitTime;                                		// 0x0420 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RestartWait;                                      		// 0x0424 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MatchEndWait;                                     		// 0x0428 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MatchWarmingupTime;                               		// 0x042C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CompetitiveMatchWarmingupTime;                    		// 0x0430 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CompetitiveMatchWarmingupMinimumTime;             		// 0x0434 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TempSecTime;                                      		// 0x0438 (0x0004) [0x0000000000000000]              
	class UCombatLog*                                  CBLog;                                            		// 0x043C (0x0004) [0x0000000000000000]              
	int                                                GameLogID;                                        		// 0x0440 (0x0004) [0x0000000000000000]              
	TArray< struct FInactiveStatInfo >                 InactiveStatArray;                                		// 0x0444 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FForbiddenWeapon >                  ForbiddenWeaponList;                              		// 0x0450 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            ForbiddenEWeaponGroup;                            		// 0x045C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            ForbiddenRISList;                                 		// 0x0468 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              HealthModifier;                                   		// 0x0474 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                BotSpawnCount;                                    		// 0x0478 (0x0004) [0x0000000000000000]              
	int                                                ClassSelectCondition;                             		// 0x047C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class AController* >                       PendingPlayers;                                   		// 0x0480 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ACombatPC* >                         CombatPCs;                                        		// 0x048C (0x000C) [0x0000000000101000]              ( CPF_Native )
	class ACBGameReplicationInfo*                      CBGRI;                                            		// 0x0498 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ACombatPlayerStart* >                PSListInGroup;                                    		// 0x049C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UCombatDBManager*                            CombatDBManager;                                  		// 0x04A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MapID;                                            		// 0x04AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ModeID;                                           		// 0x04B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TeamChangeMsgWaitTime;                            		// 0x04B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FClientConnectionInfo >             ClientConnections;                                		// 0x04B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              JoinBlockConditionTime;                           		// 0x04C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              JoinBlockConditionScore;                          		// 0x04C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BlockJoinCheckTime;                               		// 0x04CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     GameModeGuideStr;                                 		// 0x04D0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              LastTestMessageTime;                              		// 0x04DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           PengindTestMessageList;                           		// 0x04E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                StartedMemberCount;                               		// 0x04EC (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           SavePRIStatModeList;                              		// 0x04F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1752 ];

		return pClassPointer;
	};

	unsigned char GetMatchType ( int Category );
	int GetMessageType ( struct FName MessageName );
	bool AllowPausing ( class APlayerController* PC );
	class APlayerController* SpawnChampionshipObserverPC ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
	bool IsPlayerMission ( class ACombatPawn* Victim, struct FName* Mission );
	void eventCombatBroadCastSuicideMessage ( class APlayerReplicationInfo* Victim, class UClass* DamageType );
	struct FString GetGameModeGuideStr ( );
	void OnMissionEvent ( class USeqAct_MissionEvent* Action );
	void OnSpawnGroupIndex ( class USeqAct_SpawnGroupIndex* Action );
	class ACBTeamInfo* GetTeamInfoFromEventName ( struct FString MissionEvent );
	bool IsContainPSListInGroup ( class ACombatPlayerStart* PS );
	void InitPSListInGroup ( );
	void DecrementBot ( );
	void IncrementBot ( );
	bool GetTriggetEventType ( int* Type );
	bool CanDropWeapon ( );
	bool IsFirstSpawn ( );
	bool IsCountdDown ( );
	bool IsMatchInProgress ( );
	bool eventIsWarmingUpScene ( );
	bool eventIsDesertion ( );
	void eventForceMatchEnd ( class AActor* Winner );
	void eventBroadcastLocalizedEx ( class AActor* Sender, class ACombatPC* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
	void eventAllowBroadcastLocalizedEx ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02, unsigned char TargetTeamIndex );
	bool CanUseClassSystem ( );
	int GetClassSelectCondition ( );
	float GetRespawnDelay ( class AController* TargetPC );
	void StartHumans ( );
	void StartBots ( );
	void StartMatch ( );
	void BroadcastGameMessageByTeam ( int MessageType, unsigned char TargetTeamIndex, class APlayerReplicationInfo* PRI1, class APlayerReplicationInfo* PRI2, class UObject* OptionalObject, int OptionalInt1 );
	void BroadcastGameMessage ( int MessageType, class APlayerReplicationInfo* PRI1, class APlayerReplicationInfo* PRI2, class UObject* OptionalObject, int OptionalInt1 );
	void OnMissionSuccess ( class AActor* Target, class AActor* Object );
	void IncrementMissionCount ( class AActor* Target );
	class AActor* GetWinnerByDecision ( );
	void MakeDecisionWithSomething ( );
	int GetWinRound ( class AActor* Winner );
	void IncreaseRoundWin ( class AActor* Winner );
	bool SetRoundWinner ( class AActor* Winner );
	void CheckMatchOver ( class AActor* Winner, unsigned char Reason );
	void TryEndGame ( class AActor* Winner, unsigned char Reason );
	void ReBroadCastTestMessage ( );
	void eventBroadCastTestMessage ( struct FString msg );
	void BroadcastDeathMessage ( class AController* Killer, class AController* Other, class UClass* DamageType );
	void BroadcastRoundResultMessage ( );
	void BroadcastGameResultMessage ( );
	void TerminatedMatch ( );
	void UpdateLives ( );
	void ScoreKill ( class AController* Killer, class AController* Killed );
	void Killed ( class AController* Killer, class AController* Victim, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	void UpdateAssist ( );
	void PendingCheckAssist ( class AController* Killer, class AController* Victim );
	void NotifyArbitratedMatchEnd ( );
	void InvalidateTheMatch ( unsigned char Reason );
	void TeamSwap ( );
	bool CanChangeTeam ( );
	void KillRemainingPlayers ( );
	void InitStatStorage ( class ACombatPC* Target );
	bool CanUseStatStorage ( class ACombatPC* Target );
	bool CanUseLockedPresetScene ( );
	void CheckRoundOver ( );
	bool CheckTimeOver ( );
	bool CheckLive ( );
	bool CheckGoalScore ( );
	bool CheckGoalMission ( );
	void UpdateSentinelData ( class AController* Killer, class AController* KilledPlayer );
	void SetLockedPresetSceneAllPlayer ( unsigned long bOn );
	void InitPlayerStartingViewPoint ( class ACombatPC* PC );
	void CheckBlockJoin ( );
	void DecisionAtLockPresetScene ( class ACombatPC* P );
	void NotifyRoundEndInterface ( unsigned long bOnlyDynamicActors );
	void GenericPlayerInitialization ( class AController* C );
	bool FindInactivePRI ( class APlayerController* PC );
	class APlayerReplicationInfo* AddInactivePRI ( class APlayerReplicationInfo* PRI, class APlayerController* PC );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void OnNotifyDedicatedServerLog ( class ACombatPC* Target );
	void ReduceDamage ( class AActor* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	bool PlayerCanRestartGame ( class APlayerController* aPlayer );
	void eventNowGoodToBeginTheMatch ( );
	bool CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget );
	void Logout ( class AController* Exiting );
	void ReportSessionDisconnected ( class APlayerController* PC, unsigned char Reason );
	bool ReSpawnSuccess ( class AController* NewPlayer );
	void NotifyRealSpawn ( class AController* NewPlayer );
	float GetInvulnerableTime ( class ACombatPawn* TargetPawn );
	void RemovePendingRestartPlayer ( class AController* CheckingPlayer );
	void PendingRestartPlayer ( );
	void RestartPlayer ( class AController* NewPlayer );
	bool eventGetPlayerStartEnable ( class ANavigationPoint* P );
	void SetSpawnGroupIndex ( unsigned char NewSpawnGroupIndex );
	unsigned char GetSpawnGroupIndex ( );
	void eventGameBeginSentinelRun ( int inMapId, int InModeID );
	void eventStartSentinel ( struct FString TagDesc );
	void PlayerReadyToPlay ( class APlayerController* PC );
	void eventevPlayerReadyToPlay ( class APlayerController* PC );
	void CheckNeedLoadGameKillCount ( class APlayerController* PC );
	void OnTimeOver ( );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot );
	void PostBeginPlay ( );
	void PreBeginPlay ( );
	void InitGameReplicationInfo ( );
	struct FName GetGameMode ( );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	void UpdateCurrentModeDifficulty ( struct FString Options );
	void ActiveSeqEventInitGame ( );
	bool CheckValidDataTable ( );
	void ModifyInventoryForMode ( class ACombatWeapon* CW );
	bool GetForbiddenInventoryByGroup ( unsigned char NeedGroup, class UClass** ReplaceW );
	bool IsForbbidenInventory ( class UClass* CW, class UClass** ReplaceW );
	void SaveTakeDamageData ( class AActor* Victim, int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FUniqueNetId UniqueId, unsigned long bSupportsAuth, struct FString* ErrorMessage );
	void RegisterServer ( );
	void eventSubLevelLoaded ( );
	void SelectingVIP ( );
	void SortingPlayerOrder ( );
	void ProcessStatDatas ( );
	void OnCombatPCReleased ( class ACombatPC* PC );
	void OnCombatPCRegistered ( class ACombatPC* PC );
	bool IsCanJoin ( );
};

UClass* ACombatGame::pClassPointer = NULL;

// Class CombatGame.CombatTeamGame
// 0x00B8 (0x05B4 - 0x04FC)
class ACombatTeamGame : public ACombatGame
{
public:
	class UClass*                                      TeamInfoClass;                                    		// 0x04FC (0x0004) [0x0000000000000000]              
	TArray< class ACBTeamInfo* >                       Teams;                                            		// 0x0500 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ParticipatingTeamCount;                           		// 0x050C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      PlayerStartCount;                                 		// 0x0510 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    InvulnerableTime;                                 		// 0x051C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    InvulnerableTimeInTheAir;                         		// 0x0528 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FDefaultInventoryInfo                       DefaultInventory[ 0x2 ];                          		// 0x0534 (0x0030) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FDefaultInventoryInfo                       DefaultInventorySpawnInTheAir[ 0x2 ];             		// 0x0564 (0x0030) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      RoundOverPointType;                               		// 0x0594 (0x0001) [0x0000000000000000]              
	unsigned char                                      MatchEndResultType;                               		// 0x0595 (0x0001) [0x0000000000000000]              
	int                                                ClanMemberCheckCount;                             		// 0x0598 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCheckClanMemberCount : 1;                        		// 0x059C (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                SurrendTime;                                      		// 0x05A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                SurrendCoolTime;                                  		// 0x05A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           VivoxTeamKeyword;                                 		// 0x05A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1753 ];

		return pClassPointer;
	};

	void SwapVivoxTeamKeyword ( );
	struct FString GetVivoxTeamKeyword ( unsigned char TeamNum );
	void GameSurrendCoolTimeDecrease ( );
	void GameSurrenderEnd ( );
	void GameSurrendEndCheck ( int TeamID );
	void GameSurrenderReplyLogout ( int Uid, unsigned char TeamID );
	void GameSurrenderReply ( int Uid, unsigned long surrend );
	void GameSurrender ( int Uid );
	void CalcPlayerPing ( );
	void AddTeamBonus ( class ACombatPlayerReplicationInfo* PlayerPRI, struct FName EventName );
	void UpdateScore ( class ACombatPlayerReplicationInfo* KillerPRI, int AchievementIndex, struct FScriptDelegate GetRewardFunc );
	void AddMissionScore ( struct FName EventName, class ACombatPlayerReplicationInfo* targetPRI, class ACBTeamInfo* TargetTeam, float Score, float Ratio );
	void AddScore ( class ACombatPlayerReplicationInfo* targetPRI, class ACBTeamInfo* TargetTeam, float Score, struct FName EventName, float Ratio );
	int GetRoundOverPoint ( unsigned char TeamIndex, unsigned long bMatchServerTeam );
	void UpdateSentinelData ( class AController* Killer, class AController* KilledPlayer );
	bool ShouldRespawn ( class APickupFactory* Other );
	void IncrementMissionCount ( class AActor* Target );
	float GetInvulnerableTime ( class ACombatPawn* TargetPawn );
	TArray< class UClass* > GetDefaultInventoryClass ( class APawn* PlayerPawn );
	void eventAddDefaultInventory ( class APawn* PlayerPawn );
	bool IsForbbidenInventory ( class UClass* CW, class UClass** ReplaceW );
	void OverridePRI ( class APlayerController* PC, class APlayerReplicationInfo* OldPRI );
	void TerminatedMatch ( );
	void CalcIntrudePoint ( class APlayerReplicationInfo* Target );
	int GetWinRound ( class AActor* Winner );
	void IncreaseRoundWin ( class AActor* Winner );
	class AActor* GetWinnerByDecision ( );
	class ACBTeamInfo* GetWinnerByCondition ( unsigned char condition, unsigned long bBiggest );
	bool CheckTimeOver ( );
	bool CheckLive ( );
	bool CheckGoalScore ( );
	unsigned char eventGetGoalScoreValue ( );
	bool CheckGoalMission ( );
	int GetAreaIndex ( class AController* Player );
	int GetMaxAreaIndex ( class AController* Player );
	void BroadcastGameResultMessage ( );
	void BroadcastRoundResultMessage ( );
	void eventBroadcastLocalizedTeamEx ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01 );
	void CheckInvalidPlayerCountCondition ( class APlayerController* Exiting );
	void ForceRemainTeamWinning ( unsigned char RemainTeam );
	void Logout ( class AController* Exiting );
	void CheckPlayerStartError ( );
	void SetTeam ( class AController* Other, class ACBTeamInfo* NewTeam, unsigned long bNewTeam );
	void SetTeamIndex ( class ACBTeamInfo* TeamInfo, int TeamIndex );
	void CreateTeam ( int TeamIndex );
	void NotifyLastPlayer ( int TeamIndex );
	bool HasLimitedLife ( class ACombatPC* Player );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	unsigned char PickTeam ( unsigned char Num, class AController* C );
	unsigned char MatchServer_PickTeam ( int PlayerID );
	bool ChangeTeam ( class AController* Other, int Num, unsigned long bNewTeam );
	void TeamSwap ( );
	bool CanChangeTeam ( );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	class UClass* GetPlayerStartClass ( unsigned char TeamIndex );
	bool ReSpawnSuccess ( class AController* NewPlayer );
	void UpdateLives ( );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage );
	bool InitStandAloneLoginParam ( unsigned char* outPlayerTeam, struct FString* outPlayerName, unsigned char* outGrade );
	bool InitClanMatch ( );
	bool CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget );
	bool IsCanJoin ( );
	void PlayerReadyToPlay ( class APlayerController* PC );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void PreBeginPlay ( );
};

UClass* ACombatTeamGame::pClassPointer = NULL;

// Class CombatGame.CombatPVEGame
// 0x0000 (0x05B4 - 0x05B4)
class ACombatPVEGame : public ACombatTeamGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1754 ];

		return pClassPointer;
	};

	void SortingPlayerOrder ( );
};

UClass* ACombatPVEGame::pClassPointer = NULL;

// Class CombatGame.CombatAIGame
// 0x001C (0x05D0 - 0x05B4)
class ACombatAIGame : public ACombatPVEGame
{
public:
	int                                                PlayerLifeCount;                                  		// 0x05B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PlayerMaxLifeCount;                               		// 0x05B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                RespawnWaitTime;                                  		// 0x05BC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned char                                      BOT_TEAM;                                         		// 0x05C0 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      PLAYER_TEAM;                                      		// 0x05C1 (0x0001) [0x0000000000000002]              ( CPF_Const )
	class USequence*                                   CurrentSequence;                                  		// 0x05C4 (0x0004) [0x0000000000000000]              
	int                                                WaveStartTime;                                    		// 0x05C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PlayerHealthForNoLife;                            		// 0x05CC (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1755 ];

		return pClassPointer;
	};

	bool GetAIRewardRank ( unsigned char* Rank );
	void OnWarning ( class Uinterface_WavePawn* WavePawn );
	int GetWavePawnNameID ( class Uinterface_WavePawn* WavePawn );
	void ReduceDamage ( class AActor* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	void Logout ( class AController* Exiting );
	bool HasLimitedLife ( class ACombatPC* Player );
	int GetRoundOverPoint ( unsigned char TeamIndex, unsigned long bMatchServerTeam );
	void UpdatePlayTime ( );
	void TryEndGame ( class AActor* Winner, unsigned char Reason );
	void eventOnSeqAllBotAllDied ( );
	void OnWaveEnd ( );
	void OnWaveStart ( );
	void OnMissionEvent ( class USeqAct_MissionEvent* Action );
	int GetWaveBotSpawnCount ( );
	class ACombatBotController* SpawnBot ( class USeqAct_CombatBotSpawn* Spawner, class AActor* SpawnPoint );
	void GiveLifeToPlayerNoLife ( );
	void AllPlayerIncrementLifeCount ( );
	void NotifyBotDied ( class Uinterface_WavePawn* WavePawn );
	void RestartPlayer ( class AController* NewPlayer );
	float GetRespawnDelay ( class AController* TargetPC );
	unsigned char PickTeam ( unsigned char Num, class AController* C );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage );
	void PostBeginPlay ( );
	bool CheckTimeOver ( );
	bool CheckLive ( );
	bool CheckGoalScore ( );
	bool CheckGoalMission ( );
};

UClass* ACombatAIGame::pClassPointer = NULL;

// Class CombatGame.CombatTutorialGame
// 0x0000 (0x05D0 - 0x05D0)
class ACombatTutorialGame : public ACombatAIGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1756 ];

		return pClassPointer;
	};

	void OnMissionEvent ( class USeqAct_MissionEvent* Action );
	bool CanDropWeapon ( );
	void SendTutorialGameFinish ( );
};

UClass* ACombatTutorialGame::pClassPointer = NULL;

// Class CombatGame.CombatPVPGame
// 0x0000 (0x05B4 - 0x05B4)
class ACombatPVPGame : public ACombatTeamGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1757 ];

		return pClassPointer;
	};

	void SortingPlayerOrder ( );
};

UClass* ACombatPVPGame::pClassPointer = NULL;

// Class CombatGame.CombatBusterGame
// 0x0008 (0x05BC - 0x05B4)
class ACombatBusterGame : public ACombatPVPGame
{
public:
	struct FObjectDestoryBounsInfo                     ObjectDestoryBouns;                               		// 0x05B4 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1758 ];

		return pClassPointer;
	};

	void AddTeamBonus ( class ACombatPlayerReplicationInfo* PlayerPRI, struct FName EventName );
	void NotifyExplosionInPlaying ( class ACombatBusterActor* Target );
	void NotifyEnemyObjDestroy ( class ACombatPC* Target, class ACombatBusterActor* BusterActor );
	unsigned char eventGetGoalScoreValue ( );
	bool CheckLive ( );
	bool CheckGoalMission ( );
};

UClass* ACombatBusterGame::pClassPointer = NULL;

// Class CombatGame.CombatDemolitionGame
// 0x0004 (0x05B8 - 0x05B4)
class ACombatDemolitionGame : public ACombatPVPGame
{
public:
	class ACombatTrigger_Bomb*                         PlantedBomb;                                      		// 0x05B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1759 ];

		return pClassPointer;
	};

	bool IsPlayerMission ( class ACombatPawn* Victim, struct FName* Mission );
	void BroadcastDemolitionEventMessage ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
	void Installed ( class ACombatTrigger_Bomb* Bomb, class ACombatPC* Installer );
	void AddTeamBonus ( class ACombatPlayerReplicationInfo* PlayerPRI, struct FName EventName );
	void OnMissionSuccess ( class AActor* Target, class AActor* Object );
	bool CheckLive ( );
	bool CheckTimeOver ( );
	bool CheckGoalScore ( );
};

UClass* ACombatDemolitionGame::pClassPointer = NULL;

// Class CombatGame.CombatLCTFGame
// 0x000C (0x05C0 - 0x05B4)
class ACombatLCTFGame : public ACombatPVPGame
{
public:
	float                                              EnableTouchTime;                                  		// 0x05B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FCarriedObjectBounsInfo                     CarriedObjectBouns;                               		// 0x05B8 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1760 ];

		return pClassPointer;
	};

	void AddTeamBonus ( class ACombatPlayerReplicationInfo* PlayerPRI, struct FName EventName );
	void InitTakeCountAllMemeber ( class AActor* Target );
	void NotifyPickupFlag ( class ACombatPC* Target );
	void NotifyDropFlag ( unsigned char BroadTeam, int DropOnDeath );
	void NotifySpawnFlag ( class ACombatLCTFFlagActor* FlagActor );
	void UpdateScore ( class ACombatPlayerReplicationInfo* KillerPRI, int AchievementIndex, struct FScriptDelegate GetRewardFunc );
	void NotifyCarriedTakePoint ( class ACombatPC* Target, class ACombatLCTFFlagActor* FlagActor );
	unsigned char eventGetGoalScoreValue ( );
	bool CheckLive ( );
	bool CheckGoalMission ( );
};

UClass* ACombatLCTFGame::pClassPointer = NULL;

// Class CombatGame.CombatPracticeGame
// 0x0028 (0x05DC - 0x05B4)
class ACombatPracticeGame : public ACombatPVPGame
{
public:
	unsigned char                                      MaxCheatPawns;                                    		// 0x05B4 (0x0001) [0x0000000000004000]              ( CPF_Config )
	float                                              RespawnTime;                                      		// 0x05B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FCheatPawnInfo >                    CheatPawnInfoList;                                		// 0x05BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SpawnKeyCount;                                    		// 0x05C8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bProjectileCamera : 1;                            		// 0x05CC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTogglePracticeGameTimer : 1;                     		// 0x05CC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< struct FSPracticeGameHotKeyInfo >          HotKeyUIs;                                        		// 0x05D0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1761 ];

		return pClassPointer;
	};

	void ResetPracticeGameTimer ( );
	void TogglePracticeGameTimer ( );
	void ToggleProjectileCamera ( );
	void CheatChangeTeam ( );
	void KillAllCheatPawns ( );
	void SpawnCheatPawn ( int Index );
	void CheatPawnSpawn ( struct FCheatPawnInfo _CheatPawnInfo );
	bool InitStandAloneLoginParam ( unsigned char* outPlayerTeam, struct FString* outPlayerName, unsigned char* outGrade );
	bool CanDropWeapon ( );
	unsigned char eventGetGoalScoreValue ( );
	bool CheckTimeOver ( );
	void CheckRoundOver ( );
	bool CheckSuddenDeathKill ( );
	bool CheckGoalMission ( );
	bool CheckLive ( );
	void SetInfiniteAmmor ( class ACombatPawn* inPawn, unsigned long bFlag );
	void eventAddDefaultInventory ( class APawn* PlayerPawn );
	void AutoRespawn ( int SpawnNumber );
	float GetRespawnTime ( );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType );
	class AComBatPC_PracticeGame* GetLocalPlayer_PracticeGame ( );
	void UpdateCheatPawnInfoList ( struct FCheatPawnInfo _CheatPawnInfo );
	void SetCheatPawnCount ( );
	int GetCheatPawnCount ( );
	void UpdateScore ( class ACombatPlayerReplicationInfo* KillerPRI, int AchievementIndex, struct FScriptDelegate GetRewardFunc );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void Dev_ExitStandAloneGame ( );
};

UClass* ACombatPracticeGame::pClassPointer = NULL;

// Class CombatGame.CombatSingleGame
// 0x0000 (0x05B4 - 0x05B4)
class ACombatSingleGame : public ACombatTeamGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1762 ];

		return pClassPointer;
	};

};

UClass* ACombatSingleGame::pClassPointer = NULL;

// Class CombatGame.CombatGameOptionTransaction
// 0x0004 (0x0040 - 0x003C)
class UCombatGameOptionTransaction : public UObject
{
public:
	unsigned char                                      Invite_Auto_Regist;                               		// 0x003C (0x0001) [0x0000000000000000]              
	unsigned char                                      Friend_Invite_Refuse;                             		// 0x003D (0x0001) [0x0000000000000000]              
	unsigned char                                      Minimap_Size_Step;                                		// 0x003E (0x0001) [0x0000000000000000]              
	unsigned char                                      Save_Minimap_Size_Step;                           		// 0x003F (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1763 ];

		return pClassPointer;
	};

	unsigned char GetGameOption ( int Option_Type );
	void SetGameOption ( int Option_Type, int Option_Value );
};

UClass* UCombatGameOptionTransaction::pClassPointer = NULL;

// Class CombatGame.CombatGameScore
// 0x0000 (0x003C - 0x003C)
class UCombatGameScore : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1764 ];

		return pClassPointer;
	};

	float GetRankExp ( struct FName EventName, float Ratio );
	float GetCR ( struct FName EventName, float Ratio );
	float GetMissionScore ( struct FName EventName, float Ratio );
	float GetScore ( struct FName EventName, float Ratio );
};

UClass* UCombatGameScore::pClassPointer = NULL;

// Class CombatGame.CombatGameTableDepot
// 0x0F04 (0x0F40 - 0x003C)
class UCombatGameTableDepot : public UObject
{
public:
	class UCombatDataTable*                            LocalizedTextTable;                               		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatDataTable*                            LocalizedChatCommandDataTable;                    		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UCombatDataTable* >                  RefTable;                                         		// 0x0044 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0050 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.MapCodeNameMap
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x008C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ModeCodeNameMap
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x00C8 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ModeGroupCodeNameMap
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x0104 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.MissionModeGroupCodeNameMap
	unsigned char                                      UnknownData04[ 0x3C ];                            		// 0x0140 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.InitItemCodeNameMap
	unsigned char                                      UnknownData05[ 0x3C ];                            		// 0x017C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ItemCodeNameMap
	unsigned char                                      UnknownData06[ 0x3C ];                            		// 0x01B8 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ShopCodeNameMap
	unsigned char                                      UnknownData07[ 0x3C ];                            		// 0x01F4 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ShopCategoryTabMap
	unsigned char                                      UnknownData08[ 0x3C ];                            		// 0x0230 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ShopCategoryCodeNameMap
	unsigned char                                      UnknownData09[ 0x3C ];                            		// 0x026C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ShopItemCodeNameMap
	unsigned char                                      UnknownData10[ 0x3C ];                            		// 0x02A8 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.AchievementCodeNameMap
	unsigned char                                      UnknownData11[ 0x3C ];                            		// 0x02E4 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.GameScoringCodeNameMap
	unsigned char                                      UnknownData12[ 0x3C ];                            		// 0x0320 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.StatCodeNameMap
	unsigned char                                      UnknownData13[ 0x3C ];                            		// 0x035C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.PickupCodeNameMap
	unsigned char                                      UnknownData14[ 0x3C ];                            		// 0x0398 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.DropCodeNameMap
	unsigned char                                      UnknownData15[ 0x3C ];                            		// 0x03D4 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.GroupSkillCodeNameMap
	unsigned char                                      UnknownData16[ 0x3C ];                            		// 0x0410 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.SkillLicenseCodeNameMap
	unsigned char                                      UnknownData17[ 0x3C ];                            		// 0x044C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.RankCodeNameMap
	unsigned char                                      UnknownData18[ 0x3C ];                            		// 0x0488 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ModeOptionCodeNameMap
	unsigned char                                      UnknownData19[ 0x3C ];                            		// 0x04C4 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ItemDetailinfoMap
	unsigned char                                      UnknownData20[ 0x3C ];                            		// 0x0500 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ItemClassNameMap
	unsigned char                                      UnknownData21[ 0x3C ];                            		// 0x053C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ItemAttachmentWeaponNameMap
	unsigned char                                      UnknownData22[ 0x3C ];                            		// 0x0578 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.CallingCardNameMap
	unsigned char                                      UnknownData23[ 0x3C ];                            		// 0x05B4 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ShopSellItemMap
	unsigned char                                      UnknownData24[ 0x3C ];                            		// 0x05F0 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.EmblemNameMap
	unsigned char                                      UnknownData25[ 0x3C ];                            		// 0x062C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.QuestNameMap
	unsigned char                                      UnknownData26[ 0x3C ];                            		// 0x0668 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.HelpTabCodeNameMap
	unsigned char                                      UnknownData27[ 0x3C ];                            		// 0x06A4 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.HelpDetailInfoCodeNameMap
	unsigned char                                      UnknownData28[ 0x3C ];                            		// 0x06E0 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.StatWeaponGroupNameMap
	unsigned char                                      UnknownData29[ 0x3C ];                            		// 0x071C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.SystemImageMap
	unsigned char                                      UnknownData30[ 0x3C ];                            		// 0x0758 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.BoostCodeNameMap
	unsigned char                                      UnknownData31[ 0x3C ];                            		// 0x0794 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ShopItemPriceMap
	unsigned char                                      UnknownData32[ 0x3C ];                            		// 0x07D0 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.RewardCodeNameMap
	unsigned char                                      UnknownData33[ 0x3C ];                            		// 0x080C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ModeGuideCodeNameMap
	unsigned char                                      UnknownData34[ 0x3C ];                            		// 0x0848 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.FrontEndModeMap
	unsigned char                                      UnknownData35[ 0x3C ];                            		// 0x0884 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ModeTipCodeNameMap
	unsigned char                                      UnknownData36[ 0x3C ];                            		// 0x08C0 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.BGMNameMap
	unsigned char                                      UnknownData37[ 0x3C ];                            		// 0x08FC (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.AttendCodeNameMap
	unsigned char                                      UnknownData38[ 0x3C ];                            		// 0x0938 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.DefineCodeNameMap
	unsigned char                                      UnknownData39[ 0x3C ];                            		// 0x0974 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.KillComboCodeNameMap
	unsigned char                                      UnknownData40[ 0x3C ];                            		// 0x09B0 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.AIRewardRankCodeNameMap
	unsigned char                                      UnknownData41[ 0x3C ];                            		// 0x09EC (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.TypeDefineDataMap
	unsigned char                                      UnknownData42[ 0x3C ];                            		// 0x0A28 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.RandomBoxCubeCodeNameMap
	unsigned char                                      UnknownData43[ 0x3C ];                            		// 0x0A64 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.GameChannelMap
	unsigned char                                      UnknownData44[ 0x3C ];                            		// 0x0AA0 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.GameChannelPropertyMap
	unsigned char                                      UnknownData45[ 0x3C ];                            		// 0x0ADC (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.SystemTextColorMap
	unsigned char                                      UnknownData46[ 0x3C ];                            		// 0x0B18 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.LimitSaleMap
	unsigned char                                      UnknownData47[ 0x3C ];                            		// 0x0B54 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.SteamItemMap
	unsigned char                                      UnknownData48[ 0x3C ];                            		// 0x0B90 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.TierMap
	unsigned char                                      UnknownData49[ 0x3C ];                            		// 0x0BCC (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.TierSeasonMap
	unsigned char                                      UnknownData50[ 0x3C ];                            		// 0x0C08 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.PenaltyMap
	unsigned char                                      UnknownData51[ 0x3C ];                            		// 0x0C44 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.PenaltyBindMap
	unsigned char                                      UnknownData52[ 0x3C ];                            		// 0x0C80 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.FormulaMap
	unsigned char                                      UnknownData53[ 0x3C ];                            		// 0x0CBC (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.TodayGameMap
	unsigned char                                      UnknownData54[ 0x3C ];                            		// 0x0CF8 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.TodayGameBindModeMap
	unsigned char                                      UnknownData55[ 0x3C ];                            		// 0x0D34 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.CompetitivePenaltyMap
	int                                                MaxRank;                                          		// 0x0D70 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bFinishedLoadAllTables : 1;                       		// 0x0D74 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      UnknownData56[ 0x3C ];                            		// 0x0D78 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.ItemUnLockRecipeMap
	unsigned char                                      UnknownData57[ 0x3C ];                            		// 0x0DB4 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.CompetitiveBindModeSeasonMap
	unsigned char                                      UnknownData58[ 0x3C ];                            		// 0x0DF0 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.CompetitiveSeasonMap
	unsigned char                                      UnknownData59[ 0x3C ];                            		// 0x0E2C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.PingGroupMap
	unsigned char                                      UnknownData60[ 0x3C ];                            		// 0x0E68 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.PingGroupRegionMap
	unsigned char                                      UnknownData61[ 0x3C ];                            		// 0x0EA4 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.NationTableMap
	unsigned char                                      UnknownData62[ 0x3C ];                            		// 0x0EE0 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatGameTableDepot.SupportUserGroupMap
	TArray< struct FDataTableInfo >                    DataTableList;                                    		// 0x0F1C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            UnnecessaryDataTableListOnDedi;                   		// 0x0F28 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             StatTableEventKeyList;                            		// 0x0F34 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1765 ];

		return pClassPointer;
	};

	struct FString eventMakeSeasonString ( struct FString BaseStr, struct FString FrontStr, struct FString BackStr );
	void GetCompetitiveBindModeList ( TArray< struct FCompetitiveBindModeStruct >* out_List );
	bool CheckQuestTypeInQuestGroup ( int QuestType, int QuestGroup );
	bool CheckItemUnLockRecipe ( struct FString LockItemCodeName, struct FString KeyItemCodeName );
	class UCombatDataTableRefTodayGame* GetTodayGameTableIdx ( int Idx );
	class UCombatDataTableRefTodayGame* GetTodayGameTable ( struct FString todayCodeName );
	class UCombatDataTableRefTodayGameBindMode* GetTodayGameBindMode ( struct FString CodeName, struct FString ModeCodeName );
	struct FString GetTodayGameCodeName ( int Mode_Group_ID );
	struct FString GetTodayGameModeCodeName ( int Mode_Group_ID );
	void GetModeGroupFromPenaltyIdx ( int Idx, TArray< int >* out_mode_group_idx );
	int GetOpenChannelFromPenaltyIdx ( int Idx );
	class UCombatDataTableRefPenalty* GetPenaltyTable ( int Idx );
	class UCombatDataTableRefMission* GetMissionTableFromModeGroup ( struct FString mode_group );
	void GetPenaltyBindTableFromPenaltyIdx ( int Idx, TArray< class UCombatDataTableRefPenaltyBind* >* out_PenaltyBindArray );
	class UCombatDataTableRefSteamItem* GetRefSteamItem ( struct FString ItemCodeName );
	class UCombatDataTableRefLimitSale* GetRefLimitSaleByCodename ( struct FString CodeName );
	class UCombatDataTableRefSystemTextColor* GetRefSystemTextColor ( int GRADE );
	class UCombatDataTableRefExchangeCash* GetRefExchangeCashTable ( int Index );
	class UCombatDataTableRefGameChannelProperty* GetRefGameChannelProperty ( struct FString GameChannel );
	class UCombatDataTableRefGameChannel* GetRefGameChannel ( int Index );
	class UCombatDataTableRefMatchMaking* GetRefMatchMakingTable ( int Index );
	class UCombatDataTableRefMoneyDisplay* GetRefMoneyDisplayTable ( int Index );
	class UCombatDataTableRefSystemImage* GetRefSystemImage ( unsigned char ImageType, int GRADE );
	class UCombatDataTableRefPickUpDisplay* GetRefPickUpDisplayByPercent ( int Percent );
	class UCombatDataTableRefTypeDefine* GetRefTypeDefineByItemIndex ( int Index );
	class UCombatDataTableRefImagePath* GetRefImagePathTable ( int Idx );
	int GetRefShortcutTableCount ( );
	class UCombatDataTableRefShortcut* GetRefShortcutTable ( int Idx );
	class UCombatDataTableRefClanRegion* GetRefClanRegionTable ( int Idx );
	class UCombatDataTableRefModeTip* GetRefModeTipTableByIndex ( int Index );
	void CalculateBulletSaleTimeDate ( int LoginTime_time_t );
	bool CanTacticalGearEquip ( unsigned char gearID, int RefModeIndex );
	bool GetRefModeMapTableDataByMapCodename ( struct FString MapCodeName, TArray< class UCombatDataTableRefModeMap* >* out_List );
	unsigned char CalculateRankExpToRank ( int RankSystemID, float Exp );
	class UCombatDataTableRefRankUp* GetRefRankUpTableByIndex ( int Index );
	class UCombatDataTableRefRankUp* GetRefRankUpTable ( int RankSysID, int Rank );
	int GetPingGroupID ( int ModeGroupID, int RegionID );
	int GetShopItemValueType ( int Id );
	struct FString GetAddReplaceItemCodename ( int RentalID );
	struct FShopItemValueStruct GetExchangeInfo ( int RentalID );
	struct FShopItemValueStruct GetPriceInfo ( int RentalID, int PriceType );
	struct FString GetSalePrice ( int RentalID, int PriceType );
	int CheckPrice ( int PriceType, int RentalID, int Price );
	int GetMainRentalDay ( int RentalID, int PriceType );
	int GetRepurchaseMoneyType ( int RentalID );
	int GetMainPriceIndex ( int RentalID, int PriceType );
	int GetMainPrice ( int RentalID, int PriceType );
	int GetShopItemMoneyType ( int RentalID, int ShopType );
	bool IsDisplayShopItem ( int RentalID, int ShopType );
	bool IsDisplayRepurchaseItem ( int RentalID );
	class UCombatDataTableRefAchievement* GetRefAchievementDataByStatCodename ( struct FString statCodeName );
	int CalculateExpToLevel ( int Exp );
	class UCombatDataTableRefRandomBox* GetRefRandomBoxByCubeCodeName ( struct FString CubeCodeName );
	class UCombatDataTableRefWeaponGroup* GetRefWeaponGroupByGroupName ( struct FString GroupName );
	struct FString GetMapFileNameByMapCodeName ( struct FString MapCodeName );
	struct FString GetRefModeName ( int ModeIdx );
	int GetRefMapIndexBy ( struct FString MapName, unsigned long bCodeName );
	class UCombatDataTableRefItem* GetRefItemDataByAttachmentWeaponName ( struct FName AttachmentWeapon );
	class UCombatDataTableRefItem* GetRefItemDataByClassName ( struct FName ClassName );
	class UCombatDataTableRefGameChannel* GetRefGameChannelByCodeName ( struct FString CodeName );
	class UCombatDataTableRefShopSellItem* GetRefShopSellItemByCodeName ( struct FString CodeName );
	class UCombatDataTableRefCallingCard* GetRefCallingCardByCodeName ( struct FString CodeName );
	class UCombatDataTableRefDefine* GetRefDefineByCodeName ( struct FString DefineName );
	class UCombatDataTableRefModeTip* GetRefModeTipByCodeName ( struct FString CodeName );
	class UCombatDataTableRefFrontEndMode* GetRefFrontEndModeByCodeName ( struct FString CodeName );
	class UCombatDataTableRefBoosterItem* GetRefBoosterItemByCodeName ( struct FString CodeName );
	class UCombatDataTableRefModeGuide* GetRefModeGuideByCodeName ( struct FString CodeName );
	class UCombatDataTableRefReward* GetRefRewardByCodeName ( struct FString CodeName );
	class UCombatDataTableRefShopCategory* GetRefShopCategoryDataByCodeName ( struct FString CodeName );
	void GetRefShopCategoryTabDataByCodeName ( struct FString CodeName, TArray< struct FString >* GetShopCategoryTabData );
	class UCombatDataTableRefItemDetailinfo* GetRefItemDetailinfoByCodename ( struct FString CodeName );
	class UCombatDataTableRefModeOption* GetRefModeOptionDataByCodename ( struct FString CodeName );
	class UCombatDataTableRefRank* GetRefRankDataByCodeName ( struct FString CodeName );
	class UCombatDataTableRefSkill* GetRefSkillDataByCodename ( struct FString CodeName, TArray< struct FString > AcceptSkillList, unsigned long bTest );
	class UCombatDataTableRefSkillLicense* GetRefSkillLicenseByItemCodeName ( struct FString CodeName );
	TArray< class UCombatDataTableRefSkill* > GetRefGroupSkillDataByCodeName ( struct FString CodeName );
	class UCombatDataTableRefDrop* GetRefDropDataByCodeName ( struct FString CodeName );
	class UCombatDataTableRefPickup* GetRefPickupDataByCodeName ( struct FString CodeName );
	class UCombatDataTableRefStat* GetRefStatEntryDataByCodeName ( struct FString CodeName );
	class UCombatDataTableRefGameScoring* GetRefGameScoringDataByCodename ( struct FString CodeName );
	class UCombatDataTableRefAchievement* GetRefAchievementDataByCodename ( struct FString CodeName );
	class UCombatDataTableRefItem* GetRefItemDataByCodename ( struct FString CodeName );
	class UCombatDataTableRefInitItem* GetRefInitItemDataByCodename ( struct FString CodeName );
	class UCombatDataTableRefModeGroup* GetRefModeGroupDataByCodename ( struct FString CodeName );
	class UCombatDataTableRefMode* GetRefModeDataByCodename ( struct FString CodeName );
	class UCombatDataTableRefMap* GetRefMapDataByCodename ( struct FString CodeName );
	int eventGetJackpotGuranteeCountFromItemCodeName ( struct FString ItemCodeName );
	class UCombatDataTableRefKillCombo* GetRefKillComboByIndex ( int Index );
	int GetRefTableCount ( unsigned char tableType );
	class UCombatDataTableRefResultReward* GetRefResultRewardByIndex ( int Index );
	class UCombatDataTableRefRandomBox* GetRefRandomBoxByIndex ( int Index );
	class UCombatDataTableRefCubeBox* GetRefCubeBoxByIndex ( int Index );
	class UCombatDataTableRefBGM* GetRefBGMByIndex ( int Index );
	class UCombatDataTableRefBoosterItem* eventGetRefBoosterItemByIndex ( int Index );
	class UCombatDataTableRefEmblem* GetRefEmblemByIndex ( int Index );
	class UCombatDataTableRefGear* GetRefGearByIndex ( int Index );
	class UCombatDataTableRefShopSellItem* GetUCombatDataTableRefShopSellItemByIndex ( int Index );
	class UCombatDataTableRefCallingCard* GetRefCallingCardByIndex ( int Index );
	class UCombatDataTableRefFilter* GetRefFilterByIndex ( int Index );
	class UCombatDataTableRefShopItem* GetRefShopItem ( int refIndex );
	class UCombatDataTableRefSkill* GetRefSkill ( int refIndex );
	class UCombatDataTableRefMission* GetRefMission ( int refIndex );
	class UCombatDataTableRefStat* eventGetRefStat ( int Index );
	class UCombatDataTableRefMailForm* GetRefMailForm ( int Index );
	class UCombatDataTableType* GetRefDropTable ( int Index );
	class UCombatDataTableType* GetRefPickupTable ( int Index );
	class UCombatDataTableType* GetRefAchievementTable ( int Index );
	class UCombatDataTableRefClanExp* eventGetRefClanExpTable ( int Index );
	class UCombatDataTableRefGameScoring* eventGetRefScoringTable ( int Index );
	class UCombatDataTableRefCrosshair* GetRefCrosshairTable ( int Index );
	class UCombatDataTableRefItem* eventGetRefItemTable ( int Index );
	class UCombatDataTableRefExp* eventGetRefExpTable ( int Level );
	class UCombatDataTableRefItemDetailinfo* GetRefItemDetailinfoTable ( int Index );
	class UCombatDataTableRefModeGroup* eventGetRefModeGroupTable ( int Index );
	class UCombatDataTableRefMode* eventGetRefModeTable ( int Index );
	class UCombatDataTableRefQuest* eventGetRefQuestTable ( int Index );
	class UCombatDataTableRefMap* eventGetRefMapTable ( int Index );
	class UCombatDataTableRefBasicChat* GetRefBasicChatTable ( int Index );
	int GetTotalTableCount ( );
	class UCombatDataTable* GetDataTableArray ( unsigned char Type );
	void InitializeUIDataStore ( );
	void InitializeAchievementSystem ( );
	void SetFinishedLoadAllTables ( unsigned long bFinished );
	bool IsFinishedLoadAllTables ( );
	void UnloadDataTables ( );
	int eventGetLocalizedChatCommandID ( struct FString inString );
	struct FString eventGetLocalizedString ( int Id );
	bool LoadChatCommandDataTables ( );
	bool UnnecessaryDataTableOnDedi ( unsigned char InTableType );
	bool LoadDataTables ( );
	bool LoadXMLDataTables ( );
};

UClass* UCombatGameTableDepot::pClassPointer = NULL;

// Class CombatGame.CombatGameClientTableDepot
// 0x0000 (0x0F40 - 0x0F40)
class UCombatGameClientTableDepot : public UCombatGameTableDepot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1766 ];

		return pClassPointer;
	};

	void InitializeUIDataStore ( );
	bool GetRefRandomBoxCostDatasByRandomBoxCodename ( struct FString RandomBoxItemCodename, class UCombatDataTableRefRandomBoxCost** getRandomBoxCost );
	bool GetOutputCubeListByRandomBoxCodename ( struct FString RandomBoxItemCodename, TArray< class UCombatDataTableRefCubeBox* >* getOutputCubeList );
	struct FString GetMapFileNameByMapCodeName ( struct FString MapCodeName );
	class UCombatDataTableRefHelpDetailInfo* GetRefHelpDetailInfoDataByCodeName ( struct FString CodeName );
	class UCombatDataTableRefHelpTab* GetRefHelpTabDataByCodeName ( struct FString CodeName );
	class UCombatDataTableRefShopItem* GetRefShopItemEntryDataByCodeName ( struct FString CodeName );
	class UCombatDataRefAttend* GetRefAttendTabIndex ( int Index );
	class UCombatDataTable* GetRefAttendDataTable ( );
	int GetRefHelpTabCount ( );
	class UCombatDataTableRefHelpTab* GetRefHelpTabIndex ( int Index );
	class UCombatDataTableRefShopItem* eventGetRefShopItemDataByIndex ( int Index );
	class UCombatDataTable* GetRefShopItemDataTable ( );
};

UClass* UCombatGameClientTableDepot::pClassPointer = NULL;

// Class CombatGame.CombatGameServerTableDepot
// 0x0000 (0x0F40 - 0x0F40)
class UCombatGameServerTableDepot : public UCombatGameTableDepot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1767 ];

		return pClassPointer;
	};

};

UClass* UCombatGameServerTableDepot::pClassPointer = NULL;

// Class CombatGame.CombatGameTrophyTouchComponent
// 0x0014 (0x0200 - 0x01EC)
class UCombatGameTrophyTouchComponent : public UPrimitiveComponent
{
public:
	float                                              MinRadius;                                        		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRadius;                                        		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDegree_XYPlane;                                		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDegree_XYPlane;                                		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SphereSides;                                      		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1768 ];

		return pClassPointer;
	};

	struct FVector GetNativeOrigin ( );
};

UClass* UCombatGameTrophyTouchComponent::pClassPointer = NULL;

// Class CombatGame.CombatGameViewportClient
// 0x0034 (0x015C - 0x0128)
class UCombatGameViewportClient : public UGameViewportClient
{
public:
	struct FString                                     HintLocFileName;                                  		// 0x0128 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct F__ASPECT >                         ScreenResList;                                    		// 0x0134 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bShowReflectionsOnly : 1;                         		// 0x0140 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShowSpawnGroupIndex : 1;                         		// 0x0140 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< struct FColor >                            BitMapForScreenShot;                              		// 0x0144 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             FlushkeyInputNames;                               		// 0x0150 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1769 ];

		return pClassPointer;
	};

	void DrawTransition ( class UCanvas* Canvas );
	void DebugRemovePlayer ( int ControllerId );
	void SSSwapControllers ( );
	void DebugCreatePlayer ( int ControllerId );
	void SetSplit ( int Mode );
	void ShowTitleSafeArea ( );
	void SetConsoleTarget ( int PlayerIndex );
	bool eventInit ( struct FString* OutError );
	void SetResolutions ( int Aspect, int Resolution, int bVSync, int RefreshRate, unsigned long bIsFullscreen, unsigned long bIsBorderless );
	void NativeSetResolutions ( int Aspect, int Resolution, int bVSync, unsigned long bIsFullscreen, unsigned long bIsBorderless, int RefreshRate );
	void InitAvailableResolutions ( );
	void DisplayConnectionError ( unsigned char MessageType, struct FString Message, struct FString Title );
	void NotifyConnectionError ( unsigned char MessageType, struct FString Message, struct FString Title );
	bool IsShowFlag ( struct FString Cmd );
	struct FString LoadRandomLocalizedHintMessage ( struct FString Category1Name, struct FString Category2Name );
};

UClass* UCombatGameViewportClient::pClassPointer = NULL;

// Class CombatGame.CombatGFxMoviePlayer
// 0x009C (0x0204 - 0x0168)
class UCombatGFxMoviePlayer : public UGFxMoviePlayer
{
public:
	class UCombatGameClientTableDepot*                 CBTableDepot;                                     		// 0x0168 (0x0004) [0x0000000000000000]              
	class UOnlineSubsystemCombat*                      OSS;                                              		// 0x016C (0x0004) [0x0000000000000000]              
	class UCombatChannelTransaction*                   ChannelTran;                                      		// 0x0170 (0x0004) [0x0000000000000000]              
	class UCombatLobbyChatTransaction*                 LobbyChatTran;                                    		// 0x0174 (0x0004) [0x0000000000000000]              
	class UCombatCharacterTransaction*                 CTran;                                            		// 0x0178 (0x0004) [0x0000000000000000]              
	class UCombatItemTransaction*                      ITran;                                            		// 0x017C (0x0004) [0x0000000000000000]              
	class UCombatStatisticsTransaction*                STran;                                            		// 0x0180 (0x0004) [0x0000000000000000]              
	class UCombatLobbyTransaction*                     LTran;                                            		// 0x0184 (0x0004) [0x0000000000000000]              
	class UCombatCommunityTransaction*                 CommuTran;                                        		// 0x0188 (0x0004) [0x0000000000000000]              
	class UCombatClanTransaction*                      ClanTran;                                         		// 0x018C (0x0004) [0x0000000000000000]              
	class UCombatMailTransaction*                      MailTran;                                         		// 0x0190 (0x0004) [0x0000000000000000]              
	class UCombatAwaitTransaction*                     AwaitTran;                                        		// 0x0194 (0x0004) [0x0000000000000000]              
	class UCombatRandomBoxTransaction*                 RandomBoxTran;                                    		// 0x0198 (0x0004) [0x0000000000000000]              
	class UCombatGameOptionTransaction*                GameOptionTran;                                   		// 0x019C (0x0004) [0x0000000000000000]              
	class UCombatUserInfoTransaction*                  UserInfoTran;                                     		// 0x01A0 (0x0004) [0x0000000000000000]              
	class UCombatMain_Base*                            MainContainer;                                    		// 0x01A4 (0x0004) [0x0000000000000000]              
	class UCombatCommon_Command*                       CommandMC;                                        		// 0x01A8 (0x0004) [0x0000000000000000]              
	class UCombatCommon_SystemCounter*                 SystemCounterMC;                                  		// 0x01AC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  NoticeMC;                                         		// 0x01B0 (0x0004) [0x0000000000000000]              
	struct FString                                     MoviePath;                                        		// 0x01B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ACombatHUD*                                  myHUD;                                            		// 0x01C0 (0x0004) [0x0000000000000000]              
	struct FString                                     IconImageHeadPath;                                		// 0x01C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     EmptyImageName;                                   		// 0x01D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PreLoadPackagePath;                               		// 0x01DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UCombatDialogManager*                        DialogManager;                                    		// 0x01E8 (0x0004) [0x0000000000000000]              
	class UCombatChatManager*                          ChatManager;                                      		// 0x01EC (0x0004) [0x0000000000000000]              
	class UClass*                                      ChatManagerClass;                                 		// 0x01F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UCombatCommon_Option*                        OptionClass;                                      		// 0x01F4 (0x0004) [0x0000000000000000]              
	class UCombatCommon_OverImmersionGuard*            OverImmersionGuardClass;                          		// 0x01F8 (0x0004) [0x0000000000000000]              
	class UCombatCommon_VoiceChatOption*               VoiceChatOptionClass;                             		// 0x01FC (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsChatFocus : 1;                                 		// 0x0200 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1770 ];

		return pClassPointer;
	};

	void SetSpectatorFlashEffectGauge ( float Rate );
	void ShowSpectatorFlashEffect ( unsigned long bShow );
	void RecvDestroyedItem ( int SlotIndex );
	void OnMatchroomSlotUpdateDel ( unsigned char Reason, struct FString Nick );
	bool GetServerChannelName ( int ChannelIndex, int ChannelNumber, struct FString* Server, struct FString* Channel );
	void OnLeaveMatchChannel ( unsigned char Reason_Type );
	void DisconnetClientResult ( int CauseID );
	void SetChatFocus ( unsigned long bFocus );
	void OnChangedCommonOptionControl ( );
	void UpdateMinimapSizeStep ( );
	void UpdateFriendInviteRefuse ( );
	void UpdateInviteAutoRegist ( );
	void OnUpdateGameOption ( unsigned char Error_Code, unsigned char Option_Type );
	void RequestUpdateGameOption ( unsigned char Option_Type, unsigned char Option_Value );
	void UpdateHoldmode ( );
	void UpdateTeamIFFView ( );
	void UpdateFlipMesh ( );
	void ReloadCrosshair ( );
	bool CanDisplayPreMTSResetMessage ( );
	void NotifyPreMTSReset ( );
	void AddMTSMessage ( );
	void DisplayAddBlackList_Failure ( struct FString errorMsg );
	void OnAddBlackList_Failure ( unsigned char Error );
	void OnAddBlackList_Success ( int beforState, struct FString PlayerName );
	void TryAddBlackList ( struct FString PlayerName );
	void AddBlackList ( struct FString PlayerName );
	void ClanNoticeUpdate ( struct FString notice );
	void DisplayClanNotice_OnChat ( );
	struct FString GetImgPath_ClanEmblem ( int EmblemID );
	bool OnNotifyKeyInputSignal ( );
	bool OnDisconnectMatchServerByAFK ( );
	bool OnInputExpireTime ( class ACombatPlayerControllerBase* LocalPC );
	void SetImmersionHourString ( int HourCount );
	void ShowImmersionGuardAnimaion ( unsigned long bShow );
	void registerMain_Excessive ( class UCombatCommon_OverImmersionGuard* M );
	void ResetVoiceChatUI ( );
	void ReloadVoiceChatAllList ( );
	void UpdateVoiceChatUserStatus ( int Uid );
	void receiveVoicechatTeamsettingStateBtn ( int Index, unsigned long isMute );
	void receiveVoicechatTeamsettingCloseBtn ( );
	void receiveVoicechatTeamsettingMuteAllBtn ( unsigned long isMute );
	void HideVoiceChatOption ( );
	void ShowVoiceChatOption ( );
	void registerVoiceChatTeamSetting ( class UCombatCommon_VoiceChatOption* M );
	void receiveCommonOptionInputDeviceChange ( int Index );
	void receiveCommonOptionInputModeChange ( int Index );
	void receiveCommonOptionOutputVolumeBtnClick ( unsigned long bSet );
	void receiveCommonOptionInputVolumeBtnClick ( unsigned long bSet );
	void receiveCommonOptionOutputVolumeChange ( int VolValue );
	void receiveCommonOptionInputVolumeChange ( int VolValue );
	void receiveCommonOptionVoiceChannelBtnClick ( unsigned long bSet );
	void receiveCommonOptionGamePlayTeamOutLineChange ( int Id );
	void receiveCommonOptionGamePlayWFovChange ( int FOVValue );
	void receiveCommonOptionGamePlayCrossHairRecoilChange ( int Id );
	void receiveCommonOptionGamePlayCrossHairAlphaChange ( int Id );
	void receiveCommonOptionGamePlayCrossHairShadowChange ( int Id );
	void receiveCommonOptionGamePlayCrossHairLengthChange ( int Id );
	void receiveCommonOptionGamePlayCrossHairColorChange ( int Id, int R, int G, int B );
	void receiveCommonOptionGamePlayCrossHairFormChange ( int Index );
	void receiveCommonOptionGamePlayHoldToAimChange ( int Id );
	void receiveCommonOptionGamePlayIffVeiwOnOffChange ( int Id );
	void receiveCommonOptionGamePlayWeaponFlipChange ( int val );
	void receiveCommonOptionGamePlayFovChange ( int FOVValue );
	void receiveCommonOptionGamePlayDeadChatBtnClik ( unsigned long bSet );
	void receiveCommonOptionGamePlayFriendRequestBtnClick ( unsigned long bSet );
	void receiveCommonOptionGamePlayTeamChatBtnClik ( unsigned long bSet );
	void receiveCommonOptionGamePlayFullChatBtnClick ( unsigned long bSet );
	void receiveCommonOptionHitSoundChange ( int Index );
	void receiveCommonOptionVoiceSoundChange ( int Index );
	void receiveCommonOptionEffectSoundChange ( int Index );
	void receiveCommonOptionInGameBackgroundSoundChange ( int Index );
	void receiveCommonOptionBackgroundSoundChange ( int Index );
	void receiveCommonOptionMasterSoundChange ( int Index );
	void receiveCommonOptionHitSoundMuteBtnClick ( unsigned long bSet );
	void receiveCommonOptionVoiceSoundMuteBtnClick ( unsigned long bSet );
	void receiveCommonOptionInGameBgSoundMuteBtnClick ( unsigned long bSet );
	void receiveCommonOptionBgSoundMuteBtnClick ( unsigned long bSet );
	void receiveCommonOptionEffectSoundMuteBtnClick ( unsigned long bSet );
	void receiveCommonOptionKeyboardKeyUp ( int keyCode );
	void receiveCommonOptionKeyBindingBtnClick ( int Id );
	void ReceiveCommonOptionPresetAllChkBtnClick ( int PresetIndex, unsigned long bSet );
	void receiveCommonOptionMouseSensitivity ( int PresetIndex, int mouseIndex, int Index );
	void receiveCommonOptionPresetThreeSensitivityChange ( int Index );
	void receiveCommonOptionPresetTwoSensitivityChange ( int Index );
	void receiveCommonOptionPresetOntSensitivityChange ( int Index );
	void receiveCommonOptionMasterSensitivityChange ( int Index );
	void receiveCommonOptionReverseMouseBtnClick ( unsigned long bSet );
	void receiveCommonOptionIndividualMouseSensitivityBtnClick ( );
	void receiveCommonOptionMasterMouseSensitivityBtnClick ( );
	void receiveCommonOptionOneFrameThreadChange ( int Index );
	void receiveCommonOptionSystemCountChange ( int Index );
	void receiveCommonOptionFpsLimitChange ( int Index );
	void receiveCommonOptionLightAndShadeChange ( int Index );
	void receiveCommonOptionGunTrailChange ( int Index );
	void receiveCommonOptionBrightChange ( int Index );
	void receiveCommonOptionAmbOcclusionChange ( int Index );
	void receiveCommonOptionPhysicalChange ( int Index );
	void receiveCommonOptionEffectChange ( int Index );
	void receiveCommonOptionShadowChange ( int Index );
	void receiveCommonOptionLightReflectChange ( int Index );
	void receiveCommonOptionLightChange ( int Index );
	void receiveCommonOptionBackGroundChange ( int Index );
	void receiveCommonOptionCharacterChange ( int Index );
	void receiveCommonOptionRealTimeShadowChange ( int Index );
	void receiveCommonOptionBloodEfChange ( int Index );
	void receiveCommonOptionScanRateChange ( int Index );
	void receiveCommonOptionAntiAliasingChange ( int Index );
	void receiveCommonOptionVsyncChange ( int Index );
	void receiveCommonOptionColorSenseChange ( int Index );
	void receiveCommonOptionResolutionChange ( int Index );
	void receiveCommonOptionAspectRatioChange ( int Index );
	void receiveCommonOptionModeChange ( int Index );
	void receiveCommonOptionGraphicQualityChange ( int Index );
	void receiveCommonOptionCancelBtnClick ( );
	void receiveCommonOptionSaveBtnClick ( );
	void receiveCommonOptionApplyBtnClick ( );
	void receiveCommonOptionInitBtnClick ( );
	void receiveCommonOptionGamePlaySubTabClick ( int Index );
	void receiveCommonOptionTabMenuClick ( int Index );
	void CancelOption ( );
	void HideOption ( );
	void ShowOption ( );
	void registerCommonOption ( class UCombatCommon_Option* M );
	void OnLoginUIUnLock ( );
	void OnLoginUILock ( );
	void CreateChatManager ( );
	void ControlAwesomiumUIVisible ( unsigned long bVisible );
	void ChangeInputTarget ( unsigned long bMovie );
	void SetMovieAllowInput ( unsigned long bAllow );
	struct FString eventGetImagePath ( int Id );
	struct FString eventGetFullImagePath ( struct FString packagePath, struct FString middlePath, struct FString ImgName );
	void UpdateProtocoalLog ( struct FString logMsg );
	void ShowNoticeMessage ( unsigned long bShow );
	void SetNoticeMessage ( struct FString sMessage );
	void registerInfo ( class UGFxObject* M );
	void RecvFailBlockPlayGame_WrongActivatedType ( );
	void RecvSuccessBlockPlayGame ( unsigned char activatedType );
	void KickPlayer ( struct FString PlayerName );
	void NotifySpectatorMode ( );
	void OnRoundMonitoringOption_Failure ( unsigned char Error_Code );
	void OnRoundMonitoringOption_Success ( int Match_Room_Number, unsigned long bMonitoring_Option );
	void OnGMCMD_Failure ( unsigned char Error_Code );
	void OnGMCMD_Success ( );
	void RequestSendClanChat ( struct FString msg );
	bool CheckChampionshipObserverCommand ( struct FString commandMsg_ );
	bool CheckUserCommand ( struct FString commandMsg_ );
	void RequestSendNoticeMessage ( struct FString Message, unsigned char NoticeArea );
	void OnChampionShipUserBlockChatting_Failure ( unsigned char ErrorCode );
	void OnChampionShipUserBlockChatting_Success ( struct FString targetPlayerName );
	void OnChampionShipChannelNoticeChatting_Failure ( unsigned char ErrorCode, int PenaltySec );
	void GetMessengerMessage ( int userID, unsigned char* chatType, struct FString* msg );
	void OnSendWhisper_Failure ( unsigned char Error_Code, struct FString WhiperTo, int PenaltySec );
	void OnSendClanChatting_Failure ( unsigned char Error_Code, int PenaltySec );
	void OnSendChatting_Failure ( unsigned char Error_Code, int PenaltySec );
	struct FString GetChattingPenaltyString ( unsigned char Error_Code, int PenaltySec );
	void UpdateTsMessage ( struct FString msg );
	void UpdateWhisperChatting ( unsigned char chatType, struct FString TargetName, struct FString msg );
	void UpdateClanLevelUp ( struct FString msg );
	void UpdateClanChatting ( int userID, struct FString TargetName, struct FString msg );
	void Dev_UpdateDevelopeMessage ( struct FString msg );
	void AddGMChatMessage ( unsigned char chatType, struct FString msg, struct FString TargetName );
	void AddChatMessage ( unsigned char chatType, struct FString msg, struct FString TargetName, unsigned char TargetType, struct FString senderClanName );
	void SetIgnoreCreateDialog ( unsigned long bIgnore );
	bool IsDialogShown ( );
	void UnloadDialog ( int Depth );
	struct FString LoadDialog ( int Id, int Type, struct FDialogLocalizingData* out_dialogData );
	void HideDialog ( int Id );
	void OnShowDialogCancle ( struct FEventData ev );
	void OnShowDialogOK ( struct FEventData ev );
	int ShowDialog ( int Type, struct FScriptDelegate DelegateOK, struct FScriptDelegate DelegateCancel, struct FDialogLocalizingData* out_dialogData );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	class UCombatUserInfoTransaction* GetUserInfoTran ( );
	class UCombatGameOptionTransaction* GetGameOptionTran ( );
	class UCombatRandomBoxTransaction* GetRandomBoxTran ( );
	class UCombatAwaitTransaction* GetAwaitTran ( );
	class UCombatMailTransaction* GetMailTran ( );
	class UCombatClanTransaction* GetClanTran ( );
	class UCombatCommunityTransaction* GetCommunityTran ( );
	class UCombatLobbyTransaction* GetLobbyTran ( );
	class UCombatStatisticsTransaction* GetStatisticsTran ( );
	class UCombatItemTransaction* GetItemTran ( );
	class UCombatCharacterTransaction* GetCharacterTran ( );
	class UCombatLobbyChatTransaction* GetLobbyChatTran ( );
	class UCombatChannelTransaction* GetChannelTran ( );
	class UOnlineSubsystemCombat* GetOnlineSubsystem ( );
	class UCombatGameClientTableDepot* GetClientTableDepot ( );
	int GetSystemCountListCount ( );
	void UpdateSystemCounter ( );
	void StopSystemCounterTimer ( );
	void StartSystemCounterTimer ( );
	void HideSystemCounter ( );
	void ShowSystemCounter ( );
	bool IsDisplayCommand ( );
	void HideCommand ( );
	void ShowCommand ( );
	void registerCommandMessage ( struct FString CommandMsg );
	void registerCommonCommand ( class UCombatCommon_Command* M );
	void AllFlashLoaded ( );
	void SetVoiceChayPlayerPosition ( int Number );
	void SetSystemCounterPosition ( int Number );
	void PlaySound ( int Number );
	void KeyEvent ( int keyCode );
	void RestoreMouse ( );
	void BackUpMouse ( );
	void ToggleMouse ( unsigned long bShow );
	void Init ( class ULocalPlayer* Player );
	struct FVector ConvertTo2DVec ( struct FVector Location );
	void ConsoleCommand ( struct FString Command );
	class ACombatPC* GetCombatPC ( );
	void ShowHUD ( unsigned long bIsShow );
	bool IsCanTick ( );
	void Reset ( );
	void PreTick ( );
	void Tick ( float DeltaSeconds );
	void PostBeginPlay ( class ACombatHUD* InHUD );
};

UClass* UCombatGFxMoviePlayer::pClassPointer = NULL;

// Class CombatGame.CombatFrontEndMoviePlayer
// 0x00D8 (0x02DC - 0x0204)
class UCombatFrontEndMoviePlayer : public UCombatGFxMoviePlayer
{
public:
	class ACombatFrontEndInfo*                         CurrentGI;                                        		// 0x0204 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_Scene*                       FrontEndScenes[ 0x18 ];                           		// 0x0208 (0x0060) [0x0000000000000000]              
	class UCombatFrontEnd_Scene*                       CurrentScene;                                     		// 0x0268 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_Dashboard*                   DashboardClass;                                   		// 0x026C (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_Chat*                        ChatClass;                                        		// 0x0270 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_Community*                   MessengerClass;                                   		// 0x0274 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_BuyItem*                     BuyItemClass;                                     		// 0x0278 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_ItemSellPopup*               ItemSellPopupClass;                               		// 0x027C (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_QuickStart*                  QuickStartClass;                                  		// 0x0280 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_UserInfo*                    UserInfoClass;                                    		// 0x0284 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_CallingCardPage*             CallingCardClass;                                 		// 0x0288 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_Help*                        HelpClass;                                        		// 0x028C (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_AwaitList*                   AwaitListClass;                                   		// 0x0290 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_Repurchase*                  RepurchaseClass;                                  		// 0x0294 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_Exchange*                    ExchangePopupClass;                               		// 0x0298 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_RandomBoxPickUp*             RandomBoxPickUpClass;                             		// 0x029C (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_ClausePopup*                 ClausePopupClass;                                 		// 0x02A0 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_ChangePropernounPopup*       ChangePropernounPopup;                            		// 0x02A4 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_Accessterms*                 AccessTermsClass;                                 		// 0x02A8 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_Sort*                        SortClass;                                        		// 0x02AC (0x0004) [0x0000000000000000]              
	unsigned long                                      bAllFlashLoaded : 1;                              		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBuyItemTryPayment : 1;                           		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIgnorePressEvent : 1;                            		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bPlayBGM : 1;                                     		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDisplayedShowRoom : 1;                           		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsOpenRandomBox : 1;                             		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000020] 
	int                                                InviteDialogID;                                   		// 0x02B4 (0x0004) [0x0000000000000000]              
	TArray< class UCombatFrontEnd_Object* >            PopupList;                                        		// 0x02B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UCBUIDataStore_Mission*                      UIDataStore_Mission;                              		// 0x02C4 (0x0004) [0x0000000000000000]              
	class UCBUIDataStore_ETC*                          UIDataStore_ETC;                                  		// 0x02C8 (0x0004) [0x0000000000000000]              
	unsigned char                                      ReservedScene;                                    		// 0x02CC (0x0001) [0x0000000000000000]              
	class UGFxObject*                                  ShowRoomClass;                                    		// 0x02D0 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_Exit*                        LogOut_BattleInfoPopUp;                           		// 0x02D4 (0x0004) [0x0000000000000000]              
	int                                                DevReserveOpenRandomBoxID;                        		// 0x02D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1771 ];

		return pClassPointer;
	};

	void UpdateMyPingData ( );
	bool IsWin64Build ( );
	void UpdateInviteAutoRegist ( );
	void receiveInventorySellItemNoticePopupCancelBtn ( );
	void receiveInventorySellItemNoticePopupOkBtn ( );
	void receiveInventorySellItemViewPopupCancelBtn ( );
	void receiveInventorySellItemViewPopupOkBtn ( int SellItemCount );
	void registerInventoryItemSellPopup ( class UCombatFrontEnd_ItemSellPopup* M );
	void UpdateInventoryItemUIData ( );
	void OnTodayModeUpdateFailed ( );
	void OnTodayModeUpdate ( );
	void OnEscapedCompMatchIsEndDialogOK ( struct FEventData ev );
	void ShowEscapedCompMatchIsEndDialog ( );
	void OnReturnBackPlayProcessEnd ( );
	void OnItemUnLock ( unsigned char Error_Code );
	bool IsSteamOverlayEnabled ( );
	void OnMatchroomSlotUpdateDel ( unsigned char Reason, struct FString Nick );
	void CancelMatchMapPreload ( );
	void DisconnetClientResult ( int CauseID );
	void OnUserInfo ( unsigned char Error_Code, unsigned long bBanned );
	void RequestUserInfo ( int Id, struct FString NickName );
	void receiveRankViewBtn ( );
	void receiveClanViewBtn ( struct FString ClanName );
	void receivePlayInfoCloseBtn ( );
	void registerPlayInfo ( class UCombatFrontEnd_UserInfo* M );
	void UpdateStorageExpiresCount ( );
	void UpdateStorageNewCount ( );
	void ReceiveStorageContent_Failure ( unsigned char Error_Code );
	void ReceiveStorageFinish ( unsigned char CONSUME_TYPE );
	void ReceiveStorageContent_Success ( int Id );
	void UpdateStorageList ( unsigned char Error_Code );
	void MailBoxStateUpdate ( unsigned long bNeedMoveScene );
	void receiveArchiveCheckBox ( int Id );
	void receiveArchiveReadedMsg ( int Id );
	void receiveArchiveAllCheckBtn ( );
	void receiveArchiveAllReceiveBtn ( );
	void receiveArchiveReceiveSelectedBtn ( );
	void receiveArchiveReceiveArticleBtn ( int Id );
	void receiveArchiveMsgDeleteBtn ( int Id );
	void receiveArchiveNextBtn ( );
	void receiveArchivePrevBtn ( );
	void receiveArchiveGiftTab ( );
	void receiveArchiveStorageTab ( );
	void registerArchive ( class UCombatFrontEnd_Storage* M );
	void receiveAccesstermsDisagreeBtn ( );
	void receiveAccesstermsAgreeBtn ( );
	void SendAccessTermAgree ( unsigned long agree );
	void HideAccessterms ( );
	void ShowAccessterms ( );
	void registerAccessTerms ( class UCombatFrontEnd_Accessterms* M );
	void receiveChangeProperNounPopupCancelBtn ( );
	void receiveChangeProperNounPopupOkBtn ( struct FString txt );
	void OnChangePropernounError ( unsigned char ErrorCode );
	void OnChangePropernounSuccess ( );
	void ShowChangePropernounPopupPage ( int Mode );
	void registerChangePropernounPopup ( class UCombatFrontEnd_ChangePropernounPopup* M );
	void receiveClausePopupClauseBtn ( );
	void receiveClausePopupCancelBtn ( );
	void receiveClausePopupOkBtn ( );
	void ShowClausePopupPage ( );
	void registerCommonClausePopup ( class UCombatFrontEnd_ClausePopup* M );
	void receiveLobbyRoomCreatedMapPwTxtGetFocus ( unsigned long bFocus );
	void UpdateDashBoardIcon ( );
	void OnUpdateMatchStartWaitTime ( float DeltaSeconds );
	void HideRandomBoxPickInfo ( );
	void registerRandomBoxShopPickupInfo ( class UCombatFrontEnd_RandomBoxPickUp* M );
	int GetCurrentShopType ( );
	void OnEneterPracticeGame_Failure ( unsigned char Error_Code );
	void OnEneterPracticeGame ( );
	void OpenRandomBoxItem ( int InvenSlotIndex );
	void receiveRandomBoxShopCoinBarBScoinChargeBtnClick ( );
	void receiveRandomBoxShopCoinBarMcoinChargeBtnClick ( );
	void receiveRandomBoxShopCoinBarGcoinChargeBtnClick ( );
	void receiveRandomBoxShopTabBtnClick ( int Index );
	void receiveRandomBoxShopInfoCompositionItemClick ( int Id );
	void receiveRandomBoxShopPackageItemListClick ( int Id );
	void receiveRandomBoxShopPackageItemOpenBtnClick ( );
	void receiveRandomBoxShopCoinTabClick ( int Index );
	void registerRandomBoxShopCoinBar ( class UGFxObject* M );
	void registerRandomBoxShopPackageItemInfo ( class UGFxObject* M );
	void registerRandomBoxShopPackageItemList ( class UGFxObject* M );
	void registerRandomBoxShop ( );
	TArray< int > GetSpecialDiscountIndexList ( );
	int GetExchangeBulletTableIndex ( );
	bool isCanBuyBulletSpecialSale ( int Index );
	bool isBulletSpecialSale ( );
	bool isBulletSale ( );
	void HideExchangePopup ( );
	void SetExchangeCoinList ( int Index );
	void receiveRandomBoxShopExchangeListClick ( int Index, int Tab );
	void receiveRandomBoxShopExchangeCancelBtnClick ( );
	void receiveRandomBoxShopExchangeBuyBtnClick ( );
	void registerRandomBoxShopExchangePopup ( class UCombatFrontEnd_Exchange* M );
	void AddDashboardNotice ( struct FString Callsign, struct FString SrcItemCodeName, struct FString DestItemCodeName, int GiveType, int GiveValue );
	void AddGetRandomBoxNotice ( struct FString Callsign, int RefRandomBoxID, int RefRandomBoxCubeID, int GiveValue );
	void LeaveRandomBoxScene ( );
	void ForceLeaveRandomBoxScene ( );
	void EnterRandomBoxScene ( );
	void receiveOpenRandomBoxSlotDragEnd ( );
	void receiveOpenRandomBoxSlotDragStart ( );
	void receiveOpenRandomBoxEraseSlotComplete ( );
	void receiveOpenRandomBoxDrawSlotComplete ( );
	void receiveOpenRandomBoxSlotAllOpen ( );
	void receiveOpenRandomBoxResize ( );
	void receiveOpenRandomBoxAreaClick ( );
	void receiveOpenRandomBoxAreaOut ( );
	void receiveOpenRandomBoxAreaOver ( );
	void receiveOpenRandomBoxCloseBtnClick ( );
	void receiveOpenRandomBoxContinuityOpenBtnClick ( );
	void registerOpenRandomBox ( class UCombatFrontEnd_RandomBox* M );
	void CheckRandomBoxInInventory ( );
	void RandomBoxUsedFail ( );
	void RandomBoxUsedSuccess ( unsigned long bTest );
	void RandomBoxSetFromScene ( unsigned char FromScene );
	bool IsContinuableRandomBox ( );
	void RequestBuyRandomBox ( int RefBoxItemID, int ShopType );
	void NotifyRandomBoxClosedAction ( );
	void QuestPageRefresh ( );
	void OnQuestStatus_Change ( unsigned char QUEST_TYPE, unsigned long SetActive );
	void receiveTabBtn ( int TabID );
	void receiveRewardBtn ( int Index );
	void RegisterEvent ( class UCombatFrontEnd_Event* M );
	bool CanDisplayPreMTSResetMessage ( );
	void NotifyMTSReset ( );
	void ReceiveClanHomeLocalChange ( int Id );
	void ReceiveClanHomeMatchListBtn ( int Id );
	void ReceiveClanHomeBMatchBtn ( );
	void ReceiveClanHomeAMatchBtn ( );
	void ReceiveClanHomeRecentlyMatchBtn ( );
	void ReceiveClanHomeSecondTabBtn ( );
	void ReceiveClanHomeFirstTabBtn ( );
	void receiveCancleBtn ( );
	void receiveExitBtn ( );
	void HideClosingClientBattleInfoPopUp ( );
	void ShowClosingClientBattleInfoPopUp ( );
	void registerExit ( class UCombatFrontEnd_Exit* M );
	void OnDisplayDialogMatchroomInvite_CANCEL ( struct FEventData ev );
	void OnDisplayDialogMatchroomInvite_OK ( struct FEventData ev );
	void DisplayDialogMatchroomInvite ( struct FString Nick );
	void OnMatchroomInviteUser ( struct FString Nick );
	bool IsCurrentSceneTypeMain ( );
	bool IsShowInviteDialog ( );
	void OnMatchroomInviteUser_Failed_OK ( struct FEventData ev );
	void OnMatchroomInviteUser_Failure ( unsigned char Error_Code );
	void OnMatchroomInviteUser_Sucess ( int userID );
	void RequestMatchRoomInviteUser ( int userID, unsigned char INVITE_TYPE );
	void UpdateAwaitList ( );
	void HideAwaitList ( );
	bool IsShowAwaitList ( );
	void TogleAwaitList ( );
	void receiveAwaitListPopupMenuBtn ( int Id, int userID );
	void receiveAwaitListAwaiterLeftRightClick ( int Id, int X, int Y );
	void receiveAwaitListCloseBtn ( );
	void receiveAwaitListEnrollmentBtn ( );
	void receiveAwaitListNextBtn ( );
	void receiveAwaitListPrevBtn ( );
	void receiveAwaitListReflashBtn ( );
	void registerAwaitList ( class UCombatFrontEnd_AwaitList* M );
	struct FString GetString_CallingCard ( int Id );
	struct FString GetImgPath_CallingCard ( int Id );
	void receiveHelpCloseBtn ( );
	void registerHelp ( class UCombatFrontEnd_Help* M );
	void OnDialog_Ok ( struct FEventData ev );
	void FailedChangeHost ( int ErrorCode );
	void UpdateNewQuestAlarm ( int QuestID, int QuestType );
	void receiveMyInfoScreenShotBtn ( );
	void registerMyInfo ( class UCombatFrontEnd_CharacterInfo* M );
	void receiveListItemBtn ( int Id );
	void receiveCloseBtn ( );
	void receiveApplyBtn ( );
	void registerCallingCard ( class UCombatFrontEnd_CallingCardPage* M );
	void DoQuickstart ( );
	void receiveLobbyQuickStartSetupDropDownMenuChange ( int Index, int Id );
	void receiveLobbyQuickStartSetupSaveAndRunBtn ( );
	void receiveLobbyQuickStartSetupSaveAndCloseBtn ( );
	void receiveLobbyQuickStartSetupCancelBtn ( );
	void registerLobbyQuickStartSetup ( class UCombatFrontEnd_QuickStart* M );
	void DisplayDialog_NoticeModifiedByOther ( );
	void ClanNoticeUpdate ( struct FString notice );
	void ClanNoticeUpdateSucceded ( struct FString notice );
	void ClanNoticeUpdateFailed ( unsigned char Error_Code );
	void DisplayDialog_IntroduceModifiedByOther ( );
	void ClanIntroduceUpdate ( struct FString Introduce );
	void ClanIntroduceUpdateSucceded ( struct FString Introduce );
	void ClanIntroduceUpdateFailed ( unsigned char Error_Code );
	void RecvClanGradeChangeFail ( unsigned char Error );
	void RecvClanMasterDelegateFail ( unsigned char Error );
	void RecvClanJoinRefuseFail ( unsigned char Error );
	void RecvClanJoinApproveFail ( unsigned char Error );
	void RecvClanShutDownFail ( unsigned char Error );
	void UpdateClanShutDownSucceed ( );
	void RecvClanClearInfoUpdate ( );
	void RecvBecameClanMaster ( );
	void RecvClanMasterChangeUpdate ( );
	void RecvClanChangInfoUpdate ( );
	void ReceiveClanHomeDrawBtn ( int Index );
	void ReceiveClanHomePopupBtn ( int Id, int userID );
	void ReceiveClanHomeRejectBtn ( int Id );
	void ReceiveClanHomeApprovalBtn ( int Id );
	void receiveClanHomePersonalLeftRightBtn ( int Id, int userID, int X, int Y );
	void ReceiveClanSubscriberTabBtn ( );
	void ReceiveClanHomeMemberTabBtn ( );
	void ReceiveClanHomePasswordChangeBtn ( );
	void ReceiveClanHomeClanCloseBtn ( );
	void SetSearchClanName ( struct FString SearchClanName );
	void RecvClanJoinCancelFail ( unsigned char Error );
	void RecvClanJoinApplyFail ( unsigned char Error );
	void RecvClanFindFailed ( unsigned char Error );
	void receiveClanListSortDropDownMenuChange ( int Id );
	void receiveClanListSearchBtn ( struct FString txt );
	void receiveClanListJoinBtn ( );
	void receiveClanListClanBtn ( int Id );
	void receiveClanListNextBtn ( );
	void receiveClanListPrevBtn ( );
	void RecvClanJoinList ( int ClanID );
	void FailChangeClanPassword ( int Error_Code );
	void OnSuccessChangeClanPassword_OK ( struct FEventData ev );
	void SuccessChangeClanPassword ( );
	int CheckChangeClanPassword ( struct FString CurrentPw, struct FString NewPw, struct FString NewPwConfirm );
	int CheckCreateClanPassword ( struct FString PW, struct FString PwConfirm );
	bool IsNeedChangeClanPassword ( );
	void receiveClanPopupPasswordForCloseOkBtn ( struct FString PW );
	void receiveClanPopupPasswordForChangeOkBtn ( struct FString CurrentPw, struct FString NewPw, struct FString NewPwConfirm );
	void receiveClanPopupPasswordForInputOkBtn ( struct FString PW, struct FString PwConfirm );
	void ClanPasswordError ( int Error_Code );
	void HideClanPasswordPopup ( );
	void ShowClanPasswordPopup ( int Type );
	void ClanIntroduceHasBadWords ( );
	void ClanNoticeHasBadWords ( );
	void receiveClanNoticeOkBtn ( struct FString notice );
	void ReceiveClanPopupCancelBtn ( );
	void ReceiveClanPopupJoinOkBtn ( );
	void RecvClanListDetailView ( );
	void RecvReNewalClanList ( );
	void receiveClanListClanFoundationBtn ( );
	void RecvMatchRoomClanUpdate ( int userID );
	void ReceiveClanBreakAwayFailed ( unsigned char Error );
	void ReceiveClanBreakAwaySucceed ( );
	void ReceiveClanBreakAway ( struct FString reakAwayMember );
	void ReceiveClanRegionUpdateFailed ( unsigned char Error_Code );
	void ReceiveClanCancelBtn ( );
	void RecvClanKickMember ( struct FString kickMessage, unsigned long bKick );
	void RecvClanKickMemberSucceed ( struct FString UserName );
	void RecvClanKickMemberFailed ( unsigned char Error_Code );
	void RecvClanAcceptSuggest ( struct FString NickName );
	void RecvClanAcceptSuggestSucceed ( struct FString ClanName );
	void RecvClanAcceptSuggestFailed ( unsigned char Error_Code );
	void RecvClanInviteSuggestFailed ( unsigned char Error_Code );
	void RecvClanInviteSuggestSucceed ( int user_id, struct FString NickName );
	void RecvClanInviteSuggest ( int Id, struct FString Clan_Name, struct FString suggest_Name );
	void RecvClanCreateNameFailed ( unsigned char Error );
	void RecvClanCreateSuccess ( );
	void RequestCreateClan ( struct FString PW );
	void registerClanHome ( class UCombatFrontEnd_ClanHome* M );
	void registerClanPopup ( class UCombatFrontEnd_ClanJoinPopup* M );
	void registerClanList ( class UCombatFrontEnd_ClanList* M );
	void ClanNameCheckSuccess ( );
	void receiveClanCreateBtn ( struct FString ClanName );
	void registerClanFoundation ( class UCombatFrontEnd_Clan* M );
	unsigned char CheckClanName ( struct FString ClanName );
	void UpdateBoosterIcon ( );
	void Dev_ShowShop ( );
	void Dev_ShowInventory ( );
	void receiveCommonTopBarChargeBtn ( int Type );
	void receiveCommonTopBarRefreshBtn ( int Type );
	void receiveTopBarPopupMenuBtn ( int Id );
	void receiveTopBarLeftRightBtn ( int userID, int X, int Y );
	void UpdateMatchRoomChatting_GameResult ( struct FString chatterName_, struct FString msg_ );
	void receiveFinalResultTabButtonClick ( int Index );
	void receiveFinalResultReadyButtonClick ( );
	void receiveFinalResultMatchRoomButtonClick ( );
	void receiveFinalResultCaptureButtonClick ( );
	void receiveFinalResultExpBarAnimationComplete ( );
	void registerFinalResult ( class UCombatFrontEnd_MatchResult* M );
	void receiveMain_LastSceneAchieveButtonShow ( );
	void receiveMain_LastSceneAchieveAnimationComplete ( );
	void registerMain_LastSceneAchieve ( class UCombatFrontEnd_Achieve* M );
	void OnRemoveBlackList_Failure ( unsigned char errorType );
	void DisplayAddBlackList_Failure ( struct FString errorMsg );
	void OnAddBlackList_Success ( int beforState, struct FString PlayerName );
	void TryAddBlackList ( struct FString PlayerName );
	void OnRemoveFriend_Failure ( unsigned char Error );
	void OnAnswerRejectFriendSuggestion_Failure ( unsigned char Error );
	void OnAnswerAcceptFriendSuggestion_Failure ( unsigned char Error );
	void AlramFriendSuggestion ( struct FString PlayerName );
	void OnSuggestFriend_Failure ( unsigned char Error, struct FString PlayerName );
	void OnSuggestFriend_Success ( struct FString PlayerName );
	void UpdateMessenger_BlockList ( );
	void UpdateClanMessenger_ClanList_Offline ( );
	void UpdateClanMember_ClanList ( int userID );
	void UpdateMessenger_FriendList_Offline ( );
	void UpdateMessenger_FriendList ( );
	void UpdateMessenger_SuggestionList ( );
	void receiveMessengerBlockButton ( struct FString UserName );
	void receiveMessengerTapButton ( int idex );
	void receiveMessengerPopupButton ( int popUpIndex, struct FString UserName );
	void receiveMessengerListViewOutButton ( );
	void receiveMessengerListViewOverButton ( struct FString UserName, int X, int Y );
	void receiveMessengerListViewRequestFriendCancelButton ( struct FString UserName );
	void receiveMessengerListViewRequestFriendOkButton ( struct FString UserName );
	void receiveMessengerListViewLeftRightButton ( struct FString UserName, int X, int Y );
	void receiveMessengerListViewTitleOpenButton ( int ListIndex );
	void receiveMessengerListViewTitleCloseButton ( int ListIndex );
	void receiveMessengerAddFriendsKillFocus ( );
	void receiveMessengerAddFriendsSetFocus ( );
	void receiveMessengerAddFriendButton ( struct FString UserName );
	void receiveMessengerCloseButton ( );
	void registerMessenger ( class UCombatFrontEnd_Community* M );
	void receiveCommonShowRoomVcEmblem ( );
	void receiveCommonShowRoomPmEmblem ( );
	void receiveCommonShowRoomScroll ( int scrollDelta );
	void receiveCommonShowRoomDragUp ( );
	void receiveCommonShowRoomDragDown ( int X );
	void SetShowRoomInterfaceText ( struct FString InterfaceName );
	void SetShowRoomCharacterText ( struct FString PlayerName );
	void SetShowRoomVCButtonDisabled ( unsigned long bDisabled );
	void SetShowRoomVCButtonSelected ( unsigned long bSelected );
	void SetShowRoomPMButtonDisabled ( unsigned long bDisabled );
	void SetShowRoomPMButtonSelected ( unsigned long bSelected );
	void ChangeShowRoomShop ( unsigned long bShow );
	void ChangeShowRoomInventory ( );
	void ChangeShowRoomWhole ( );
	void ShowFXFootItem ( int ItemIndex );
	void ShowFXUpperItem ( int ItemIndex );
	void ShowArmorMesh ( int ArmorItemIndex );
	void ShowWeaponMesh ( int RefItemIndex );
	void SetShowRoomButtonState ( unsigned char TeamIndex );
	void ShowCharacterName ( int refIdx );
	void ShowCharacterMesh ( int RefItemIndex, unsigned char TeamIndex );
	void SetSelectSlotClothRefID ( int NewId );
	void ShowPresetWeaponMesh ( int PresetIndex, int slotType );
	void ShowFrontEndPlayerMesh ( int itemRefIdx, struct FString ItemCodeName );
	void ExistExpiredEquipItem ( );
	class UClass* GetWeaponInfoByRefItemIndex ( int RefItemIndex );
	void HideShowRoom ( );
	void ShowShowRoom ( );
	void registerShowRoom ( class UGFxObject* M );
	void OnCloseClientDialogCancel ( struct FEventData ev );
	void OnCloseClientDialogOK ( struct FEventData ev );
	void DisplayCloseClientDialog ( );
	void StopBGM ( );
	void ForcePlayBGM ( unsigned char TargetScene );
	void PlayBGM ( );
	void ClearIgnorePressEvent ( );
	bool eventFilterButtonInput ( int ControllerId, struct FName ButtonName, unsigned char InputEvent );
	void receiveLobbyRoomCreatedMapListBtn ( int Id );
	void receiveLobbyRoomCreatedModeListBtn ( int Id );
	void receiveLobbyRoomCreatedMissionListBtn ( int Id );
	void receiveLobbyRoomCreatedPasswordBtn ( int PW );
	void receiveLobbyRoomCreatedMapSmallBtn ( );
	void receiveLobbyRoomCreatedMapMiddleBtn ( );
	void receiveLobbyRoomCreatedMapLargeBtn ( );
	void receiveLobbyRoomCreatedMapTotalBtn ( );
	void receiveLobbyRoomCreatedCompleteBtn ( int PW );
	void receiveLobbyRoomCreatedSetChangeBtn ( );
	void receiveLobbyRoomCreatedCancelBtn ( );
	void ShowPracticeRoom ( );
	void HideMakeRoom ( );
	void ShowMakeRoomCompetitive ( unsigned char CompetitiveType );
	void ShowMakeRoom ( );
	void registerLobbyRoomCreated ( class UCombatFrontEnd_MakeRoom* M );
	void OnUserCash ( );
	void OnItemSell ( unsigned char Error_Code );
	void OnSteamItemObtain ( );
	void RecvFailDestroyedItem ( unsigned char ErrorCode );
	void RecvDestroyedItem ( int SlotIndex );
	void RecvExpiredItem ( int itemInvenslot );
	void OnLimitBuyItemTimeEnd ( int Item_Index );
	void OnBuyItemCancel_Failure ( unsigned char Error_Code );
	void OnBuyItemCancel_Success ( );
	void OnBuyItemTryPaymentOK ( struct FEventData ev );
	void OnBuyItem_TryPayment ( );
	void DisplayDialogSteamItemBuyFailure ( );
	void OnSteamItemBuyConfirm ( unsigned char Error_Code );
	void OnSteamItemBuy ( unsigned char Error_Code );
	void OnBuyItemFailureOK ( struct FEventData ev );
	void DisPlayDialog_BuyItemFailure ( unsigned char Error_Code, struct FString Error_Message );
	void OnBuyItem_Failure ( unsigned char Error_Code, struct FString Error_Message );
	void OnBuyItem_Success ( int Index, int InvenSlot );
	void OnLeaveRoomSettingSucceed ( );
	void OnEnterRoomSettingSucceed ( );
	void OnLeavePersonalMaintenance_REVISAL ( );
	void OnLeavePersonalMaintenance_Failure ( unsigned char errorType );
	void OnLeavePersonalMaintenance_Success ( );
	void OnUpdateInventory_Failure ( int errorType );
	void OnUpdateInventory_Success ( );
	bool HasAnyChangedEquippedItem ( );
	void OnConsumeItemFailDialogOK ( struct FEventData ev );
	void DisplayDialog_ConsumeItemFail ( unsigned char Error_Code );
	void SetConsumeItem_Failuse ( unsigned char errorType );
	void OnConsumeItemSucceeDialogOK ( struct FEventData ev );
	void DisplayDialog_ConsumeItemSucceed ( struct FString ItemName );
	struct FExchangeAddMoneyStruct GetExchangedMoney ( );
	void RefreshInventoryItems ( );
	void SetConsumeItem_Succeed ( int consumeitem, int StackCount );
	void OnItemDeActivated ( int Error_Code, int DeActivated_SlotIndex );
	void OnItemActivated ( int Error_Code, int Activated_SlotIndex, int DeActivated_SlotIndex );
	void SetExpendChangeItem ( struct FString Text );
	void SetExpendItem ( int IntentorySlot );
	void SetActiveInventoryItems ( );
	void LeavePersonalMaintenance ( );
	void OnEnterPersonalMaintenance_Failure ( unsigned char errorType );
	void OnEnterPersonalMaintenance_Success ( );
	void receiveInventoryInfoTabBtn ( int TabIndex );
	void receiveInventorySearchWord ( struct FString searchtext );
	void receiveInventoryListItemView ( int Id );
	void receiveInventoryListUseUpBtn ( int Id );
	void receiveInventoryListItemDoubleClick ( int Id );
	void receiveInventoryListFunctionThreeBtn ( int Id );
	void receiveInventoryListFunctionTwoBtn ( int Id );
	void receiveInventoryListFunctionOneBtn ( int Id );
	void receiveInventoryListSellBtn ( int Id );
	void receiveInventoryListDestroyBtn ( int Id );
	void receiveInventoryListRepairBtn ( int Id );
	void receiveInventoryListCheckBtn ( int Id );
	void receiveInventoryListItemBtn ( int Id );
	void receiveInventoryItemEquipBtn ( int Id );
	void receiveInventoryListSubTabBtn ( int Code );
	void receiveInventoryListMainTabBtn ( int Code );
	void receiveInventoryPresetRepairBtn ( int Id );
	void receiveInventoryPresetUnequipBtn ( int Id );
	void receiveInventoryPresetDoubleClick ( int Id );
	void receiveInventoryPresetSlotBtn ( int Id );
	void receiveInventoryPresetUiToggleBtn ( );
	void receiveInventoryPresetTabBtn ( int Index );
	void receiveShopPopupInventoryBtn ( );
	void receiveShopPopupEquipBtn ( unsigned long bPreset1, unsigned long bPreset2, unsigned long bPreset3 );
	void receiveShopPopupBuyCancelBtn ( );
	void receiveShopPopupBuyAndEquipBtn ( int unit_id, int price_id );
	void receiveShopPopupBuyBtn ( int unit_id, int price_id );
	void receiveShopPopupPriceBtn ( int Id );
	void receiveShopPopupUnitBtn ( int Id );
	void receiveShopPopupPresetViewBtn ( int Id );
	void receiveShopListItemView ( int Id );
	void receiveShopInfoClose ( );
	void receiveShopInfoOpen ( );
	void receiveShopCashBtn ( );
	void receiveShopNewBtn ( );
	void receiveShopHotBtn ( );
	void receiveShopSearchWord ( struct FString searchtext );
	void receiveShopInfoTabBtn ( int TabIndex );
	void OnDoNotbuyDialogOK ( struct FEventData ev );
	void IsCheckItmeRankFailedDialog ( );
	void ShowBuyItemPopUp ( int Id );
	bool IsPurchasableItemByLimitCount ( struct FLimitBuyItemData limit_data );
	bool IsPurchasableItemByRank ( int Id );
	void OnLeaveRematchQueueSuccess ( );
	void OnNotifyDisperseRematchQueue ( unsigned char Reason );
	void OnRefreshCashItemBuy ( );
	void receiveShopListItemDoubleClick ( int Id );
	void receiveShopListItemBuyBtn ( int Id );
	void receiveShopListItemBtn ( int Id );
	void receiveShopListSubTabBtn ( int Id );
	void receiveShopListMainTabBtn ( int Id );
	void receiveRepurchaseCloseBtn ( );
	void receiveRepurchaseGoShopBtn ( );
	void receiveRepurchaseItemView ( int Index );
	void ShowRepurchase ( );
	void registerRepurchase ( class UCombatFrontEnd_Repurchase* M );
	void registerShopPopup ( class UCombatFrontEnd_BuyItem* M );
	void registerShopInfo ( class UGFxObject* M );
	void registerShopList ( class UGFxObject* M );
	void registerMedalShop ( );
	void registerShop ( );
	void UpdateItemRemainTime ( TArray< int > updateItemList );
	void registerInventoryList ( class UGFxObject* M );
	void registerInventoryInfo ( class UGFxObject* M );
	void registerInventoryPreset ( class UGFxObject* M );
	void registerInventory ( );
	void registerCommonOption ( class UCombatCommon_Option* M );
	void SetWhisperName ( struct FString NickName );
	void UpdateScrNotice ( );
	void HideWhisperList ( );
	void HideChat ( );
	void ShowChat ( );
	void NotifyRemoveChatChannelMember ( struct FString PlayerName );
	void NotifyAddChatChannelMember ( struct FString PlayerName );
	void UpdateWhisperChatting ( unsigned char chatType, struct FString TargetName, struct FString msg );
	void UpdateTsMessage ( struct FString msg );
	void UpdateClanLevelUp ( struct FString msg );
	void UpdateClanChatting ( int userID, struct FString TargetName, struct FString msg );
	void UpdateChampionshipObserverMatchRoomChatting ( int senderUID_, struct FString msg_ );
	void UpdateChampionshipObserverChannelChatting ( struct FString senderName, struct FString msg );
	void UpdateMatchRoomChatting ( int senderUID_, struct FString msg_, unsigned long bGameManager_ );
	void UpdateChannelChatting ( struct FString senderName, struct FString senderClanName, struct FString msg, unsigned long bGameManager );
	void Dev_UpdateDevelopeMessage ( struct FString msg );
	void CommandList ( );
	void ClanMemberList ( );
	void ClanBreakAway ( );
	void ClanMemberBanis ( struct FString PlayerName );
	void ClanInvite ( struct FString PlayerName );
	void OnCallingCardObtain_Failure ( unsigned char errer_code );
	void OnCallingCardObtain_Sucess ( int Id );
	void OnCallingCardExpire ( );
	void OnCallingCardChange_Failure ( unsigned char Error_Code );
	void OnCallingCardChange_Sucess ( );
	void RequestCallingCardChange ( int calling_card );
	void VersionDiscrepancyError ( );
	void OnDisplayDialogOnFollowingUser_OK ( struct FEventData ev );
	void DisplayDialogOnFollowingUser ( unsigned char Error_Code );
	void OnShortcutUseEnd ( );
	void RequestShortcutUse ( int refChannelIdx, int refMissionIdx, int refModeGroupIdx );
	void OnFollowingUser ( unsigned char Error_Code );
	void RequestFollowingUser ( int userID );
	bool CompareCurrentSceneType ( unsigned char Scene_Type );
	void BreakFriendsWith ( struct FString PlayerName );
	void FriendsWith ( struct FString PlayerName );
	void RemoveBlackList ( struct FString PlayerName );
	void ChangeHost ( int userID );
	void TryTeamSwap ( );
	void KickUser ( struct FString PlayerName );
	bool CheckUserCommand ( struct FString commandMsg_ );
	void receiveCommonLobbyChattingPopupButton ( int Index, struct FString Id );
	void receiveCommonLobbyChattingListViewRightClick ( struct FString Id, int X, int Y );
	void receiveCommonLobbyChattingListViewClick ( struct FString Id );
	void ClearIMEBuffer ( );
	void receiveCommonLobbyChattingFocus ( unsigned long bFocus );
	void receiveCommonLobbyChattingTab ( int Index );
	void receiveCommonLobbyChattingMessage ( struct FString msg, struct FString Code, struct FString WhiperID, struct FString Channel );
	void registerCommonLobbyChatting ( class UCombatFrontEnd_Chat* M );
	void UpdateMessengerButton_OnlineFriendCount ( int Count );
	void UpdateMessengerButton_NewSuggestionFriend ( unsigned long bHasNew );
	void SetDashboardMoneyDisplayButton ( unsigned long bDisabled );
	void SetDashboardButton_Disabled ( int ButtonType, unsigned long bDisablec );
	void SetDashboardButton_Selected ( int ButtonType, unsigned long bSelected );
	void OpenHelpButton ( unsigned long FirstEverPlay );
	void ToggleSetupBtn ( );
	void ClosePopupScene ( );
	void GotoPrevScene ( );
	void UpdateDashboard_ClanButtons ( );
	void RefreshItemTime ( );
	void StopBulletSaleEventEffect ( );
	void StartBulletSaleEventEffect ( );
	void UpdateDashboardMoney ( );
	void UpdateDashboard ( );
	void receiveCommonBottomBarSurpportBtn ( );
	void receiveCommonBottomBarExitBtn ( );
	void receiveCommonBottomBarHelpBtn ( );
	void receiveCommonBottomBarOptionBtn ( );
	void receiveCommonBottomBarRandomShopBtn ( );
	void receiveCommonBottomBarMedalShopBtn ( );
	void receiveCommonBottomBarShopBtn ( );
	void receiveCommonBottomBarClanHomeBtn ( );
	void receiveCommonBottomBarClanListBtn ( );
	void receiveCommonTopBarEventBtn ( );
	void receiveCommonBottomBarMyInfoBtn ( );
	void receiveCommonBottomBarInvenBtn ( );
	void receiveCommonBottomBarNoticeBtn ( );
	void receiveCommonBottomBarBackBtn ( );
	void registerCommonBottomBar ( class UGFxObject* M );
	void receiveCommonTopBarMsnBtn ( );
	void receiveCommonTopBarMailBtn ( );
	void registerCommonTopBar ( class UGFxObject* M );
	void RegisterDashboard ( );
	void OnGearSetChange_Used ( unsigned char gearSetIndex );
	void OnGearSetChange_Failure ( unsigned char ErrorCode );
	void OnGearSetChange_Success ( unsigned char gearSetIndex );
	void receiveTacticalGearListBtn ( int gearID );
	void receiveTacticalGearOpenBtn ( );
	void registerLobbyMatchRoomTacticalGear ( class UCombatFrontEnd_TacticalGear* M );
	void receiveMatchRoomPopupOptionChange ( int Index, int ddIndex );
	void receiveMatchRoomPopupCancelBtn ( );
	void receiveMatchRoomPopupOptionOkBtn ( );
	void receiveMatchRoomPopupRenameOkBtn ( struct FString Text );
	void registerMatchRoomPopup ( class UCombatFrontEnd_MatchroomPopup* M );
	void receiveLobbyMatchRoomInfoSideMenuChange ( int Index, int Id );
	void receiveLobbyMatchRoomInfoClanMatchRecordBtn ( );
	void receiveLobbyMatchRoomInfoDetailBtn ( );
	void receiveLobbyMatchRoomInfoModeMapEditBtn ( );
	void receiveLobbyMatchRoomInfoTitleBtn ( );
	void registerLobbyMatchRoomInfo ( class UGFxObject* M );
	void receiveLobbyMatchRoomInvitationBtn ( );
	void receiveLobbyMatchRoomReadyStartKey ( int Value );
	void receiveLobbyMatchRoomUserListPopupMenuBtn ( int Id, int userID );
	void receiveLobbyMatchRoomUserListBtn ( int Id );
	void receiveLobbyMatchRoomUserListRightBtn ( int Id, int X, int Y, unsigned long bClan );
	void receiveLobbyMatchRoomReadyStartBtn ( );
	void receiveLobbyMatchRoomGetMasterBtn ( );
	void receiveLobbyMatchRoomTeamChangeBtn ( );
	void receiveLobbyMatchRoomCompulsoryLeaveBtn ( );
	void receiveLobbyMatchRoomTransitionBtn ( );
	void registerLobbyMatchRoomPartyList ( class UGFxObject* M );
	void RegisterMatchroom ( );
	void OnTodayModeUpdateNotify ( );
	void OnDisplayDialogTierPointPenaltyNonPlay_OK ( struct FEventData ev );
	void DisplayDialogTierPointPenaltyNonPlay ( int CompType );
	void OnMatchroomUserPenaltyEnd ( );
	void OnCompMatchDialogCheck ( );
	void OnShowTierChangeChat ( unsigned long isUp, struct FString UserName, int tierStringID );
	void OnMatchHasFinished ( );
	void OnNotifyChangeMatchroomGameOption ( );
	void OnNotifyChangeHost ( int newHostUserID );
	void DisplayTeamUpdateType ( unsigned char TeamUpdateType );
	void UpdateMatchroom_TeamList ( );
	void UpdateMatchroom_Password ( );
	void UpdateMatchroom_Option ( unsigned char optionType_, unsigned char optionValueIndex_ );
	void UpdateMatchroom_ModeMap ( );
	void UpdateMatchroom_RoomName ( );
	void OnMatcroomUpdateOption_Failure ( unsigned char errorType_ );
	void OnIntrude_Failure ( unsigned char errorType );
	void OnIntrude_Success ( );
	void OnIntrude_Try ( );
	void OnChangeTeam_Success ( unsigned char TeamIndex );
	void OnChangeTeam_Failure ( unsigned char errorType );
	void OnPlayerJoinMatchroom ( int joinUID );
	void OnReady_Failure ( unsigned char errorType );
	void OnMatchBeginningAborted ( unsigned char errorType );
	void OnStartMatchBeginCountdown ( );
	void InformMatchRoomCountdownOngoing ( );
	void OnStartMatch_Failure_Notify ( unsigned char errorType );
	void OnStartMatch_Failure ( unsigned char errorType );
	void OnLeaveMatchRoom_Failure ( unsigned char errorType );
	void OnUpdateMatchroom_TeamList ( );
	void OnStartEnteringMatch ( );
	void OnMatchRoomHostPreemption ( unsigned char Error_Code );
	void OnMatchroomReadyButtonUpdate ( unsigned long bDisable );
	void OnNotifyLazyHostWarning ( );
	void OnUpdateMatchroomTeamSwap ( );
	void OnUpdateMatchroom ( );
	bool CheckMatchRoomName ( struct FString RoomName );
	void OnEnterMatchroomByCreation_Failure ( unsigned char errorType );
	void OnMatchRoomLookIn ( unsigned char Error_Code );
	void OnEnterMatchRoom ( unsigned char Error_Code );
	void OnUpdateMatchRoomList ( );
	void receiveRoomMemberHide ( );
	void registerLobbyMatchMember ( class UCombatFrontEnd_MatchMember* M );
	void receiveLobbyRoomListItemRightBtn ( int Id, int X, int Y );
	void receiveLobbyRoomListItemBtn ( int Id );
	void receiveCompetitiveMajorityCueBtn ( );
	void receiveCompetitiveMinorityCueBtn ( );
	void receiveLobbyRoomListPracticeBtn ( );
	void receiveLobbyRoomListEnrollmentBtn ( );
	void receiveLobbyRoomListQuickSetBtn ( );
	void receiveLobbyRoomListQuickStartBtn ( );
	void receiveLobbyRoomListJoinBtn ( int Id );
	void receiveLobbyRoomListMakeBtn ( );
	void registerLobbyRoomList ( class UCombatFrontEnd_MainLobby* M );
	void OnEnterMatchChannel ( unsigned char Error_Code );
	void OnDisplayDialogTutorialStartOK ( struct FEventData ev );
	void DisplayDialogTutorialStart ( unsigned long bFirstPlay );
	void OnUpdateMatchChannelState ( );
	void OnLeaveMatchChannel ( unsigned char Reason_Type );
	void receiveQuickBtn ( int Id );
	void receiveLobbyChannelListBtn ( int ChannelID );
	void receiveLobbyChannelTutorialBtn ( );
	void registerLobbyChannelList ( class UCombatFrontEnd_Channel* M );
	void OnUpdateCreateNickName ( unsigned char Error_Code );
	unsigned char CheckNickname ( struct FString NickName );
	void receiveLobbyCreateNicknameExitBtn ( );
	void receiveLobbyCreateNicknameOkBtn ( struct FString NickName );
	void registerLobbyCreateNickname ( class UCombatFrontEnd_CreateCharacter* M );
	void OnEnterMatchServer_Failure ( unsigned char errorType );
	void OnLoginFailureDialogOK ( struct FEventData ev );
	void OnDisconnectDialog_OK ( struct FEventData ev );
	void DisplayDialogLimitedLoginCount ( );
	void OnConnectAgentServer_Failure ( unsigned char RequestType, unsigned char error_type, unsigned char Error_Code );
	void OnUserCertification_Failure ( unsigned char RequestType, unsigned char errorType, int ErrorCode, int BanExpireRemainTime );
	void OnModuleCertification_Failure ( unsigned char RequestType, unsigned char errorType, unsigned char ErrorCode );
	void DisplayDialog_LoginError_WebServer ( unsigned char errorType, struct FString errorString );
	void DisplayDialog_LoginError_Init ( unsigned char errorType );
	void DisplayDialog_LoginError_Wait ( );
	bool IsMaxFailedLoginCount ( );
	void UpdateCertifyWaitUserCount ( int Count );
	void UpdateLoginProgressUI ( int CertificationType, int ProcessType );
	void receiveLoginBackBtn ( );
	void receiveLoginOptionBtn ( );
	void receiveLoginAccountBtn ( );
	void receiveLoginExitBtn ( );
	void receiveCheckCancelBtn ( );
	void receiveLoginOkBtn ( struct FString Id, struct FString PW, unsigned long bSave );
	void OnLoginUIUnLock ( );
	void OnLoginUILock ( );
	void registerLobbyLogin ( class UCombatFrontEnd_Login* M );
	void registerLobbyGameTitle ( class UCombatFrontEnd_GameTitle* M );
	void receiveShopSortBtn ( );
	void receiveInventorySortBtn ( );
	void UpdateListSortBtn ( int MainTab, int SubTab );
	void HideSortUI ( );
	void SetSortDataBySceneType ( unsigned char SceneType, int MainTab, int SubTab );
	void receiveCommonSortDownClick ( int Id );
	void receiveCommonSortUpClick ( int Id );
	void receiveCommonSortFilterClick ( int Id );
	void receiveCommonSortFilterAllViewClick ( );
	void registerSort ( class UCombatFrontEnd_Sort* M );
	void registerCommonSystemCounter ( class UCombatFrontEnd_SystemCounter* M );
	void HideCommand ( );
	void ShowCommand ( );
	void OnUIBlock ( unsigned long bBlock );
	bool IsShowWall ( );
	void HideLoadingWall ( );
	void ShowLoadingWall ( );
	void HideTransparentWall ( );
	void ShowTransparentWall ( );
	void ShowScene ( struct FString ShowAction );
	void UseSceneTransition ( unsigned long bUse );
	void receiveDialogInputTxtGetFocus ( unsigned long bFocus );
	void receiveFrontEndTestAwesomium ( struct FString Input_Text );
	void receiveFrontEndCommonEscKey ( );
	bool IsAllFlashLoaded ( );
	void VivoxTeamChannelLeave ( );
	void AllFlashLoaded ( );
	void registerMainFrontEnd ( class UCombatMain_FrontEnd* M );
	void OnDisconnectMatchServerByAFKDialogOK ( struct FEventData ev );
	void DisplayDialog_DisconnectMatchServerByAFK ( );
	bool OnDisconnectMatchServerByAFK ( );
	bool OnNotifyKeyInputSignal ( );
	void PushDialog_InputExpireTime ( );
	bool OnInputExpireTime ( class ACombatPlayerControllerBase* LocalPC );
	void UpdatePendingDialog ( );
	void HideDialog ( int Id );
	void ShowCallingCardPage ( );
	void CheckMiniMapSizeOption ( );
	void ChangeScene ( unsigned char NewScene );
	void MessengerHidePopUp ( );
	class UCombatFrontEnd_Exchange* GetExchangePopupClass ( );
	bool GetUIDataStore_ETC ( class UCBUIDataStore_ETC** out_DataStore );
	class UCBUIDataStore_QuickstartSetting* GetUIDataStore_QuickstartSetting ( );
	class UCBUIDataStore_Mission* GetUIDataStore_Mission ( );
	class UCombatFrontEndLocalSoundGroup_Base* GetSoundGroup ( );
	class ACombatFrontEndInfo* GetGameInfo ( );
	void eventOnCleanup ( );
	void AwesomiumClick ( int Index );
};

UClass* UCombatFrontEndMoviePlayer::pClassPointer = NULL;

// Class CombatGame.CombatTeamGameMovie
// 0x061C (0x0820 - 0x0204)
class UCombatTeamGameMovie : public UCombatGFxMoviePlayer
{
public:
	class ACombatPC*                                   myPC;                                             		// 0x0204 (0x0004) [0x0000000000000000]              
	class ACombatPlayerReplicationInfo*                myPRI;                                            		// 0x0208 (0x0004) [0x0000000000000000]              
	class ACBGameReplicationInfo*                      currentGRI;                                       		// 0x020C (0x0004) [0x0000000000000000]              
	class UCombatHUD_CharacterInfo*                    CharacterInfoMC;                                  		// 0x0210 (0x0004) [0x0000000000000000]              
	int                                                LastCredit;                                       		// 0x0214 (0x0004) [0x0000000000000000]              
	class UCombatHUD_WeaponInfo*                       WeaponInfoMC;                                     		// 0x0218 (0x0004) [0x0000000000000000]              
	class UCombatHUD_Aim*                              AimClass;                                         		// 0x021C (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsReloading : 1;                                 		// 0x0220 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsChangingWeapon : 1;                            		// 0x0220 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedTimeLimitUI : 1;                             		// 0x0220 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsDisplayedTimeLimit : 1;                        		// 0x0220 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNeedClearRoundStatus : 1;                        		// 0x0220 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bShowRoundWinCount : 1;                           		// 0x0220 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bShowRoundPoint : 1;                              		// 0x0220 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bSupportRespawn : 1;                              		// 0x0220 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bIsDead : 1;                                      		// 0x0220 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bIsMatchHasFinished : 1;                          		// 0x0220 (0x0004) [0x0000000000000000] [0x00000200] 
	class UCombatHUD_HitIndicator*                     HitIndicatorMC;                                   		// 0x0224 (0x0004) [0x0000000000000000]              
	struct FDirHit                                     DirHits[ 0x7 ];                                   		// 0x0228 (0x00A8) [0x0000000000000000]              
	float                                              MaxDrawDirHitTime;                                		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              UpdateDirHitTime;                                 		// 0x02D4 (0x0004) [0x0000000000000000]              
	class UCombatHUD_RoundStatusBar*                   RoundStatusMC;                                    		// 0x02D8 (0x0004) [0x0000000000000000]              
	int                                                LastTeamPoint[ 0x2 ];                             		// 0x02DC (0x0008) [0x0000000000000000]              
	int                                                LastTeamMemeber[ 0x2 ];                           		// 0x02E4 (0x0008) [0x0000000000000000]              
	int                                                LastWinRounds[ 0x2 ];                             		// 0x02EC (0x0008) [0x0000000000000000]              
	int                                                LastRemainTime_Min;                               		// 0x02F4 (0x0004) [0x0000000000000000]              
	int                                                LastRemainTime_Sec;                               		// 0x02F8 (0x0004) [0x0000000000000000]              
	class UCombatHUD_RespawnProgressBar*               RespawnProgressBarMC;                             		// 0x02FC (0x0004) [0x0000000000000000]              
	class UCombatHUD_GlobalMessage*                    GlobalMessageMC;                                  		// 0x0300 (0x0004) [0x0000000000000000]              
	class UCombatHUD_Message_Personal*                 Message_PersonalMC;                               		// 0x0304 (0x0004) [0x0000000000000000]              
	class UCombatHUD_Message_Personal_Auto*            Message_Personal_AutoMC;                          		// 0x0308 (0x0004) [0x0000000000000000]              
	class UCombatHUD_IFFContainer*                     IFFContainerClass;                                		// 0x030C (0x0004) [0x0000000000000000]              
	class UCombatHUD_KillDeathList*                    KillDeathListMC;                                  		// 0x0310 (0x0004) [0x0000000000000000]              
	class UCombatInGameOptionMenu*                     OptionMenuClass;                                  		// 0x0314 (0x0004) [0x0000000000000000]              
	class UCombatHUD_BlockAndReport*                   BlockAndReportClass;                              		// 0x0318 (0x0004) [0x0000000000000000]              
	class UCombatHUD_GameModeHelp*                     GameModeHelpClass;                                		// 0x031C (0x0004) [0x0000000000000000]              
	TArray< struct FWeaponSimpleInfo >                 CachedWeaponSimpleInfos;                          		// 0x0320 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UCombatHUD_ScoringList*                      ScoringListMC;                                    		// 0x032C (0x0004) [0x0000000000000000]              
	class UCombatHUD_ScoringRight*                     ScoringRightMC;                                   		// 0x0330 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  HelpImageMC;                                      		// 0x0334 (0x0004) [0x0000000000000000]              
	class UCombatHUD_KillMark*                         KillMarkMC;                                       		// 0x0338 (0x0004) [0x0000000000000000]              
	class UCombatHUD_HitDamageBoard*                   DamageBoardContainer;                             		// 0x033C (0x0004) [0x0000000000000000]              
	struct FHitDamageInfo                              HitDamageInfos[ 0x14 ];                           		// 0x0340 (0x0230) [0x0000000000000000]              
	class UCombatHUD_BombsitesContainer*               BombsiteContainer;                                		// 0x0570 (0x0004) [0x0000000000000000]              
	class UCombatHUD_DeviceCoolTimer*                  DeviceCoolTimerMC;                                		// 0x0574 (0x0004) [0x0000000000000000]              
	class UCombatHUD_Bomb_TimeBar*                     BombProgressBar;                                  		// 0x0578 (0x0004) [0x0000000000000000]              
	class UCombatHUD_Preset*                           PresetWindowMC;                                   		// 0x057C (0x0004) [0x0000000000000000]              
	class UCombatHUD_PresetHelp*                       PresetHelpMC;                                     		// 0x0580 (0x0004) [0x0000000000000000]              
	class UCombatHUD_PresetTimer*                      PresetTimerMC;                                    		// 0x0584 (0x0004) [0x0000000000000000]              
	class UCombatHUD_PresetSelectWaiting*              PresetSelectWaitingMC;                            		// 0x0588 (0x0004) [0x0000000000000000]              
	int                                                ShowRervPresetTime;                               		// 0x058C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UCombatHUD_SpawnPointSelection*              SpawnPointMC;                                     		// 0x0590 (0x0004) [0x0000000000000000]              
	class UCombatHUD_Chat*                             ChattingMC;                                       		// 0x0594 (0x0004) [0x0000000000000000]              
	unsigned char                                      LastChatType;                                     		// 0x0598 (0x0001) [0x0000000000000000]              
	unsigned char                                      HUD_TickGroup;                                    		// 0x0599 (0x0001) [0x0000000000000000]              
	unsigned char                                      RoundCountType;                                   		// 0x059A (0x0001) [0x0000000000000000]              
	class UCombatHUD_Message_RoundStart*               RoundStartMC;                                     		// 0x059C (0x0004) [0x0000000000000000]              
	class UCombatHUD_Message_CountDown*                CountDownMC;                                      		// 0x05A0 (0x0004) [0x0000000000000000]              
	class UCombatHUD_Message_RoundOver*                RoundOverMC;                                      		// 0x05A4 (0x0004) [0x0000000000000000]              
	class UCombatHUD_RadioMessage*                     RadioMessageMC;                                   		// 0x05A8 (0x0004) [0x0000000000000000]              
	class UCombatHUD_WarmUp*                           WarmUpMC;                                         		// 0x05AC (0x0004) [0x0000000000000000]              
	class UCombatHUD_CompetitionWarmUp*                CompetitionWarmUpMC;                              		// 0x05B0 (0x0004) [0x0000000000000000]              
	class UCombatHUD_GrenadeIndicator*                 GrenadeIndicatorMC;                               		// 0x05B4 (0x0004) [0x0000000000000000]              
	int                                                GI_DISPLAY_DISTANCE_MAX;                          		// 0x05B8 (0x0004) [0x0000000000000000]              
	float                                              GrenadeIndicator_Display_Update_Cycle;            		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              GrenadeIndicator_Display_AccumulationTime;        		// 0x05C0 (0x0004) [0x0000000000000000]              
	class UCombatHUD_ObserverInfo*                     ObserverInfoMC;                                   		// 0x05C4 (0x0004) [0x0000000000000000]              
	class UCombatHUD_ObserverHelp*                     ObserverHelpMC;                                   		// 0x05C8 (0x0004) [0x0000000000000000]              
	class UCombatHUD_DeathCamRecord*                   DeathCamRecordMC;                                 		// 0x05CC (0x0004) [0x0000000000000000]              
	class UCombatHUD_ChampionshipPlayerInfoListContainer* ChampionshipPlayerInfoListContainerMC;            		// 0x05D0 (0x0004) [0x0000000000000000]              
	class UCombatHUD_ChampionshipSpectatedPlayerInfo*  ChampionshipSpectatedPlayerInfoMC;                		// 0x05D4 (0x0004) [0x0000000000000000]              
	class UCombatHUD_BattleLog*                        BattleLogMC;                                      		// 0x05D8 (0x0004) [0x0000000000000000]              
	class UCombatHUD_Surrender*                        SurrenderMC;                                      		// 0x05DC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TestTF_Right;                                     		// 0x05E0 (0x0004) [0x0000000000000000]              
	class UCombatHUD_Message_RankUp*                   RankUpMessageMC;                                  		// 0x05E4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TestMessageBoxMC;                                 		// 0x05E8 (0x0004) [0x0000000000000000]              
	class UCombatHUD_NoticeHotKey*                     NoticeHotKeyMC;                                   		// 0x05EC (0x0004) [0x0000000000000000]              
	class UCombatHUD_MagazineState*                    MagazineStateMC;                                  		// 0x05F0 (0x0004) [0x0000000000000000]              
	class UCombatHUD_SelectPosition*                   SelectPositionMC;                                 		// 0x05F4 (0x0004) [0x0000000000000000]              
	class UCombatHUD_SelectSkillList*                  SelectSkillListMC;                                		// 0x05F8 (0x0004) [0x0000000000000000]              
	class UCombatHUD_OccupationMessage*                OccupationMsgMC;                                  		// 0x05FC (0x0004) [0x0000000000000000]              
	class UCombatHUD_NoticePosition*                   NoticePositionMC;                                 		// 0x0600 (0x0004) [0x0000000000000000]              
	class UCombatHUD_ChangeTeam*                       ChangeTeamMC;                                     		// 0x0604 (0x0004) [0x0000000000000000]              
	class UCombatHUD_VoiceChatTalking*                 VoiceChatPlayerMC;                                		// 0x0608 (0x0004) [0x0000000000000000]              
	int                                                MAXPLAYERNUM;                                     		// 0x060C (0x0004) [0x0000000000000000]              
	int                                                MaxPlayerOfTeam;                                  		// 0x0610 (0x0004) [0x0000000000000000]              
	float                                              DamageBoardOffsetX;                               		// 0x0614 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DamageBoardOffsetY;                               		// 0x0618 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class UCombatHUDEntity_Base* >             ControlUIObjects;                                 		// 0x061C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPlayerStateEffectType                      PlayerStateEffects[ 0x7 ];                        		// 0x0628 (0x0118) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     InputExpireMsg;                                   		// 0x0740 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FMapSymbolDescriptionInfo >         GlogbalMapSymbolDescriptionInfos;                 		// 0x074C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMapSymbolDescriptionInfo >         ForModeMapSymbolDescriptionInfos;                 		// 0x0758 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FClassIconStruct                            ClassIconList[ 0x4 ];                             		// 0x0764 (0x0080) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                FriendlyIFFMaxDistance;                           		// 0x07E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UCombatHUD_BigSizeStringTextBox*             TestBigTextField;                                 		// 0x07E8 (0x0004) [0x0000000000000000]              
	int                                                CrosshairLegthMaxPercent;                         		// 0x07EC (0x0004) [0x0000000000000000]              
	TArray< struct FRoundConditionAudioComponentInfo > RoundConditionAudioComponents;                    		// 0x07F0 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class UCombatHUD_ChampionshipObserverDebugMessage* ChampionshipObserverDebugField;                   		// 0x07FC (0x0004) [0x0000000000000000]              
	class UCombatHUD_TutorialDialog*                   TutorialDialog;                                   		// 0x0800 (0x0004) [0x0000000000000000]              
	class UCombatHUD_TutorialHelp*                     TutorialHelp;                                     		// 0x0804 (0x0004) [0x0000000000000000]              
	class UCombatHUD_TutorialQuest*                    TutorialQuest;                                    		// 0x0808 (0x0004) [0x0000000000000000]              
	class UCombatHUD_TutorialMessage*                  TutorialMessage;                                  		// 0x080C (0x0004) [0x0000000000000000]              
	class UCombatHUD_StatusEffect*                     StatusEffectMC;                                   		// 0x0810 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __StateEffectVoid__Delegate;                      		// 0x0814 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1772 ];

		return pClassPointer;
	};

	class ACBTeamInfo* GetTeamInfo ( int TeamIndex );
	void SetSpectatorFlashEffectGauge ( float Rate );
	void ShowSpectatorFlashEffect ( unsigned long bShow );
	void registerObserverState ( class UCombatHUD_StatusEffect* M );
	void RecvDestroyedItem ( int SlotIndex );
	void OnMatchroomSlotUpdateDel ( unsigned char Reason, struct FString Nick );
	void OnLeaveMatchChannel ( unsigned char Reason_Type );
	void DisconnetClientResult ( int CauseID );
	void OnChangedCommonOptionControl ( );
	void CallSetMessage_Tutorial ( struct FString Text );
	void CallHideMessage_Tutorial ( );
	void registerTutorialMessage ( class UCombatHUD_TutorialMessage* M );
	void CallResetQuest_Tutorial ( );
	void CallCompleteQuest_Tutorial ( struct FString Id );
	void CallAddQuest_Tutorial ( struct FString Id, struct FString Normal, struct FString complete );
	void registerTutorialQuest ( class UCombatHUD_TutorialQuest* M );
	void CallSetHelpText_Tutorial ( struct FString Title, struct FString Desc, struct FString InputKey );
	void CallHideHelpText_Tutorial ( );
	void registerTutorialHelp ( class UCombatHUD_TutorialHelp* M );
	void CallAddDialog_Tutorial ( struct FString Text, float ShowTime );
	void registerTutorialDialog ( class UCombatHUD_TutorialDialog* M );
	void CallLoadSwf ( int Mode );
	bool CanDisplayPreMTSResetMessage ( );
	void DisplayAddBlackList_Failure ( struct FString errorMsg );
	void OnAddBlackList_Success ( int beforState, struct FString PlayerName );
	void TryAddBlackList ( struct FString PlayerName );
	void SetRoundStatusDurationTime ( int Duration );
	void CallSetBroadCastObserverMode ( );
	void CallHideBroadCastViewText ( );
	void CallShowBroadCastViewText ( struct FString cameraText );
	void UpdateObserverCameraInfo ( struct FString cameraText );
	void ToggleChampionshipObserverDebugField ( );
	void AddChampionshipObserverDebugMessage ( struct FString msg );
	bool AmIChampionshipPlayer ( );
	bool AmIChampionshipObserver ( );
	void UpdateObserverCameraStyle ( unsigned long bFreeCam );
	void ToggleObserverAllUI ( );
	void ToggleObserverInformation ( );
	void ToggleObserverRoundDisplay ( );
	void ToggleObserverIFF ( );
	void ToggleObserverSummary ( );
	void ToggleObserverChat ( );
	bool IsDisplayedAnyESCMenu ( );
	void ToggleMouse ( unsigned long bShow );
	void SetModeGuideData ( );
	void ShowModeGuide ( unsigned long bShow );
	void registerModeGuide ( class UCombatHUD_GameModeHelp* M );
	void HideChangeTeamScene ( );
	void ShowChangeTeamScene ( unsigned long bAnimation );
	void HidePresetWaitingScene ( );
	void HideSpawnPointSelection ( );
	void HidePresetLockScene ( );
	void ShowPresetWaitingScene ( );
	void ShowPresetLockScene ( int Current, int Max );
	void eventDisplayModeScore ( int Score );
	void ShowReturnToMatchroomDialog ( );
	void receiveCommonOptionCancelBtnClick ( );
	void receiveCommonOptionSaveBtnClick ( );
	bool IsShowCommonOption ( );
	void ToggleOption ( );
	void registerCommonOption ( class UCombatCommon_Option* M );
	void CancelOption ( );
	void HideOption ( );
	void ShowOption ( );
	struct FString GetImageReportURL ( );
	void OnComplaintReceiptFailureOK ( struct FEventData ev );
	void OnComplaintReceiptFailure ( int userID, unsigned char Error_Code );
	void OnComplaintReceiptSuccessOK ( struct FEventData ev );
	void OnComplaintReceiptSuccess ( int Complaint_UserID, unsigned char COMPLAINT_TYPE );
	void receiveBlackListDeclarationCancelButton ( );
	void receiveBlackListDeclarationOkButton ( int Index );
	void receiveBlackListPlayerListCancelButton ( );
	void receiveBlackListPlayerListOkButton ( struct FString ReportPlayerName );
	void HideBlockAndReport ( );
	void ShowBlockAndReport ( );
	void registerBlackList ( class UCombatHUD_BlockAndReport* M );
	void receiveOptionMenuButton ( int Index );
	void HideMenu ( );
	void ShowMenu ( );
	void registerOptionMenu ( class UCombatInGameOptionMenu* M );
	void UpdateMissionObjectIconList ( );
	void InitMissionActor ( );
	bool SetMissionActorState ( unsigned char TeamIndex, int MissionActorIndex, unsigned char CurrState );
	void UpdateReservedWeapon ( );
	void UpdateObserverWeaponInfo ( class ACombatPawn* ViewTargetPawn );
	bool UpdateHP ( int Health, int HealthMax, unsigned long bSpectating );
	void SetPortraitIcon ( struct FString inImgPath );
	void UpdateBottomEffect ( unsigned long _bOn );
	void UpdateTopEffect ( unsigned long _bOn );
	void ClearViewTargetInfo ( );
	void UpdateViewTargetInfo ( );
	bool eventFilterButtonInput ( int ControllerId, struct FName ButtonName, unsigned char InputEvent );
	void SetDisplaySelectingWeapon ( unsigned long bVisible );
	int GetClassSmallImageID ( unsigned char classType_ );
	int GetClassBigImageID ( unsigned char classType_ );
	struct FString GetClassSmallImageName ( unsigned char classType_ );
	struct FString GetClassBigImageName ( unsigned char classType_ );
	void UpdatePlayerVoice ( class UClass* VoiceClass );
	void HideHotKey ( );
	bool IsShowHotKey ( );
	void DisplayHotKey ( unsigned char hotKeyType_, struct FString* hotKey_, struct FString* actionName_ );
	void HideAnimationMilitaryPosition ( );
	void InitSkillList ( );
	void HideSelectSkillList ( );
	void ShowSelectSkillList ( );
	void SetGlobalCoolTimeText ( int GroupIndex, int CoolTime );
	void SetCoolTimeText ( int GroupIndex, int CoolTime );
	void MilitaryPositionHide ( );
	void ShowMilitaryPosition ( );
	void SetSelectPosition ( int Index );
	void SetShowBlinkMessageFadeInOutAnimation ( struct FString Message );
	void SetShowMessageFadeInOutAnimation ( struct FString Message );
	void SetNoticePositionMessage ( struct FString Message, unsigned long SetAnimation );
	void SetShowMessageFadeInOutCombinationText ( int Id, struct FString Replace, struct FString With, struct FString Replace01, struct FString With01, struct FString Replace02, struct FString With02, struct FString Replace03, struct FString With03 );
	void SetNoticepositionCombinationText ( int Id, struct FString Replace, struct FString With, struct FString Replace01, struct FString With01, struct FString Replace02, struct FString With02, struct FString Replace03, struct FString With03 );
	void HideAnimationNoticePositionMessage ( );
	void HideNoticePositionMessage ( );
	void ShowNoticePositionMessage ( );
	void ClearTestMessageBox ( );
	void UpdateTestMessageBox ( struct FString msg_ );
	void HideTestMessageBox ( );
	void ShowTestMessageBox ( );
	void eventOnClose ( );
	void ShowTacticalGearSetIcon ( );
	void NotifyChangedSkillOption ( );
	void NotifyChangeSkillGroupNum ( );
	void hidePassiveSkill ( );
	void ShowUpdatePassiveSkillByID ( int ImageID );
	void ShowUpdatePassiveSkill ( struct FString ImagePath );
	void NotifyChangedCR ( );
	bool IsInitSelectposition ( );
	bool IsInitSkillList ( );
	void UpdateSkillList ( unsigned char updateCause );
	void SelectSkillList ( int Index );
	void NotifyFailedBuySkill ( int TextID, int errorType );
	void NotifyFailedNoLicenseSkill ( );
	void NotifyBuySkill ( int TextID );
	void NotifyUnlockSkill ( int TextID );
	bool IsClassSystemDisplayLog ( );
	void UpdateRankUI ( );
	void NotifyRankUp ( );
	bool OnNotifyKeyInputSignal ( );
	void PushDialog_InputExpireTime ( class ACombatPlayerControllerBase* LocalPC );
	bool OnInputExpireTime ( class ACombatPlayerControllerBase* LocalPC );
	void DrawTestText ( struct FString msg );
	void ResetPlayerUI ( );
	void ResetGameUI ( );
	void Reset ( );
	bool CheckObject ( class ACombatProjectile* CheckProjecttile, class ACombatPawn* CP );
	void UpdateGrenadeIndicator ( float Delta );
	void DisplayPlayerInOutMessage ( unsigned long bIn, struct FString PlayerName );
	bool IgnoreTheDeadChat ( int senderUID, unsigned char* out_senderDeath );
	bool IgnoreTeamChat ( unsigned long bGameManager, int senderUID, unsigned char* out_senderDeath );
	bool GetProfileSettings_IgnoreTeamChat ( );
	bool IgnoreAllChat ( unsigned long bGameManager, int senderUID, unsigned char* out_senderDeath );
	bool IgnoreAllChatByHost ( );
	bool GetProfileSettings_IgnoreAllChat ( );
	bool IgnoreWhisperChat ( struct FString senderName );
	bool IgnoreClanChat ( int senderUID );
	void UpdateChampionshipObserverChatting ( int senderUID_, struct FString msg_ );
	void UpdateTeamChatting ( int senderUID_, struct FString msg_, unsigned long bGameManager_ );
	void UpdateWhisperChatting ( unsigned char chatType, struct FString TargetName, struct FString msg );
	void UpdateTsMessage ( struct FString msg );
	void UpdateClanLevelUp ( struct FString msg );
	void UpdateClanChatting ( int userID, struct FString TargetName, struct FString msg );
	void UpdateWholeChatting ( int senderUID_, struct FString msg_, unsigned long bGameManager_ );
	void UpdateRadioMessage ( int senderUID, unsigned char UniqueRadioID, unsigned char chatType, unsigned long bGameManager_ );
	bool CanFocusChatUI ( );
	bool IsChatUIFocused ( );
	bool IsChatUIDisplayed ( );
	void ChatPageDown ( );
	void ChatPageUp ( );
	void ShowChat ( );
	void FocusChat ( int chatOpenType );
	void receiveHideComplete ( );
	void receiveCloseChatInput ( struct FString chatType );
	void receiveChattingFocus ( unsigned long bFocus );
	void AnalyzeChatMessage ( struct FString Type, struct FString WhisperName, struct FString* msg );
	void receiveMessage ( struct FString msg, struct FString Type, struct FString whisperTargetNickName );
	void ToggleChatUI ( );
	void CallKillFocus ( );
	bool CheckUserCommand ( struct FString commandMsg_ );
	void DisplaySpectTargetUI ( );
	void CheckGarbageResource ( );
	void StopOperatingEffect ( );
	void UpdateOperatingEffect ( );
	void PlayOperatingEffect ( );
	void UpdateSpectateEffect ( );
	void StopSpectateEffect ( );
	void PlaySpectateEffect ( );
	void UpdateDeathEffect ( );
	void StopDeathEffect ( );
	void PlayDeathEffect ( );
	void ForceUpdatePlayerState ( );
	void UpdateActivateHUD ( unsigned long bChangedGameState, unsigned long bChangedPlayerState, unsigned long bForce );
	void HidePresetSelectFinishButton ( );
	void ShowPresetSelectFinishButton ( );
	void HidePresetTimer ( );
	void UpdatePresetTimer ( int StartTimeSec );
	void SetPresetTimer ( int TotalTimeSec );
	void ShowPresetHelp ( );
	void HidePresetHelp ( );
	void HidePlayerClass ( );
	void DisplaySpawnPointSelection ( unsigned char SP_zeroBase, unsigned long bShowAnimation, unsigned long bSmallSize );
	void DisplayPreset ( unsigned char Preset_zeroBase, unsigned long bShowAnimation, unsigned long bSmallSize );
	void OnPlayKillMarkSound ( class UCombatDataTableRefGameScoring* refScoring_ );
	void DisplayKillMark ( class UCombatDataTableRefGameScoring* refScoring_ );
	void receiveKillMessageQueing ( int scoringTypeIdx );
	void DisplayStackedScoringText ( struct FString ScoreName, int Score, unsigned char TextColorNumber );
	void DisplayScoringText ( struct FString ScoreName, int Score, struct FString RefTableCodeName );
	void DisplayImmediateScoringText ( struct FString ScoreName, int Score );
	void registerScoringRight ( class UCombatHUD_ScoringRight* M );
	void keyEsc ( );
	void HideVoiceChatOption ( );
	void ShowVoiceChatOption ( );
	void OnGameSurrendRequestFailed ( );
	void GameSurrenderRequest ( );
	bool IsCanSurrend ( );
	void ReturnToMatchroom ( );
	void OnCloseGameDialogButton_Cancel ( struct FEventData ev );
	void OnCloseGameDialogButton_OK ( struct FEventData ev );
	struct FLinearColor ChangeColor ( struct FLinearColor wantColor );
	void ShowHelpImage ( unsigned long bShow );
	void RecvFailReturnToMatchRoom ( unsigned char errorType );
	void RequestReturnToMatchRoom ( );
	bool AddWeaponSimpleInfo ( int RefItemIndex );
	struct FString GetWeaponImagePath ( int RefItemIndex );
	void UpdateKillMarkToVictimName ( struct FString VictimName );
	void UpdateKillDeathList ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Killed, int WeaponIndex, int Option );
	void UpdateKillDeathListToSuicide ( class APlayerReplicationInfo* Killed, class UClass* DamageType );
	void DisplayRespawn ( float Time );
	void DrawLOPersonalMessage ( int TextID, struct FString LOName );
	void BroadcastLOStateMessage ( int TextID, struct FString LOName, struct FString LOOperatorName );
	void ClearDeviceCoolTimer ( );
	void SetDeviceCoolTimer ( float Duration );
	bool IsVisibleBombProgressBar ( );
	void HideBombProgressBar ( );
	void EndBombProgressBar_Defuse ( int remainTime );
	void StartBombProgressBar_Defuse ( unsigned long bAnimation, unsigned long bActivateC4Kit );
	void SetBombBombProgressBar_Plant ( unsigned long bActivateC4Kit );
	void CallLoadHostageBar ( int Num );
	void CallLoadFlag ( int Num );
	void CallLoadLevelObject ( int Num );
	void GetIFF ( class UCombatHUD_IFFObject** NewObject );
	void ClearIFF ( class UCombatHUD_IFFObject* ClearObject );
	bool IsDisplayedKillerInfo ( );
	void SetKillCamMessage ( );
	void HideChampionshipSpectatedPlayerInfo ( );
	void HideObserverInfo ( );
	void HideBattleLog ( );
	void HideDeathCamRecord ( );
	void DisplayKillCamMessage ( );
	void DisplayLocalMessage_Auto ( struct FString msg );
	void DisplayGlobalMessage ( int MessageType, struct FString msg, struct FString subMsg );
	int GetRounOverPoint ( unsigned char TeamIndex );
	void DisplayRoundOver ( unsigned char winType, unsigned long bIsFinalRound );
	void SetRoundReasonLabels ( int winLocalID, int loseLocalID );
	void SaveRoundCountType ( );
	int GetMissionType ( int* out_currentRound_ );
	void DisplayMission ( struct FString missionMsg, int Round );
	void DisplayCountDown ( int Count );
	void FadeInEnd ( int Id );
	int GetSpaceOfDirHits ( );
	void UpdateHit ( unsigned long bDirectAttack, int attackerID, struct FVector HitLocation );
	int GetLastCrosshairType ( );
	int GetCrosshairMaxLengthPercent ( );
	unsigned char GetMyTeamNum ( );
	void NotifyWeaponEquipped ( unsigned long bStart_, unsigned long bIsLaserSight_ );
	void NotifyWeaponReloaded ( unsigned long bStart_, unsigned long bIsLaserSight_ );
	void UpdateCrosshair ( int crosshairType_, int radius_, int lengthPercent_, int radius_idle, int length_idle );
	void ShowHitMark ( );
	void ReloadCrosshair ( );
	void SetOption_TeamIFFViewValue ( class UCombatProfileSettings* ProfileSettings, int Value );
	void UpdateHoldmode ( );
	void UpdateTeamIFFView ( );
	void UpdateFlipMesh ( );
	bool UpdateGrenadeCount ( unsigned long bChangeWeapon_ );
	bool UpdateAmmo ( unsigned long bShowRedEffect );
	bool UpdateWeaponKillCount ( );
	bool UpdateWeaponInfo ( );
	void HideSkillActorIndicator ( struct FString Index );
	void ShowSkillActorIndicator ( struct FString Index, struct FString ImgPath, int Lifetime );
	void CallDamageBlood ( int remainHP );
	float ConvertDegreeToQuarter ( float DegreeAngle );
	void InitHitIndicator ( float Time );
	void UpdateHitIndicator ( float Time );
	void damageAniComplete ( class UGFxObject* dBoardObject );
	void CallDamageAni ( struct FString boardName );
	void UpdateDamageBoard ( );
	int GetUnusedDamageboard ( );
	void SetDamageBoard ( struct FVector victimLoc, int colliHeight, int hitDamage );
	void PlayRoundSound ( unsigned char NewState );
	class UAudioComponent* GetRoundConditionSound ( unsigned char Type, int TeamIndex );
	void UpdateRemainTime ( );
	void UpdateCredit ( );
	int GetRoundPoint ( unsigned char TeamIndex );
	void UpdateRoundPoint ( );
	void UpdateRoundWinCount ( );
	void UpdateAlivePlayers ( );
	void ClearRoundStatusBoard ( );
	void UpdateRoundStatusBoard ( );
	void ChangeRoundStausMode ( int MyTeamIndex );
	void Tick ( float DeltaSeconds );
	bool IsCanTick ( );
	void PreTick ( );
	void StateEffectVoid ( );
	void ForceTeamChanged ( );
	void SetMainHud ( );
	void SetModeMapRefID ( );
	void InitUI ( );
	void Init ( class ULocalPlayer* Player );
	void registerSurrender ( class UCombatHUD_Surrender* M );
	void registerCombatHistory ( class UCombatHUD_BattleLog* M );
	void registerBroadCastObserverDebug ( class UCombatHUD_ChampionshipObserverDebugMessage* M );
	void ResetVoiceChatUI ( );
	void UpdateTalkingUser ( );
	void registerVoiceChatPlayer ( class UCombatHUD_VoiceChatTalking* M );
	void registerChangeTeam ( class UCombatHUD_ChangeTeam* M );
	void registerBroadCastObserverBlueTeam ( class UCombatHUD_ChampionshipPlayerInfoList* M );
	void registerBroadCastObserverRedTeam ( class UCombatHUD_ChampionshipPlayerInfoList* M );
	void registerBroadCastObserverBottomBar ( class UCombatHUD_ChampionshipSpectatedPlayerInfo* M );
	void registerObserverHelp ( class UCombatHUD_ObserverHelp* M );
	void registerObserverInfo ( class UCombatHUD_ObserverInfo* M );
	void registerDeathCamRecord ( class UCombatHUD_DeathCamRecord* M );
	void registerOccupationMessage ( class UCombatHUD_OccupationMessage* M );
	void registerTestBigTextField ( class UCombatHUD_BigSizeStringTextBox* M );
	void registerSelectSkill ( class UCombatHUD_SelectSkillList* M );
	void startAnimationComplete ( );
	void receivePositionSelectFadeOutAnimationComplete ( );
	void registerSelectPostionInfo ( class UGFxObject* M );
	void registerPositionSelect ( class UCombatHUD_SelectPosition* M );
	void registerSkillNoticeMessage ( class UCombatHUD_NoticePosition* M );
	void registerMagazineState ( class UCombatHUD_MagazineState* M );
	void registerNoticeHotKey ( class UCombatHUD_NoticeHotKey* M );
	void registerTestMessage ( class UGFxObject* M );
	void registerRankUpMessage ( class UCombatHUD_Message_RankUp* M );
	void registerIngameHelp ( class UGFxObject* M );
	void registerRadioMessage ( class UCombatHUD_RadioMessage* M );
	void registerCompettionWarmUp ( class UCombatHUD_CompetitionWarmUp* M );
	void receiveWarmUpHideAnimationComplete ( );
	void SetModeGuideString ( struct FString ModeGuideKey, struct FString ModeGuide );
	void registerWarmUp ( class UCombatHUD_WarmUp* M );
	void registerCountDown ( class UCombatHUD_Message_CountDown* M );
	void registerRoundEnd ( class UCombatHUD_Message_RoundOver* M );
	void registerRoundStart ( class UCombatHUD_Message_RoundStart* M );
	void registerChatting ( class UCombatHUD_Chat* M );
	void registerScoring2 ( class UCombatHUD_ScoringList* M );
	void registerGlobalMessage ( class UCombatHUD_GlobalMessage* M );
	void UpdateLocalPreset ( );
	void receivePresetHide ( );
	void registerPresetAfterWait ( class UCombatHUD_PresetSelectWaiting* M );
	void registerSelectRespawn ( class UCombatHUD_SpawnPointSelection* M );
	void registerPresetTimeBar ( class UCombatHUD_PresetTimer* M );
	void registerPresetHelp ( class UCombatHUD_PresetHelp* M );
	void registerPreset ( class UCombatHUD_Preset* M );
	void registerIFFHUD ( class UCombatHUD_IFFContainer* M );
	void registerComMs2 ( class UCombatHUD_Message_Personal_Auto* M );
	void registerCrossHair ( class UCombatHUD_Aim* M );
	void registerKillMessage ( class UCombatHUD_KillMark* M );
	void registerKillInfo ( class UCombatHUD_KillDeathList* M );
	void registerTacticalMapAndScoreBoard ( class UCombatHUD_TacticalMapAndScoreboard* M, int MiniSmall, int MiniMedium, int MiniLarge, int wholeWidth, int wholeHeight, int hybridWidth, int hybridHeight, int BroadcastingWidth, int BroadcastingHeight );
	void registerRoundStatus ( class UCombatHUD_RoundStatusBar* M );
	void registerTimeBar ( class UCombatHUD_RespawnProgressBar* M );
	void registerHd_cooltime ( class UCombatHUD_DeviceCoolTimer* M );
	void registerTimeBarBomb ( class UCombatHUD_Bomb_TimeBar* M );
	void registerAmmoBar ( class UCombatHUD_WeaponInfo* M );
	void registerCharacterInfoBar ( class UCombatHUD_CharacterInfo* M );
	bool CanUseClassSystem ( );
	void ShowMiniHUD ( unsigned long bMini_ );
	class ACombatPawn* GetViewTargetPawn ( );
	class ACombatPlayerReplicationInfo* GetViewTargetPRI ( );
	class ACombatPC* GetMyPc ( );
	class ACombatPawn* GetMyPawn ( );
	class ACombatPlayerReplicationInfo* GetMyPRI ( );
	class UCombatInGameLocalSoundGroup_Base* GetSoundGroup ( );
	void AllFlashLoaded ( );
	void RegisterGOContainer ( );
	void RegisterGrenadeIndicator ( );
	void RegisterDamageBoard ( );
	void RegisterHitIndicator ( );
	void RegisterMessagePersonal ( );
	void loadedHUD ( );
	void registerCommonSystemCounter ( class UCombatHUD_SystemCounter* M );
	void HideCommand ( );
	void ShowCommand ( );
	void registerHUD ( class UCombatMain_HUD* M );
};

UClass* UCombatTeamGameMovie::pClassPointer = NULL;

// Class CombatGame.CombatAIGameMovie
// 0x002C (0x084C - 0x0820)
class UCombatAIGameMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_WaveModePlayerList*               WaveModePlayerList;                               		// 0x0820 (0x0004) [0x0000000000000000]              
	class UCombatHUD_WaveModePlayTime*                 WaveModePlayTime;                                 		// 0x0824 (0x0004) [0x0000000000000000]              
	class UCombatHUD_Message_Warning*                  Message_WarningMC;                                		// 0x0828 (0x0004) [0x0000000000000000]              
	int                                                LastPlayTime;                                     		// 0x082C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCanUpdateOrder : 1;                              		// 0x0830 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNeedUpdateOrder : 1;                             		// 0x0830 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< struct FPlayerListInfo >                   PlayerListData;                                   		// 0x0834 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UCombatHUDOption_AIWaveRoundStatus*          RoundStatusOption;                                		// 0x0840 (0x0004) [0x0000000000000000]              
	class UCombatHUD_AIMissionActorContainer*          LevelObjectContainer;                             		// 0x0844 (0x0004) [0x0000000000000000]              
	class UCombatHUD_AIDefenseKillCombo*               AIDefenseKillComboMC;                             		// 0x0848 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1773 ];

		return pClassPointer;
	};

	void DisplayComboText ( int Point );
	void InitKillComboUI ( );
	void UpdateKillDeathList ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Killed, int WeaponIndex, int Option );
	void UpdateKillComboUI ( int Combo, struct FString Description );
	void SetValidComboTime ( int Sec );
	void SetComboImageUrl ( struct FString ImagePath );
	void PauseComboUI ( unsigned long bPause );
	void HideComboUI ( );
	void registerAiCombo ( class UCombatHUD_AIDefenseKillCombo* M );
	void SetUpdateOrder ( );
	void NotifyWaveModeToFlash ( unsigned long aimode );
	void UpdateLevelObjectIcon ( float DeltaSeconds );
	void registerLevelObject ( class UCombatHUD_AIMissionActor* M );
	void InitMissionActor ( );
	void RegisterGOContainer ( );
	void UpdatePlayTime ( );
	struct FString GetTwoDigits ( int Time );
	struct FString MakePlayTimeString ( int Time );
	void StartWarning ( );
	void registerWarning ( class UCombatHUD_Message_Warning* M );
	void CallPlayTime ( int Time );
	void registerAiPlayTime ( class UCombatHUD_WaveModePlayTime* M );
	void UpdatePlayerInfo ( );
	void registerAiPlayerList ( class UCombatHUD_WaveModePlayerList* M );
	void Tick ( float DeltaSeconds );
	void UpdateRoundStatusBoard ( );
	void ChangeRoundStausMode ( int MyTeamIndex );
	int GetRounOverPoint ( unsigned char TeamIndex );
	int GetPlayTimeForMatchEndUI ( unsigned char TeamIndex );
	void DisplayRoundOver ( unsigned char winType, unsigned long bIsFinalRound );
	void registerHUD ( class UCombatMain_HUD* M );
};

UClass* UCombatAIGameMovie::pClassPointer = NULL;

// Class CombatGame.CombatPracticeGameMovie
// 0x000C (0x082C - 0x0820)
class UCombatPracticeGameMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_PracticeGameHelp*                 PracticeGameHelpMC;                               		// 0x0820 (0x0004) [0x0000000000000000]              
	class UCombatHUD_PracticeGameRoundStatus*          PracticeGameRoundStatusMC;                        		// 0x0824 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PracticeGameMessage;                              		// 0x0828 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1774 ];

		return pClassPointer;
	};

	void OnChangedCommonOptionControl ( );
	void ResetPracticeGameTimer ( );
	void PausePracticeGameTimer ( );
	void ResumePracticeGameTimer ( );
	void SetPracticeGameMessage ( struct FString inString );
	void SetPeopleCount ( int inCount );
	void registerPracticeRoundStatus ( class UCombatHUD_PracticeGameRoundStatus* inRoundStatus );
	void registerPracticeHelp ( class UCombatHUD_PracticeGameHelp* inPracticeGameHelp );
	void ShowReturnToMatchroomDialog ( );
	void registerOptionMenu ( class UCombatInGameOptionMenu* M );
	void ReturnToMatchroom ( );
	void AnalyzeChatMessage ( struct FString Type, struct FString WhisperName, struct FString* msg );
	void registerSelectSkill ( class UCombatHUD_SelectSkillList* M );
	void registerRankUpMessage ( class UCombatHUD_Message_RankUp* M );
	void registerSelectPostionInfo ( class UGFxObject* M );
	void registerPositionSelect ( class UCombatHUD_SelectPosition* M );
	void registerScoringRight ( class UCombatHUD_ScoringRight* M );
	void registerScoring2 ( class UCombatHUD_ScoringList* M );
	void registerKillInfo ( class UCombatHUD_KillDeathList* M );
	void registerKillMessage ( class UCombatHUD_KillMark* M );
	void UpdatePlayerVoice ( class UClass* VoiceClass );
	void registerRadioMessage ( class UCombatHUD_RadioMessage* M );
	void SetModeGuideData ( );
	void ShowModeGuide ( unsigned long bShow );
	void SetModeGuideString ( struct FString ModeGuideKey, struct FString ModeGuide );
	void registerModeGuide ( class UCombatHUD_GameModeHelp* M );
	void SetRoundStatusDurationTime ( int Duration );
	void ToggleObserverRoundDisplay ( );
	void eventDisplayModeScore ( int Score );
	void UpdateAlivePlayers ( );
	void UpdateRoundPoint ( );
	void UpdateRoundWinCount ( );
	void ChangeRoundStausMode ( int MyTeamIndex );
	void UpdateRoundStatusBoard ( );
	void UpdateRemainTime ( );
	void registerRoundStatus ( class UCombatHUD_RoundStatusBar* M );
	void SendLeavePracticeGameReq ( );
};

UClass* UCombatPracticeGameMovie::pClassPointer = NULL;

// Class CombatGame.CombatSEIMovie
// 0x0008 (0x0828 - 0x0820)
class UCombatSEIMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_OccupiedAreaContainer*            OccupiedAreaContainer;                            		// 0x0820 (0x0004) [0x0000000000000000]              
	int                                                OccupiedAreaCount;                                		// 0x0824 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1775 ];

		return pClassPointer;
	};

	int GetRounOverPoint ( unsigned char TeamIndex );
	int GetRoundPoint ( unsigned char TeamIndex );
	void ClearRoundStatusBoard ( );
	void ChangeRoundStausMode ( int MyTeamIndex );
	void Tick ( float DeltaSeconds );
	void RegisterGOContainer ( );
	void UpdateOccupiedArea ( float DeltaSeconds );
	void registerLevelObject ( class UCombatHUD_OccupiedArea* M );
};

UClass* UCombatSEIMovie::pClassPointer = NULL;

// Class CombatGame.CombatTutorialGameMovie
// 0x001C (0x083C - 0x0820)
class UCombatTutorialGameMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_BombsContainer*                   BombContainer;                                    		// 0x0820 (0x0004) [0x0000000000000000]              
	class UCombatHUD_TutorialLOContainer*              TutorialLOContainer;                              		// 0x0824 (0x0004) [0x0000000000000000]              
	int                                                BombsiteCount;                                    		// 0x0828 (0x0004) [0x0000000000000000]              
	int                                                BombCount;                                        		// 0x082C (0x0004) [0x0000000000000000]              
	int                                                LOCount;                                          		// 0x0830 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUpdateEquippedBomb : 1;                          		// 0x0834 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bUpdateEquippedBombSite : 1;                      		// 0x0834 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsDisplayedBombLimitTime : 1;                    		// 0x0834 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bStartSpectDefuseUI : 1;                          		// 0x0834 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	int                                                LastBombDefuseTimeCount;                          		// 0x0838 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1776 ];

		return pClassPointer;
	};

	void ShowReturnToMatchroomDialog ( );
	void ReturnToMatchroom ( );
	void registerOptionMenu ( class UCombatInGameOptionMenu* M );
	int GetRounOverPoint ( unsigned char TeamIndex );
	void NotifyDemolitionSystemMessage ( int TextID, struct FString OwnerCallSign );
	void DisplaySpectTargetUI ( );
	int GetRoundPoint ( unsigned char TeamIndex );
	void ClearRoundStatusBoard ( );
	void ChangeRoundStausMode ( int MyTeamIndex );
	int GetMissionType ( int* out_currentRound_ );
	void UpdateBombEquippedHUD ( float DeltaSeconds );
	bool CheckNearByBombSite ( );
	void UpdateBombs ( float DeltaSeconds );
	void UpdateBombsites ( float DeltaSeconds );
	void UpdateRemainTime ( );
	void UpdateLOHUDIcon ( float DeltaSeconds );
	void CallLoadTutorialLevelObject ( int Num );
	void Tick ( float DeltaSeconds );
	void InitUI ( );
	void registerFlag ( class UCombatHUD_Bomb* M );
	void registerTutorialLevelObject ( class UCombatHUD_TutorialLeveObject* M );
	void registerKillInfo ( class UCombatHUD_KillDeathList* M );
	void registerLevelObject ( class UCombatHUD_Bombsite* M );
	void HideBombsiteIcons ( unsigned long Hide );
	void HideBombIcons ( unsigned long Hide );
	void UpdateActivateHUD ( unsigned long bChangedGameState, unsigned long bChangedPlayerState, unsigned long bForce );
	void RegisterGOContainer ( );
};

UClass* UCombatTutorialGameMovie::pClassPointer = NULL;

// Class CombatGame.CombatHandActor
// 0x0010 (0x01E4 - 0x01D4)
class ACombatHandActor : public AActor
{
public:
	class ACombatGuy_Player*                           OwnerPlayer;                                      		// 0x01D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatWeapon*                               CurrentWeapon;                                    		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x01DC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x01E0 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1777 ];

		return pClassPointer;
	};

	void ChangeVisibility ( unsigned long bVisible );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance );
	void SetParentMeshComponent ( class USkeletalMeshComponent* ParentMesh );
	void DetachWeapon ( class ACombatWeapon* OldWeapon );
	void AttachWeapon ( class ACombatWeapon* Weapon );
	void Destroyed ( );
	void PostBeginPlay ( );
};

UClass* ACombatHandActor::pClassPointer = NULL;

// Class CombatGame.CombatHostageActor
// 0x014C (0x0320 - 0x01D4)
class ACombatHostageActor : public AActor
{
public:
	int                                                MoveHealthMax;                                    		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TransformObjectHealthMax;                         		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CanTalkDistance;                                  		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SqrtCanTalkDistance;                              		// 0x01E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatRepairingArea*                        RepairingArea;                                    		// 0x01E4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bGodMode : 1;                                     		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTestMode : 1;                                    		// 0x01E8 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bIsTransformation : 1;                            		// 0x01E8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsRepair : 1;                                    		// 0x01E8 (0x0004) [0x0000000000002020] [0x00000008] ( CPF_Net | CPF_Transient )
	int                                                Health;                                           		// 0x01EC (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     HostageName;                                      		// 0x01F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x01FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FReplicatedMeshInfo                         ReplicatedMesh;                                   		// 0x0200 (0x001C) [0x0000000000082020]              ( CPF_Net | CPF_Transient | CPF_Component )
	struct FName                                       AnimNodeSlot;                                     		// 0x021C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimTime_UnlockHandcuffs;                         		// 0x0224 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       UnlockHandcuffsAnim;                              		// 0x0228 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimTime_GroggyStart;                             		// 0x0230 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       GroggyStartAnim;                                  		// 0x0234 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimTime_GroggyEnd;                               		// 0x023C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       GroggyEndAnim;                                    		// 0x0240 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimTime_CoverStart;                              		// 0x0248 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       CoverStartAnim;                                   		// 0x024C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimTime_Death;                                   		// 0x0254 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       DeathAnim;                                        		// 0x0258 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HitAnim;                                          		// 0x0260 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CoverHitAnim;                                     		// 0x0268 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeSlot*                               FullBodyAnimSlot;                                 		// 0x0270 (0x0004) [0x0000000000000000]              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0274 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      AnimState;                                        		// 0x0278 (0x0001) [0x0000000000000000]              
	unsigned char                                      currentVoiceState;                                		// 0x0279 (0x0001) [0x0000000000000000]              
	struct FName                                       StateName;                                        		// 0x027C (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     currentStateUIName;                               		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     IconName;                                         		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USeqAct_Interp*                              SequnceObject;                                    		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              MoveTrackEndTime;                                 		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              AnimPosition;                                     		// 0x02A4 (0x0004) [0x0000000000000000]              
	float                                              MovingRate;                                       		// 0x02A8 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             HitParticleTemplate;                              		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   HitSound;                                         		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FHostageTakeHitInfo                         LastTakeHitInfo;                                  		// 0x02B4 (0x0014) [0x0000000000000020]              ( CPF_Net )
	class USoundCue*                                   Test_TalkSound;                                   		// 0x02C8 (0x0004) [0x0000000000000000]              
	TArray< struct FPassiveWheel >                     Wheels;                                           		// 0x02CC (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	int                                                RepairingPlayerCount;                             		// 0x02D8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                LastRepairingPlayerCount;                         		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxRepairingPlayerCount;                          		// 0x02E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class ACombatRescuePC* >                   RepairingPlayers;                                 		// 0x02E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< float >                                    RepairTime;                                       		// 0x02F0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              RepairingTime;                                    		// 0x02FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeForUnit;                                      		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HealthHealStep;                                   		// 0x0304 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAudioComponent*                             HostageVocieSounds[ 0x6 ];                        		// 0x0308 (0x0018) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1778 ];

		return pClassPointer;
	};

	int GetHealth ( );
	void OnCombatMeshTransform ( class USeqAct_CombatMeshTransform* Action );
	void eventSetTransform ( class USkeletalMeshComponent* NewMesh, struct FVector placeLoc, struct FRotator placeRot );
	void ChangeState ( unsigned char NewState, unsigned long bNotPlayWhenPlaying );
	void PlayVoice ( unsigned char NewState, unsigned long bNotPlayWhenPlaying );
	float GetCollisionHeight ( );
	void NotifyEscapeHostage ( );
	int GetHealthMax ( );
	void eventReplicatedEvent ( struct FName VarName );
	void PlayHit ( );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void StopHostage ( );
	void InitSequence ( );
	void UpdateRepairState ( unsigned char RepairState, class ACombatRescuePC* Target );
	void NotifyChangeRepairCount ( float RemainTimeForFullHealth );
	void UpdateTimeForUnit ( float RemainTimeForFullHealth, int RemainingHealth );
	void RemoveAllRepairer ( );
	void RemoveRepairer ( class ACombatRescuePC* Target );
	void UpdateRepairingPlayerCount ( );
	void AddRepairer ( class ACombatRescuePC* Target );
	void UpdateHostageStateUI ( );
	bool GetNextAnimState ( unsigned char* nextAnimState );
	struct FString GetIconName ( );
	struct FString GetStateUIName ( );
	void OnActivate ( );
	bool CanRange ( class ACombatGuy_Player* Target );
	bool CanTalk ( class ACombatGuy_Player* Target );
	bool CanRepair ( );
	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventTick ( float DeltaTime );
	void CheckValidRepair ( class ACombatRescuePC* Target );
	void PreRepair ( );
	void ResetRepairTempData ( );
	void eventReset ( );
	void Init ( );
	unsigned char eventScriptGetTeamNum ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventPostBeginPlay ( );
};

UClass* ACombatHostageActor::pClassPointer = NULL;

// Class CombatGame.CombatHUD
// 0x0034 (0x0490 - 0x045C)
class ACombatHUD : public AHUD
{
public:
	class UClass*                                      MovieClass;                                       		// 0x045C (0x0004) [0x0000000000000000]              
	class UCombatGFxMoviePlayer*                       Movie;                                            		// 0x0460 (0x0004) [0x0000000000000000]              
	class UClass*                                      HUDSoundGroupClass;                               		// 0x0464 (0x0004) [0x0000000000000000]              
	class UCombatHUDSoundGroup*                        HUDSoundGroup;                                    		// 0x0468 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDrawPauser : 1;                                  		// 0x046C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTick : 1;                                        		// 0x046C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDebugAI : 1;                                     		// 0x046C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bShowServerTime : 1;                              		// 0x046C (0x0004) [0x0000000000000000] [0x00000008] 
	struct FString                                     ChangeListVersion;                                		// 0x0470 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UCombatAudioChannelSystem*                   AudioChannelSystem;                               		// 0x047C (0x0004) [0x0000000000000000]              
	TArray< struct FServerTimePositionInfoStruct >     ServerTimePositionInfo;                           		// 0x0480 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                ServerTimePosition;                               		// 0x048C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1779 ];

		return pClassPointer;
	};

	bool IsCanDisplayWeaponKill ( int ItemIndex );
	bool OnDisconnectMatchServerByAFK ( );
	bool OnNotifyKeyInputSignal ( );
	bool OnInputExpireTime ( class ACombatPlayerControllerBase* LocalPC );
	void GMCMD ( );
	void RecvFailBlockPlayGame_WrongActivatedType ( );
	void RecvSuccessBlockPlayGame ( unsigned char activatedType );
	class UCombatFrontEnd_Scene* GetCurrentFrontEndScene ( );
	void NotifySpectatorMode ( );
	void Reset ( );
	void OnChampionShipUserBlockChatting_Failure ( unsigned char ErrorCode );
	void OnChampionShipUserBlockChatting_Success ( struct FString targetPlayerName );
	void OnChampionShipChannelNoticeChatting_Failure ( unsigned char ErrorCode, int PenaltySec );
	void Dev_UpdateDevelopeMessage ( struct FString msg );
	void AddGMChatMessage ( unsigned char chatType, struct FString msg, struct FString TargetName );
	void AddChatMessage ( unsigned char chatType, struct FString msg, struct FString TargetName, unsigned char TargetType );
	void NotifyLocalPlayerTeamReceived ( );
	void ForceTeamChanged ( );
	void eventDrawHUD ( );
	void eventPostRender ( );
	void ShowDebug ( struct FName DebugType );
	void CheckStartMovie ( );
	void CreateHUDMovie ( );
	class UCombatHUDSoundGroup* GetHUDSoundGroup ( );
	void InitAudioChannel ( );
	void PostBeginPlay ( );
	void RemoveMovies ( );
	void FinalProcess ( );
	void eventDestroyed ( );
	void ShowHUD ( );
	void ToggleHUD ( );
	void RequestServerTime ( );
	void DrawGripHUD ( class UCanvas* InCanvas, float* YPos );
	void InitChangeList ( );
};

UClass* ACombatHUD::pClassPointer = NULL;

// Class CombatGame.CombatTeamGameHUD
// 0x0054 (0x04E4 - 0x0490)
class ACombatTeamGameHUD : public ACombatHUD
{
public:
	unsigned char                                      UIState;                                          		// 0x0490 (0x0001) [0x0000000000000000]              
	unsigned char                                      PrevUIPlayerState;                                		// 0x0491 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentUIPlayerState;                             		// 0x0492 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentUIGameStatus;                              		// 0x0493 (0x0001) [0x0000000000000000]              
	float                                              RoundOverDisplayTime;                             		// 0x0494 (0x0004) [0x0000000000000000]              
	class UClass*                                      NavigationClass;                                  		// 0x0498 (0x0004) [0x0000000000000000]              
	class ACombatRadarCore*                            NavigationActor;                                  		// 0x049C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatRadioSystem*                          RadioSystem;                                      		// 0x04A0 (0x0004) [0x0000000000000000]              
	float                                              HitAmount;                                        		// 0x04A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             WeaponAmmoRedEffect;                              		// 0x04A8 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	float                                              LocationLabelUpdateTime;                          		// 0x04B4 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsDisplaySelectingWeapon : 1;                     		// 0x04B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPrintScoreboardDebugMsg : 1;                     		// 0x04B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsTeamChange : 1;                                 		// 0x04B8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDisplayViewTargetKillMark : 1;                   		// 0x04B8 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	float                                              TimerDuration_UpdatePlayerScore;                  		// 0x04BC (0x0004) [0x0000000000000000]              
	float                                              TimerDuration_ChampionshipPlayerInfoUI;           		// 0x04C0 (0x0004) [0x0000000000000000]              
	int                                                TacticalMapRankLabelID;                           		// 0x04C4 (0x0004) [0x0000000000000000]              
	TArray< struct FModeNameStruct >                   ModeNameList;                                     		// 0x04C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastVictimName;                                   		// 0x04D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UCBUIDataStore_HUD*                          UIDataStore_HUD;                                  		// 0x04E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1780 ];

		return pClassPointer;
	};

	void UpdateSurrendTeamIndex ( unsigned char NewTeam );
	void UpdateSurrendUI ( int Index, int Type );
	void HideSurrenderUI ( );
	void ShowSurrenderUI ( int StartMemberCount, unsigned long Canvote );
	void SetSpectatorFlashEffectGauge ( float Rate );
	void ShowSpectatorFlashEffect ( unsigned long bShow );
	void CallHideMessage_Tutorial ( );
	void CallSetMessage_Tutorial ( int TextID, TArray< struct FString > GBA_Commnads );
	void CallResetQuest_Tutorial ( );
	void CallCompleteQuest_Tutorial ( struct FString Id );
	void CallAddQuest_Tutorial ( struct FString Id, int Normal, int complete );
	void CallHideHelpText_Tutorial ( );
	void CallSetHelpText_Tutorial ( int Title, int Desc, struct FString GBACommandToSkip );
	void CallAddDialog_Tutorial ( int SpeakerNameID, int DialogueTextID, float ShowTime );
	void ClearAllIconsInTacticalMap ( );
	void SetUIDataStore_HUD ( );
	void UpdateObserverCameraInfo ( struct FString cameraText );
	void ToggleChampionshipObserverDebugField ( );
	void AddDebugMessage ( struct FString msg );
	void UpdateObserverCameraStyle ( unsigned long bFreeCam );
	void PlayerView_AllUI ( );
	void PlayerView_Information ( );
	void PlayerView_RoundDisplay ( );
	void PlayerView_IFF ( );
	void PlayerView_Summary ( );
	void PlayerView_Chat ( );
	void ShowModeGuide ( unsigned long bShow );
	void HideTeamChangeScene ( );
	void ShowTeamChangeScene ( unsigned long bIntrude );
	void UpdateAchievementMsg ( TArray< struct FTableInfoType > TableInfo );
	void eventDisplayModeScore ( int Score );
	void RemoveMissionActorIcon ( class AActor* removedMissionActor );
	void UpdateMissionObjectIconList ( );
	void InitMissionActor ( );
	bool SetMissionActorState ( unsigned char TeamIndex, int MissionActorIndex, unsigned char CurrState );
	void SetPortraitIcon ( struct FString inImgPath );
	void UpdateBottomEffect ( unsigned long _bOn );
	void UpdateTopEffect ( unsigned long _bOn );
	void UpdateReservedWeapon ( );
	void UpdateObserverWeaponInfo ( class ACombatPawn* ViewTargetPawn );
	bool UpdateHP ( int Health, int HealthMax, unsigned long bSpectating );
	void ClearViewTargetInfo ( );
	void UpdateViewTargetInfo ( );
	void SetKillCamMessage ( );
	bool IsDisplayedKillerInfo ( );
	int GetCrosshairMaxLengthPercent ( );
	void FinalProcess ( );
	void UpdateMyInfo_WholeMap ( );
	void UpdateScoreboard_FPS ( );
	void SetUIData_Scoreboard ( class UGFxObject** out_sendData, struct FCachedPlayerInfo* out_playerData );
	void UpdateRankMatchName ( );
	void UpdateClanMatchName ( );
	void UpdateTeamName ( );
	void UpdateScoreBoard_PlayerList ( );
	void SetPlayerInfoForScoreboard ( struct FCachedPlayerInfo* out_prevInfo, class ACombatPlayerReplicationInfo** out_curPRI );
	bool CheckPlayerInfoForScoreboard ( struct FCachedPlayerInfo* out_prevInfo, class ACombatPlayerReplicationInfo** out_curPRI );
	void UpdatedCachedPlayerScoreList ( );
	void ChampionshipPlayerInfoUI ( );
	void ClearChampionshipPlayerInfoUI ( );
	void ClearScoreboardInfo ( );
	void UpdateScoreboard ( );
	int GetGoalStringIDForScoreboard ( );
	int GetSpecialScoreStringID ( );
	bool ToggleDisplaySelectingWeapon ( );
	void HideRadioMessage ( );
	void SelectRadioVoice ( unsigned char msgIndex );
	void ToggleRadioChat ( unsigned char TabIndex );
	void NotifyCreateSpawnPointUI ( class UCombatHUD_SpawnPointSelection* spawnPointUI );
	void NotifyCreatePresetUI ( class UCombatHUD_Preset* presetUI );
	void NotifyCreateRadioUI ( class UCombatHUD_RadioMessage* radioUI );
	bool IsVisibleBombProgressBar ( );
	void HideBombProgressBar ( );
	void ClearIFF ( class UCombatHUD_IFFObject* ClearObject );
	void GetIFF ( class UCombatHUD_IFFObject** NewObject );
	struct FString GetModeNameInTacticalMap ( );
	void ForceTeamChanged ( );
	void UpdateLocalPreset ( );
	void NotifyRespawnSuccess ( );
	void NotifySleepChampionshipPlayerInfoListContainer ( );
	void NotifyAwakeChampionshipPlayerInfoListContainer ( );
	void NotifyRespawnStart ( unsigned char preset, float RespawnDelay );
	void HideBombHUDIcons ( unsigned long HideBomb, unsigned long HideBombSite );
	void ForceUpdatePostProcess ( );
	void NotifySelectPreset ( unsigned char PresetInput, unsigned long LockScene, unsigned long bSmallSize );
	void NotifySpawnPointSelection ( unsigned char Input, unsigned long LockScene, unsigned long bSmallSize );
	void ToggleMiniMapSize ( );
	void ToggleChatUI ( );
	void ShowMiniHUD ( unsigned long bMini_ );
	void NotifyWeaponEquipped ( unsigned long bStart_, unsigned long bIsLaserSight_ );
	bool IsShowHotKey ( );
	void HideHotKey ( );
	void DisplayHotKey ( unsigned char hotKeyType_, struct FString* hotKey_, struct FString* actionName_ );
	bool eventUpdateWeaponKillCount ( );
	bool UpdateGrenadeCount ( struct FName weaponEventType );
	void HideSkillActorIndicator ( struct FString Index );
	void ShowSkillActorIndicator ( struct FString Index, struct FString ImgPath, int Lifetime );
	bool UpdateAmmo ( struct FName showRedEffect_ );
	bool UpdateWeaponInfo ( );
	int GetLastCrosshairType ( );
	void UpdateCrosshair ( int crosshairType_, int radius_, int lengthPercent_, int radius_idle, int length_idle );
	unsigned char GetUIState ( );
	void ShowTacticalGearSetIcon ( );
	void NotifyChangedSkillOption ( );
	void NotifyChangeSkillGroupNum ( );
	void hidePassiveSkill ( );
	void ShowUpdatePassiveSkillByID ( int ImageID );
	void ShowUpdatePassiveSkill ( struct FString ImagePath );
	void NotifyChangedCR ( );
	bool IsInitSelectposition ( );
	bool IsInitSkillList ( );
	void UpdateSkillList ( unsigned char updateCause );
	void SelectSkillList ( int Index );
	void InitSkillList ( );
	void HideSelectSkillList ( );
	void ToggleSkillStore ( );
	void CreateRadar ( class UCombatHUD_TacticalMapAndScoreboard* mapUI, class UCombatTeamGameMovie* CGMovie, int MiniSmall, int MiniMedium, int MiniLarge, int wholeWidth, int wholeHeight, int hybridWidth, int hybridHeight, int BroadcastingWidth, int BroadcastingHeight );
	void TestGlobalMessage ( struct FString msg );
	void NotifySkillUseToTeam ( struct FString msg );
	void NotifyFailedNoLicenseSkill ( );
	void NotifyFailedBuySkill ( int TextID, int errorType );
	void NotifyBuySkill ( int TextID );
	void NotifyUnlockSkill ( int TextID );
	void NotifyRankUp ( );
	void NotifyLastUser ( class APlayerReplicationInfo* LastUserPRI );
	void ResetPlayerUI ( );
	void UpdateRadioMessage ( int senderUID, unsigned char UniqueRadioID, unsigned char chatType, unsigned long bGameManager_ );
	void SetDamageBoard ( struct FVector victimLoc, int colliHeight, int hitDamage );
	void ShowBroadcastingMap ( unsigned long bShow_ );
	void ShowWholeMap ( unsigned long bShow_ );
	bool ChangeState ( struct FName NewState );
	void HidePlayerClass ( );
	void FocusChat ( int chatOpenType );
	void eventDisplayKillMark ( class UCombatDataTableRefGameScoring* refScoring_ );
	void NotifyWeaponReloaded ( unsigned long bStart_, unsigned long bIsLaserSight_ );
	void eventDisplayScoringText ( struct FString StatName, int Score, struct FString RefTableCodeName );
	bool IsDisplayedAnyESCMenu ( );
	void ShowMenu ( );
	void BroadcastLOStateMessage ( int TextID, struct FString LOName, struct FString ActorName );
	void DrawLOPersonalMessage ( int TextID, struct FString LOName );
	void ShowSuddenDeathMsg ( );
	unsigned char GetRoundWinType ( );
	void SetRoundWinType ( unsigned char winType );
	void DisplayMatchEnd ( );
	void SetGameResult ( unsigned char winType );
	void RoundResultDelayMessage ( );
	void DisplayRoundResult ( unsigned char Reason, unsigned char winType );
	bool GetRoundResultString ( unsigned char Reason, int* WinLocalizedStrID, int* LoseLocalizedStrID );
	void PlayRoundResultSound ( unsigned char Reason, unsigned char winType );
	void DisplayLocalMessage_Auto ( struct FString msg );
	int GetRoundGoalInfo ( );
	void DisplayMission ( int Round );
	void DrawTestText ( struct FString msg );
	void HideAndClearTestMessageBox ( );
	void ClearTestMessageBox ( );
	void HideTestMessageBox ( );
	void eventUpdateTestMessageBox ( struct FString msg_ );
	void ShowHitMark ( );
	void ShowMilitaryPosition ( );
	void ShowSelectSkillList ( );
	void SetGlobalCoolTimeText ( int GroupIndex, int CoolTime );
	void SetCoolTimeText ( int GroupIndex, int CoolTime );
	void HideAnimationMilitaryPosition ( );
	void SetSelectedIndex ( int Index );
	void SetShowMessageFadeInOutCombinationText ( int Id, struct FString Replace, struct FString With, struct FString Replace01, struct FString With01, struct FString Replace02, struct FString With02, struct FString Replace03, struct FString With03 );
	void SetNoticepositionCombinationText ( int Id, struct FString Replace, struct FString With, struct FString Replace01, struct FString With01, struct FString Replace02, struct FString With02, struct FString Replace03, struct FString With03 );
	void SetShowBlinkMessageFadeInOutAnimation ( struct FString Message );
	void SetShowMessageFadeInOutAnimation ( struct FString Message );
	void SetNoticePositionMessage ( struct FString Message, unsigned long SetAnimation );
	void HideAnimationNoticePositionMessage ( );
	void HideNoticePositionMessage ( );
	void ShowNoticePositionMessage ( );
	void UpdateKillMarkToVictimName ( struct FString VictimName );
	void UpdateKillDeathListToSuicide ( class APlayerReplicationInfo* Killed, class UClass* DamageType );
	void UpdateKillDeathList ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Killed, int WeaponIndex, int Option );
	void DisplayRespawn ( float Time );
	void PostBeginPlay ( );
	void UpdateHit ( unsigned long bDirectAttack, int attackerUID, int Damage, struct FVector HitLocation );
	void ShowHelpImage ( unsigned long bShow );
	void ShowScoreBoard ( unsigned long bShow_ );
	void PlayGameStartBGM ( );
	void DisplayCountDown ( int Count );
	void OnChangedCountDown ( int CountDownTime );
	class UCombatTeamGameMovie* TeamGameMovie ( );
	void DrawTacticalMap ( );
	void eventPostRender ( );
	void eventDrawHUD ( );
	void RemoveMovies ( );
	void UpdateCurrentLocationLabel ( );
	void CheckStartMovie ( );
	void CreateHUDMovie ( );
	unsigned char GetPlayerState ( );
	void SetPlayerIsDead ( unsigned long bFlag );
	bool UpdatePlayerVoice ( class UClass* VoiceClass );
	void UpdateGameState ( unsigned char CurrentState );
	void UpdatePlayerState ( );
	bool GetWeaponKillCount ( int WeaponID, int* killcount );
};

UClass* ACombatTeamGameHUD::pClassPointer = NULL;

// Class CombatGame.CombatSEIHUD
// 0x0000 (0x04E4 - 0x04E4)
class ACombatSEIHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1781 ];

		return pClassPointer;
	};

	void eventDisplayModeScore ( int Score );
	struct FString GetTimeStampForMSec ( );
	void SetUIData_Scoreboard ( class UGFxObject** out_sendData, struct FCachedPlayerInfo* out_playerData );
	void SetPlayerInfoForScoreboard ( struct FCachedPlayerInfo* out_prevInfo, class ACombatPlayerReplicationInfo** out_curPRI );
	bool CheckPlayerInfoForScoreboard ( struct FCachedPlayerInfo* out_prevInfo, class ACombatPlayerReplicationInfo** out_curPRI );
	int GetGoalStringIDForScoreboard ( );
	int GetSpecialScoreStringID ( );
	int GetRoundGoalInfo ( );
};

UClass* ACombatSEIHUD::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Base
// 0x0014 (0x008C - 0x0078)
class UCombatHUD_Base : public UGFxObject
{
public:
	class UCombatTeamGameMovie*                        Owner;                                            		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FString                                     FontHTMLString;                                   		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsDisplayed : 1;                                 		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bOn : 1;                                          		// 0x0088 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bMiniHUDMode : 1;                                 		// 0x0088 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1782 ];

		return pClassPointer;
	};

	struct FString GetFontHTMLString ( );
	bool AmIChampionshipPlayer ( );
	bool AmIChampionshipObserver ( );
	void Reset ( );
	void Tick ( float DeltaSeconds );
	class UCombatLobbyTransaction* GetLobbyTran ( );
	class UCombatCommunityTransaction* GetCommunityTran ( );
	class UCombatStatisticsTransaction* GetStatisticsTran ( );
	class UCombatItemTransaction* GetItemTran ( );
	class UCombatCharacterTransaction* GetCharacterTran ( );
	class UCombatLobbyChatTransaction* GetLobbyChatTran ( );
	class UOnlineSubsystemCombat* GetOnlineSubsystem ( );
	bool IsMiniHUDMode ( );
	void SetMiniHUDMode ( unsigned long bMini_ );
	class ACombatPC* GetCombatPC ( );
	struct FVector ConvertTo2DVec ( struct FVector Location );
	int CallHide ( );
	int CallShow ( );
	void CallHideAnimation ( );
	void HideAnimation ( );
	void Hide ( );
	void Show ( );
	void Init ( class UCombatTeamGameMovie* Movie );
	bool GetScreenCoordsOfSubject ( class UCanvas* theCanvas, struct FVector SubjectLocation, struct FVector* ScreenCoords );
};

UClass* UCombatHUD_Base::pClassPointer = NULL;

// Class CombatGame.CombatHUDComponent_Base
// 0x0000 (0x008C - 0x008C)
class UCombatHUDComponent_Base : public UCombatHUD_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1783 ];

		return pClassPointer;
	};

	int GetTeamNum ( );
};

UClass* UCombatHUDComponent_Base::pClassPointer = NULL;

// Class CombatGame.CombatHUD_GameObject
// 0x00C4 (0x0150 - 0x008C)
class UCombatHUD_GameObject : public UCombatHUDComponent_Base
{
public:
	float                                              UI_GO_LOCATOR_LOCATION_Z;                         		// 0x008C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ACombatPC*                                   PC;                                               		// 0x0090 (0x0004) [0x0000000000000000]              
	class ACBGameReplicationInfo*                      GRI;                                              		// 0x0094 (0x0004) [0x0000000000000000]              
	struct FString                                     LastGameObjectIconLabel;                          		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastGameObjectName;                               		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     LastLocatorUILocation;                            		// 0x00B0 (0x000C) [0x0000000000000000]              
	int                                                LastGameObjectDistance;                           		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                LastLevelObjectTeam;                              		// 0x00C0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ScreenColBox;                                     		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              RootMCWidth;                                      		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              RootMCHeight;                                     		// 0x00CC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  RootMC;                                           		// 0x00D0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  DistanceTF;                                       		// 0x00D4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  NameTF;                                           		// 0x00D8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  DirectionMC;                                      		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                LastDirection;                                    		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsInFront : 1;                                   		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bClampedLocation : 1;                             		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bDirectionArrowDisplayed : 1;                     		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class UGFxObject*                                  AttackMC;                                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	struct FVector                                     LocatorCoord;                                     		// 0x00EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                LocatorScale;                                     		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastLocatorScale;                                 		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FVector                                     SubjectWorldDrawLocation;                         		// 0x0100 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinLocatorScale;                                  		// 0x010C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxLocatorScale;                                  		// 0x0110 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DistanceForMinScale;                              		// 0x0114 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     LocatorAreaRatio;                                 		// 0x0118 (0x000C) [0x0000000000000000]              
	int                                                LastLocatorAlpha;                                 		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              AlphaValue_CrosshairNearArea;                     		// 0x0128 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              AlphaValue_CrosshairFarArea;                      		// 0x012C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              RadiusRatio_CrosshairNearArea;                    		// 0x0130 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              RadiusRatio_CrosshairFarArea;                     		// 0x0134 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     RootMCInstanceName;                               		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SizeMCInstanceName;                               		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1784 ];

		return pClassPointer;
	};

	bool CheckNearbyGO ( int* MessageId );
	bool CheckHotKeyMessage ( struct FString* HotKey, struct FString* ActionString );
	bool CheckAvailableGO ( int* MessageId );
	void UpdateVisible ( );
	void UpdateDistance ( struct FVector Location, struct FVector* CamLoc );
	float eventGetCurrentLocatorScale ( struct FVector* Location, struct FVector* InCameraLoc );
	bool IsBehindLocalPlayer ( struct FVector TargetLoc );
	bool GetAlphaValue ( struct FVector screenLocation_, int* out_alphaValue_ );
	void UpdateLocatorAlpha ( );
	void UpdateLocator ( struct FVector Location, struct FVector* CamLoc );
	void GetIconFrameLabel ( struct FString* out_label );
	void UpdateIcon ( );
	bool GetGameObjectName ( struct FString* out_objectName );
	void UpdateName ( );
	void UpdateRotation ( struct FVector* CamLoc, struct FRotator* CamRot, struct FVector* TargetLocation );
	void Update ( float DeltaSeconds, struct FVector Location );
	void SetUIVisible ( unsigned long bVisible );
	void Clear ( );
	void Reset ( );
	void GetLevelObjectMovieClips ( );
	void Init ( class UCombatTeamGameMovie* Movie );
	void CalculateLocatorScreenCoordinatesAndScale ( struct FVector* SubjectLocation, struct FVector* InCameraLoc );
};

UClass* UCombatHUD_GameObject::pClassPointer = NULL;

// Class CombatGame.CombatHUDEntity_Base
// 0x0001 (0x008D - 0x008C)
class UCombatHUDEntity_Base : public UCombatHUD_Base
{
public:
	unsigned char                                      LastActivateType;                                 		// 0x008C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1785 ];

		return pClassPointer;
	};

	bool IsPlayingGameState ( );
	void ActivateHUD ( );
	void Custom ( unsigned char _GameStatus, unsigned char _PlayerState );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUDEntity_Base::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Aim
// 0x0057 (0x00E4 - 0x008D)
class UCombatHUD_Aim : public UCombatHUDEntity_Base
{
public:
	class UGFxObject*                                  HitMarkMC;                                        		// 0x0090 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  BasicCrosshair_TopMC;                             		// 0x0094 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  BasicCrosshair_LeftMC;                            		// 0x0098 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  BasicCrosshair_BottomMC;                          		// 0x009C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  BasicCrosshair_RightMC;                           		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  BasicCrosshair_Dot;                               		// 0x00A4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  BasicCrosshair_Circle;                            		// 0x00A8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  GLCrosshairMC;                                    		// 0x00AC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  RLCrosshairMC;                                    		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                LastCrosshairType;                                		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                LastCrosshairRadius;                              		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                LastCrosshairLengthRate;                          		// 0x00BC (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsDisplayed_Basic : 1;                           		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsDisplayed_Dot : 1;                             		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsDisplayed_Circle : 1;                          		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsDisplayed_GL : 1;                              		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsDisplayed_RL : 1;                              		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsReloadingDisplayed : 1;                        		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bIsLaserSightDisplayed : 1;                       		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      JustInitiated : 1;                                		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000080] 
	struct FBasicCrosshairSetting                      BasicCHSetting;                                   		// 0x00C4 (0x0020) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1786 ];

		return pClassPointer;
	};

	void Reset ( );
	void SetCrossHairThickness ( int th );
	void SetCrossHairShadow ( int Type );
	void SetCrossHairAlpha ( int Alpha );
	void SetCrossHairColor ( int chColor );
	void CallHideLaserSight ( );
	void CallShowLaserSight ( int colorType_ );
	void ShowHitMark ( );
	void ShowLaserSight ( unsigned char team_ );
	void SetVisible_Dot ( unsigned long bVisible );
	void SetVisible_RLCrosshair ( unsigned long bVisible );
	void SetVisible_GLCrosshair ( unsigned long bVisible );
	void SetVisible_BasicCrosshair ( unsigned long bVisible );
	bool IsBasicCrossHairReady ( );
	void eventControlCrosshairVisible ( int crosshairType_ );
	void UpdateCrosshair ( int crosshairType_, int radius_, int lengthPercent_, int radius_idle, int length_idle );
	void Init ( class UCombatTeamGameMovie* Movie );
	void ClearCH ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_Aim::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ChampionshipPlayerInfoListContainer
// 0x000F (0x009C - 0x008D)
class UCombatHUD_ChampionshipPlayerInfoListContainer : public UCombatHUDEntity_Base
{
public:
	class UCombatHUD_ChampionshipPlayerInfoList*       DefenseTeamListMC;                                		// 0x0090 (0x0004) [0x0000000000000000]              
	class UCombatHUD_ChampionshipPlayerInfoList*       AttackTeamListMC;                                 		// 0x0094 (0x0004) [0x0000000000000000]              
	unsigned long                                      bStopTimer : 1;                                   		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1787 ];

		return pClassPointer;
	};

	void eventCallSetPlayerHp ( int TeamIndex, int ListIndex, int healthPercent );
	void eventCallSetPlayerStatus ( int TeamIndex, int ListIndex, int Status, unsigned long bHasC4 );
	void eventCallSetPlayerKillNum ( int TeamIndex, int ListIndex, int killcount );
	void eventCallSetPlayerWeaponName ( int TeamIndex, int ListIndex, struct FString WeaponName );
	void eventCallSetPlayerName ( int TeamIndex, int ListIndex, struct FString PlayerName );
	void InitializeList ( );
	void SetRegisterBroadCastObserverRedTeam ( class UCombatHUD_ChampionshipPlayerInfoList* M );
	void SetRegisterBroadCastObserverBlueTeam ( class UCombatHUD_ChampionshipPlayerInfoList* M );
	void SetObserverInformation ( );
	void Hide ( );
	void Show ( );
};

UClass* UCombatHUD_ChampionshipPlayerInfoListContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_GameModeHelp
// 0x0007 (0x0094 - 0x008D)
class UCombatHUD_GameModeHelp : public UCombatHUDEntity_Base
{
public:
	unsigned long                                      bShow : 1;                                        		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1788 ];

		return pClassPointer;
	};

	struct FString GetModeTip ( struct FString ModeCodeName );
	void SetModeHelpData ( struct FString ModeGuideStr );
	void CallsetData ( class UGFxObject* DataObject );
	void CallSetTip ( struct FString Tip );
	void PrintTip ( struct FString ModeGuideStr );
	void SetGameModeHelp ( unsigned long CurShow );
	void ToggleGameModeHelp ( );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_GameModeHelp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_TacticalMapAndScoreboard
// 0x018F (0x021C - 0x008D)
class UCombatHUD_TacticalMapAndScoreboard : public UCombatHUDEntity_Base
{
public:
	class UGFxObject*                                  Radar_LPIconMC;                                   		// 0x0090 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CompassMC;                                        		// 0x0094 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TopDepthIconContainerMC;                          		// 0x0098 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  FriendlyIconContainerMC;                          		// 0x009C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  EnemyIconContainerMC;                             		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ObjectIconContainerMC;                            		// 0x00A4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  NameplateContainerMC;                             		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                NameplateLocDelta_X;                              		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                NameplateLocDelta_Y;                              		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                ChampionshipObserverNameplateLocDelta_X;          		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                ChampionshipObserverNameplateLocDelta_Y;          		// 0x00B8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MapMC;                                            		// 0x00BC (0x0004) [0x0000000000000000]              
	struct FMatrix                                     IconMatrix;                                       		// 0x00C0 (0x0040) [0x0000000000000000]              
	struct FIconData                                   IconDatas[ 0x6 ];                                 		// 0x0100 (0x00D8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FNameplateData                              NameplateIconDatas;                               		// 0x01D8 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIgnoreMinimap : 1;                               		// 0x01FC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIgnoreWholeMap : 1;                              		// 0x01FC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIgnoreScoreboard : 1;                            		// 0x01FC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned char                                      scoreboardType;                                   		// 0x0200 (0x0001) [0x0000000000000000]              
	struct FString                                     LastModeName;                                     		// 0x0204 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUpdateTacticalMap__Delegate;                  		// 0x0210 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1789 ];

		return pClassPointer;
	};

	void CallSetTeamName ( int _Team, struct FString _Name );
	void CallSetAIPlayTime ( struct FString PlayTime );
	void CallSetAiBg ( int UIType, struct FString ImgPath );
	void CallSetVcClanInfo ( struct FString ClanName, struct FString Level, struct FString LevelColor );
	void CallSetPmClanInfo ( struct FString ClanName, struct FString Level, struct FString LevelColor );
	void CallSetViperCircleTeam ( class UGFxObject* List );
	void CallSetPeaceMakerTeam ( class UGFxObject* List );
	void CallSetFramePerSecond ( int fps_ );
	void CallSetLegend ( class UGFxObject* teamData_ );
	void CallSetPlayerInfo ( class UGFxObject* teamData_ );
	void CallSetMiniMapMissionVolume ( struct FString modeName_ );
	void CallSetMiniMapVolume ( struct FString volumeName_ );
	void CallSetMapImage ( struct FString imgPath_, int width_, int height_ );
	void CallSetViperCircleList ( class UGFxObject* teamData_ );
	void CallSetPeaceMakerList ( class UGFxObject* teamData_ );
	void CallSetLabel ( class UGFxObject* labelData_ );
	void CallChangeBroadCastObserverMode ( );
	void CallChangeDefaultMode ( );
	void CallChangeScoreBoardMode ( unsigned long bShowMinimap );
	void CallChangeHybridMapMode ( int aimode );
	void CallChangeWholeMapMode ( );
	void CallChangeMiniMapMode ( int Size );
	void ChangeMiniMapMode ( int Size );
	void SetModeName ( struct FString modeNameLabel_ );
	void ClearAllIcons ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
	void Custom ( unsigned char _GameStatus, unsigned char _PlayerState );
	void SetAIBackGroundImage ( );
	struct FString eventGetMapSymbolIconLinkageNameBy ( unsigned char Type );
	void SetMapUpperMapSymbolList ( class UGFxObject** out_mapSymbolIcon, int* out_mapSymbolArrayCount );
	void SetMapSymbolList ( );
	void ClearLocationLabel ( );
	void UpdateLocationLabel ( int labelID_ );
	void InitMinimapTexture ( class UTexture2D* MiniMapTexture, int TextureSizeX, int TextureSizeY );
	void SetGoalAndSpecialPointLabel ( );
	bool IsDisplayMissionAndRoom ( );
	void SetLabels ( );
	void SetScoreboardType ( );
	void Init ( class UCombatTeamGameMovie* Movie );
	void OnUpdateTacticalMap ( );
};

UClass* UCombatHUD_TacticalMapAndScoreboard::pClassPointer = NULL;

// Class CombatGame.CombatHUD_WaveModePlayerList
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_WaveModePlayerList : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1790 ];

		return pClassPointer;
	};

	void eventCallSetRank ( int Index, int Rank, struct FString Text );
	void eventCallSetCR ( int Index, struct FString Point );
	void eventCallSetScore ( int Index, struct FString Score );
	void eventCallSetMilitaryClass ( int Index, int MilitaryClass );
	void eventCallinitialize ( );
	void eventCallSetPlayerHp ( int Index, int HPPercent );
	void eventCallSetPlayerStatus ( int Index, int Status );
	void eventCallSetPlayerLifeNum ( int Index, struct FString Life );
	void eventCallSetPlayerName ( int Index, struct FString PlayerName );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_WaveModePlayerList::pClassPointer = NULL;

// Class CombatGame.CombatHUDSoundGroup
// 0x0008 (0x0044 - 0x003C)
class UCombatHUDSoundGroup : public UObject
{
public:
	class USoundCue*                                   GameOverQuestion;                                 		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACombatPlayerControllerBase*                 Target;                                           		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1791 ];

		return pClassPointer;
	};

	void AnnouncerPlay ( class USoundCue* Sound );
	void Init ( class ACombatPlayerControllerBase* OwnerPC );
};

UClass* UCombatHUDSoundGroup::pClassPointer = NULL;

// Class CombatGame.CombatImpactLight
// 0x0018 (0x0220 - 0x0208)
class UCombatImpactLight : public UPointLightComponent
{
public:
	float                                              StartBrightness;                                  		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Lifetime;                                         		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PassedTime;                                       		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnLightFinished__Delegate;                      		// 0x0214 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1792 ];

		return pClassPointer;
	};

	void OnLightFinished ( class UCombatImpactLight* Light );
	void ResetLight ( struct FColor NewLightColor, float NewBrightness );
};

UClass* UCombatImpactLight::pClassPointer = NULL;

// Class CombatGame.CombatInGameResourcePool
// 0x0160 (0x019C - 0x003C)
class UCombatInGameResourcePool : public UObject
{
public:
	int                                                MaxWeaponMaterialSet;                             		// 0x003C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinImpactDecalDistance;                           		// 0x0040 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ImpactDecalDepthBias;                             		// 0x0044 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ImpactDecalDepthBiasStep;                         		// 0x0048 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ImpactDecalSlopeScaleDepthBias;                   		// 0x004C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bIgnoreNearImpactDecal : 1;                       		// 0x0050 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	struct FString                                     DefaultPhysMaterialName;                          		// 0x0054 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultAirPhysMaterialName;                       		// 0x0060 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FInGameResource                             Resource[ 0x5 ];                                  		// 0x006C (0x0078) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AActor*                                      OuterActor;                                       		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinImpactDecalDistanceSq;                         		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPhysicalMaterial*                           DefaultPhysMaterial;                              		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPhysicalMaterial*                           DefaultAirPhysMaterial;                           		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UObject* >                           CachedSkillData;                                  		// 0x00F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FInGameSingleResourceList                   WeaponMasterAnimSet[ 0x2 ];                       		// 0x0100 (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FInGameSingleResourceList                   WeaponSubAnimSet[ 0x2 ];                          		// 0x0118 (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FInGameSingleResourceList                   AttachmentAnimSet[ 0x2 ];                         		// 0x0130 (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FIndirectArray_Mirror                       WeaponMasterAnimSetCallbackList;                  		// 0x0148 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FIndirectArray_Mirror                       WeaponSubAnimSetCallbackList;                     		// 0x0154 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FIndirectArray_Mirror                       AttachmentAnimSetCallbackList;                    		// 0x0160 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< class USkeletalMesh* >                     LocalMeshesForPreloadTexture;                     		// 0x016C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UMaterialInterface* >                PreloadMaterialList;                              		// 0x0178 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FLandingZone >                      ParachuteLandingZone;                             		// 0x0184 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoadAsyncAnimSetFinished__Delegate;           		// 0x0190 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1793 ];

		return pClassPointer;
	};

	void SetParachuteLandingZone ( class ACombatPlayerStart* InAnchor, class UMaterialInterface* InDecalMaterial, float InDecalSize, float InDecalDepth );
	void RadialBlurFinished ( class UCombatRadialBlurComponent* RadialBlurComp );
	class UPhysicalMaterial* GetDefaultAirPhysMaterial ( );
	class UPhysicalMaterial* GetDefaultPhysMaterial ( );
	void SetTraceEmitter ( class UParticleSystem** ParticleTemplate, struct FVector* StartLoc, struct FVector* EndLoc );
	void SetImpactEmitter ( class UParticleSystem** ParticleTemplate, struct FVector* NewLoc, struct FRotator* NewRot );
	void PSCFinished ( class UParticleSystemComponent* PSystem );
	void SetImpactLight ( struct FPointLightInfo* LightInfo, struct FVector* SpawnLocation );
	void ImpactLightFinished ( class UCombatImpactLight* Light );
	void ReleaseSkillResources ( );
	void eventRelease ( );
	void InitPreloadMaterialList ( );
	void InitSkillResources ( );
	void eventInit ( );
	void RemoveSkeletalMeshForPreloadTextures ( class USkeletalMesh* InMesh, unsigned char MaterialSet );
	void AddSkeletalMeshForPreloadTextures ( class USkeletalMesh* InMesh, unsigned char MaterialSet );
	void LoadAsyncAttachmentAnimSet ( unsigned char Gender, struct FScriptDelegate LoadAnimSetFinished, struct FString* AnimSetName );
	class UAnimSet* GetAttachmentAnimSet ( unsigned char Gender, struct FString* AnimSetName );
	void LoadAsyncWeaponSubAnimSet ( unsigned char Gender, struct FScriptDelegate LoadAnimSetFinished, struct FString* AnimSetName );
	class UAnimSet* GetWeaponSubAnimSet ( unsigned char Gender, struct FString* AnimSetName );
	void LoadAsyncWeaponMasterAnimSet ( unsigned char Gender, struct FScriptDelegate LoadAnimSetFinished, struct FString* AnimSetName );
	class UAnimSet* GetWeaponMasterAnimSet ( unsigned char Gender, struct FString* AnimSetName );
	void OnLoadAsyncAnimSetFinished ( );
	void SetRadialBlur ( float InLifeSpan, class UMaterialInterface* InMaterial, float InBlurScale, float InBlurFalloffExponent, float InBlurOpacity, float InDistanceFalloffExponent, unsigned long AbsoluteTranslation, struct FVector* NewLoc );
	class UCombatRadialBlurComponent* GetRadialBlurComponent ( );
	class UCombatDynamicDecal* SetImpactDecal ( class UMaterialInterface* MI, struct FRotator DecalRot, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalRotation, class UPrimitiveComponent* HitComp, unsigned long bProjOnTerrain, unsigned long bProjOnSkeletalMesh, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, struct FVector* DecalLoc );
	bool GetImpactDecalDepthBias ( struct FVector* TestLocation, float* NewDecalDepthBias );
	void MovePrimitiveComponent ( class UPrimitiveComponent* Comp, unsigned long bReattach, struct FVector* NewLoc, struct FRotator* NewRot );
	int GetResourceLength ( unsigned char InResourceType );
	class UObject* GetResource ( unsigned char Index );
	void NativeRelease ( );
};

UClass* UCombatInGameResourcePool::pClassPointer = NULL;

// Class CombatGame.CombatInstanceItem
// 0x0060 (0x009C - 0x003C)
class UCombatInstanceItem : public UObject
{
public:
	int                                                AmmorGrade;                                       		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                AP[ 0xA ];                                        		// 0x0040 (0x0028) [0x0000000000000000]              
	int                                                APForExplosion;                                   		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              ShortenRespawnDelay;                              		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              DamagedAccelerationRatio;                         		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              RankExpUpRatio;                                   		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FString                                     HudIconName;                                      		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      PowerBullet : 1;                                  		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              GroundCrouchSpeedRate_Buff;                       		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              GroundWalkingSpeedRate_Buff;                      		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              GroundRunSpeedRate_Buff;                          		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              GroundAccelationRate_Buff;                        		// 0x0094 (0x0004) [0x0000000000000000]              
	class UClass*                                      ItemFXClass;                                      		// 0x0098 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1794 ];

		return pClassPointer;
	};

	float GetGroundAccelationRate_Buff ( );
	float GetGroundRunSpeedRate_Buff ( );
	float GetGroundWalkingSpeedRate_Buff ( );
	float GetGroundCrouchSpeedRate_Buff ( );
	bool GetPowerBullet ( );
	struct FString GetHUDIcon ( );
	float GetRankExpUpRatio ( );
	float GetDamagedAccelerationRatio ( );
	float GetShortenRespawnDelay ( );
	int GetAPForExplosion ( );
	int GetAP ( unsigned char inType );
	int GetAmmorItemGrade ( );
	class UClass* GetItemFXClass ( );
};

UClass* UCombatInstanceItem::pClassPointer = NULL;

// Class CombatGame.CombatItemTransaction
// 0x01D0 (0x020C - 0x003C)
class UCombatItemTransaction : public UObject
{
public:
	TArray< struct FInventoryItemInfo >                InventoryItemInfos;                               		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FEquipItemInfo >                    EquipItemInfos;                                   		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FEquipItemInfo >                    SimulatedEquipItemInfos;                          		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FEquipItemInfo >                    SendEuipItemInfos;                                		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FEquipItemInfo >                    UnchangedEquipItemInfos;                          		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FShopItemInfo >                     OriShopItemInfos;                                 		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FShopItemInfo >                     ShopItemInfos;                                    		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ServiceOffShopItemList;                           		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FExpiredItem >                      ExpiredItems;                                     		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRepurchaseItem >                   SelectedRepurchaseItems;                          		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bShopItemsSorting : 1;                            		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bExpiredEquipItem : 1;                            		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FS_BaseItemInfo >                   BaseItemList;                                     		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           DefaultPresetName;                                		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SendActiveItemInventorySlotIndex;                 		// 0x00D0 (0x0004) [0x0000000000000000]              
	TArray< struct FFilterInfo >                       FilterList;                                       		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBoosterItem >                      BoosterItemList;                                  		// 0x00E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      SelectedGearSetIndex;                             		// 0x00EC (0x0001) [0x0000000000000000]              
	TArray< class UCombatFrontEnd_BuyAfter_Base* >     ItemBuyAfterList;                                 		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCallingCardInfo >                  CallingCardInfoList;                              		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRandomBoxGainResultInfo                    RandomBoxGainResult;                              		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRandomBoxShopItemInfo                      ReservedOpenRandomBoxShopItem;                    		// 0x0118 (0x0008) [0x0000000000000000]              
	struct FUseLockedItemInfo                          UseLockedItem;                                    		// 0x0120 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSendConsumeItemInfo                        CurSendConsumeItemInfo;                           		// 0x0144 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x014C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatItemTransaction.BuyLimitSaleItems
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0188 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatItemTransaction.BulletSaleTimeDate
	TArray< class UCombatDataTableRefItem* >           InitActiveRefItemList;                            		// 0x01C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x01D0 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatItemTransaction.LimitBuyItemMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1795 ];

		return pClassPointer;
	};

	struct FString eventGetLimitBuyItemTag ( int item_id );
	int GetActiveSprayItemIndex ( );
	int GetUseLockedItemCount ( );
	bool IsContinueUseLockedItem ( );
	void RemoveUseLockedItemSlot ( int LockedBoxSlot, int KeySlot );
	void SetUseLockedItemInfo ( struct FString CodeName );
	bool CheckRandomBoxInInven ( );
	void eventSetCurSendConsumeItemInfo ( int InvenSlot );
	void InitCurSendConsumeItemInfo ( );
	class UCombatFrontEnd_BuyAfter_Base* FindBuyAfterObject ( class UClass* BuyAfterClass );
	class UCombatFrontEnd_BuyAfter_Base* GetBuyAfterObject ( int BuyItemID );
	struct FString GetBuyAfterClassNameByItemIndex ( int Index );
	class UCombatDataTableRefItem* GetRefItemDataByCodename ( struct FString CodeName );
	struct FString GetAddReplaceItemCodename ( int RentalID );
	class UCombatDataTableRefShopSellItem* GetRefShopSellItemTable ( int Index );
	class UCombatDataTableRefShopItem* GetRefShopItemEntryDataByCodeName ( struct FString CodeName );
	class UCombatDataTableRefItem* GetRefItemTable ( int Index );
	bool IsNoManner ( );
	bool eventIsCallingCardPermanentItemCheck ( int RefID );
	int eventCallingCardItemCheckByRefIndex ( int RefID );
	bool GetCallingCardInfoList ( TArray< struct FCallingCardInfo >* List );
	bool RemoveCallingCardItem ( int Id );
	bool AddCallingCardItem ( int Id, int Remain_Time );
	bool eventIsNewItemFromStorage ( int referenceid, int remainTime );
	unsigned char GetSelectedGearSetIndex ( );
	bool FindFilterbyID ( int Id );
	void RemoveFilterList ( int Id );
	void ResetFilterList ( );
	void AddFilterList ( struct FFilterInfo AddFilter );
	int GetFilterListLength ( );
	bool GetShopItemInfo_InventoryItemName ( struct FString InventoryItemName, struct FString* CodeName );
	struct FShopItemInfo eventGetShopItemInfo ( int Index );
	int eventGetShopItemLength ( );
	void ResetShopItemList ( );
	bool IsbShopItemsSorting ( );
	void InitShopItemList ( int ShopType );
	bool UpdateExchangedMoneyItem ( int ItemSlotIndex, int MoneyType, int Money );
	bool IsOpeningRandomBoxShopItem ( );
	void InitReservedOpenRandomBoxShopItem ( );
	bool IsRandomBoxShopItem ( int referenceid );
	bool IsMoneyTypeItem ( int referenceid );
	bool IsConsumeItem ( int referenceid );
	bool eventIsAlwaysActiveItem ( int referenceid );
	bool eventIsNewBuyItem ( int referenceid, int InvenSlot );
	int InitClosthsItemIndex ( );
	int GetBaseItem ( int presetIdx, int equipType );
	int GetBaseItemListIndexBy ( int presetIdx, int equipType, int SlotIndex );
	void GetBaseItemListBy ( int presetIdx, TArray< struct FS_BaseItemInfo >* List );
	void InitActiveItemList ( );
	void InitBaseItemList ( );
	void InitSimulatedEquipItemInfos ( );
	void ClearSendEuipItemLists ( );
	void OverwriteNewEquipList ( );
	int GetSendEuipItemInfosLength ( );
	struct FEquipItemInfo GetSendEuipItemInfo ( int Index );
	int SortByPreset ( struct FEquipItemInfo A, struct FEquipItemInfo B );
	void AddSendEuipItemInfo ( int presetIdx );
	bool HasChangedEquippedItems ( );
	int eventGetCurrentRentalTime ( int InventorySlotIndex );
	bool IsAvailableRentalTimeItem ( int InventorySlotIndex );
	bool IsPresetinvenItem ( int presetIdx, int equipType, int InventorySlotIndex );
	bool IsItemInPreset ( int PresetIndex, int InventorySlotIndex );
	bool GetEquippedItemList ( unsigned char PresetTab, TArray< struct FEquipItemInfo >* out_List );
	struct FEquipItemInfo GetEquippedFirstItem ( int presetIdx );
	int FindEquipItemListIndex_Ex ( int presetIdx, int slotType );
	bool IsEquippedItem ( int InventorySlotIndex );
	int eventGetEquippedItemPresetIndex ( int InventorySlotIndex, int PresetIndex );
	bool GetEquippedItemData ( int Index, struct FEquipItemInfo* data_out );
	bool GetEquippedInventorySlotIndexByPresetIndex ( int PresetIndex, int slotType, int* inventorySlotIndex_out );
	bool DisrobeItem ( int presetIdx, int slotType, unsigned long IsExpiredItem );
	bool EquipItem ( struct FEquipItemInfo Item, unsigned long IsExpiredItem );
	void eventForceEquipItem ( int presetIdx, int slotType, int InvenSlot );
	int EquippedItemCount ( );
	bool AddEquipItemInfo ( int InventorySlotIndex, int PresetIndex, int EquipSlot );
	bool UpdateDecorationData ( int targetInventorySlotIndex, TArray< unsigned char >* decorationData );
	bool IsInInventory ( int InventorySlotIndex );
	bool eventIsInventoryPermanentItemCheck ( int RefID );
	int eventSetInventoryItemPresetCheck ( int RefID );
	TArray< int > GetRefItemIndexListInInventory ( );
	int eventGetInventoryItemLength ( );
	int GetInventoryItemInfoReferenceIndex_ItemData ( int ReferenceIndex, int Day );
	struct FInventoryItemInfo GetInventoryItemInfoByInventorySlotIndex ( int InventorySlotIndex );
	bool GetInventoryItemInfo_Ex ( int InventorySlotIndex, struct FInventoryItemInfo* itemData );
	struct FInventoryItemInfo eventGetInventoryItemInfo ( int Index );
	int eventGetActiveEffectFootRefItemIndex ( );
	int eventGetActiveEffectUpperRefItemIndex ( );
	int GetActiveAvatarRefItemIndex ( );
	void SetActiveInventoryItem ( int activeslot, int deactiveslot );
	struct FString GetConsumeInventoryItemName ( int consumeitem );
	void SetConsumeInventoryItem ( int consumeitem, int StackCount );
	bool IsConsumeInventoryItem ( int FindSlot );
	bool IsClothInventoryItem ( int SlotIndex );
	bool IsExistTicketItem ( unsigned char _Type );
	bool FindActiveInventoryItem ( int FindSlot );
	void SetActiveInventoryItems ( );
	void SetItemNameInventoryItem ( );
	void AllResetIsNewInventoryItem ( );
	bool ResetIsNewInventoryItem ( int InventorySlotIndex );
	bool eventRemoveInventoryItem ( int InventorySlotIndex );
	int EquipSort ( struct FEquipItemInfo A, struct FEquipItemInfo B );
	bool eventAddInventoryItem ( struct FInventoryItemInfo setItem, unsigned long IsNew );
	void SetExistExpiredEquipItem ( unsigned long IsEqupItem );
	bool IsExpiredEquipItem ( );
	void ClearExpiredItems ( );
	bool IsShowExpiredItem ( int refIndex );
	struct FExpiredItem eventGetExpiredItemBySlotIndex ( int SlotIndex );
	bool IsExpiredItem ( int SlotIndex );
	bool eventDelExpiredItem ( int SlotIndex );
	void eventAddExpiredItem ( int SlotIndex, unsigned long bShowMessage );
	void eventDestroyedItem ( int SlotIndex );
	TArray< int > eventGetRemoveExpiredItemIndexList ( );
	TArray< struct FExpiredItem > eventGetExpiredItems ( );
	int GetExpiredItemCount ( );
	void ClearSelectedRepurchaseItems ( );
	TArray< struct FRepurchaseItem > GetRepurchaseItems ( );
	int GetSelectedRepurchaseItemPrice ( int InvenSlotIndex );
	bool eventIsSelectedRepurchaseItems ( int RefItemID );
	void DeSelectedRepurchaseItems ( int InvenSlot );
	void SetRepurchaseItems ( int InvenSlot, int RentalIndex, unsigned long bSelected );
	struct FRepurchaseItem GetSelectedRepurchaseItem ( int Index );
	int GetSelectedRepurchaseItemsCount ( );
	bool IsNeedNotifyExpiredItem ( );
	bool GetChannelBoosterItem ( struct FString ChannelCodeName, int* ChannelExp, int* ChannelGold );
	void eventRemoveBoosterItem ( int BoosterItemID );
	void eventClearBoosterItem ( );
	void InitRandomBoxGainResult ( );
	void ClearEquipMarkerInventoryItem ( int SlotIndex, int preset );
	void AddEquipMarkerInventoryItem ( int SlotIndex, int preset );
	void ShopListDescendingItemGradeSort ( );
	void ShopListAscendingItemGradeSort ( );
	void ShopListRepurchaseItemSort ( );
	void ShopListDescendingPriceSort ( int SortType );
	void ShopListAscendingPriceSort ( int SortType );
	void ShopListDescendingNameSort ( );
	void ShopListAscendingNameSort ( );
	struct FInventoryItemInfo GetInventoryItem ( int InventorySlotIndex );
	bool IsOffShopItem ( int refIndex );
	bool IsPassFilterList ( int Filtertype1, int Filtertype2, int Filtertype3 );
	TArray< struct FBoosterItem > GetMergedBoosterItemList ( unsigned char ItemType, unsigned long bOnlyActiveBooster );
	void LimitBuyItemCountUpdate ( int item_id, int Count, int remain_sec );
	void LimitBuyItemUpdate ( float dt );
	void GetLimitBuyItemData ( int item_id, struct FLimitBuyItemData* out_Data );
	void BulletSaleTimeDateUpdate ( float dt );
	void AddBulletSaleTimeDate ( int Id, int Num );
	int GetBulletSaleTimeDate ( int Id );
	void AddBuyLimitSaleItemCount ( int Id, unsigned char Num );
	int GetBuyLimitSaleItemCount ( int Id );
};

UClass* UCombatItemTransaction::pClassPointer = NULL;

// Class CombatGame.CombatKActorNoSyncSpawnable
// 0x0000 (0x02CC - 0x02CC)
class ACombatKActorNoSyncSpawnable : public AKActorSpawnable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1796 ];

		return pClassPointer;
	};

	void ForceNetRelevant ( );
	void ClientReset ( );
	void Reset ( );
};

UClass* ACombatKActorNoSyncSpawnable::pClassPointer = NULL;

// Class CombatGame.CombatLabelVolume
// 0x000C (0x020C - 0x0200)
class ACombatLabelVolume : public AVolume
{
public:
	int                                                LocationLabelID;                                  		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACombatLabelVolume*                          NextLowerPriorityVolume;                          		// 0x0204 (0x0004) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	float                                              Priority;                                         		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1797 ];

		return pClassPointer;
	};

	int GetLocationLabelID ( );
};

UClass* ACombatLabelVolume::pClassPointer = NULL;

// Class CombatGame.CombatLCTFFlagActor
// 0x003C (0x0210 - 0x01D4)
class ACombatLCTFFlagActor : public AActor
{
public:
	unsigned long                                      bIsActive : 1;                                    		// 0x01D4 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bTouchFlag : 1;                                   		// 0x01D4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAddScore : 1;                                    		// 0x01D4 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	int                                                LCTFActorIndex;                                   		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      OwnerTeam;                                        		// 0x01DC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SpawnID;                                          		// 0x01DD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FSkeletalMeshMaterial                       FlagMaterialList_OurTeam;                         		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FSkeletalMeshMaterial                       FlagMaterialList_Enemy;                           		// 0x01E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AttachmentSocket;                                 		// 0x01F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      SkelMesh;                                         		// 0x01F8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x01FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    PSC;                                              		// 0x0200 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class ACombatLCTFFlagPoint*                        HomeBase;                                         		// 0x0204 (0x0004) [0x0000000000000000]              
	struct FName                                       StateName;                                        		// 0x0208 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1798 ];

		return pClassPointer;
	};

	unsigned char ScriptGetTeamNum ( );
	bool IsEnableTouchFlag ( );
	void EnableTouchFlag ( );
	void DisableTouchFlag ( );
	void ReturnToHomeBase ( unsigned long bFirstExtortion );
	void TryDisplayScore ( struct FName VarName );
	void TryAttachToHelder ( );
	void DropVelocity ( struct FVector inVelocity );
	void DropCTFFlag ( struct FVector StartLocation );
	void eventReplicatedEvent ( struct FName VarName );
	void NotifyLocalPlayerTeamReceived ( );
	void InitHomeBase ( );
	int GetMissionActorSortPriority ( );
	void InitMissionActor ( class ACBGameReplicationInfo* CBGRI, int ArrayIndex );
	void PostBeginPlay ( );
};

UClass* ACombatLCTFFlagActor::pClassPointer = NULL;

// Class CombatGame.CombatLCTFFlagPoint
// 0x001C (0x02B0 - 0x0294)
class ACombatLCTFFlagPoint : public ANavigationPoint
{
public:
	unsigned char                                      OwnerTeam;                                        		// 0x0294 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PointType;                                        		// 0x0295 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SpawnID;                                          		// 0x0296 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UPrimitiveComponent*                         Mesh;                                             		// 0x0298 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        StaticMeshComp;                                   		// 0x029C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMesh*                                 FlagPointStaticMesh;                              		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AreaNameID;                                       		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MissionGoalArrayIndex;                            		// 0x02A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      IsStayFlag : 1;                                   		// 0x02AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1799 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void InitMesh ( );
	unsigned char ScriptGetTeamNum ( );
	int GetMissionActorSortPriority ( );
	void InitMissionActor ( class ACBGameReplicationInfo* CBGRI, int ArrayIndex );
	void SetHomeFlag ( unsigned long bStay );
	void PostBeginPlay ( );
};

UClass* ACombatLCTFFlagPoint::pClassPointer = NULL;

// Class CombatGame.CombatLobbyChatTransaction
// 0x0000 (0x003C - 0x003C)
class UCombatLobbyChatTransaction : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1800 ];

		return pClassPointer;
	};

};

UClass* UCombatLobbyChatTransaction::pClassPointer = NULL;

// Class CombatGame.CombatLobbyTransaction
// 0x0074 (0x00B0 - 0x003C)
class UCombatLobbyTransaction : public UObject
{
public:
	int                                                ChannelIndex;                                     		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                ChannelPropertyNumber;                            		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0044 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatLobbyTransaction.MatchRoomInfoMap
	struct FUpdateMatchRoomInfo                        UpdateMatchRoom;                                  		// 0x0080 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLookInMatchRoomUserInfo >          LookInMatchRoomUserList;                          		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1801 ];

		return pClassPointer;
	};

	bool GetLookInMatchRoomUserList ( TArray< struct FLookInMatchRoomUserInfo >* _List );
	bool GetUpdateMatchRoom ( unsigned char Type, TArray< int >* _List );
	bool GetMatchRoomList ( TArray< struct FMatchRoomInfo >* _List );
	bool GetMatchRoomInfo ( int Index, struct FMatchRoomInfo* _Info );
	bool IsChampionShip ( );
	bool IsInChannel ( );
	int GetChannelType ( );
	int GetChannelPropertyNumber ( );
	void SetChannelPropertyNumber ( int _Value );
	int GetChannelIndex ( );
	void SetChannelIndex ( int _Value );
};

UClass* UCombatLobbyTransaction::pClassPointer = NULL;

// Class CombatGame.CombatLocalPlayer
// 0x0C7C (0x1028 - 0x03AC)
class UCombatLocalPlayer : public ULocalPlayer
{
public:
	unsigned char                                      CurrentCombatPostProcess;                         		// 0x03AC (0x0001) [0x0000000000000000]              
	struct FPostProcessSettings                        MotionBlurPPSettings;                             		// 0x03B0 (0x0154) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPostProcessSettings                        ExposedPPSettings;                                		// 0x0504 (0x0154) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPostProcessSettings                        FlashbangPPSettings;                              		// 0x0658 (0x0154) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPostProcessSettings                        WarmupPPSettings;                                 		// 0x07AC (0x0154) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPostProcessSettings                        CountdownPPSettings;                              		// 0x0900 (0x0154) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPostProcessSettings                        RoundPPSettings;                                  		// 0x0A54 (0x0154) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPostProcessSettings                        RoundOverPPSettings;                              		// 0x0BA8 (0x0154) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPostProcessSettings                        MatchOverPPSettings;                              		// 0x0CFC (0x0154) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bEnableMotionBlur : 1;                            		// 0x0E50 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      FullMotionBlur : 1;                               		// 0x0E50 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      MatrialOverlap : 1;                               		// 0x0E50 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              RunMaxVelocity;                                   		// 0x0E54 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RunMotionBlurAmount;                              		// 0x0E58 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RunMotionBlurSoftEdge;                            		// 0x0E5C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RunCamRotationThreshold;                          		// 0x0E60 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RunCamTranslationThreshold;                       		// 0x0E64 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RunInterpolationDuration;                         		// 0x0E68 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExposedBlendInTime;                               		// 0x0E6C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExposedDuration;                                  		// 0x0E70 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExposedBlendOutTime;                              		// 0x0E74 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExposedInterpolationDuration;                     		// 0x0E78 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExposedDesaturation;                              		// 0x0E7C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     ExposedHighLights;                                		// 0x0E80 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     ExposedMidTones;                                  		// 0x0E8C (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     ExposedShadows;                                   		// 0x0E98 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              FlashbangBlendInTime;                             		// 0x0EA4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FlashbangDuration;                                		// 0x0EA8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FlashbangBlendOutTime;                            		// 0x0EAC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FlashbangInterpolationDuration;                   		// 0x0EB0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FlashbangDesaturation;                            		// 0x0EB4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     FlashbangHighLights;                              		// 0x0EB8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     FlashbangMidTones;                                		// 0x0EC4 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     FlashbangShadows;                                 		// 0x0ED0 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              BlendTotalTime;                                   		// 0x0EDC (0x0004) [0x0000000000000000]              
	float                                              CurrentBlendTime;                                 		// 0x0EE0 (0x0004) [0x0000000000000000]              
	class UMaterialInstance*                           MatFlashbang;                                     		// 0x0EE4 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  texCaptureFlashbang;                              		// 0x0EE8 (0x0004) [0x0000000000000000]              
	float                                              WarmupBlendInTime;                                		// 0x0EEC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              WarmupDuration;                                   		// 0x0EF0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              WarmupBlendOutTime;                               		// 0x0EF4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              WarmupInterpolationDuration;                      		// 0x0EF8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              WarmupDesaturation;                               		// 0x0EFC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     WarmupHighLights;                                 		// 0x0F00 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     WarmupMidTones;                                   		// 0x0F0C (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     WarmupShadows;                                    		// 0x0F18 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              CountdownBlendInTime;                             		// 0x0F24 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CountdownDuration;                                		// 0x0F28 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CountdownBlendOutTime;                            		// 0x0F2C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CountdownInterpolationDuration;                   		// 0x0F30 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CountdownDesaturation;                            		// 0x0F34 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     CountdownHighLights;                              		// 0x0F38 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     CountdownMidTones;                                		// 0x0F44 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     CountdownShadows;                                 		// 0x0F50 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              RoundBlendInTime;                                 		// 0x0F5C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RoundDuration;                                    		// 0x0F60 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RoundBlendOutTime;                                		// 0x0F64 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RoundInterpolationDuration;                       		// 0x0F68 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RoundDesaturation;                                		// 0x0F6C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     RoundHighLights;                                  		// 0x0F70 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     RoundMidTones;                                    		// 0x0F7C (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     RoundShadows;                                     		// 0x0F88 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              RoundOverBlendInTime;                             		// 0x0F94 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RoundOverDuration;                                		// 0x0F98 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RoundOverBlendOutTime;                            		// 0x0F9C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RoundOverInterpolationDuration;                   		// 0x0FA0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RoundOverDesaturation;                            		// 0x0FA4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     RoundOverHighLights;                              		// 0x0FA8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     RoundOverMidTones;                                		// 0x0FB4 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     RoundOverShadows;                                 		// 0x0FC0 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              MatchOverBlendInTime;                             		// 0x0FCC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MatchOverDuration;                                		// 0x0FD0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MatchOverBlendOutTime;                            		// 0x0FD4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MatchOverInterpolationDuration;                   		// 0x0FD8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MatchOverDesaturation;                            		// 0x0FDC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     MatchOverHighLights;                              		// 0x0FE0 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     MatchOverMidTones;                                		// 0x0FEC (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     MatchOverShadows;                                 		// 0x0FF8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              FPMaxVelocity;                                    		// 0x1004 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FPMotionBlurAmount;                               		// 0x1008 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FPMotionBlurSoftEdge;                             		// 0x100C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FPCamRotationThreshold;                           		// 0x1010 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FPCamTranslationThreshold;                        		// 0x1014 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FPInterpolationDuration;                          		// 0x1018 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FAdvancedColorSenseStruct >         AdvancedColorSense;                               		// 0x101C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1802 ];

		return pClassPointer;
	};

	void eventFinishedPostProcessBlendingOut ( );
	void eventFinishedPostProcessBlendingDuration ( );
	void eventFinishedPostProcessBlendingIn ( );
	void eventUpdateMaterialParm ( float DeltaTime );
	void SetFlashbangMaterial ( class UMaterialInstance* MatInst );
	void AllClearCombatPostProcess ( );
	void ClearCombatPostProcess ( );
	void InstantPostProcess ( unsigned char PPType );
	bool CanPostProcessing ( unsigned char PPType );
	void SetMatchOverPostProcessColorizationSettings ( struct FPostProcessSettings* PPSettings );
	void SetRoundOverPostProcessColorizationSettings ( struct FPostProcessSettings* PPSettings );
	void SetRoundPostProcessColorizationSettings ( struct FPostProcessSettings* PPSettings );
	void SetCountdownPostProcessColorizationSettings ( struct FPostProcessSettings* PPSettings );
	void SetWarmupPostProcessColorizationSettings ( struct FPostProcessSettings* PPSettings );
	void SetFlashbangPostProcessColorizationSettings ( struct FPostProcessSettings* PPSettings );
	void SetExposedPostProcessColorizationSettings ( struct FPostProcessSettings* PPSettings );
	void InitPostProcessSettings ( );
	void eventPostBeginPlay ( );
	void AllClearPostProcessSettingsOverride ( );
	void OverrideCombatPostProcessSettings ( struct FPostProcessSettings OverrideSettings, float BlendInTime, float PPDuration, float BlendOutTime );
};

UClass* UCombatLocalPlayer::pClassPointer = NULL;

// Class CombatGame.CombatPlayerControllerBase
// 0x018A (0x073E - 0x05B4)
class ACombatPlayerControllerBase : public AGamePlayerController
{
public:
	float                                              AirSpeed;                                         		// 0x05B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACombatHUD*                                  CBHUD;                                            		// 0x05B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCBUIDataStore_PendingDialogMessage*         UIDataStore_PendingDialogMessage;                 		// 0x05BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCBUIDataStore_ETC*                          UIDataStore_ETC;                                  		// 0x05C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatPlayerReplicationInfo*                CombatPRI;                                        		// 0x05C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAimAssistEnabled : 1;                            		// 0x05C8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMeleeAssistEnabled : 1;                          		// 0x05C8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsLocalPC : 1;                                   		// 0x05C8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIgnoreWeaponInput : 1;                           		// 0x05C8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIgnoreInput : 1;                                 		// 0x05C8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bScreenShotRequest : 1;                           		// 0x05C8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	class UCameraAnimInst*                             CameraAnimPlayer;                                 		// 0x05CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCameraAnimInst*                             CurrentCameraAnimInstant;                         		// 0x05D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPostProcessSettings                        CamOverridePostProcess;                           		// 0x05D4 (0x0154) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              ZoomFOVRatio;                                     		// 0x0728 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACBCheatManager*                             CombatCheatManager;                               		// 0x072C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentInputExpireTime;                           		// 0x0730 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxWallHackCaptureCounter;                        		// 0x0734 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentWallHackCaptureCounter;                    		// 0x0738 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LastHackType;                                     		// 0x073C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      GRADE;                                            		// 0x073D (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1803 ];

		return pClassPointer;
	};

	void CrashClient ( );
	void CrashTest ( );
	void OnMissionEvent ( class USeqAct_MissionEvent* Action );
	void eventServerSendPingHigh ( );
	void eventSendPingHigh ( );
	void ClearLastHackType ( );
	void eventServerSendHackReport ( unsigned char InHackType );
	void eventSendHackReport ( unsigned char InHackType );
	bool CanPickupSupplies ( );
	bool CanPickupWeapon ( );
	void ServerPickupWeapon ( class ACombatDroppedWeapon* DP );
	bool PickupWeapon ( );
	class ACombatDroppedWeapon* GetTargetedPickupWeapon ( );
	void HidePickupWeaponUI ( );
	void ShowPickupWeaponUI ( class ACombatDroppedWeapon* DP );
	void eventShowHitMark ( );
	bool eventIgnoreSpawnProtection ( class ACombatPawn* TargetPawn );
	void ServerSetDroppedWeaponLocation ( class ACombatDroppedWeapon* DP, struct FVector NewLoc );
	void SetGameModeGuide ( unsigned long bShow );
	void NotifyChangedBoosterItem ( );
	void SetGrade ( unsigned char newGrade );
	bool CanUseConsoleCommand ( );
	void ToggleObserverTeamColor ( );
	void SendToConsole ( struct FString Command );
	void ConsoleKey ( struct FName Key );
	void ServerPause ( );
	void Pause ( );
	void ClearCameraEffect ( );
	void eventRemoveCameraEffect ( class UParticleSystem* PS );
	class AEmitterCameraLensEffectBase* eventSpawnCameraEffect ( class UClass* LensEffectEmitterClass );
	void ClientSpawnCameraLensEffect ( class UClass* LensEffectEmitterClass );
	void PlayExplotionBeepSound ( );
	void SetBeDamaged ( );
	class ACombatTeamGameHUD* GetCombatTeamGameHUD ( );
	void UpdateMissionObjectIconList ( );
	void InitMissionActor ( );
	bool SetMissionActorState ( class AActor* MissionActor, int MissionActorIndex, unsigned char CurrState );
	void UpdateObserverWeaponInfo ( );
	void eventUpdateHP ( class APawn* ViewTargetPawn );
	void StopCameraAnim ( class UCameraAnim* AnimToStop );
	void PlayCameraAnim ( class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, float Duration );
	void eventClientPlayCameraAnim ( class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, unsigned char Space, struct FRotator CustomPlaySpace );
	struct FName FindBestSoundMode ( );
	void eventPlayerTick ( float DeltaTime );
	void SendDedicatedServerCheat ( struct FString cmd_ );
	void Dev_UpdateDevelopeMessage ( struct FString msg );
	void ClientDevelopeMessage ( struct FString msg );
	void PlayDyingViewTarget ( );
	void ToggleSpectatingCameraMode ( );
	void ViewAPlayer ( int Dir );
	void ShowProtocolChat ( );
	void CreateMatchBlock ( struct FString Type );
	void RestoreMouse ( );
	void BackUpMouse ( );
	void eventNotifyCaptureMessage ( struct FString Filename );
	void CaptureScreen ( );
	void ServerSetOnlyAimAssist ( unsigned long bSet );
	void SetOnlyAimAssist ( unsigned long bSet );
	void ShowDialog ( int Type, struct FDialogLocalizingData* out_dialogData );
	void UpdateDisconnectMatchServerTime ( );
	float GetDisconnectMatchServerTime ( );
	void AddCheats ( unsigned long bForce );
	void eventNotifyKeyInputSignal ( );
	void UpdateInputExpireTime ( );
	bool NeedCheckingInputExpireTime ( );
	float GetInputExpireTime ( );
	class ACombatPlayerReplicationInfo* GetPlayerReplicationInfo ( );
	void ClientSetHUD ( class UClass* newHUDType );
	void SpawnDefaultHUD ( );
	bool PopDialogMessage ( int* DialogType, struct FDialogLocalizingData* LocalizationData, unsigned char* UseDefaultDelegate, struct FScriptDelegate* OKBtnDelegate, struct FScriptDelegate* CancelBtnDelegate );
	void PushDialogMessage ( int DialogType, unsigned char UseDefaultDelegate, struct FScriptDelegate OKBtnDelegate, struct FScriptDelegate CancelBtnDelegate, struct FDialogLocalizingData* LocalizationData );
	unsigned char GetInputExpireGoalScene ( );
	void SetInputExpireGoalScene ( unsigned char GoalScene );
	void ReceivedPlayer ( );
	void CheckInputExpireTimer ( );
	void ForceGarbageCollection ( );
	void RCFForceGarbageCollection ( );
	void eventInitInputSystem ( );
	void ResetFromWarmup ( );
	void ResetUI ( );
	class UOnlineSubsystemCombat* GetOSC ( );
	bool eventIsWeaponInputIgnored ( );
	void ClientIgnoreWeaponInput ( unsigned long bIgnore );
	void IgnoreWeaponInput ( unsigned long bNewFlag );
	bool IsLocalPC ( );
	bool eventIsIgnoreInput ( );
	void SetIgnoreInput ( unsigned long bIgnore );
	void ResetPlayerMovementInput ( );
	void UTrace ( );
	void TeamSay ( struct FString msg );
	void Say ( struct FString msg );
	void ReceivedPlayerReplicationInfo ( );
	void InitPlayerReplicationInfo ( );
	void VolumeBasedDestroy ( class APhysicsVolume* PV );
	void eventOutsideWorldBounds ( );
	void PreBeginPlay ( );
	void SetDefaultWorldFOV ( float InWorldFOV );
	float GetDefaultWorldFOV ( );
	void ClearDebugRegisters ( );
	void CheckDebugRegisters ( );
	void InitPostProcessMITV ( struct FName TargetNodeName, float PassedTime );
	void SetOverridePostProcessChain ( int NewIndex );
	int GetOverridePostProcessChainIndex ( );
	void SetPostProcessChain ( int NewIndex );
	int GetPostProcessChainIndex ( );
	void SetGamma ( float GammaValue );
	void SendDedicatedServerCheatNative ( struct FString cmd_ );
	unsigned char GetZoomState ( unsigned long bExceptInterpolatingState );
};

UClass* ACombatPlayerControllerBase::pClassPointer = NULL;

// Class CombatGame.CombatPC
// 0x0212 (0x0950 - 0x073E)
class ACombatPC : public ACombatPlayerControllerBase
{
public:
	struct FName                                       CameraActorTag;                                   		// 0x0740 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CameraStyle;                                      		// 0x0748 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              SprayUseDelay;                                    		// 0x0750 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SprayDistance;                                    		// 0x0754 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                SprayCount;                                       		// 0x0758 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SprayLifeSpan;                                    		// 0x075C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USoundCue*                                   SpraySound_Fail;                                  		// 0x0760 (0x0004) [0x0000000000000000]              
	TArray< class ACombatSprayDecalActor* >            SprayDecalActors;                                 		// 0x0764 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                SprayLastUseIndex;                                		// 0x0770 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SprayLastUseTime;                                 		// 0x0774 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSprayPreview : 1;                                		// 0x0778 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNoCrosshair : 1;                                 		// 0x0778 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bInitializedPresetList : 1;                       		// 0x0778 (0x0004) [0x0000000000002021] [0x00000004] ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned long                                      bKeepSpectatingCamMode : 1;                       		// 0x0778 (0x0004) [0x0000000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      bReadyForFlashbang : 1;                           		// 0x0778 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCaptureFlashbang : 1;                            		// 0x0778 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bLastSendCrouched : 1;                            		// 0x0778 (0x0004) [0x0000000000002001] [0x00000040] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bLastSendMoving : 1;                              		// 0x0778 (0x0004) [0x0000000000002001] [0x00000080] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bCanDisplayHitInfomation : 1;                     		// 0x0778 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCanDisplayGainAward : 1;                         		// 0x0778 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCanDisplayScoring : 1;                           		// 0x0778 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCanDisplayPreset : 1;                            		// 0x0778 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bQuickPresetChange : 1;                           		// 0x0778 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      BeDamaged : 1;                                    		// 0x0778 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      UISoundPlaying : 1;                               		// 0x0778 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bForceRestart : 1;                                		// 0x0778 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bHideTeamIFF : 1;                                 		// 0x0778 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bVivoxSet : 1;                                    		// 0x0778 (0x0004) [0x0000000000000000] [0x00020000] 
	class ACombatSprayDecalActor*                      SprayPreviewDecalActor;                           		// 0x077C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SprayPreviewDelay;                                		// 0x0780 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SprayLastPreviewTime;                             		// 0x0784 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedSprayID;                                    		// 0x0788 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LocalPresetList_First[ 0x9 ];                     		// 0x078C (0x0024) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	int                                                LocalPresetList_Sec[ 0x9 ];                       		// 0x07B0 (0x0024) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	int                                                LocalPresetList_Third[ 0x9 ];                     		// 0x07D4 (0x0024) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned char                                      CurrentPreset;                                    		// 0x07F8 (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	unsigned char                                      ReservedPreset;                                   		// 0x07F9 (0x0001) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned char                                      LastSendPhysics;                                  		// 0x07FA (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      CurrentMouseSensMode;                             		// 0x07FB (0x0001) [0x0000000000000000]              
	unsigned char                                      LockedPresetSceneCount;                           		// 0x07FC (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      LockedPresetSceneCountMax;                        		// 0x07FD (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      PlayerStartType;                                  		// 0x07FE (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      LogoutReason;                                     		// 0x07FF (0x0001) [0x0000000000000000]              
	float                                              LastPresetPressTime;                              		// 0x0800 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PresetInputDelay;                                 		// 0x0804 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UPostProcessChain*                           EntryPostProcessChain;                            		// 0x0808 (0x0004) [0x0000000000000000]              
	TArray< class UPostProcessChain* >                 OldPostProcessChain;                              		// 0x080C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UCombatLocalPlayer*                          CBLocalPlayer;                                    		// 0x0818 (0x0004) [0x0000000000000000]              
	float                                              CheckSpectatorDelay;                              		// 0x081C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FName                                       DefaultSpectatingCamMode;                         		// 0x0820 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FName                                       SavedSpectatingCamMode;                           		// 0x0828 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UCombatStatStorageBase*                      StatStorage;                                      		// 0x0830 (0x0004) [0x0000000000000000]              
	class UCombatLogData*                              CombatLogData;                                    		// 0x0834 (0x0004) [0x0000000000000000]              
	float                                              NetMoveDeltaWhenNotMoved;                         		// 0x0838 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FRotator                                    LastSentRotation;                                 		// 0x083C (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              InputExpireTime;                                  		// 0x0848 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class ACombatPawn*                                 CombatPawn;                                       		// 0x084C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DropClaymoreCount;                                		// 0x0850 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class ACombatDroppedWeapon*                        DroppedWeapon;                                    		// 0x0854 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatDroppedSupplies*                      DroppedSupplies[ 0x2 ];                           		// 0x0858 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ACombatProjectile* >                 DropClaymoreList;                                 		// 0x0860 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPresetManager*                              PresetManager;                                    		// 0x086C (0x0004) [0x0000000000000000]              
	class UCombatHUD_Preset*                           presetUI;                                         		// 0x0870 (0x0004) [0x0000000000000000]              
	class ACombatTeamGameHUD*                          myCombatTeamGameHUD;                              		// 0x0874 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatHUD_IFFObject*                        KillerIFFObject;                                  		// 0x0878 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AdjustPositionCounter;                            		// 0x087C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AdjustPositionUpdateCounter;                      		// 0x0880 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpectatingMouseSens;                              		// 0x0884 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class ACombatMinimapActor*                         CurrentMinimapActor;                              		// 0x0888 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDisplayPawnInfo >                  AliveDisplayPawnList;                             		// 0x088C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDisplayPawnInfo >                  DeadDisplayPawnList;                              		// 0x0898 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CriticalDamageamount;                             		// 0x08A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class ACombatSkillActor_UAV* >             UAVActorList;                                     		// 0x08A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ACombatGuy_NPC* >                    SentrygunList;                                    		// 0x08B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ACombatGuy_NPC* >                    TrophyturretList;                                 		// 0x08C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGlobalOutlineEvent >               GlobalOutlineEventList;                           		// 0x08CC (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	float                                              CheckViewTargetLookAtDuration;                    		// 0x08D8 (0x0004) [0x0000000000000000]              
	class UCombatLockedPresetScene*                    LockedPresetScene;                                		// 0x08DC (0x0004) [0x0000000000000000]              
	struct FName                                       LockedPresetSceneState;                           		// 0x08E0 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class ACombatPawn_AttackSkillActor*                DeployedSkillActors[ 0x2 ];                       		// 0x08E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned long >                            Redeploying;                                      		// 0x08F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UCombatHUD_SpawnPointSelection*              spawnPointUI;                                     		// 0x08FC (0x0004) [0x0000000000000000]              
	class UCombatInGameBattleLog*                      InGameBattleLog;                                  		// 0x0900 (0x0004) [0x0000000000000000]              
	int                                                AdvancedColorIndex;                               		// 0x0904 (0x0004) [0x0000000000000000]              
	float                                              CheckMouseSensStartTime;                          		// 0x0908 (0x0004) [0x0000000000000000]              
	float                                              CheckMouseSensLoopDelay;                          		// 0x090C (0x0004) [0x0000000000000000]              
	float                                              CheckMouseSensEndTime;                            		// 0x0910 (0x0004) [0x0000000000000000]              
	struct FString                                     LoginTokenPartA;                                  		// 0x0914 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LoginTokenPartB;                                  		// 0x0920 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     JoinTokenPartA;                                   		// 0x092C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     JoinTokenPartB;                                   		// 0x0938 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPresetSlotState >                  PresetSlotStateArray;                             		// 0x0944 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1804 ];

		return pClassPointer;
	};

	void UpdateInputExpireTime ( );
	bool GetPresetSlotState ( int WeaponID, unsigned char SlotID, int PresetID );
	void SetPresetSlotState ( int WeaponID, unsigned char SlotID, unsigned long isOn );
	void SetPresetSlotSilenceState ( int WeaponID, unsigned long isOn );
	void Speech ( struct FName Type, int Index, struct FString Callsign );
	void UpdateTeamOutline ( );
	void SetTeamOutline ( unsigned long bSet );
	void ServerSetMaxTickRate ( float NewValue );
	void eventSetMaxTickRate ( struct FString NewValue );
	void GameSurrenderReply ( unsigned long surrend );
	void OnExitGame ( );
	void ShowStatusEffectUI ( unsigned long bShow );
	void UpdateStatusEffectUI ( class ACombatPawn* CP );
	void ShowAfterImageEffect ( unsigned long bShow );
	class UMaterialInstanceTimeVarying* PlayPostProcess ( struct FName PPName, unsigned long bPlay, float PlayRate );
	void ShowFlashbangEffect ( float FlashIntensity, float AfterImageIntensity, float Rate, float PassedTime );
	void SetDisplayTables ( );
	void SetDelayedDisplayTables ( );
	void GatheringLastTakeHitInfo ( struct FString CauserName, struct FString VictimName, int HitBodyIndex );
	void eventPlayerTick ( float DeltaTime );
	void OnSprayDestroyed ( class ACombatSprayDecalActor* SprayActor );
	void ResetSpray ( );
	bool GetSprayDrawData ( float SprayFloatDist, struct FVector* SprayLocation, struct FRotator* SprayRotation, float* SprayDegree );
	bool DrawSprayDecal ( unsigned long bPreview );
	int GetActivatedSprayID ( );
	void ServerUseSpray ( );
	class ACombatSprayDecalActor* GetUsableCombatSprayDecalActor ( unsigned long bPreview );
	bool CanUseSpray ( );
	void OnSprayDrawn ( class ACombatSprayDecalActor* SprayDecal );
	void UseSpray ( unsigned long bPreview );
	void ServerChangeName ( struct FString S );
	void SetName ( struct FString S );
	void ToggleTeamChat ( );
	void ToggleAllChat ( );
	void ShowBroadcastingMap ( unsigned long bShow );
	void IsBorderless ( );
	void RemoveMissionActorIcon ( class AActor* removedMissionActor );
	void UpdateMissionObjectIconList ( );
	void InitMissionActor ( );
	bool SetMissionActorState ( class AActor* MissionActor, int MissionActorIndex, unsigned char CurrState );
	void UpdateHP ( class APawn* ViewTargetPawn );
	void ClearViewTargetInfo ( );
	void UpdateViewTargetInfo ( );
	void eventReceiveSuicideMessage ( class APlayerReplicationInfo* Victim, class UClass* DamageType );
	void eventReceiveKillDeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, int WeaponID, unsigned char HitPart, int Option1, int Option2 );
	void eventReceiveActorKillMessage ( class APlayerReplicationInfo* Killer, int WeaponID, int Option1, int Option2 );
	void NotifyChangeTest ( );
	void IFFHide ( );
	void eventDisplayKillerIFF ( class UCanvas* Canvas );
	void KeyBindingSettingFromProfile ( class UCombatProfileSettings* Profile );
	struct FName FindBestSoundMode ( );
	void StopExplotionBeepSound ( );
	void PlayExplotionBeepSound ( );
	void TryJump ( );
	void ClearCheckJump ( );
	void CheckJump ( );
	void UpdatePlayerVoice ( );
	void eventUpdateDeadDisplayPawnList ( );
	void RegisterDeadDisplayPawnList ( class ACombatPawn* CP );
	void CheckUAV ( class ACombatPawn* TargetPawn );
	void eventUpdateAliveDisplayPawnList ( );
	void RemoveAliveDisplayPawnList ( );
	void UpdateLookAtAllAlivePawns ( );
	struct FVector DecompressPawnLocationXY ( int LocationPct, struct FVector MinimapActorLocation );
	int CompressPawnLocationXY ( struct FVector PawnLocation, struct FVector MinimapActorLocation );
	void ClientDisplayTestMsg ( struct FString msg );
	void NotifyWeaponEquipped ( unsigned long bStart_, unsigned long bIsLaserSight_ );
	void NotifyWeaponReloadedUI ( unsigned long bStart_, unsigned long bIsLaserSight_ );
	void ServerSetQuickPresetChange ( unsigned long bSet );
	void StartSecZoom ( );
	void StartAltFire ( unsigned char FireModeNum );
	void ThrowWeapon ( );
	void StartFire ( unsigned char FireModeNum );
	void eventSetAdvancedColor ( );
	void SetDOFValue ( unsigned long IsDOF, float FocusDistance, float MaxNearBlurAmount, float MaxFarBlurAmount, float BlurBloomKernelSize, float FalloffExponent, float BlurKernelSize, float MinBlurAmount, float InterpolationDuration, unsigned char FocusType, float FocusInnerRadius, struct FVector FocusPosition );
	void IgnoreLookInput ( unsigned long bNewLookInput );
	void IgnoreMoveInput ( unsigned long bNewMoveInput, unsigned long bInitZVelocity );
	void InitPawnVelocity ( unsigned long bInitZVelocity );
	void CleanOutSavedMoves ( );
	void ServerInitPawnVelocity ( unsigned long bInitZVelocity );
	void PauseRumbleForAllPlayers ( unsigned long bShouldPauseRumble );
	unsigned char GetSpawnAreaIndex ( );
	void SettoDefaultAll ( );
	void WriteProfileSettings ( );
	void ServerSuicide ( );
	void SetProfileRangeData ( struct FName ProfileName, float Value );
	void ViewProfileRangeData ( struct FName ProfileName );
	void GetProfileDefaultAutoScaleByName ( class UCombatProfileSettings* Profile, struct FString NameStr, int* OutValue );
	void GetProfileAutoScaleByName ( class UCombatProfileSettings* Profile, struct FString NameStr, int* OutValue );
	void GetRangedProfileDefaultMouseSensByName ( class UCombatProfileSettings* Profile, struct FString NameStr, float* OutValue );
	void GetRangedProfileMouseSensByName ( class UCombatProfileSettings* Profile, struct FString NameStr, float* OutValue );
	void GameOptionSettingFromProfile ( class UCombatProfileSettings* Profile );
	void SetCurrentMouseSensMode ( unsigned char ModeNum, unsigned long bResetToDefault );
	void SettingsFromProfile ( );
	void RegisterCustomPlayerDataStores ( );
	void NotifyChangedSkillOption ( );
	void NotifyChangedCR ( );
	void ShowWholeMap ( unsigned long bShow_ );
	void ToggleHideTeamIFF ( );
	void UpdateHoldmode ( class UCombatProfileSettings* ProfileSettings );
	void UpdateTeamIFFView ( class UCombatProfileSettings* ProfileSettings );
	void UpdateFlipMesh ( );
	int GetMyCombatWeaponSkillGroupID ( );
	void StartUseSkill ( unsigned char GroupIndex );
	void NotifyPresetInitialized ( );
	int GetCurrentPreset ( );
	class UPresetManager* GetPresetManager ( );
	bool IsPlayerOperating ( );
	class ACombatDroppedWeapon* GetTargetedPickupWeapon ( );
	void UpdatePickupWeaponLocatorIcon ( class ACombatDroppedWeapon* DP );
	void ShowPickupWeaponUI ( class ACombatDroppedWeapon* DP );
	void HidePickupWeaponUI ( );
	void TossWeapon ( );
	unsigned char GetGrenadeUIType ( class ACombatWeapon* TargetWeapon );
	unsigned char GetWeaponUIType ( class ACombatWeapon* TargetWeapon );
	void UpdateCachedNotifyWeaponAmmoChanged ( );
	void NotifyWeaponAmmoChanged ( class ACombatWeapon* TargetWeapon, struct FName EventType );
	float GetInputExpireTime ( );
	void ClientSwitchToBestWeapon ( unsigned long bForceNewWeapon );
	void TryToSwitchToBestWeapon ( );
	void TryToForceSwitchToBestWeapon ( );
	void LightmassSettings ( float LightSourceAngle, float ShadowExponent );
	void ScreenshotMode ( unsigned long bFlag );
	void SetCameraRollKeyBind ( unsigned long bFlag );
	void SwitchToPreviousWeapon ( );
	void FixFOV ( );
	void ShowDynamicLight ( unsigned long bHide );
	void StaticMeshDynamicLight ( unsigned long bHide );
	void ClearDeadPawns ( );
	void ResetDecalManager ( );
	void ForceUpdatePostProcess ( );
	void ClientGRIGotoState ( struct FName NewState, struct FName NewLabel );
	void eventProcessPlayerStatData ( unsigned long bDesertion, unsigned long bWinner, unsigned char SaveConditionType );
	void ProgressionBombDefuseCountdown ( int CountdownNum, unsigned long bHideProgressBar );
	void HideBombHUDIcons ( unsigned long HideBomb, unsigned long HideBombSite );
	void FocusChat ( int chatOpenType );
	void eventTriggerDummyClientInput ( unsigned char cmd_ );
	void PlayerStartErrorMessage ( );
	void PrintHUDLogInClient ( struct FString text_ );
	void ExecPrintHUDLog ( struct FString text_ );
	void WriteClassListLog ( );
	void DediSvrCmd ( struct FString args );
	void ExecDedicatedServerConsoleCmd ( struct FString args );
	void ToggleAutoAssist ( );
	void SetAutoAssist ( unsigned long bSet );
	void DrawHUD ( class AHUD* H );
	void ServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View, unsigned long bForceSync );
	void ReplicateMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot );
	float GetNetMoveDeltaWhenNotMoved ( );
	void NextWeapon ( );
	void PrevWeapon ( );
	void AllClearPostProcess ( );
	void ClearPostProcess ( );
	void RealMatchEnd ( );
	void StartMatchOverLosePostProcess ( );
	void StartMatchOverWinPostProcess ( );
	void StartRoundOverPostProcess ( );
	void StartRoundLosePostProcess ( );
	void StartRoundWinPostProcess ( );
	void StartCountdownPostProcess ( );
	void StartWarmupPostProcess ( );
	void DisableMaterialPostprocess ( struct FName PPName );
	void CheckFlashBangSoundMode ( );
	void CheckFlashBangPP ( );
	void DisableSceneCapture ( );
	void eventSetFlashbangTexture ( class UTexture2D* Tex );
	void eventFlashbangPostProcess ( );
	bool IsCombatChampionshipObserverPC ( );
	bool IsFlashbangPostProcess ( );
	void StartFlashbangPostProcess ( float Rate, float fSoundEffectTime );
	void ToggleHideHUD ( );
	void StartExposedPostProcess ( );
	void ShowMenu ( );
	void eventReceiveLocalizedMessageEx ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
	void eventServerNotifyWeaponKillCount ( int WeaponID, int killcount );
	void ServerNotifyClientReady ( );
	void eventOnNotifyDedicatedServerLog ( struct FString Filename );
	void SetClientReady ( );
	void PlaySeeDeathVoice ( class ACombatPlayerReplicationInfo* KillerPRI, class ACombatPlayerReplicationInfo* VictimPRI );
	void SetKillCamMessage ( class ACombatPlayerReplicationInfo* Killer, int WeaponIndex, int Option );
	void SetKillCamMessageBySuicide ( );
	void ClientNotifyKilled ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, int WeaponIndex, int Option );
	void eventReplicatedEvent ( struct FName VarName );
	void UpdateLocalPreset ( );
	void HandleWalking ( );
	void SetWalk ( unsigned long SetWalking );
	void ToggleWalk ( );
	struct FString GetPlayerName ( );
	struct FRotator GetAdjustedAimForFPS ( class AWeapon* W );
	void ServerReleaseUse ( );
	bool ReleaseUse ( );
	void TriggerUnused ( );
	bool Use ( );
	void ServerLookBack ( int NewYaw );
	void LookBack ( );
	bool CanPickupSupplies ( );
	bool CanPickupWeapon ( );
	void SendDisplayLocalMessage_AutoToClient ( struct FString msg );
	void ResetFromWarmup ( );
	void ClientReset ( );
	void ResetCameraMode ( );
	void ClientResetLocationToPlayerStart ( struct FVector PlayerStartLoc, struct FRotator PlayerStartRot );
	void ResetLocationToPlayerStart ( struct FVector PlayerStartLoc, struct FRotator PlayerStartRot );
	void NotifyClientReset ( unsigned long bOnlyDynamicActors );
	void eventServerSetSteamID ( struct FUniqueNetId Steam_Id );
	void SetSteamId ( );
	void ToggleVivoxInput ( unsigned long bTalk );
	void VivoxReset ( );
	void VivoxJoin ( );
	void ClientVivoxChannelLeave ( );
	void ClientVivoxSetJoinToken_BPart ( struct FString Token_BPart );
	void ClientVivoxSetJoinToken_APart ( struct FString Token_APart );
	void VivoxLogin ( );
	struct FString VivoxGenerateJoinToken ( struct FString AccountUri, struct FString TeamChannelUri, unsigned long bEchoChannel );
	struct FString VivoxGenerateLoginToken ( struct FString AccountUri );
	void ServerVivoxRequestJoinToken ( struct FString AccountUri, struct FString TeamChannelUri, unsigned long bEchoChannel );
	void ClientSetVivoxTeamChannelUri ( struct FString strRoomSerial, unsigned long bEchoChannel );
	void ServerVivoxSetTeamChannelInfo ( struct FString strRoomSerial, unsigned long bEchoChannel );
	void VivoxRequestJoinToken ( );
	void ClientVivoxSetLoginToken_BPart ( struct FString Token_BPart );
	void ClientVivoxSetLoginToken_APart ( struct FString Token_APart );
	void ServerVivoxRequestLoginToken ( struct FString AccountUri );
	void VivoxRequestLoginToken ( );
	void eventReceivedPlayer ( );
	void ShowHelpImage ( unsigned long bShow );
	void ShowScoreBoard ( unsigned long bShow_ );
	void ChangeCR ( float AddedCR );
	int GetCR ( );
	void ClearViewTargetKillerOutline ( );
	bool IsRoundEnding ( );
	void SetRoundEndState ( unsigned long bEnter );
	void RoundHasEnded ( class AActor* EndRoundFocus );
	void RemoveAllDeadDisplayPawnList ( );
	void ClientRoundEnding ( );
	void ReadyToRoundEnd ( );
	void ClientArbitratedMatchEnded ( );
	void NotifyGameEnded ( class AActor* EndGameFocus );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void ToggleGrenadeLauncher ( );
	void ToggleLaserSite ( );
	void ToggleSilencer ( );
	void SetPortraitIcon ( struct FString inImgPath );
	void UpdateChaFXItem ( );
	void DoStare ( );
	void DoReload ( );
	bool LandingShake ( );
	void eventSetPostProcessAA_FXAA ( int fxaa );
	void ExecPostProcessAA_FXAA ( int fxaa );
	void eventMotionBlurSoftEdgeKernelSize ( float MotionBlurSoftEdge );
	void TogglePP ( unsigned long bShow );
	void eventSetPostProcessShowInGame ( unsigned long bShowInGame, struct FName EffectName, int InIndex );
	class UMaterialInterface* GetMaterialInterfaceInPPE ( struct FName EffectName, int InIndex );
	class UPostProcessEffect* eventGetPostProcessEffect ( struct FName EffectName, int InIndex );
	class UPostProcessChain* GetPostProcessChain ( int InIndex );
	void RemoveAllPostProcessingChains ( );
	void RemovePostProcessingChain ( int InIndex );
	int GetPlayerPostProcessChainsSize ( );
	void InsertPostProcessingChain ( class UPostProcessChain* InChain, int InIndex );
	void eventInitInputSystem ( );
	void eventReceivedReservedPreset ( );
	bool IsChangeSpectatingCameraMode ( );
	void SearchForViewTarget ( );
	void ServerSetSpectatorLocAndRotation ( struct FVector NewLoc, struct FRotator NewRot );
	void SetSpectatorLocAndRotation ( struct FVector* NewLoc, struct FRotator* NewRot );
	void PlayDyingViewTarget ( );
	void PawnDied ( class APawn* P );
	void CheckSpectator ( );
	void ClientSetCameraMode ( struct FName NewCamMode );
	void ServerSetCameraMode ( struct FName NewCamMode );
	void ServerCamera ( struct FName NewMode );
	void BecomeViewTarget ( class APlayerController* PC );
	void SetCameraMode ( struct FName NewCamMode );
	void ServerPresetWeapon ( unsigned char preset );
	void RequestSetPreset ( unsigned char PresetInput );
	bool ToggleDisplaySelectingWeapon ( );
	void ServerSetPlayerStartType ( unsigned char Player_StartType );
	void SetPlayerStartType ( unsigned char Player_StartType );
	void SetSpawnPoint ( int SpawnPoint );
	void PresetWeapon ( unsigned char Preset_oneBase );
	bool CanUseLockedPresetScene ( );
	void ServerDecisionAtLockPresetScene ( );
	void DecisionAtLockPresetScene ( );
	void SwitchWeapon ( unsigned char T );
	void HideSkillActorIndicator ( unsigned char Index );
	void ShowSkillActorIndicator ( class ACombatPawn_AttackSkillActor* AtkAct );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void SetTimerRestoreGameKillCount ( );
	void timerRestoreGameKillCount ( );
	void RestoreGameKillCount ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void RemoveUISoundPlayingFunc ( );
	void NotifyKillMarkSoundPlaying ( );
	void NotifyUISoundPlaying ( );
	void RemoveDamageFunc ( );
	void SetBeDamaged ( );
	bool IsDamageCameraShake ( class ACombatPawn* CBP );
	void NotifyClientTakeHit ( class APawn* Attacker, class UClass* DamageType, struct FVector HitLocation );
	void ShowHitMark ( );
	bool CanSwitchWeapon ( );
	void CheckJumpOrDuck ( );
	void DisableDebugCamera ( );
	float AimHelpModifier ( );
	void ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation );
	float eventGetForegroundFOVAngle ( );
	void AdjustFOV ( float DeltaTime );
	bool CheckBulletWhip ( class USoundCue* BulletWhip, float BulletWhipRadius, float BulletWhipAdditionalHeight, class ACombatPawn* ViewTargetPawn, unsigned long bDebugBulletWhip, struct FVector* FireLoc, struct FVector* HitLocation );
	void UnPossess ( );
	void ApplyArmorDataIcon ( );
	void ApplyInstanceItem ( );
	void ApplyReservedPreset ( );
	void ApplyPresetMouseSensitive ( );
	void GivePawn ( class APawn* NewPawn, unsigned char inTeamNum );
	void VivoxInitInputDevice ( );
	void ReceivedPlayerReplicationInfo ( );
	void SetLocalPawn ( class APawn* NewPawn, unsigned char inTeamNum );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
	void SetUseTiltForwardAndBack ( unsigned long bActive );
	void SetOnlyUseControllerTiltInput ( unsigned long bActive );
	void SetControllerTiltActive ( unsigned long bActive );
	bool IsControllerTiltActive ( );
	class APawn* GetTargetAdhesionFrictionTarget ( float MaxDistance, struct FVector* CamLoc, struct FRotator* CamRot );
	class APlayerReplicationInfo* GetNextViewablePlayer ( int Dir );
	void ClientRestart ( class APawn* NewPawn, unsigned char inTeamNum );
	void ResetUI ( );
	void SetSkyLight ( );
	void RestSkill ( );
	void SetSpectatingCamMode ( struct FName NewSpectatingCamMode );
	bool UpdateSpectatingCameraMode ( );
	void DelayedServerVerifyViewTarget ( );
	void ClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void eventSpawnPlayerCamera ( );
	void Reset ( );
	class ACombatTeamGameHUD* GetCombatTeamGameHUD ( );
	void ClientSetHUD ( class UClass* newHUDType );
	void SpawnDefaultHUD ( );
	void eventClientWasKicked ( );
	void InitPlayerReplicationInfo ( );
	void eventDestroyed ( );
	void CheckDXTable ( );
	void eventPostBeginPlay ( );
	void ResetLocationToWorldCamera ( );
	void InitStatStorage ( );
	void eventPreBeginPlay ( );
	void CheckViewTargetLookAt ( class ACombatPawn* TargetPawn );
	void SetLocalPresetItemID ( int InPreset, int InSlotIndex, int InItemID );
	int GetLocalPresetItemID ( int InPresetIndex, int InSlotIndex );
	bool IsMouseAvailable ( );
	bool IsKeyboardAvailable ( );
	void SetHardwarePhysicsEnabled ( unsigned long bEnabled );
};

UClass* ACombatPC::pClassPointer = NULL;

// Class CombatGame.CombatLockedPresetScene
// 0x0018 (0x0090 - 0x0078)
class UCombatLockedPresetScene : public UInteraction
{
public:
	unsigned long                                      bDisplayLockPreset : 1;                           		// 0x0078 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDisplayPresetSelectWaitingScene : 1;             		// 0x0078 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bSelected : 1;                                    		// 0x0078 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bForceShowing : 1;                                		// 0x0078 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	struct FKeyBindingInfo                             LockPresetSceneKeyBindings;                       		// 0x007C (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1805 ];

		return pClassPointer;
	};

	void UpdateProgressBarUI ( );
	void UpdateLockedPresetSceneCount ( );
	void OnForceViewMarking ( );
	void OnSelect ( );
	void UpdateState ( struct FName NewState );
	void OnEndScene ( );
	void OnStartScene ( unsigned long bforceShow );
	void Initialize ( );
};

UClass* UCombatLockedPresetScene::pClassPointer = NULL;

// Class CombatGame.CombatLog
// 0x0000 (0x003C - 0x003C)
class UCombatLog : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1806 ];

		return pClassPointer;
	};

	void TestPrint_NotifyHit ( );
	void TestPrint_NotifyFire ( );
	int AllocateFireData ( class ACombatPC* Target, int WeaponID );
	void TestPrint_NotifyMatchOver ( );
	void TestPrint_NotifyRoundOver ( );
	void UpdateUserData ( int GameLogID, class ACombatPlayerReplicationInfo* Player );
	void InitUserData ( int GameLogID, class ACombatPlayerReplicationInfo* Player );
	void NotifyMatchOver ( );
	void NotifyMatchStart ( );
	void NotifyMatchStart_Test ( struct FString Map, struct FString Mode );
	void NotifyDesertion ( int GameLogID, class ACombatPlayerReplicationInfo* Player );
	void NotifyIntrude ( int GameLogID, class ACombatPlayerReplicationInfo* Player );
	void NotifyRoundOver ( int GameLogID );
	void NotifyRoundStart ( int* GameLogID );
	void OnMatchFinish ( );
	struct FString GetHitPartName ( unsigned char HitPart );
	struct FString GetWeaponName ( int WeaponIndex );
	struct FString GetUserName ( int userID );
	struct FString GetTeamName ( int TeamIndex );
	void Init ( );
	void OnInit ( );
	void SaveWeaponName ( int WeaponIndex, struct FString WeaponName );
	void SaveUserName ( int userID, struct FString UserName );
	void SetMode ( struct FString mode_ );
	void SetMapName ( struct FString map_ );
};

UClass* UCombatLog::pClassPointer = NULL;

// Class CombatGame.CombatLogData
// 0x0014 (0x0050 - 0x003C)
class UCombatLogData : public UObject
{
public:
	TArray< struct FWeaponFireData >                   FireDataList;                                     		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ACombatPC*                                   DataOwner;                                        		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                TransientFireCount;                               		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1807 ];

		return pClassPointer;
	};

	void Init ( class ACombatPC* OwnerPC );
	void eventGetFireData ( int WeaponID, struct FWeaponFireData* FireData );
};

UClass* UCombatLogData::pClassPointer = NULL;

// Class CombatGame.CombatLuaSystem
// 0x0000 (0x003C - 0x003C)
class UCombatLuaSystem : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1808 ];

		return pClassPointer;
	};

	void RequestMedalProgress ( struct FString AchievementRefCodeName );
	struct FString EndString ( );
	float EndFloat ( );
	int EndInt ( );
	bool EndBool ( );
	void EndVoid ( );
	class UCombatLuaSystem* args ( struct FString K );
	class UCombatLuaSystem* ArgB ( unsigned long K );
	class UCombatLuaSystem* ArgF ( float K );
	class UCombatLuaSystem* ArgI ( int K );
	class UCombatLuaSystem* BeginCall ( struct FString name_ );
	int TriggerLuaCallback ( int stat_, int arg_, int callback_index_ );
	int TriggerLuaCallbackByCodename ( struct FString codename_, int arg_, int callback_index_ );
	void PrintLog ( struct FString s_ );
	int RunScript ( struct FString cmd_ );
	int Reload ( unsigned long bIsServerPart );
};

UClass* UCombatLuaSystem::pClassPointer = NULL;

// Class CombatGame.CombatMailTransaction
// 0x0050 (0x008C - 0x003C)
class UCombatMailTransaction : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x003C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatMailTransaction.MailBoxListMap
	int                                                TotalPage;                                        		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                NewCount[ 0x3 ];                                  		// 0x007C (0x000C) [0x0000000000000000]              
	int                                                ExpiresCount;                                     		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1809 ];

		return pClassPointer;
	};

	int GetExpiresCount ( );
	int GetNewCount ( unsigned char TabType );
	int GetTotalPage ( );
	bool UpdateMailBoxState ( int Index, unsigned char _State );
	bool GetMailBoxList ( TArray< struct FMailBoxInfo >* _List );
	bool GetMailBoxInfo ( int Index, struct FMailBoxInfo* _MailBoxInfo );
	void AddNewMailBox ( int Index, struct FMailBoxInfo _MailBoxInfo );
};

UClass* UCombatMailTransaction::pClassPointer = NULL;

// Class CombatGame.CombatMain_Base
// 0x0008 (0x0080 - 0x0078)
class UCombatMain_Base : public UGFxObject
{
public:
	class UCombatGFxMoviePlayer*                       Owner;                                            		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowMouse : 1;                                   		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBackUpMouse : 1;                                 		// 0x007C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1810 ];

		return pClassPointer;
	};

	void KeyEvent ( int keyCode );
	void CallSetVoiceChatPlayerPosition ( int Number );
	void CallSetSystemCounterPosition ( int Number, int ViewNumber );
	void CallPlaySound ( int Number );
	void CallSetDialogButtonsDisabled ( int _Depth, struct FString OKBtn, struct FString CancleBtn );
	void CallUnloadDialog ( int _Depth );
	struct FString CallLoadDialog ( int _Receive_Number, struct FString _Mode, struct FString _Title, struct FString _Output, struct FString _OK, struct FString _Cancel, struct FString _Input, int MaxChar );
	void CallHideMouse ( );
	void CallShowMouse ( );
	void CallHide ( );
	void CallShow ( );
	void RestoreMouse ( );
	void BackUpMouse ( );
	void ToggleMouse ( unsigned long bShow );
	void HideMouse ( );
	void ShowMouse ( );
	bool IsShowMouse ( );
	void Init ( class UCombatGFxMoviePlayer* Movie );
};

UClass* UCombatMain_Base::pClassPointer = NULL;

// Class CombatGame.CombatMain_FrontEnd
// 0x0004 (0x0084 - 0x0080)
class UCombatMain_FrontEnd : public UCombatMain_Base
{
public:
	unsigned long                                      bPwTextFocus : 1;                                 		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowWall : 1;                                    		// 0x0080 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1811 ];

		return pClassPointer;
	};

	void receiveDialogInputTxtGetFocus ( unsigned long bFocus );
	void receiveFrontEndTestAwesomium ( struct FString Input_Text );
	void receiveFrontEndCommonEscKey ( );
	void CallHideImeLangBar ( );
	void CallShowImeLangBar ( );
	void CallHideLoadingWall ( );
	void CallShowLoadingWall ( );
	void CallHideTransparentWall ( );
	void CallShowTransparentWall ( );
	void CallClearFrontEndImage ( );
	void CallShowScene ( struct FString ShowSceneName );
	void CallUseSceneTransition ( unsigned long bUse );
	void CallHideCenterUI ( );
	void HideLoadingWall ( );
	void ShowLoadingWall ( );
	void HideTransparentWall ( );
	void ShowTransparentWall ( );
	void ShowScene ( struct FString ShowSceneName );
	void UseSceneTransition ( unsigned long bUse );
	void Init ( class UCombatGFxMoviePlayer* Movie );
	bool IsShowWall ( );
	bool IsPwTextFocus ( );
};

UClass* UCombatMain_FrontEnd::pClassPointer = NULL;

// Class CombatGame.CombatMapInfo
// 0x0004 (0x0040 - 0x003C)
class UCombatMapInfo : public UMapInfo
{
public:
	float                                              VisibilityModifier;                               		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1812 ];

		return pClassPointer;
	};

};

UClass* UCombatMapInfo::pClassPointer = NULL;

// Class CombatGame.CombatMatchroomPlayerData
// 0x0000 (0x003C - 0x003C)
class UCombatMatchroomPlayerData : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1813 ];

		return pClassPointer;
	};

	int GetPeaceMakerClanExp_InGame ( unsigned char myIngameTeamIndex );
	int GetViperCircleClanExp_InGame ( unsigned char myIngameTeamIndex );
	int GetPeaceMakerClanEmblemID_InGame ( unsigned char myIngameTeamIndex );
	int GetViperCircleClanEmblemID_InGame ( unsigned char myIngameTeamIndex );
	struct FString GetPeaceMakerClanName_InGame ( unsigned char myIngameTeamIndex );
	struct FString GetViperCircleClanName_InGame ( unsigned char myIngameTeamIndex );
	bool GetModeUIInfo ( struct FUIModeStruct* out_modeInfo );
	int GetRequiredClanMember ( );
	bool HasRequiredClanMember ( );
	void UpdateMatchroomSelfPingData ( );
	bool isMatchroomUsersCanPlayPing ( int RegionID );
	bool isMatchroomUserHavePenalty ( int Uid );
	bool isMatchroomUsersHavePenalty ( );
	bool GetMatchroomPlayerTierData ( int user_id, struct FMatchroomPlayerTierStruct* findData );
	TArray< struct FMatchroomPlayerStruct > GetRightCompUserList ( );
	TArray< struct FMatchroomPlayerStruct > GetLeftCompUserList ( );
	int GetRightTeamTierPoint ( );
	int GetLeftTeamTierPoint ( );
	struct FString GetWinGoalText ( );
	void SetWinGoalText ( struct FString _winGoalText );
	int GetPeaceMakerRankPoint ( );
	int GetViperCircleRankPoint ( );
	int GetPeaceMakerClanExp ( );
	int GetViperCircleClanExp ( );
	int GetPeaceMakerClanEmblemID ( );
	int GetViperCircleClanEmblemID ( );
	struct FString GetPeaceMakerClanName ( );
	struct FString GetViperCircleClanName ( );
	int GetPeaceMakerClanID ( );
	int GetViperCircleClanID ( );
	int GetRoomPassword ( );
	void GetAllowedLevel ( int* out_minLevel_, int* out_maxLevel_ );
	unsigned char GetGameOption ( int optionIndex_ );
	struct FString GetTitleString ( );
	unsigned char GetTitleNumber ( );
	unsigned char GetTitleType ( );
	unsigned char GetOpenType ( );
	void ClearMatchFinishErrorCode ( );
	void ClearMatchFinishReason ( );
	void ClearReturnFromInGameErrorCode ( );
	void ClearReturnFromInGameReason ( );
	unsigned char GetMacthFinishErrorCode ( );
	unsigned char GetMatchFinishReason ( );
	unsigned char GetReturnFromInGameErrorCode ( );
	unsigned char GetReturnFromInGameReason ( );
	struct FString GetUserName ( int Uid );
	bool GetUserID ( struct FString PlayerName, int* out_UID );
	unsigned char GetCurrentRegionID ( );
	unsigned char GetCurrentPreemptionState ( );
	int GetCurrentModeGroupRefIndex ( );
	int GetCurrentRealMapRefIndex_forRandom ( );
	int GetCurrentMapRefIndex ( );
	int GetCurrentModeRefIndex ( );
	int GetCurrentMissionRefIndex ( );
	int GetCurrentMatchroomMaxPlayerCount ( );
	unsigned char GetCurrentMatchroomState ( );
	int GetCurrentMatchroomNumber ( );
	unsigned char GetAllMemberCount ( );
	void GetTeamMemberCountForUserState ( unsigned char userState, unsigned char* vcTeamCount, unsigned char* pmTeamCount );
	unsigned char GetTeamMemberCount ( unsigned char TeamIndex );
	int GetHostUserID ( );
	unsigned char GetUserState ( int Uid );
	bool IsPlayer ( int Uid );
	bool IsInMatchroom ( int Uid );
	unsigned char GetMyState ( );
	bool IsHost ( int Uid );
	bool AmIHost ( );
	unsigned char GetMyTeamIndex ( );
	int GetMyUserID ( );
	bool GetMatchroomUserData_MyInfo ( struct FMatchroomPlayerStruct* findData );
	bool GetAllObserverData ( TArray< struct FMatchroomPlayerStruct >* List );
	bool GetObserverDataByUserID ( int Uid, struct FMatchroomPlayerStruct* findData );
	bool GetAllPlayerData_Sorted ( TArray< struct FMatchroomPlayerStruct >* List );
	bool GetAllPlayerData ( TArray< struct FMatchroomPlayerStruct >* List );
	bool GetPlayerDataByUserID ( int Uid, struct FMatchroomPlayerStruct* findData );
	bool GetMatchroomUserDataByUserID ( int Uid, struct FMatchroomPlayerStruct* findData );
};

UClass* UCombatMatchroomPlayerData::pClassPointer = NULL;

// Class CombatGame.CombatMeshBuilder
// 0x0001 (0x003D - 0x003C)
class UCombatMeshBuilder : public UObject
{
public:
	unsigned char                                      MeshCompositionType;                              		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1814 ];

		return pClassPointer;
	};

	bool SetMergedMaterial ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FMeshPart >* OwnerMeshParts );
	bool SetMergedMesh ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, unsigned char MeshGroup, class ULightEnvironmentComponent* LightEnvironment, class USkeletalMeshComponent* ShadowParentComp, class USkeletalMeshComponent* AnimParentComp, TArray< struct FMeshPart >* OwnerMeshParts );
	void ComposeMeshByMerge ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, unsigned char MeshGroup, class ULightEnvironmentComponent* LightEnvironment, class USkeletalMeshComponent* ShadowParentComp, class USkeletalMeshComponent* AnimParentComp, struct FName AttachedBoneName, TArray< class UAnimSet* > AnimSets, class UAnimTree* AnimTreeTemplate, unsigned long bForceAttacchToOwner, TArray< struct FMeshPart >* OwnerMeshParts );
	void DetachComponentsByPathNameFromSkeletalMeshComponent ( class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FString > SkeletalMeshPathNames, unsigned long OwnerMeshReset );
	void DetachComponentsByPathNameFromActor ( class AActor* OwnerActor, TArray< struct FString > SkeletalMeshPathNames, unsigned long OwnerMeshReset );
	void DetachAllComponentsFromSkeletalMeshComponent ( class USkeletalMeshComponent* OwnerMeshComponent );
	void ComposeMeshByComponent ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, class ULightEnvironmentComponent* LightEnvironment, class USkeletalMeshComponent* ShadowParentComp, class USkeletalMeshComponent* AnimParentComp, struct FName AttachedBoneName, TArray< class UAnimSet* > AnimSets, class UAnimTree* AnimTreeTemplate, unsigned long bForceAttacchToOwner, TArray< struct FMeshPart >* OwnerMeshParts );
	void eventComposeMesh ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FMeshPart > OwnerMeshParts, unsigned char MeshGroup, class ULightEnvironmentComponent* LightEnvironment, class USkeletalMeshComponent* ShadowParentComp, class USkeletalMeshComponent* AnimParentComp, struct FName AttachedBoneName, TArray< class UAnimSet* > AnimSets, class UAnimTree* AnimTreeTemplate, unsigned long bForceAttacchToOwner );
	unsigned char GetMeshCompostionType ( );
	void SetMeshCompositionType ( unsigned char CompositionType );
	void eventPreExit ( );
	void eventInit ( );
};

UClass* UCombatMeshBuilder::pClassPointer = NULL;

// Class CombatGame.CombatMinimapActor
// 0x0028 (0x01FC - 0x01D4)
class ACombatMinimapActor : public AActor
{
public:
	class UTexture2D*                                  MiniMapTexture;                                   		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OpacityRatio;                                     		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ShowEditorWidget : 1;                             		// 0x01DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      PrimaryMinimap : 1;                               		// 0x01DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      UseMinimapActorRadarRange : 1;                    		// 0x01DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              RadarRange;                                       		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WholeMapScaleVaule;                               		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WholeMapVCTeamRotationVaule;                      		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WholeMapPMTeamRotationVaule;                      		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WholeMapRotationVaule;                            		// 0x01F0 (0x0004) [0x0000000000000000]              
	int                                                WorldSizeX;                                       		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WorldSizeY;                                       		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1815 ];

		return pClassPointer;
	};

};

UClass* ACombatMinimapActor::pClassPointer = NULL;

// Class CombatGame.CombatNonNativeTypes
// 0x0000 (0x003C - 0x003C)
class UCombatNonNativeTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1816 ];

		return pClassPointer;
	};

};

UClass* UCombatNonNativeTypes::pClassPointer = NULL;

// Class CombatGame.CombatObjectPool
// 0x0084 (0x00C0 - 0x003C)
class UCombatObjectPool : public UObject
{
public:
	int                                                PoolLimitSize;                                    		// 0x003C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CurMemSize;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                ReferenceCounterMax;                              		// 0x0044 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ReferenceCounterIncrement;                        		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ReferenceCounterDecrement;                        		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ObjectCacheGarbageCollectionCycle;                		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ObjectCacheLifeTime;                              		// 0x0054 (0x0004) [0x0000000000000000]              
	TArray< struct FObjectCacheDatum >                 ObjectCache;                                      		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MergedDataCacheMax;                               		// 0x0064 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MergedDataPutReferenceCounterValue;               		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MergedDataReferenceCounterMax;                    		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MergedDataReferenceCounterIncrement;              		// 0x0070 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MergedDataReferenceCounterDecrement;              		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FMergedMeshList                             MergedMeshCache[ 0x3 ];                           		// 0x0078 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MSMaterialDataPutReferenceCounterValue;           		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MSMaterialDataReferenceCounterMax;                		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MSMaterialDataReferenceCounterIncrement;          		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MSMaterialDataReferenceCounterDecrement;          		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MSMaterialCacheLifeTime;                          		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              MSMaterialCacheGarbageCollectionCycle;            		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FMaterialSetListMaterialDatum >     MSMaterialList;                                   		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1817 ];

		return pClassPointer;
	};

	class UMaterialInterface* GetMaterialSetListMaterial ( struct Fdword InObjectID );
	void PutMaterialSetListMaterial ( struct Fdword InObjectID, class UMaterialInterface* InMaterial );
	void eventReleaseMaterialSetListMaterialData ( );
	void MaterialSetListMaterialCacheGarbageCollect ( );
	void CheckMaterialSetListMaterialCacheGarbageCollection ( float DeltaSeconds );
	void MeshBuildingDataGarbageCollect ( );
	void ReleaseMeshBuildingData ( );
	class UObject* GetPoolObject ( struct FString ObjectName, class UClass* ObjectClass, unsigned char ObjectType, unsigned long bForceCreate );
	void eventCreateObject ( struct FString ObjectName, class UClass* ObjectClass, unsigned long bForceCreate, unsigned char ObjectType );
	void ObjectCacheGarbageCollect ( );
	void CheckObjectCacheGarbageCollection ( float DeltaSeconds );
	void CheckGarbageCollection ( float DeltaSeconds );
	void ForceGarbageCollection ( );
	void eventUpdatePerSecond ( );
	int GetResourceSize ( );
	void ReleaseLevelDependenceObject ( );
	void ReleaseObjects ( );
	void eventRelease ( );
};

UClass* UCombatObjectPool::pClassPointer = NULL;

// Class CombatGame.CombatPawn
// 0x0588 (0x09E8 - 0x0460)
class ACombatPawn : public APawn
{
public:
	float                                              CustomGravityScaling;                             		// 0x0460 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseBotWeaponMovement : 1;                        		// 0x0464 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAllowDiagonalLadderClimb : 1;                    		// 0x0464 (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	unsigned long                                      bInitSavedLocation : 1;                           		// 0x0464 (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bRotationFollowsVelocity : 1;                     		// 0x0464 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUpdateEyeheight : 1;                             		// 0x0464 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bApplyInstanceItem : 1;                           		// 0x0464 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      PowerBullet_Buff : 1;                             		// 0x0464 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bIsBlockedByPawnCollision : 1;                    		// 0x0464 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIsInvulnerable : 1;                              		// 0x0464 (0x0004) [0x0000000000002020] [0x00000100] ( CPF_Net | CPF_Transient )
	unsigned long                                      bJustLanded : 1;                                  		// 0x0464 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bLandRecovery : 1;                                		// 0x0464 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bCanDisplayIconInTacticalMap : 1;                 		// 0x0464 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bIgnorePitch : 1;                                 		// 0x0464 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      DoDeathAnimPhysBlend : 1;                         		// 0x0464 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bPlayDamageAnim : 1;                              		// 0x0464 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      IsMoving : 1;                                     		// 0x0464 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bIsLocalPawn : 1;                                 		// 0x0464 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bIsCheatPawn : 1;                                 		// 0x0464 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bCheckPhysWalkingLedges : 1;                      		// 0x0464 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bWeaponImpactAttenuate : 1;                       		// 0x0464 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bSaveSkill : 1;                                   		// 0x0464 (0x0004) [0x0000000000000003] [0x00100000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLeftFootDown : 1;                                		// 0x0464 (0x0004) [0x0000000000002001] [0x00200000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bRespawnAction : 1;                               		// 0x0464 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      IgnoreKillZ : 1;                                  		// 0x0464 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      DeathCertificate : 1;                             		// 0x0464 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      WasCrouchedOnDeath : 1;                           		// 0x0464 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bStuckHandsOnDeath : 1;                           		// 0x0464 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bPotentialWallSmash : 1;                          		// 0x0464 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      bFinishedPrePlayDyingCheck : 1;                   		// 0x0464 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      IgnoreAimoffset : 1;                              		// 0x0464 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      UpdateHandGripPos : 1;                            		// 0x0464 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bDirtyWeaponAmmo : 1;                             		// 0x0464 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bGodMode : 1;                                     		// 0x0468 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bProcessFellOutOfWorld : 1;                       		// 0x0468 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      OnParachute : 1;                                  		// 0x0468 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bNeedToUpdateSkelpose : 1;                        		// 0x0468 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bAIIgnoreAimDir : 1;                              		// 0x0468 (0x0004) [0x0000000000004001] [0x00000010] ( CPF_Edit | CPF_Config )
	unsigned long                                      bIgnoreDamagedDecelerationRatio : 1;              		// 0x0468 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCanStaminaRecover : 1;                           		// 0x0468 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bBlockCrouch : 1;                                 		// 0x0468 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bSetForceSpamGrade : 1;                           		// 0x0468 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bOnFlashInability : 1;                            		// 0x0468 (0x0004) [0x0000000000000000] [0x00000200] 
	class ACombatPlayerReplicationInfoBase*            CachedPRI;                                        		// 0x046C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     DyingLocation;                                    		// 0x0470 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              FlyingAirSpeed;                                   		// 0x047C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LadderClimbType;                                  		// 0x0480 (0x0001) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned char                                      PawnBuffState;                                    		// 0x0481 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      IFFDisplayType;                                   		// 0x0482 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RecoilCount;                                      		// 0x0483 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      VelocityState;                                    		// 0x0484 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      RotationYaw;                                      		// 0x0485 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      IKHand;                                           		// 0x0486 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CombatPawnTeamNum;                                		// 0x0487 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PenetrateBeforeHit;                               		// 0x0488 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CrouchSpamGrade;                                  		// 0x0489 (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              LadderStrafingSpeed;                              		// 0x048C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              StrafeAllowDegreeOnLadder;                        		// 0x0490 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              StrafeAllowValueOnLadder;                         		// 0x0494 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AttachingDegreeOnLadder;                          		// 0x0498 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AttachingValueOnLadder;                           		// 0x049C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AllowedClimbUpDegreeOnLadder;                     		// 0x04A0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AllowedClimbUpValueOnLadder;                      		// 0x04A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AllowedClimbDownDegreeOnLadder;                   		// 0x04A8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AllowedClimbDownValueOnLadder;                    		// 0x04AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              VelocityReduceRatioForLanding;                    		// 0x04B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VelocityReduceRatioOnWalkingJump;                 		// 0x04B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCombatDialogCombiinationAudio*              DialogObj;                                        		// 0x04B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCBTakeHitInfo                              LastTakeHitInfo;                                  		// 0x04BC (0x003C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	struct FCBTakeHitInfo                              LastTakeHitInfoByLocalPlayer;                     		// 0x04F8 (0x003C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     MeshTranslationOffset;                            		// 0x0534 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector2D                                   MeshTranslationIntegralOffset;                    		// 0x0540 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     FixedMeshTranslationOffset;                       		// 0x0548 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              CrouchTranslationOffset;                          		// 0x0554 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              CrouchStartTime;                                  		// 0x0558 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              CrouchLength;                                     		// 0x055C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MeshTranslationKpAmt;                             		// 0x0560 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MeshTranslationKiAmt;                             		// 0x0564 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MeshTranslationFallingSpeed;                      		// 0x0568 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MeshTranslationZSpeed;                            		// 0x056C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     CombatSavedLocation;                              		// 0x0570 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              OldZ;                                             		// 0x057C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TossWeaponSpeed;                                  		// 0x0580 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TossSwappedWeaponSpeed;                           		// 0x0584 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class USkelControlSingleBone*                      RootRotControl;                                   		// 0x0588 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeAimOffset*                          AimNode;                                          		// 0x058C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatAnimBlendByPosture*                   CrouchNode;                                       		// 0x0590 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UCombatSkelCtrl_Recoil* >            RecoilNodes;                                      		// 0x0594 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USkelControlLookAt*                          LookAtCtrl;                                       		// 0x05A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatWeapon*                               MyCombatWeapon;                                   		// 0x05A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ACombatWeapon* >                     PassiveWeaponList;                                		// 0x05A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ACombatWeapon* >                     MyGrenadeWeapon;                                  		// 0x05B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ACombatWeapon* >                     MyPrimaryWeapon;                                  		// 0x05C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              SlopeBoostFriction;                               		// 0x05CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   CurrentSkelAim;                                   		// 0x05D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              BackwardSpeedPct;                                 		// 0x05D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StandardGroundSpeed;                              		// 0x05DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddMainAmmo_Buff;                                 		// 0x05E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddSubAmmo_Buff;                                  		// 0x05E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddMainMagazineAmmo_Buff;                         		// 0x05E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddSubMagazineAmmo_Buff;                          		// 0x05EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxMainMagazineAmmo_Buff;                         		// 0x05F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSubMagazineAmmo_Buff;                          		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReloadingRate_Buff;                               		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponChangeRate_Buff;                            		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxHealthRate_Buff;                               		// 0x0600 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthCureRate_Buff;                              		// 0x0604 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAutoCureHealthModifier_Buff;                   		// 0x0608 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundCrouchSpeedRate_Buff;                       		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundAccelationRate_Buff;                        		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundRunSpeedRate_Buff;                          		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundWalkingSpeedRate_Buff;                      		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailedRadarDistance_Buff;                       		// 0x061C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadarRange_Buff;                                  		// 0x0620 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GunAttackRate_Buff;                               		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GunGuardRate_Buff;                                		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeAttackRate_Buff;                             		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeGuardRate_Buff;                              		// 0x0630 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosiveAttackRate_Buff;                         		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosiveGuardRate_Buff;                          		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AddGrenade_Buff;                                  		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstanceItem_GroundCrouchSpeedRate_Buff;          		// 0x0640 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstanceItem_GroundAccelationRate_Buff;           		// 0x0644 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstanceItem_GroundRunSpeedRate_Buff;             		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstanceItem_GroundWalkingSpeedRate_Buff;         		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AP_Buff[ 0xA ];                                   		// 0x0650 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	int                                                APForExplosion_Buff;                              		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShortenRespawnDelay_Buff;                         		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamagedAccelerationRatio_Buff;                    		// 0x0680 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GunAttackRateForAI;                               		// 0x0684 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MeleeAttackRateForAI;                             		// 0x0688 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              GrenadeAttackRateForAI;                           		// 0x068C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                IgnoreCheckExpose;                                		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepFootStepSoundMultiplier;                       		// 0x0694 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      SoundGroupClass;                                  		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      CurrCharClassInfo;                                		// 0x069C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UClass*                                      CurrInstanceItemClassInfo;                        		// 0x06A0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class USkeletalMeshComponent*                      Left_Armor;                                       		// 0x06A4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      Right_Armor;                                      		// 0x06A8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              DefaultMeshScale;                                 		// 0x06AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       FamiliInfoType;                                   		// 0x06B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      RadioVoiceClass;                                  		// 0x06B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x06BC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              Bob;                                              		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Bob_Y;                                            		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Bob_Y_Freq;                                       		// 0x06C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BobSeperationFactor;                              		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AppliedBob;                                       		// 0x06D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              bobtime;                                          		// 0x06D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     WalkBob;                                          		// 0x06D8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraScale;                                      		// 0x06E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentCameraScale;                               		// 0x06E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraScaleMin;                                   		// 0x06EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraScaleMax;                                   		// 0x06F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraZOffset;                                    		// 0x06F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeSlot*                               FullBodyAnimSlot;                                 		// 0x06F8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UAnimNodeSlot*                               TopHalfAnimSlot;                                  		// 0x06FC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UCombatAnimBlendBySlotActive*                TopHalfParentNode;                                		// 0x0700 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UPhysicsAsset*                               PhysAssetForDeath;                                		// 0x0704 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CamOffset;                                        		// 0x0708 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeroCameraScale;                                  		// 0x0714 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HeroCameraPitch;                                  		// 0x0718 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HealthGaugeStep;                                  		// 0x071C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< struct FCameraShakeRotationFactor >        CameraShake_DecreaseByDepense;                    		// 0x0720 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      HitRangeForCameraShake;                           		// 0x072C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FCameraShakeRotationFactor                  CameraShakeMinRange;                              		// 0x0738 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FCameraShakeRotationFactor                  CameraShakeMaxRange;                              		// 0x0740 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CameraShakeSpeed;                                 		// 0x0748 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CameraShakeRecoverSpeed;                          		// 0x074C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CameraShakeRandom;                                		// 0x0750 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    CameraShakeOffset;                                		// 0x0754 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    AutoCorrectCameraShakeOffset;                     		// 0x0760 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DeltaCameraShake;                                 		// 0x076C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxFootstepDistSq;                                		// 0x0778 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxJumpSoundDistSq;                               		// 0x077C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoLandedSoundVelZSize;                            		// 0x0780 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistForBloodSplatter;                          		// 0x0784 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrounchEyeHeight;                                 		// 0x0788 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeathRagdollTime;                                 		// 0x078C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVectorWithFlag                             CompressedLastImpactLocation;                     		// 0x0790 (0x0010) [0x0000000000000020]              ( CPF_Net )
	class UCombatAnim_TurnInPlace*                     TurnInPlaceNode;                                  		// 0x07A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ViewTargetRotationInterpolationSpeed;             		// 0x07A4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                InterpolatedRemoteViewPitch;                      		// 0x07A8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              YawInterpolationSpeed;                            		// 0x07AC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                InterpolatedYaw;                                  		// 0x07B0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              EyeHeightInterpolationSpeed;                      		// 0x07B4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              InterpolatedEyeHeight;                            		// 0x07B8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              AimAssistDamageMultiplier;                        		// 0x07BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeleeAssistDamageMultiplier;                      		// 0x07C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastAimRotationTime;                              		// 0x07C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    LastAimRotation;                                  		// 0x07C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVectorWithFlag                             VelocityWithIsMoving;                             		// 0x07D4 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              VelocityMutiplyRatioToCollideOtherPawn;           		// 0x07E4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SlideFriction;                                    		// 0x07E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             WeaponImpactUndampedSound;                        		// 0x07EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             WeaponImpactUndampedVoice;                        		// 0x07F0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              PhysicCorpses;                                    		// 0x07F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FOutlineProperty >                  OutlinePropertyList;                              		// 0x07F8 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FOutlineProperty >                  ForegroundOutlinePropertyList;                    		// 0x0804 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FOutlineMaterialVectorParam >       OutlineMaterialParamList;                         		// 0x0810 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	float                                              SpawnProtectionAmbientCycleTime;                  		// 0x081C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FLinearColor                                SpawnProtectionAmbientGlow;                       		// 0x0820 (0x0010) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< struct FName >                             CurrentOutlineEventName;                          		// 0x0830 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FGlobalOutlineEvent                         OverrideOutlineEventData;                         		// 0x083C (0x0010) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UParticleSystemComponent*                    GetterPickupEffectComp;                           		// 0x084C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UCylinderComponent*                          PawnCollision;                                    		// 0x0850 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTimeDilationAnimInst*                       ActiveTimeDilationAnim;                           		// 0x0854 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ACombatExplosionActor* >             DyingExplosionActorsForTimeDilation;              		// 0x0858 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                ViewTargetRotation;                               		// 0x0864 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ACBInventoryManager*                         CBInvManager;                                     		// 0x0868 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatDecal*                                ShadowDecal;                                      		// 0x086C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              BelowFeetCheckDistance;                           		// 0x0870 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              BelowFeetCheckDistanceSq;                         		// 0x0874 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FPhysMaterialBelowFeet                      LastPhysMatBelowFeet;                             		// 0x0878 (0x0010) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FName                                       FootDownBoneName[ 0x2 ];                          		// 0x0888 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FootExtent;                                       		// 0x0898 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentTerminalVelocity;                          		// 0x08A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LeftDeathAnimTime;                                		// 0x08A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReachedGoalSplineTime;                            		// 0x08AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatHUD_IFFObject*                        IFFObject;                                        		// 0x08B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LocalHitBodyIndex;                                		// 0x08B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LocalHitDir;                                      		// 0x08B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       LastHitBone;                                      		// 0x08C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              WallSmashMod;                                     		// 0x08CC (0x0004) [0x0000000000000000]              
	float                                              MomentumEff;                                      		// 0x08D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     OnDeathVelocity;                                  		// 0x08D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              RagdollPushEff;                                   		// 0x08E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       RagdollPushBone;                                  		// 0x08E4 (0x0008) [0x0000000000000000]              
	float                                              RagdollUpKick;                                    		// 0x08EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NoRagdollVelocity;                                		// 0x08F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              WallSmashDist;                                    		// 0x08F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RagdollTraceStartOffset;                          		// 0x08F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USkelControlLimb*                            HandGripIKNode[ 0x2 ];                            		// 0x08FC (0x0008) [0x0000000000000000]              
	float                                              BanzaiImpulse;                                    		// 0x0904 (0x0004) [0x0000000000000000]              
	int                                                WallCheckSpreadYaw;                               		// 0x0908 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RollBob;                                          		// 0x090C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AmmorPoint[ 0xA ];                                		// 0x0910 (0x0028) [0x0000000000002000]              ( CPF_Transient )
	int                                                AmmorPointForExplosion;                           		// 0x0938 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AmmorItemGrade;                                   		// 0x093C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FImpulseData >                      PhysBodyImpulseMap;                               		// 0x0940 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     StoredHandGrip;                                   		// 0x094C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              fReplicatedCustomTimeD;                           		// 0x0958 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CriticalDamagePitch;                              		// 0x095C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastApplyFamilyInfoTime;                          		// 0x0960 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatItemFXBase*                           ChaFXUpperItem;                                   		// 0x0964 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatItemFXBase*                           ChaFXFootItem;                                    		// 0x0968 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatSkill_TrophyTurret*                   TrophySkillObject;                                		// 0x096C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatSkill_SentryGun*                      SentryGunSkillObject;                             		// 0x0970 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AdditionalDamagedDecelerationRatio;               		// 0x0974 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDamagedDecelerationRatio;                      		// 0x0978 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCrouchSpamValue >                  CrouchValue;                                      		// 0x097C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CrouchStamina;                                    		// 0x0988 (0x0004) [0x0000000000000000]              
	float                                              CrouchStaminaMax;                                 		// 0x098C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CrouchStaminaRecoverForSec;                       		// 0x0990 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CrouchStaminaUseValue;                            		// 0x0994 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CrouchStaminaHoldTime;                            		// 0x0998 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CrouchSpamGradeZeroRange;                         		// 0x099C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CrouchSpamGradeOneRange;                          		// 0x09A0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CrouchSpamGradeTwoRange;                          		// 0x09A4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CrouchSpamGradeThreeRange;                        		// 0x09A8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                ForceSpamGradeLevel;                              		// 0x09AC (0x0004) [0x0000000000000000]              
	struct FFlashEffectRepStruct                       FlashEffectInfo;                                  		// 0x09B0 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FFlashEffectRepStruct                       CurrentFlashEffectInfo;                           		// 0x09B8 (0x0008) [0x0000000000000000]              
	float                                              FlashEffectSyncDeltaTime;                         		// 0x09C0 (0x0004) [0x0000000000000000]              
	float                                              FlashEffectSyncDelay;                             		// 0x09C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlashEffectMaxTime;                               		// 0x09C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlashEffectStartTime;                             		// 0x09CC (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           OutlineRenderableModeTypeList;                    		// 0x09D0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDetachDroppedWeapon__Delegate;                		// 0x09DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1818 ];

		return pClassPointer;
	};

	void SetFlashInability ( unsigned long bInability );
	struct FVector GetHeadLocation ( );
	void OnFlashEffectInfoChanged ( unsigned long bForce );
	void ShowFlashEffect ( float NewFlashIntensity, float NewAfterImageIntensity, float PassedTime, float PlayRate );
	void SetFlashBangEffect ( int EffectType );
	void UpdateFlashBangEffect ( float DeltaTime );
	bool IsUnderFlashEffect ( unsigned long bOnlyInability );
	void eventTick ( float DeltaTime );
	void GatheringLastTakeHitInfo ( );
	void eventServerSetCrouchStamina ( float newVal );
	void eventServerSetBlockCrouch ( unsigned long newVal );
	void StopCrouchHoldTimer ( );
	void eventStartCrouchHoldTimer ( );
	void eventServerStartCrouchHoldTimer ( );
	void SetForceSpamGradeMode ( unsigned long NewValue );
	void SetForceSpamGradeLevel ( int NewValue );
	void eventUpdateCrouchStamina ( float DeltaSeconds );
	void OnMissionEvent ( class USeqAct_MissionEvent* Action );
	bool SupportTakeDamageDataSave ( );
	void GetSuit ( struct FString CBFamilyInfoClassName );
	bool IsPlayerOperating ( );
	bool GetGoreLevel ( );
	class AActor* GetTouchingActor ( class UClass* TouchingClass );
	bool InGodMode ( );
	void RecalculateGripOffset ( );
	void SetHandGripOffset ( );
	void SetIKPrePassBone ( );
	void SetGripIK ( int Hand, unsigned long UseIK );
	float GetDeathRagDollImpulseRate ( struct FName BoneName );
	void SuppressRagdollPopup ( );
	void PlayCombWordsByPawn ( class USoundCue* SC1, class USoundCue* SC2, class USoundCue* SC3 );
	void ServerSetIgnoreKillZ ( unsigned long IgnoreZ );
	void BlendBetweenAnimsets ( float AnimSetBlendTime );
	bool eventIsForeheadShot ( int Index );
	bool eventIsHeadShot ( int Index );
	int eventGetPureBodyIndex ( int Index );
	bool eventIsLastHit ( int Index );
	void DeactivteSkill ( int Idx );
	void ActivteSkill ( int Idx, unsigned long bActiveWeapon );
	void eventCheckMeleeAttackCollision ( );
	void StartUseSkill ( unsigned char SkillGroupNum );
	void RemoveActiveSkillByIndex ( int SkillIndex );
	void RagdollWithImpact ( );
	void GravityBack ( );
	void eventImpactRagdoll ( );
	void LoosenRagdollJoints ( );
	void TightenRagdollJoints ( );
	void RegisterDeadDisplayPawnList ( );
	bool FastWallCheck ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceComplex );
	void GoRagdoll_MissionPawn ( );
	void PlayDying ( class UClass* DamageType, struct FVector* HitLoc );
	void eventTornOff ( );
	bool CheckWallSmash ( );
	bool CheckHandsStuckOnDeath ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	bool IsPlayerControllPawn ( );
	struct FName eventGetFamilyInfoType ( );
	bool NeedToRemoveDeadBody ( );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	void NotifyAllWeaponAmmoChanged ( );
	void RemoveFromInventory ( class AInventory* ItemToRemove, unsigned long bIngoreWeaponChange );
	class ACombatWeapon* FindWeaponByGroup ( unsigned char Group );
	bool IsPossessWeaponByGroup ( unsigned char Group );
	class ACombatWeapon* FindPickupableWeaponByGroup ( unsigned char Group );
	bool CanPickupSupplies ( );
	bool CanSelectSkillClass ( );
	bool CanPickupWeapon ( );
	void EndViewTarget ( class APlayerController* PC );
	void BecomeViewTarget ( class APlayerController* PC );
	void InitCameraEyeHeight ( );
	void PlayDyingExplosionActorsForTimeDilation ( class UTimeDilationAnim* Anim );
	void AddDyingExplosionActorsForTimeDilation ( class ACombatExplosionActor* ExplosionActor );
	void SetGetterPickupParticles ( class UParticleSystem* NewGetterPickupEffect );
	void PlaySoloChat_KillVoice ( );
	bool IsLocalPlayerController ( );
	void PlaySoloChat_Spawn_Ready ( );
	void PlaySoloChat_Spawn ( );
	void PlaySoloChat_AutoHeal ( );
	void PlaySoloChat_OutOfAmmo ( );
	void PlayDyingSound ( );
	void ShoutGrenadeThrow ( class ACombatProjectile* Prj );
	void ShoutSeeEnemyTeamDeath ( );
	void ShoutSeeOurTeamDeath ( );
	bool HasSeeEnemyDeathSound ( );
	bool HasGrenadeWarningSound ( );
	struct FString GetPlayerName ( );
	void Dev_UpdateDevelopeMessage ( struct FString msg );
	bool IsAlone ( );
	float GetCorpses ( );
	bool DoJump ( unsigned long bUpdating );
	void ClimbLadder ( class ALadderVolume* L );
	void VolumeBasedDestroy ( class APhysicsVolume* PV );
	void eventOutsideWorldBounds ( );
	class ACBWeaponAttachment* eventGetWeaponAttachment ( );
	void ForceKill ( );
	void ReleasePostProcess ( class ACombatPlayerControllerBase* InLocalPC );
	void ApplyPostProcess ( class ACombatPlayerControllerBase* InLocalPC );
	void eventApplyInstanceItemInfo ( );
	void eventApplyFamilyInfo ( );
	void ClearAutoHeal ( );
	void JumpOffPawn ( );
	void eventBaseChange ( );
	bool CanBeBaseForPawn ( class APawn* aPawn );
	void TakeFallingDamage ( );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void eventPostSetBuff ( );
	void eventPreSetBuff ( );
	void eventUpdateHealthMax ( );
	unsigned char GetOtherTeamNum ( unsigned char InTeam );
	bool IsSameTeamByController ( class AController* Con );
	void eventEncroachedBy ( class AActor* Other );
	struct FMaterialImpactEffect GetBodyImpact ( int BoneIndex, class UClass* DamageType, unsigned long LastHitEffect );
	struct FMaterialImpactEffect GetBodyMaterialImpactEffect ( class UCBPhysicalMaterialProperty* PhysicalProperty, class UClass* DamageType, unsigned long LastHitEffect );
	class UCBPhysicalMaterialProperty* GetBodyPhysicalMaterialProperty ( int BoneIndex, class UClass* DamageType );
	bool CanMeleeAttack ( );
	void ApplyWeaponAnimset ( class UAnimSet* InMasterAnimset, class UAnimSet* InSubAnimset );
	void AddCameraShakeOffset ( struct FRotator* R );
	bool IsValidFireSound ( );
	void SetSkillWeaponRemainAmmo ( int SkillIndex, unsigned char SubMagazine, unsigned char SubAmmoCount );
	void SwitchToBestWeapon ( unsigned long bForceADifferentWeapon );
	void SetWeapAnimType ( struct FName AnimType );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	struct FRotator eventGetBaseAimRotation ( );
	bool eventInFreeCam ( );
	float GetEffectedWeaponReloadTime ( float DefaultReloadTime );
	float GetAnimLength ( struct FName SeqName );
	void SetDyingPhysics ( );
	void StopAmbientSound ( );
	void PlayAmbientSound ( );
	void ThrowWeaponOnDeath ( );
	void MeleeAttackStarted ( class ACombatWeapon* Weap );
	void AdjustDamageByAP ( class ACombatWeapon* cWeapon, class UClass* DamageType, unsigned char HitParts, class AActor* DamageCauser, int* Damage );
	bool IsHitByFell ( class UClass* DamageType );
	bool IsDirectAttack ( class UClass* DamageType );
	void ApplyAmmorPoint ( );
	void SetMovementRateBuff ( float NewGroundCrouchSpeedRate_Buff, float NewGroundWalkingSpeedRate_Buff, float NewGroundRunSpeedRate_Buff, float NewGroundAccelationRate_Buff );
	void InitCurrentPresetInstanceItem ( );
	void ClientInstanceItemBuff ( float SeverInstanceItem_GroundCrouchSpeedRate_Buff, float ServerInstanceItem_GroundWalkingSpeedRate_Buff, float ServerInstanceItem_GroundRunSpeedRate_Buff, float ServerInstanceItem_GroundAccelationRate_Buff );
	void AddInstanceItems ( );
	bool IsEnableChaFXItem ( );
	void ClearChaFXItem ( );
	void UpdateChaFXItem ( );
	void LoadChaFXFootItem ( int ItemIndex );
	void LoadChaFXUpperItem ( int ItemIndex );
	void ClientInstanceItemInfo ( class UClass* NewInstanceItemInfo );
	void ClientSetFamilyInfo ( class UClass* NewFamilyInfo );
	void SetInstanceItemInfo ( class UClass* NewInstanceItemInfo );
	void SetFamilyInfo ( class UClass* NewFamilyInfo );
	bool IsFemale ( );
	void AddDefaultInventory ( TArray< class UClass* > AdditionalInvetoryClass );
	void AddPresetInventory ( );
	void ClientDiscardInventory ( );
	unsigned char GetCurrentPreset ( );
	void ApplyReservedPreset ( );
	class UPresetManager* GetPresetManager ( );
	float PlayPawnAnimation ( struct FName SeqName, unsigned long bFullBody, float PlayRate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, float StartTime, float EndTime );
	void PlayInvulnerablePawn ( unsigned long Play );
	void UpdateInvulnerablePawn ( );
	int eventSetOutlineProperty ( struct FName EventName, unsigned long bEnable, float MITVPassedTime, unsigned long bSkipCharacterMesh );
	void ClearOutlineProperty ( );
	void SetAllPawnOutlineProperty ( struct FName EventName, unsigned long bEnable, unsigned char ApplyTeamIndex, float MITVPassedTime );
	void UpdateOutlineProperty ( unsigned long bSkipCharacterMesh );
	void InvulnerableTime ( );
	void SetInvulnerablePawn ( float fTime );
	void GetBuffedDamageByWeaponType ( unsigned char DamageType, class ACombatPawn* PawnInstigatedBy, int* InDamage );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum );
	void SwapWeapon ( class ACombatWeapon* RemovedWeapon, class ACombatWeapon* NewWeapon );
	void TossInventory ( class AInventory* Inv, struct FVector ForceVelocity );
	struct FVector GetTossVelocity ( unsigned long bSwapWeapon );
	class AWeapon* GetPendingWeapon ( );
	bool ReleaseUse ( );
	bool Use ( );
	class AWeapon* SwitchWeapon ( unsigned char NewGroup );
	struct FVector GetPawnViewLocation ( );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void ServerCrouchSpamGrade ( unsigned char GRADE );
	void eventSetCrouchSpamGrade ( unsigned char GRADE );
	void UpdateCrouchBlendTime ( unsigned char GRADE );
	void eventUpdateEyeHeight ( float DeltaTime );
	void ResetLandedFlags ( );
	bool IgnoreWalkBob ( );
	void ActuallyPlayFootstepSound ( int FootDown, unsigned long bIsFirstPerson );
	void eventPlayFootStepSound ( int FootDown );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void UpdateLandSound ( );
	void SimulatedLanded ( );
	void OwnerEvent ( struct FName EventName );
	void eventNotifyLandedFromPhysics ( );
	void ShoutReloading ( );
	void PlayLandingSound ( );
	void eventPlayJumpingSound ( );
	void PlayFallingDamageLandSound ( );
	void NotifyHitEvent ( class AController* Attacker, int Damage, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, class UClass* DamageType, unsigned long bLastHit );
	void NotifyClientTakeHit ( class APawn* Attacker, class UClass* DamageType, class AActor* DamageCauser );
	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void ProcessSuicide ( class UClass* DamageType );
	class AController* SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType );
	void ReduceVelocityByDamage ( class AWeapon* InWeapon );
	float GetDamagedDecelerationRatio ( class ACombatWeapon* InWeapon );
	void Survived ( class AController* InstigatedBy, class UClass* DamageType, int actualDamage, class AActor* DamageCauser );
	void SpawnBSDecal ( class UMaterialInstance* Decal, struct FVector HitLocation, struct FVector HitNormal, unsigned long bOnFloor, struct FTraceHitInfo* HitInfo );
	void LeaveABloodSplatterDecal ( struct FVector HitLoc, struct FVector HitNorm );
	void eventDisplayHitInfomation_Test ( class ACombatPlayerControllerBase* LP, int body_Index, int hit_Damage );
	struct FString TranIndexToBodyname ( int BodyIndex );
	void LocalPlayTakeHitEffects ( );
	bool eventPlayTakeHitEffects ( );
	bool eventGetHitBodyType ( class UPhysicalMaterial* InHitPhysMaterial, unsigned char* HitBodyType );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void SetDamageAnimTime ( );
	void TakeRadiusDamageEx ( class AController* InstigatedBy, float BaseDamage, float MinDamage, float DamageRadius, float FullDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	bool CameraShakeRotation ( class ACombatPawn* InstigatedBy, unsigned char HitBodyType, unsigned long IsCriticalDamage );
	void ServerFellOutOfWorld ( class UClass* dmgType );
	void eventFellOutOfWorld ( class UClass* dmgType );
	class AActor* TraceUseCamWithPawnUseCam ( struct FVector* out_HitLocation );
	void TurnOffPawn ( );
	void SetHealthMax ( );
	void SetHealth ( int NewHealth );
	void eventStartRagDoll ( );
	void ChangePhysicAsset ( );
	void GoRagDoll ( );
	void SetMovementPhysics ( );
	class UClass* GetVoiceClass ( );
	void eventPlayActionVoice ( struct FName PlayName, unsigned char TeamIndex );
	void ClientPlayActionVoice ( class UClass* ActiveSkillClass, unsigned char TeamIndex );
	void ClientSyncMovementProperties ( );
	void SyncMovementProperties ( );
	void eventServerSetMovementProperties ( class ACombatWeapon* TargetWeapon );
	void SetPawnRBChannels ( unsigned long bRagdollMode );
	void SetWeaponImpactUndampedVoice ( class USoundCue* NewWeaponImpactVoice );
	void SetWeaponImpactUndampedSound ( class USoundCue* NewWeaponImpactSound );
	float GetEyeHeight ( );
	void WeaponChanged ( );
	struct FRotator eventGetViewRotation ( );
	void AdjustCameraScale ( unsigned long bMoveCameraIn );
	void IncrementFlashCount ( class AWeapon* InWeapon, unsigned char InFiringMode );
	void FlashLocationUpdated ( class AWeapon* InWeapon, unsigned long bViaReplication, unsigned long bPenetration, struct FImpactInfo InImpactInfo, struct FVector* InFlashLocation );
	void ClearFlashLocation ( class AWeapon* InWeapon );
	void SetFlashLocation ( class AWeapon* InWeapon, unsigned char InFiringMode, unsigned long bPenetration, struct FImpactInfo InImpactInfo, struct FVector* NewLoc );
	struct FVector GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	void SetHeroCam ( struct FRotator* out_CamRot );
	void eventSetThirdPersonCamera ( unsigned long bNewBehindView );
	void ChangeVisibility ( unsigned long bVisible );
	void UpdateSoundClass ( );
	void eventReplicatedEvent ( struct FName VarName );
	void ApplyRecoilIndex ( int Idx );
	bool IsValiedInstanceItemClassInfo ( );
	bool IsValidCharMeshActor ( );
	bool IsValidCharClassInfo ( );
	class UClass* GetInstanceItemInfo ( );
	class UClass* GetFamilyInfo ( );
	bool eventIsReloadingWeapon ( );
	bool IsAIPawn ( );
	void SetLocalPawn ( unsigned long bFlag, unsigned char inTeamNum );
	bool IsLocalPawn ( );
	void UnPossessed ( );
	void NotifyLocalPlayerTeamReceived ( );
	void UpdateTeamOutline ( );
	void NotifyTeamChanged ( );
	bool CanDrawOutline ( struct FName EventName );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	bool eventSetCharacterResourceFromArmorInfo ( );
	bool eventSetCharacterResourceFromFamilyInfo ( );
	struct FString GetPortraitImgPath ( );
	unsigned char GetTeamNum ( );
	void UpdateHandActorMesh ( );
	class ACombatHandActor* eventGetHandActor ( );
	void SetCharacterBuffFromInfo ( );
	bool IsValidPawnBuff ( );
	void eventSetPawnBuffState ( unsigned char SetState );
	void eventResetCharacterPassiveSkillBuff ( );
	bool CanClimbLadder ( class ALadderVolume* LV, unsigned long bEnteredLadder );
	void InitLadderProperties ( );
	void SetLadderProperty ( float InStrafingSpeed, float InStrafingAllowDegree, float InAttachingDegree );
	void eventSetDecalShadow ( unsigned long bSet );
	void InitCrouchTranslation ( );
	float GetCorpseTime ( );
	void eventSetInvManager ( class AInventoryManager* InInvManager );
	void PostBeginPlay ( );
	void ApplyLightEnvironmentOption ( );
	void eventRemoveWeaponList ( class ACombatWeapon* InWeap );
	void eventAddWeaponList ( class ACombatWeapon* InWeap );
	void RemovePassiveWeapon ( class ACombatWeapon* InWeap );
	void AddPassiveWeapon ( class ACombatWeapon* InWeap );
	void SetMyCombatWeapon ( class ACombatWeapon* NewWeapon );
	void eventDestroyed ( );
	void ClearPawnProperties ( );
	void ClearIFFHUD ( class ACombatPC* LocalPC );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void eventIgnorePostRenderFor ( );
	bool eventCanDisplayIconInTacticalMap ( );
	bool eventCanDisplayIFF ( );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void eventEndCrouch ( float HeightAdjust );
	void eventStartCrouch ( float HeightAdjust );
	void eventSetPlayedDeath ( unsigned long bFlag );
	void SetBaseEyeheight ( );
	void PlantTrophyTurret ( );
	void TryToPlantTrophyTurret ( class UCombatSkill_TrophyTurret* inTrophySkillObj );
	void PlantSentryGun ( );
	void TryToPlantSentryGun ( class UCombatSkill_SentryGun* inSentryGunSkillObject );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	float eventGetCurrentSpeed ( );
	struct FName eventGetActorName ( );
	void SetMovementProperties ( class ACombatWeapon* NewWeapon );
	void UpdateMovementProperties ( );
	float GetWalkingSpeed ( );
	struct FVector GetLocalVelocityPct ( );
	void ClearCompressedImpactLocation ( );
	void SetCompressedImpactLocation ( unsigned long bPenetration, struct FVector* InLocation );
	void ForceUnCrouch ( );
	void StopPawnAnimation ( float BlendTime );
	int PlayPawnAnim ( float AnimDuration, float StartTime, struct FCustomAnimData* CurrentStateInfo );
	class UPhysicalMaterialPropertyBase* GetMaterialBelowFeet ( );
	void UpdateViewTargetRotation ( );
	bool IsFirstPerson ( );
	void ClearMeshTranslationOffset ( unsigned long bOnlyHeightOffset );
	bool IsInvisible ( );
	void RestorePreRagdollCollisionComponent ( );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void PlayTimeDilationAnim ( class UTimeDilationAnim* Anim, float Rate, unsigned long bLoop, unsigned long bRandomStartTime, float Duration );
	void OnDetachDroppedWeapon ( );
};

UClass* ACombatPawn::pClassPointer = NULL;

// Class CombatGame.CombatGuyBase
// 0x000C (0x09F4 - 0x09E8)
class ACombatGuyBase : public ACombatPawn
{
public:
	float                                              Client_DistanceOfCorsshairTargetForUI;            		// 0x09E8 (0x0004) [0x0000000000000000]              
	float                                              CheckTargetedForUI_DotMin;                        		// 0x09EC (0x0004) [0x0000000000000000]              
	float                                              CheckTargetedForUI_DotMax;                        		// 0x09F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1819 ];

		return pClassPointer;
	};

	void ShoutReloading ( );
	void ShoutGrenadeThrow ( class ACombatProjectile* Prj );
	void ShoutGrenadeWarning ( );
	bool HasGrenadeWarningSound ( );
	void ShoutSeeEnemyTeamDeath ( );
	bool HasSeeEnemyDeathSound ( );
	void ShoutSeeOurTeamDeath ( );
	unsigned char GetIFFFriendlyType ( class APlayerController* PC );
	unsigned char GetIFFEnemyType ( class APlayerController* PC );
	bool CheckTargetedForUI ( class APlayerController* targeterPC );
	void UpdateIFF ( class APlayerController* PC, unsigned long bEnemy, int _IFFType, int _X, int _Y );
	void GetIFF ( );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void eventIgnorePostRenderFor ( );
	unsigned char GetHealthStat ( );
	bool ShouldDisplayIFF ( class APlayerController* PC, class UCanvas* Canvas, unsigned long bEnemy, int* _IFFType, int* _X, int* _Y );
	void RemovePostRenderedActorForUI ( );
	void AddPostRenderedActorForUI ( );
	void eventDestroyed ( );
	void PostBeginPlay ( );
	void PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
};

UClass* ACombatGuyBase::pClassPointer = NULL;

// Class CombatGame.CombatGuy_NPC
// 0x0098 (0x0A8C - 0x09F4)
class ACombatGuy_NPC : public ACombatGuyBase
{
public:
	struct FPointer                                    VfTable_ICCSPawn;                                 		// 0x09F4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              MaxAccelRate;                                     		// 0x09F8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxAirSpeed;                                      		// 0x09FC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxGroundSpeed;                                   		// 0x0A00 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MeshScale;                                        		// 0x0A04 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FString                                     PrimaryWeapon;                                    		// 0x0A08 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SecondaryWeapon;                                  		// 0x0A14 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     MeleeWeapon;                                      		// 0x0A20 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      MovementType;                                     		// 0x0A2C (0x0001) [0x0000000000000000]              
	unsigned char                                      AlertnessState;                                   		// 0x0A2D (0x0001) [0x0000000000000000]              
	unsigned char                                      WantedCoverPose;                                  		// 0x0A2E (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentCoverPose;                                 		// 0x0A2F (0x0001) [0x0000000000000000]              
	unsigned long                                      bShouldCover : 1;                                 		// 0x0A30 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInCover : 1;                                     		// 0x0A30 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      ThrowRecheck : 1;                                 		// 0x0A30 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsReplicateCurTargetName : 1;                    		// 0x0A30 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              CoverPct;                                         		// 0x0A34 (0x0004) [0x0000000000000000]              
	float                                              CoverPoseBlendTimeOverride;                       		// 0x0A38 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   AimPitchRange;                                    		// 0x0A3C (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AimYawRange;                                      		// 0x0A44 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              FollowAimingYawInterpSpeed;                       		// 0x0A4C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TurnToTargetYawInterpSpeed;                       		// 0x0A50 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DefaultRotationYawRate;                           		// 0x0A54 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class USkelControlLookAt*                          LookAtCtrl2;                                      		// 0x0A58 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlLookAt*                          LookAtMount;                                      		// 0x0A5C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlLookAt*                          LookAtMount2;                                     		// 0x0A60 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      AITarget;                                         		// 0x0A64 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                AINameStringIndex;                                		// 0x0A68 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   AmbientSoundCue;                                  		// 0x0A6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             AmbientSoundComponent;                            		// 0x0A70 (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FString                                     RepCurTargetName;                                 		// 0x0A74 (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     OldCurTargetName;                                 		// 0x0A80 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1820 ];

		return pClassPointer;
	};

	bool CanDrawOutline ( struct FName EventName );
	void GetEmphasized ( );
	void StartFire ( unsigned char FireModeNum );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum );
	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool NeedToTurn ( struct FVector Target );
	bool SimpleThrowGrenade ( );
	void GrenadeTime ( );
	bool SimpleArmGrenade ( );
	void AddDefaultInventory ( TArray< class UClass* > AdditionalInvetoryClass );
	void UpdateIFF ( class APlayerController* PC, unsigned long bEnemy, int _IFFType, int _X, int _Y );
	void SetAITarget ( class AActor* NewTarget );
	void UpdateAITarget ( );
	void PostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void StopAmbientSound ( );
	void PlayAmbientSound ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsInCover ( );
	void MoveToInCover ( struct FVector Dest );
	bool CoverPoseTransitionOver ( );
	void SetNoCoverPose ( );
	void SetCoverPose ( unsigned char NewCoverPose, float BlendTime );
	bool CanAim ( struct FRotator AimRotation );
	bool PostureTransitionOver ( );
	void SetPostureDefault ( );
	void SetCrouched ( unsigned long bCrouched );
	bool IsCrouched ( );
	void SetMovementSpeedDefault ( );
	void SetSpeed ( unsigned char Speed );
	unsigned char GetSpeed ( );
	void SetAlertnessDefault ( );
	void SetAlertness ( unsigned char NewAlertness );
	unsigned char GetAlertness ( );
	void SetMovementTypeDefault ( );
	void SetMovementType ( unsigned char NewMovementType );
	unsigned char GetMovementType ( );
};

UClass* ACombatGuy_NPC::pClassPointer = NULL;

// Class CombatGame.CombatPawn_AttackSkillActor
// 0x0058 (0x0AE4 - 0x0A8C)
class ACombatPawn_AttackSkillActor : public ACombatGuy_NPC
{
public:
	unsigned char                                      ActorTypeIndex;                                   		// 0x0A8C (0x0001) [0x0000000000000000]              
	struct FString                                     HudIconPath;                                      		// 0x0A90 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              Lifetime;                                         		// 0x0A9C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACombatPC*                                   Summoner;                                         		// 0x0AA0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      Deployed : 1;                                     		// 0x0AA4 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      SmokingHot : 1;                                   		// 0x0AA4 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	struct FName                                       DeployAnim;                                       		// 0x0AA8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeployTime;                                       		// 0x0AB0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ULensFlareComponent*                         IFF_Effect;                                       		// 0x0AB4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULensFlare*                                  IFF_FriendTemplate;                               		// 0x0AB8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ULensFlare*                                  IFF_FoeTemplate;                                  		// 0x0ABC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ULensFlare*                                  IFF_CoolingTemplate;                              		// 0x0AC0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SmokePct;                                         		// 0x0AC4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    DamageEffectPSC;                                  		// 0x0AC8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             DamageEffectPSCTemplate;                          		// 0x0ACC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageEffectSocketName;                           		// 0x0AD0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DamageSound;                                      		// 0x0AD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ExploEmitter;                                     		// 0x0ADC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   DeathSound;                                       		// 0x0AE0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1821 ];

		return pClassPointer;
	};

	void GetRemovedFromPC ( class ACombatPC* CPC );
	void GetRegisteredToPC ( class ACombatPC* CPC );
	void PlayDying ( class UClass* DamageType, struct FVector* HitLoc );
	void SetIFFBeacon ( unsigned long bIsCooling );
	void StopDamageEffect ( );
	void PlayDamageEffect ( );
	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool PlayExplosionffect ( );
	void GotoStateCompleteDeployed ( );
	void Timer_Died ( );
	void PostDeployedJobs ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ACombatPawn_AttackSkillActor::pClassPointer = NULL;

// Class CombatGame.CombatPawn_TrophyTurret
// 0x0088 (0x0B6C - 0x0AE4)
class ACombatPawn_TrophyTurret : public ACombatPawn_AttackSkillActor
{
public:
	struct FSTargetExplodeLocationInfo                 TargetExplodeLocationInfo;                        		// 0x0AE4 (0x0010) [0x0000000000000020]              ( CPF_Net )
	float                                              IdleRotDegPerSecond;                              		// 0x0AF4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimRotDegPerSecond;                               		// 0x0AF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAimTime;                                       		// 0x0AFC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FireHoldTime;                                     		// 0x0B00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FireAnim;                                         		// 0x0B04 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              FireCoolTime;                                     		// 0x0B0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FireMuzzlePS;                                     		// 0x0B10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FireSound;                                        		// 0x0B14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCombatGameTrophyTouchComponent*             TouchComponent;                                   		// 0x0B18 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UClass* >                            EnableCheckActorClasses;                          		// 0x0B1C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            ForbiddenCheckActorClasses;                       		// 0x0B28 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      ExplosionProjClass;                               		// 0x0B34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ACombatProjectile* >                 TouchedProjectiles;                               		// 0x0B38 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FRotator                                    DesiredAimRotation;                               		// 0x0B44 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlSingleBone*                      AimControl;                                       		// 0x0B50 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatAnim_BlendList*                       TrophyTurretAnimState;                            		// 0x0B54 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurTrophyState;                                   		// 0x0B58 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     SavedTargetExplodeLocation;                       		// 0x0B5C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                WeaponIndex;                                      		// 0x0B68 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1822 ];

		return pClassPointer;
	};

	void GetRemovedFromPC ( class ACombatPC* CPC );
	void GetRegisteredToPC ( class ACombatPC* CPC );
	void DoInterceptExplode ( );
	void TimerFireCoolTime ( );
	void TimerFireHoldTime ( );
	void eventOnAimmingComplete ( );
	void TimerAimming ( );
	void recvTargetExplodeLocation ( );
	bool eventOnAimming ( class ACombatProjectile** outProjectile );
	void SetTargetLocationInfo ( struct FVector InLocation );
	void GotoStateCompleteDeployed ( );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void NotifyLocalPlayerTeamReceived ( );
	void NotifyTeamChanged ( );
	bool CanBeBaseForPawn ( class APawn* aPawn );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void SetTouchComponent ( unsigned long bCollideActor );
	bool IsEnableCheckActorClass ( class AActor* inActor );
};

UClass* ACombatPawn_TrophyTurret::pClassPointer = NULL;

// Class CombatGame.CombatPawn_FlyingVehicle
// 0x0020 (0x0AAC - 0x0A8C)
class ACombatPawn_FlyingVehicle : public ACombatGuy_NPC
{
public:
	float                                              TransformDamageRate;                              		// 0x0A8C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TransformNum;                                     		// 0x0A90 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      CurrentTransformNum;                              		// 0x0A91 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystem*                             ExploEmitter;                                     		// 0x0A94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    DamageEffectPSC;                                  		// 0x0A98 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             DamageEffectPSCTemplate;                          		// 0x0A9C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageEffectSocketName;                           		// 0x0AA0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ExplosionSound;                                   		// 0x0AA8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1823 ];

		return pClassPointer;
	};

	void StopDamageEffect ( );
	void PlayDamageEffect ( );
	bool PlayExplosionffect ( );
	void OnExplosionParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TransformByDamage ( unsigned char TNum );
	void eventReplicatedEvent ( struct FName VarName );
	void PostBeginPlay ( );
};

UClass* ACombatPawn_FlyingVehicle::pClassPointer = NULL;

// Class CombatGame.CombatWaveFlyingVehicleBase
// 0x003C (0x0AE8 - 0x0AAC)
class ACombatWaveFlyingVehicleBase : public ACombatPawn_FlyingVehicle
{
public:
	struct FPointer                                    VfTable_Iinterface_WavePawn;                      		// 0x0AAC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FWavePawnData                               WavePawnData;                                     		// 0x0AB0 (0x0038) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1824 ];

		return pClassPointer;
	};

	unsigned char GetIFFEnemyType ( class APlayerController* PC );
};

UClass* ACombatWaveFlyingVehicleBase::pClassPointer = NULL;

// Class CombatGame.CombatWavePawnBase
// 0x003C (0x0AC8 - 0x0A8C)
class ACombatWavePawnBase : public ACombatGuy_NPC
{
public:
	struct FPointer                                    VfTable_Iinterface_WavePawn;                      		// 0x0A8C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FWavePawnData                               WavePawnData;                                     		// 0x0A90 (0x0038) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1825 ];

		return pClassPointer;
	};

	unsigned char GetIFFEnemyType ( class APlayerController* PC );
};

UClass* ACombatWavePawnBase::pClassPointer = NULL;

// Class CombatGame.CombatAIPawn_SelfDestuctBase
// 0x0028 (0x0AF0 - 0x0AC8)
class ACombatAIPawn_SelfDestuctBase : public ACombatWavePawnBase
{
public:
	class UParticleSystem*                             PS_DeathExplosion;                                		// 0x0AC8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SC_DeathExplosion;                                		// 0x0ACC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DamageType_DeathExplosion;                        		// 0x0AD0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Momentum_DeathExplosion;                          		// 0x0AD4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Damage_DeathExplosion;                            		// 0x0AD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageRadius_DeathExplosion;                      		// 0x0ADC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     WeaponCodeName;                                   		// 0x0AE0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                WeaponID;                                         		// 0x0AEC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1826 ];

		return pClassPointer;
	};

	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	void eventDoDeathExplosion ( );
	void PlayDying ( class UClass* DamageType, struct FVector* HitLoc );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool IsEnemy ( class AActor* Other );
	void eventPostBeginPlay ( );
};

UClass* ACombatAIPawn_SelfDestuctBase::pClassPointer = NULL;

// Class CombatGame.CombatGuy_Player
// 0x0030 (0x0A24 - 0x09F4)
class ACombatGuy_Player : public ACombatGuyBase
{
public:
	unsigned long                                      bNeedAutoHeal : 1;                                		// 0x09F4 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bPlayAutoHealStopEffect : 1;                      		// 0x09F4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                AddHealth;                                        		// 0x09F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AutoHealTime;                                     		// 0x09FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AutoHealAmount;                                   		// 0x0A00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAutoHealHealthModifier;                        		// 0x0A04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoHealConditionTime;                            		// 0x0A08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ACombatProjectile* >                 GrenadeIndicators;                                		// 0x0A0C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      HandActorClass;                                   		// 0x0A18 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACombatHandActor*                            HandActor;                                        		// 0x0A1C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageMultiplierForTest;                          		// 0x0A20 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1827 ];

		return pClassPointer;
	};

	void UpdateHandActorMesh ( );
	void DestroyHandActor ( );
	bool IsValidCharMeshActor ( );
	class ACombatHandActor* GetHandActor ( );
	void CreateHandActor ( );
	void eventDestroyed ( );
	void eventRegisterGrenadeIndicator ( class ACombatProjectile* Projectile, unsigned long bRegister );
	int GetEffectedMaxAutoHealHealth ( );
	float GetEffectedAutoHealtime ( );
	void AutoHealStopEffect ( );
	void StopAutoHeal ( );
	void ClearAutoHeal ( );
	void UpdateAutoHeal ( );
	int PendingHealth ( );
	void CalculateAutoHeal ( );
	void HealingHealth ( int NewHealth );
	void ResetWhenHeal ( );
	void StartAutoHeal ( );
	void CheckAutoHeal ( );
	void Tick ( float DeltaTime );
	bool CalcThirdPersonCam ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void PlayJumpingSound ( );
	void PlayLandingSound ( );
	void PlayFallingDamageLandSound ( );
	void NotifyClientTakeHit ( class APawn* Attacker, class UClass* DamageType, class AActor* DamageCauser );
	bool TryNewCamRot ( class ACombatPC* PC, struct FRotator ViewRotation, float* CamDist );
	void FindGoodEndView ( class APlayerController* InPC, struct FRotator* GoodRotation );
	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void Survived ( class AController* InstigatedBy, class UClass* DamageType, int actualDamage, class AActor* DamageCauser );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ACombatGuy_Player::pClassPointer = NULL;

// Class CombatGame.CombatPawnCylinderComponent
// 0x0000 (0x01FC - 0x01FC)
class UCombatPawnCylinderComponent : public UCylinderComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1828 ];

		return pClassPointer;
	};

};

UClass* UCombatPawnCylinderComponent::pClassPointer = NULL;

// Class CombatGame.CombatPickupFactory
// 0x003C (0x02EC - 0x02B0)
class ACombatPickupFactory : public APickupFactory
{
public:
	class UStaticMeshComponent*                        BaseMesh;                                         		// 0x02B0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x02B4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bCheckTeam : 1;                                   		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUpdatingPickup : 1;                              		// 0x02B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFloatingPickup : 1;                              		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRotatingPickup : 1;                              		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceDelayedSpawn : 1;                           		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDelayedSpawn : 1;                                		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bForceRespawn : 1;                                		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned char                                      TeamIndex;                                        		// 0x02BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   RespawnSound;                                     		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PickupSound;                                      		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   EnemyPickupSound;                                 		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BobTimer;                                         		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BobOffset;                                        		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BobSpeed;                                         		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BobBaseOffset;                                    		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              YawRotationRate;                                  		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    SpinningParticleEffects;                          		// 0x02E0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             SpinningParticleTemplate;                         		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RespawnTime;                                      		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1829 ];

		return pClassPointer;
	};

	void PlayPickupSound ( );
	void InvalidatePickup ( );
	bool ValidPickup ( );
	unsigned char eventScriptGetTeamNum ( );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void OnToggleHidden ( class USeqAct_ToggleHidden* inAction );
	bool IsEnable ( );
	void ToggleEnable ( unsigned long bEnable );
	void RespawnEffect ( );
	void PostBeginPlay ( );
	void SetPickupHidden ( );
	float GetRespawnTime ( );
	void SetRespawn ( );
	void InitializePickup ( );
	void eventSetInitialState ( );
};

UClass* ACombatPickupFactory::pClassPointer = NULL;

// Class CombatGame.CombatPingCheck
// 0x0000 (0x003C - 0x003C)
class UCombatPingCheck : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1830 ];

		return pClassPointer;
	};

	unsigned char GetLowestPingRegionID ( int RegionPingGroup );
	int GetPing ( int Region_ID );
	void SetPing ( int Region_ID, int Ping );
	void Suspend ( unsigned long bPause );
};

UClass* UCombatPingCheck::pClassPointer = NULL;

// Class CombatGame.CombatPlayDataInfo
// 0x0000 (0x003C - 0x003C)
class UCombatPlayDataInfo : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1831 ];

		return pClassPointer;
	};

	void SubBSCoin ( int BSCoin );
	void SubMCoin ( int MCoin );
	void SubGCoin ( int GCoin );
	void SubGameMedal ( int Medal );
	void SubGameCash ( int cash );
	void SubGameMoney ( int Money );
	void AddBSCoin ( int BSCoin );
	void AddMCoin ( int MCoin );
	void AddGCoin ( int GCoin );
	void AddGameMedal ( int Medal );
	void AddGameCash ( int cash );
	void AddGameMoney ( int Money );
	void SetBSCoin ( int BSCoin );
	void SetMCoin ( int MCoin );
	void SetGCoin ( int GCoin );
	void SetGameMedal ( int Medal );
	void SetGameCash ( int cash );
	void SetGameMoney ( int Money );
	int GetBSCoin ( );
	int GetMCoin ( );
	int GetGCoin ( );
	int GetGameMedal ( );
	int GetGameCash ( );
	int GetGameMoney ( );
};

UClass* UCombatPlayDataInfo::pClassPointer = NULL;

// Class CombatGame.CombatFrontEndPC
// 0x01F2 (0x0930 - 0x073E)
class ACombatFrontEndPC : public ACombatPlayerControllerBase
{
public:
	class ACombatFrontEndHUD*                          MyComBatHUD;                                      		// 0x0740 (0x0004) [0x0000000000000000]              
	class UCombatGameTableDepot*                       TableDepot;                                       		// 0x0744 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShopZoom : 1;                                    		// 0x0748 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInvenZoom : 1;                                   		// 0x0748 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCameraZoom : 1;                                  		// 0x0748 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNeedOverridePostProcess : 1;                     		// 0x0748 (0x0004) [0x0000000000000000] [0x00000008] 
	TArray< class AUIDisplayPoint* >                   StartPosition;                                    		// 0x074C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PawnDisplayPositionName;                          		// 0x0758 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PawnShopDisplayPositionName;                      		// 0x0764 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ACombatFrontEndActor*                        FEPlayerActor;                                    		// 0x0770 (0x0004) [0x0000000000000000]              
	TArray< struct FInputExpireTimeInfo >              InputExpireTime;                                  		// 0x0774 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	float                                              DisconnectMatchServerTime;                        		// 0x0780 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< struct FFrontEndCameraActorInfo >          FrontEndCameraActorInfos;                         		// 0x0784 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CameraZoomState;                                  		// 0x0790 (0x0004) [0x0000000000000000]              
	float                                              LastMouseScrollTime;                              		// 0x0794 (0x0004) [0x0000000000000000]              
	struct FPostProcessSettings                        CameraOverridePostProcess;                        		// 0x0798 (0x0154) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       ZoomInCameraLocationActorName;                    		// 0x08EC (0x0008) [0x0000000000000000]              
	struct FName                                       ZoomOutCameraLocationActorName;                   		// 0x08F4 (0x0008) [0x0000000000000000]              
	class ACameraLocationPoint*                        ZoomInCameraLocationActor;                        		// 0x08FC (0x0004) [0x0000000000000000]              
	class ACameraLocationPoint*                        ZoomOutCameraLocationActor;                       		// 0x0900 (0x0004) [0x0000000000000000]              
	struct FName                                       ZoomInShopCameraLocationActorName;                		// 0x0904 (0x0008) [0x0000000000000000]              
	struct FName                                       ZoomOutShopCameraLocationActorName;               		// 0x090C (0x0008) [0x0000000000000000]              
	class ACameraLocationPoint*                        ZoomInShopCameraLocationActor;                    		// 0x0914 (0x0004) [0x0000000000000000]              
	class ACameraLocationPoint*                        ZoomOutShopCameraLocationActor;                   		// 0x0918 (0x0004) [0x0000000000000000]              
	float                                              AccumDeltaTime;                                   		// 0x091C (0x0004) [0x0000000000000000]              
	float                                              MouseWheelDeltaTime;                              		// 0x0920 (0x0004) [0x0000000000000000]              
	float                                              LerpAmount;                                       		// 0x0924 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TutorialModeIndex;                                		// 0x0928 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TutorialMapIndex;                                 		// 0x092C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1832 ];

		return pClassPointer;
	};

	void StartTutorialGame ( );
	bool eventIsContinuableRandomBox ( );
	void SetGameModeGuide ( unsigned long bShow );
	void NotifyChangedBoosterItem ( );
	void KickUser ( struct FString PlayerName );
	void TeamSwap ( );
	void GetHost ( );
	void Dev_UnblockUser ( struct FString UserName );
	void Dev_BlockUser ( struct FString UserName );
	void Dev_RemoveFriend ( struct FString UserName );
	void Dev_AddFriend ( struct FString UserName, unsigned long bAccept );
	void Dev_RequestFriend ( struct FString UserName );
	class USkeletalMeshComponent* eventGetFrontEndWeaponAttachmentMesh ( );
	class USkeletalMeshComponent* eventGetFrontEndCharacterMesh ( );
	void InitCameraZoomInfos ( );
	void SetShopCameraZoom ( );
	void SetInventoryCameraZoom ( );
	void SetFrontEndMouseScroll ( int scrollDelta );
	void eventPlayerTick ( float DeltaTime );
	void SetFEActorLocAndRot ( struct FVector Loc, struct FRotator Rot );
	void ZoomLerp ( float Lerp );
	void OnSetCameraTarget ( class USeqAct_SetCameraTarget* inAction );
	void RefreshItemTime ( );
	void eventPostBeginPlay ( );
	void GetCameraLocationPoints ( );
	void GetWorldAllCamera ( );
	void SetFrontEndActorRotationX ( int X );
	void Dev_AddDashboardNotice ( );
	void Dev_ShowExchange ( int Index );
	void Dev_ShowRandomBox ( );
	void Dev_SetWeapon ( struct FString CodeName );
	void Dev_SetCharacter ( struct FString CodeName, int TeamIndex );
	void Dev_ShowCreateNickName ( );
	void Dev_ShowShop ( );
	void Dev_ShowInven ( );
	void Dev_ShowCharacter ( );
	void Dev_StandAloneGame ( );
	void SetFrontEndPlayerFXFoot ( int ItemIndex );
	void SetFrontEndPlayerFXUpper ( int ItemIndex );
	void SetFrontEndPlayerArmorMeshByRefItemIndex ( int ArmorItemIndex );
	void SetFrontEndPlayerWeaponMeshByRefItemIndex ( int RefItemIndex );
	class UClass* GetWeaponInfoByRefItemIndex ( int RefItemIndex );
	unsigned char SetFrontEndPlayerCharacterMeshByRefItemIndex ( int RefItemIndex, unsigned char TeamIndex );
	void SetFrontEndPlayerActorVisible ( unsigned long bShow );
	void SpawnFrontEndPlayerActor ( );
	void eventDestroyed ( );
	void MakeClanRoomNumber ( int RoomNumber );
	void MakeRoomNumber ( int RoomNumber, int RegionID );
	void GetPawnPosition ( struct FVector* Loc, struct FRotator* PawnRot );
	void GetPosition ( );
	float GetDisconnectMatchServerTime ( );
	float GetInputExpireTime ( );
	class UCombatGameTableDepot* GetTableDepot ( );
	void SetNoticeMsg ( struct FString msg );
	void ReloadStringDataTable ( );
	void RleaseEscape ( );
	void ClientSetHUD ( class UClass* newHUDType );
};

UClass* ACombatFrontEndPC::pClassPointer = NULL;

// Class CombatGame.CombatChampionshipObserverPC
// 0x0010 (0x0960 - 0x0950)
class ACombatChampionshipObserverPC : public ACombatPC
{
public:
	struct FWatchingPlayerData                         WatchingPlayerInfo;                               		// 0x0950 (0x0008) [0x0000000000000000]              
	unsigned long                                      bShowObserverTeamColor : 1;                       		// 0x0958 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UCombatChampionshipManager*                  ChampionshipManager;                              		// 0x095C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1833 ];

		return pClassPointer;
	};

	bool IsCombatChampionshipObserverPC ( );
	void UpdateHP ( class APawn* ViewTargetPawn );
	void ResetUI ( );
	void eventResetCameraMode ( );
	void SetCameraMode ( struct FName NewCamMode );
	void eventUpdateDeadPlayerPawnLocationList ( );
	void ClientReset ( );
	bool IsChangeSpectatingCameraMode ( );
	void eventPostBeginPlay ( );
	bool IgnoreSpawnProtection ( class ACombatPawn* TargetPawn );
	void ToggleObserverTeamColor ( );
	void ServerViewSelf ( struct FViewTargetTransitionParams TransitionParams );
	void ServerViewTargetPlayer ( unsigned char playerIndex_zeroBase );
	void ServerViewPrevTeamPlayer ( );
	void ServerViewNextTeamPlayer ( );
	void ServerViewPlayer ( unsigned char TeamIndex );
	unsigned char GetTeamNum ( );
	void KeyBindingSettingFromProfile ( class UCombatProfileSettings* Profile );
};

UClass* ACombatChampionshipObserverPC::pClassPointer = NULL;

// Class CombatGame.CombatDemolitionPC
// 0x0018 (0x0968 - 0x0950)
class ACombatDemolitionPC : public ACombatPC
{
public:
	TArray< class ACombatTrigger* >                    TriggerUsedList;                                  		// 0x0950 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FSExactLocationInfo                         PawnExactLocation;                                		// 0x095C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1834 ];

		return pClassPointer;
	};

	void ThrowBombAction ( );
	void ServerThrowBomb ( );
	void ThrowBomb ( );
	bool ReleaseUse ( );
	void TriggerUnused ( );
	bool TriggerInteracted ( );
	void GetCombatTriggerUseList ( float interactDistanceToCheck, float crosshairDist, float minDot, unsigned long bUsuableOnly, TArray< class ATrigger* >* out_useList );
	void GetPossessedTriggerUseList ( TArray< class ATrigger* >* out_useList );
	void ServerUse_DemolitionPos ( struct FSExactLocationInfo inPawnExactLocation );
	bool CanDefuseC4_Local ( );
	bool Use ( );
	void Reset ( );
};

UClass* ACombatDemolitionPC::pClassPointer = NULL;

// Class CombatGame.CombatPlayerInputBase
// 0x0000 (0x0280 - 0x0280)
class UCombatPlayerInputBase : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1835 ];

		return pClassPointer;
	};

	void eventPlayerInput ( float DeltaTime );
	bool IsInputExpired ( );
};

UClass* UCombatPlayerInputBase::pClassPointer = NULL;

// Class CombatGame.CombatChampionshipObserverInput
// 0x0024 (0x02A4 - 0x0280)
class UCombatChampionshipObserverInput : public UCombatPlayerInputBase
{
public:
	TArray< struct FKeyBind >                          ObserverKeyBindings;                              		// 0x0280 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UCombatChampionshipCameraManager*            CameraData;                                       		// 0x028C (0x0004) [0x0000000000000000]              
	float                                              FOV_Min;                                          		// 0x0290 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FOV_Max;                                          		// 0x0294 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SpectatorCameraSpeed_Min;                         		// 0x0298 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SpectatorCameraSpeed_Max;                         		// 0x029C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LastSelectedFreeCamPoint;                         		// 0x02A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1836 ];

		return pClassPointer;
	};

	void DebugMessage ( struct FString msg );
	void ToggleChampionshipObserverDebugField ( );
	void FreeView_MoveToCamPoint ( int positionIndex );
	void FreeView_SaveFreeCam ( int positionIndex );
	void FreeView_SetFreeCamMoveSpeed ( float Step );
	void FreeView_ResetFreeCamMoveSpeed ( );
	void FreeView_ToggleBlockingMap ( );
	void FreeView_SetFOV ( float Step );
	void FreeView_ResetFOV ( );
	void UpdateObserverCameraUI ( );
	bool IsCameraStyleFreeCam ( );
	struct FString GetObserverCameraText ( );
	void UpdateCameraMode ( );
	void PlayerView_ThirdPersonView_Toggle ( );
	void PlayerView_TargetPlayer ( unsigned char zeroIndex );
	void PlayerView_PrevPlayer ( );
	void PlayerView_NextPlayer ( );
	void FreeView ( );
	void ResetView ( );
	void TopView ( );
	void PlayerView ( unsigned char TeamIndex );
	void eventInitInputSystem ( );
	struct FString GetBind ( struct FName* Key );
};

UClass* UCombatChampionshipObserverInput::pClassPointer = NULL;

// Class CombatGame.CombatPlayerInput
// 0x010C (0x038C - 0x0280)
class UCombatPlayerInput : public UCombatPlayerInputBase
{
public:
	float                                              LastDuckTime;                                     		// 0x0280 (0x0004) [0x0000000000000000]              
	unsigned long                                      bHoldDuck : 1;                                    		// 0x0284 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoCenterPitch : 1;                             		// 0x0284 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      ToggleMoveTest : 1;                               		// 0x0284 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned char                                      ForcedDoubleClick;                                		// 0x0288 (0x0001) [0x0000000000000000]              
	float                                              PitchAutoCenterSpeed;                             		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchAutoCenterSpeedRoadieRun;                    		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchAutoCenterDelay;                             		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DuckDelayTime;                                    		// 0x0298 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PitchAutoCenterDelayCount;                        		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              PitchAutoCenterHorizonOffset;                     		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              ForcePitchCenteringSpeed;                         		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForcedPitchCenteringHorizonOffset;                		// 0x02A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   PitchAutoCenterTargetPitchWindow;                 		// 0x02AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              SprintTurnScale;                                  		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              SlidingTurnScale;                                 		// 0x02B8 (0x0004) [0x0000000000000000]              
	float                                              MouseSensitivityMax;                              		// 0x02BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MouseSensitivityMin;                              		// 0x02C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MouseSensitivityStep;                             		// 0x02C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              WeaponMouseSens;                                  		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FsMouseSens                                 PresetWeaponMouseSens[ 0x4 ];                     		// 0x02CC (0x00B0) [0x0000000000000000]              
	int                                                bForceWalk;                                       		// 0x037C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                bForceLeft;                                       		// 0x0380 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ForceTurn;                                        		// 0x0384 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastToggleChaFXItemTime;                          		// 0x0388 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1837 ];

		return pClassPointer;
	};

	void SetOnReceivedNativeInputKey ( struct FScriptDelegate inInputKey );
	struct FString GetBind ( struct FName* Key );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void SetAxisInputDirectly ( unsigned char n_ );
	bool IsMouseUseAllModeInPreset ( unsigned char TargetPreset );
	bool IsMouseAutoScaleInPreset ( unsigned char TargetPreset );
	void SetPresetMouseUseAllMode ( unsigned char TargetPreset, unsigned long bSet, class UCombatProfileSettings* Profile );
	void SetMouseAutoScaleModeInPreset ( unsigned char TargetPreset, unsigned long bSet, class UCombatProfileSettings* Profile );
	void UpdateMouseSensitivityInPreset ( );
	void SetMouseSensitivityInPreset ( unsigned char TargetPreset, unsigned char TargetZoomState, float NewValue, class UCombatProfileSettings* Profile );
	void SetMouseSensitivityInMaster ( float NewValue, class UCombatProfileSettings* Profile );
	void AddMouseSensitivity ( float Amount );
	bool GetCurrentPresetAndZoomState ( unsigned char* outPreset, unsigned char* outZoomState );
	void SensitivityDown ( );
	void SensitivityUp ( );
	void ResetMouseSensitivityInPreset ( class UCombatProfileSettings* Profile, unsigned long bResetToDefault );
	void ResetMouseSensitivityInMaster ( class UCombatProfileSettings* Profile, unsigned long bResetToDefault );
	void ResetMouseSensitivity ( class UCombatProfileSettings* Profile );
	void SetMouseSensitivityMode ( unsigned char NewMode, class UCombatProfileSettings* Profile );
	void InitializeMouseSettingsFromProfile ( class UCombatProfileSettings* Profile, unsigned long bIgnoreUINotice );
	void AutoPitchCentering ( float DeltaTime );
	void ProcessModifyInput ( float DeltaTime );
	void ForcePitchCentering ( unsigned long bCenter, unsigned long bCancelOnUserInput, float GoalPitch, float InterpSpeed );
	void eventPlayerInput ( float DeltaTime );
	void ToggleChaItemFX ( );
	void Jump ( );
	void Duck ( );
	void UnDuck ( );
	bool IsInputExpired ( );
	bool GetIsPressed ( struct FName Key );
	bool GetIsShiftPressed ( );
	struct FString GetUDKBindNameFromCommand ( struct FString BindCommand );
};

UClass* UCombatPlayerInput::pClassPointer = NULL;

// Class CombatGame.CombatPracticePlayerInput
// 0x000C (0x0398 - 0x038C)
class UCombatPracticePlayerInput : public UCombatPlayerInput
{
public:
	TArray< struct FKeyBind >                          PracticeKeyBindings;                              		// 0x038C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1838 ];

		return pClassPointer;
	};

	void ResetPracticeGameTimer ( );
	void TogglePracticeGameTimer ( );
	void ToggleProjectileCamera ( );
	void CheatChangeTeam ( );
	void KillAllCheatPawns ( );
	void SpawnCheatPawn ( int Index );
	struct FString GetBind ( struct FName* Key );
};

UClass* UCombatPracticePlayerInput::pClassPointer = NULL;

// Class CombatGame.CombatPlayerStart
// 0x002C (0x02D0 - 0x02A4)
class ACombatPlayerStart : public APlayerStart
{
public:
	struct FVector                                     StartVelocityInTheAir;                            		// 0x02A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlaceInTheAir : 1;                               		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseFirstSpawn : 1;                               		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      AreaIndex;                                        		// 0x02B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class USpriteComponent*                            TeamSpriteComponent;                              		// 0x02B8 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USpriteComponent*                            InTheAirSpriteComponent;                          		// 0x02BC (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UArrowComponent*                             InTheAirArrowComponent;                           		// 0x02C0 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FVector                                     FloorLocation;                                    		// 0x02C4 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1839 ];

		return pClassPointer;
	};

	bool IsPlacedInTheAir ( );
	struct FVector GetFloorLocation ( );
	unsigned char GetTeamNum ( );
};

UClass* ACombatPlayerStart::pClassPointer = NULL;

// Class CombatGame.CombatGroupStart
// 0x0008 (0x02D8 - 0x02D0)
class ACombatGroupStart : public ACombatPlayerStart
{
public:
	unsigned long                                      bPlayer : 1;                                      		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                GroupID;                                          		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1840 ];

		return pClassPointer;
	};

};

UClass* ACombatGroupStart::pClassPointer = NULL;

// Class CombatGame.CombatTeamStart
// 0x0000 (0x02D0 - 0x02D0)
class ACombatTeamStart : public ACombatPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1841 ];

		return pClassPointer;
	};

};

UClass* ACombatTeamStart::pClassPointer = NULL;

// Class CombatGame.CombatPlayerStartGroup
// 0x0000 (0x02A4 - 0x02A4)
class ACombatPlayerStartGroup : public APlayerStartGroup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1842 ];

		return pClassPointer;
	};

};

UClass* ACombatPlayerStartGroup::pClassPointer = NULL;

// Class CombatGame.CombatProfileSettings
// 0x0048 (0x00E0 - 0x0098)
class UCombatProfileSettings : public UOnlineProfileSettings
{
public:
	TArray< struct FString >                           DigitalButtonActionsToCommandMapping;             		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             KeyMappingArray;                                  		// 0x00A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           OptionMappingArray;                               		// 0x00B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FKeymapDatum >                      KeymapData;                                       		// 0x00BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FFiexdKeyCommandInfo >              FiexdKeyCommandInfos;                             		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ReservedData;                                     		// 0x00D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1843 ];

		return pClassPointer;
	};

	void SetOneFrameThreadLag ( unsigned long bSet );
	float GetForegroundFOVDelta ( );
	void GetCrosshairSetting ( struct FBasicCrosshairSetting* out_Setting );
	int GetTeamIFFViewSetting ( );
	int GetFlipMeshSetting ( );
	struct FName FlashKeyCodeToUnrealKeyname ( int keyCode );
	int UnrealKeynameToFlashKeyCode ( struct FName KeyName );
	struct FString KeyCodetoFlashKeyName ( int keyCode );
	struct FName UnrealKeynameToFlashKeyname ( struct FName KeyName );
	struct FName FlashKeynameToUnrealKeyname ( struct FName KeyName );
	bool GetRangeProfileSettingDefaultbyName ( struct FName SettingName, float* OutValue );
	bool GetRangeProfileSettingDefault ( int ProfileSettingId, float* DefaultFloat );
	int GetAimAssistValue ( );
	bool GetHoldMode ( );
	void SetHoldMode ( unsigned long SetValue );
	bool GetGunTrailSystemSettings ( );
	void SetGunTrailSystemSettings ( unsigned long SpawnGunTrail );
	void SetGunTrailSettings ( );
	void VideoOptionLevel ( int Level );
	void CalcelAspectAndResolution ( );
	void InitVideoOptionFromScreen ( );
	void ResetVideoOptionFromScreen ( );
	void ExcuteOptionCommand ( struct FString KeyName, int OptionLevel );
	void GetAdvanceOptionsSettings ( int* OutCharacter, int* OutBackGround, int* OutLight, int* OutLightReflect, int* OutShadow, int* OutEffect, int* OutPhysical, int* OutAmbOcclusion );
	void SetSceneToneSettings ( );
	void SetGoreLevelSettings ( );
	void SetScreenColorsSettings ( );
	void SetVignettingSettings ( );
	void SetDisplayGammaSettings ( );
	void SetBackgroundShadowSettings ( );
	void SetAntiAliasingSettings ( );
	void SetVideoProfileMappings ( );
	int GetVideoScoreLevel ( );
	void eventScriptSetToDefaults ( );
	void eventSetToDefaults ( unsigned long AllRest );
	void ResetKeysToDefault ( class ULocalPlayer* InPlayerOwner );
	void RemoveDBABindings ( class UPlayerInput* PInput );
	void RemoveFixedKeyBindings ( class UPlayerInput* PInput );
	bool GetKeyProfileValue ( unsigned char KeyBinding );
	void ApplyKeyBinding ( class UPlayerInput* PInput, unsigned char KeyBinding );
	void CheckFixedKeyCommand ( class UPlayerInput* PInput );
	void ApplyAllKeyBindings ( class UPlayerInput* PInput );
	void UnbindKey ( class UPlayerInput* PInput, struct FName BindName );
	void SetKeyBinding ( unsigned char KeyAction, struct FName KeyBinding, struct FName KeyBinding2, struct FName KeyBinding3, struct FName KeyBinding4 );
	void RemoveCommandBinding ( class UPlayerInput* PInput, struct FString* Command );
	void ReplaceBindingKey ( class UPlayerInput* PInput, struct FName KeyName, struct FString Command );
	void SetKeyBindingUsingCommand ( struct FString KeyCommand, struct FName KeyBinding, struct FName KeyBinding2, struct FName KeyBinding3, struct FName KeyBinding4 );
	int GetDBAFromCommand ( struct FString* Command );
	int GetProfileIDForDBA ( unsigned char KeyAction );
	int FindKeyEnum ( struct FName KeyName );
	struct FName FindKeyName ( int KeyEnum );
	void StoreKeysUsingPlayerInput ( class UPlayerInput* PInput );
	bool SetRangedProfileSettingValueByName ( struct FName SettingName, float Value );
	bool SetProfileSettingValueFloatByName ( struct FName SettingName, float Value );
	bool SetProfileSettingValueIntByName ( struct FName SettingName, int Value );
	bool GetRangedProfileSettingValueByName ( struct FName SettingName, float* OutValue );
	bool GetProfileSettingValueIdByName ( struct FName SettingName, int* OutValue );
	bool GetProfileSettingValueStringByName ( struct FName SettingName, struct FString* OutValue );
	bool GetProfileSettingValueFloatByName ( struct FName SettingName, float* OutValue );
	struct FString GetProfileLocalizedKeyString ( struct FName UnrealKeyname );
	bool SetProfileDefaultValueByCommand ( struct FString CommandName );
	bool GetProfileKeyStringByCommand ( struct FString CommandName, unsigned long bReadDefault, unsigned long bConvertToLocalized, struct FString* KeyString );
	bool GetProfileDefaultValueInt ( int ProfileSettingId, int* OutValue );
	bool GetProfileDefaultValueIntByName ( struct FName SettingName, int* OutValue );
	bool GetProfileSettingValueIntByName ( struct FName SettingName, int* OutValue );
};

UClass* UCombatProfileSettings::pClassPointer = NULL;

// Class CombatGame.CombatProjectileBlockingVolume
// 0x0000 (0x0204 - 0x0204)
class ACombatProjectileBlockingVolume : public ABlockingVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1844 ];

		return pClassPointer;
	};

};

UClass* ACombatProjectileBlockingVolume::pClassPointer = NULL;

// Class CombatGame.CombatRadarCore
// 0x01D4 (0x03A8 - 0x01D4)
class ACombatRadarCore : public AActor
{
public:
	class ACombatMinimapActor*                         CurrentMinimapActor;                              		// 0x01D4 (0x0004) [0x0000000000000000]              
	TArray< class ACombatMapPoint* >                   MapPointList;                                     		// 0x01D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      TacticalMapMode;                                  		// 0x01E4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CachedMapModeBeforePressKey;                      		// 0x01E5 (0x0001) [0x0000000000000000]              
	unsigned char                                      AllyIconNameList[ 0x5 ];                          		// 0x01E6 (0x0005) [0x0000000000000000]              
	unsigned char                                      EnemyIconNameList[ 0x5 ];                         		// 0x01EB (0x0005) [0x0000000000000000]              
	float                                              RadarRange;                                       		// 0x01F0 (0x0004) [0x0000000000000000]              
	int                                                MiniMapSize[ 0x3 ];                               		// 0x01F4 (0x000C) [0x0000000000000000]              
	int                                                MiniMapSizeType;                                  		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WholeMapFrameSizeX;                               		// 0x0204 (0x0004) [0x0000000000000000]              
	int                                                WholeMapFrameSizeY;                               		// 0x0208 (0x0004) [0x0000000000000000]              
	float                                              HalfWholeMapFrameSizeX;                           		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HalfWholeMapFrameSizeY;                           		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WholeMapHybridFrameSizeX;                         		// 0x0214 (0x0004) [0x0000000000000000]              
	int                                                WholeMapHybridFrameSizeY;                         		// 0x0218 (0x0004) [0x0000000000000000]              
	float                                              HalfWholeMapHybridFrameSizeX;                     		// 0x021C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HalfWholeMapHybridFrameSizeY;                     		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BroadcastingMapFrameSizeX;                        		// 0x0224 (0x0004) [0x0000000000000000]              
	int                                                BroadcastingMapFrameSizeY;                        		// 0x0228 (0x0004) [0x0000000000000000]              
	float                                              HalfBroadcastingMapFrameSizeX;                    		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HalfBroadcastingMapFrameSizeY;                    		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentHalfMapFrameSizeX;                         		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentHalfMapFrameSizeY;                         		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DefaultMapTextureSizeX;                           		// 0x023C (0x0004) [0x0000000000000000]              
	int                                                DefaultMapTextureSizeY;                           		// 0x0240 (0x0004) [0x0000000000000000]              
	TArray< struct FObjectIconInfo >                   ObjectIconList;                                   		// 0x0244 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bFinishObjectIconList : 1;                        		// 0x0250 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNeedUpdateMapSymbol : 1;                         		// 0x0250 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                LastLocationLabelID;                              		// 0x0254 (0x0004) [0x0000000000000000]              
	class UCombatHUD_TacticalMapAndScoreboard*         TacticalMapUI;                                    		// 0x0258 (0x0004) [0x0000000000000000]              
	struct FTacticalMapPlayerIconInfo                  AllyIconsInfoList[ 0x5 ];                         		// 0x025C (0x0028) [0x0000000000000000]              
	struct FTacticalMapPlayerIconInfo                  EnemyIconsInfoList[ 0x5 ];                        		// 0x0284 (0x0028) [0x0000000000000000]              
	struct FMinimapObjectIconInfo                      MinimapObjectIconinfos[ 0x3F ];                   		// 0x02AC (0x00FC) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1845 ];

		return pClassPointer;
	};

	void ClearAllIcons ( );
	class ACombatPlayerReplicationInfoBase* GetViewTargetPRI ( class AActor* ViewTarget );
	void ToggleMiniMapSize ( );
	void SetGoalAndSpecialPointLabel ( );
	void SetModeName ( struct FString modeNameLabel_ );
	unsigned char GetScoreboardType ( );
	bool CanShowWholeMap ( );
	bool CanShowMinimap ( );
	bool CanShowScoreboard ( );
	void UpdateTacticalMap ( );
	void ClearLocationLabel ( );
	void UpdateLocationLabel ( int labelID_ );
	int SortByPriority ( struct FObjectIconInfo A, struct FObjectIconInfo B );
	void SetMapSymbolList ( );
	void SetBroadcastingMapMode ( );
	void SetWholemapMode ( );
	void SetMinimapMode ( class AActor* ViewTarget, float* out_Rot );
	int GetAIModeType ( );
	void SetTacticalMapAndScoreboardMode ( unsigned char mode_ );
	void SetupFor ( class AController* P );
	bool DrawTacticalMap ( );
	void RemoveMissionActorIcon ( class AActor* removedMissionActor );
	void UpdateObjectIconList ( );
	void SetObjectPickUpItemIcon ( class ACBGameReplicationInfo* CBGRI );
	void SetObjectMissionActorIcon ( class ACBGameReplicationInfo* CBGRI );
	void SetObjectMapPointIcon ( );
	void SetObjectIconList ( );
	void InitMiniMapSizeType ( );
	void Init ( class UCombatHUD_TacticalMapAndScoreboard* mapUI, class UCombatTeamGameMovie* CGMovie, int MiniSmall, int MiniMedium, int MiniLarge, int wholeWidth, int wholeHeight, int hybridWidth, int hybridHeight, int BroadcastingWidth, int BroadcastingHeight );
	void Reset ( );
	void SetMinimapActor ( );
	void InitMapPointList ( );
	void PostBeginPlay ( );
};

UClass* ACombatRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatAIGameRadarCore
// 0x0004 (0x03AC - 0x03A8)
class ACombatAIGameRadarCore : public ACombatRadarCore
{
public:
	class UClass*                                      BotClass;                                         		// 0x03A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1846 ];

		return pClassPointer;
	};

};

UClass* ACombatAIGameRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatAITDMGameRadarCore
// 0x0000 (0x03AC - 0x03AC)
class ACombatAITDMGameRadarCore : public ACombatAIGameRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1847 ];

		return pClassPointer;
	};

};

UClass* ACombatAITDMGameRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatDemolitionRadarCore
// 0x0006 (0x03AE - 0x03A8)
class ACombatDemolitionRadarCore : public ACombatRadarCore
{
public:
	unsigned char                                      AllyWithC4IconNameList[ 0x5 ];                    		// 0x03A8 (0x0005) [0x0000000000000000]              
	unsigned char                                      ExplosionAreaIconOffset;                          		// 0x03AD (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1848 ];

		return pClassPointer;
	};

	int GetExplosionAreaUIIndex ( unsigned char iconType );
	void UpdateExplosionAreaIcon ( );
	void SetObjectIconList ( );
	bool CanDrawC4State ( );
};

UClass* ACombatDemolitionRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatRadialBlurComponent
// 0x0028 (0x00EC - 0x00C4)
class UCombatRadialBlurComponent : public URadialBlurComponent
{
public:
	float                                              LifeSpan;                                         		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Translation;                                      		// 0x00C8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      AbsoluteTranslation : 1;                          		// 0x00D4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              CurrentLifeSpan;                                  		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InitialBlurScale;                                 		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnBlurFinished__Delegate;                       		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1849 ];

		return pClassPointer;
	};

	void OnBlurFinished ( class UCombatRadialBlurComponent* RadialBlur );
	void SetTranslation ( struct FVector* NewTranslation );
};

UClass* UCombatRadialBlurComponent::pClassPointer = NULL;

// Class CombatGame.CombatRadioSystem
// 0x0021 (0x005D - 0x003C)
class UCombatRadioSystem : public UObject
{
public:
	TArray< struct FKeyBindingInfo >                   RadioKeyBindings;                                 		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsBlockingRadioKey : 1;                          		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsRadioKeyBinding : 1;                           		// 0x0048 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSelectingSuccess : 1;                            		// 0x0048 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                RadioKeyBlockTime;                                		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                AutoHideTime;                                     		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UCombatHUD_RadioMessage*                     UIObject;                                         		// 0x0054 (0x0004) [0x0000000000000000]              
	class ACombatPC*                                   OwnerPC;                                          		// 0x0058 (0x0004) [0x0000000000000000]              
	unsigned char                                      LastSelectTabIndex;                               		// 0x005C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1850 ];

		return pClassPointer;
	};

	void SetRadioKeyBinding ( unsigned long bBinding );
	bool GetRadioMsgKeyBinding ( struct FString* Key1, struct FString* Key2 );
	void HideRadioMessage ( );
	void ReleaseBlockRadioKey ( );
	bool RequestRadioVoice ( unsigned char msgIndex );
	void UniqueIDToKeyMsgIndex ( unsigned char UniqueId, unsigned char* KeyIndex, unsigned char* msgIndex );
	unsigned char KeyMsgIndexToUniqueID ( unsigned char KeyIndex, unsigned char msgIndex );
	void SelectRadioVoice ( unsigned char msgIndex );
	void ToggleRadioChat ( unsigned char TabIndex );
	void Init ( class UCombatHUD_RadioMessage* UI, class ACombatPC* PC );
};

UClass* UCombatRadioSystem::pClassPointer = NULL;

// Class CombatGame.CombatRandomBoxTransaction
// 0x000C (0x0048 - 0x003C)
class UCombatRandomBoxTransaction : public UObject
{
public:
	TArray< struct FRandomBoxPickUpInfo >              RandomBoxPickUpList;                              		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1851 ];

		return pClassPointer;
	};

	bool IsPickUpRandomBoxCube ( int Index );
	bool IsPickUpRandomBox ( struct FString ItemCodeName );
	struct FString MakeRandomBoxNameAndPercent ( struct FCubeInfo _CubeInfo );
	struct FString MakeDayOfTheWeek ( int RepeatOption );
	struct FString MakeTimeString ( int RepeatOption, struct FTimeData StartTime, struct FTimeData EndTime );
	struct FString GetRandomBoxPickUpList ( );
};

UClass* UCombatRandomBoxTransaction::pClassPointer = NULL;

// Class CombatGame.CombatRelevantVolume
// 0x0000 (0x0200 - 0x0200)
class ACombatRelevantVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1852 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ACombatRelevantVolume::pClassPointer = NULL;

// Class CombatGame.CombatRewardDataBase
// 0x0118 (0x0154 - 0x003C)
class UCombatRewardDataBase : public UObject
{
public:
	class ACombatPlayerReplicationInfo*                Owner;                                            		// 0x003C (0x0004) [0x0000000000000000]              
	TArray< struct FRelatedKillDataInfo >              RelatedKillData;                                  		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x004C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatRewardDataBase.RecordData
	TArray< int >                                      KillMarkHistory;                                  		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FTableInfoType >                    PendingTableInfoList;                             		// 0x0094 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x00A0 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatRewardDataBase.Map_WeaponID_DBID
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x00DC (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatRewardDataBase.Map_WeaponID_InitialKillCount
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x0118 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatRewardDataBase.Map_WeaponID_CurrentGameKillCount

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1853 ];

		return pClassPointer;
	};

	int GetWeaponInGameKillCount ( int WeaponID );
	bool GetWeaponInitialKillCount ( int WeaponID, int* killcount );
	void OnWeaponKill ( class ACombatPlayerReplicationInfo* KillerPRI, class ACombatPlayerReplicationInfo* VictimPRI, int WeaponID, int killcount );
	bool UpdateKillMarkAchievement ( );
	void eventUpdatePendingAchievement ( unsigned long bDisplayHUD );
	void Reset ( struct FName DataType );
	unsigned char GetCurrentAchievement ( struct FName State, unsigned char HitPart );
	void GainedNewAchievement ( struct FName State, unsigned char HitPart, unsigned char* CurrentCount );
	int GetRelatedKillCount ( class ACombatPlayerReplicationInfo* Victim );
	void eventSetRelatedKillData ( class ACombatPlayerReplicationInfo* Victim );
	void ResetWhenRoundStart ( );
	void SetCurrentGameKillCount ( int Id, int Count );
	void ResetBasicKillCount ( );
	void ResetWhenTerminatedRespawn ( );
	void ResetWhenHeal ( );
	void Init ( class ACombatPlayerReplicationInfo* Instigator );
};

UClass* UCombatRewardDataBase::pClassPointer = NULL;

// Class CombatGame.CombatClientRewardData
// 0x0000 (0x0154 - 0x0154)
class UCombatClientRewardData : public UCombatRewardDataBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1854 ];

		return pClassPointer;
	};

};

UClass* UCombatClientRewardData::pClassPointer = NULL;

// Class CombatGame.CombatServerRewardData
// 0x0030 (0x0184 - 0x0154)
class UCombatServerRewardData : public UCombatRewardDataBase
{
public:
	int                                                AssistInLife;                                     		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastMultiKillTime;                                		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      MultiKillCount;                                   		// 0x015C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDamagePerPlayer >                  DamagePerPlayers;                                 		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ConsecutiveDeathCount;                            		// 0x016C (0x0004) [0x0000000000000000]              
	float                                              LastDeathTime;                                    		// 0x0170 (0x0004) [0x0000000000000000]              
	int                                                BestKillCount;                                    		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                LastLifeKillCount;                                		// 0x0178 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 TeamRevengeTarget;                                		// 0x017C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 RevengeTarget;                                    		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1855 ];

		return pClassPointer;
	};

	void SetNewDamage ( class ACombatPC* Attacker, int Damage );
	void ResetWhenRoundStart ( );
	void ResetWhenTerminatedRespawn ( );
	int eventFindMaxKillCountInLife ( );
	void ResetWhenHeal ( );
	void ResetWhenLogOut ( class AController* Exiting );
	void Init ( class ACombatPlayerReplicationInfo* Instigator );
	int IncrementAssists ( );
};

UClass* UCombatServerRewardData::pClassPointer = NULL;

// Class CombatGame.CombatRewardInterface
// 0x0000 (0x003C - 0x003C)
class UCombatRewardInterface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1856 ];

		return pClassPointer;
	};

	unsigned char GetHitPart ( struct FTraceHitInfo HitInfo );
	bool GetAttackWeaponID ( class AActor* DamageCauser, int* tableIndex );
	int IsSuicide ( class AController* Killer, class AController* Victim, class UClass* DamageType );
	int IsObjectPenetration ( class UClass* DamageType, class APawn* Victim );
};

UClass* UCombatRewardInterface::pClassPointer = NULL;

// Class CombatGame.CombatSceneCapture2DComponent
// 0x000C (0x013C - 0x0130)
class UCombatSceneCapture2DComponent : public USceneCapture2DComponent
{
public:
	float                                              SurfaceWidth;                                     		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              SurfaceHeight;                                    		// 0x0134 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseMainSceneProjectionMatrix : 1;                		// 0x0138 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCaptureSceneOnce : 1;                            		// 0x0138 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1857 ];

		return pClassPointer;
	};

	void SetCombatCaptureParameters ( float NewFOV, float NewNearPlane, float NewFarPlane );
	void SetViewportSize ( class APawn* TargetPawn, float Width, float Height );
};

UClass* UCombatSceneCapture2DComponent::pClassPointer = NULL;

// Class CombatGame.CombatScout
// 0x0000 (0x04EC - 0x04EC)
class ACombatScout : public AScout
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1858 ];

		return pClassPointer;
	};

};

UClass* ACombatScout::pClassPointer = NULL;

// Class CombatGame.CombatSentinelManager
// 0x0010 (0x01E4 - 0x01D4)
class ACombatSentinelManager : public AInfo
{
public:
	unsigned long                                      bDoingASentinelRun : 1;                           		// 0x01D4 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                CurrentMapId;                                     		// 0x01D8 (0x0004) [0x0000000000000000]              
	int                                                CurrentModeIdx;                                   		// 0x01DC (0x0004) [0x0000000000000000]              
	struct FPointer                                    RemoteDB;                                         		// 0x01E0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1859 ];

		return pClassPointer;
	};

	bool CheckForSentinelRun ( );
	void HitBeginSentinelRun ( int AttackerTeam, int attackerID, struct FVector AttackerPos, struct FRotator AttackerRot, struct FName AttackerWeapon, int TargetTeam, int TargetId, struct FVector targetPos, struct FRotator TargetRot );
	void RoundBeginSentinelRun ( int Number );
	void GameBeginSentinelRun ( int MapID );
	void Init ( );
};

UClass* ACombatSentinelManager::pClassPointer = NULL;

// Class CombatGame.CombatSkeletalMeshComponent
// 0x0000 (0x0648 - 0x0648)
class UCombatSkeletalMeshComponent : public USkeletalMeshComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1860 ];

		return pClassPointer;
	};

	void PreloadTexture ( class USkeletalMeshComponent* InComp, unsigned long bForcePreLoad );
	class USkeletalMeshComponent* DuplicateRecursive ( class AActor* InOwner, class USkeletalMeshComponent* InComp, TArray< struct FName > IgnoreAttachedBoneNames );
	void SetDynamicLightEnvironmentRecursive ( class USkeletalMeshComponent* InComp, class UDynamicLightEnvironmentComponent* InDynamicLightEnvironment );
	void SetLightEnvironmentRecursive ( class USkeletalMeshComponent* InComp, class ULightEnvironmentComponent* NewLightEnvironmentComponent );
	void SetShadowParentRecursive ( class USkeletalMeshComponent* InComp, class UPrimitiveComponent* NewShadowParent );
	void SetHiddenRecursive ( class USkeletalMeshComponent* InComp, unsigned long bHidden, unsigned long bUpdateLastRenderTime );
};

UClass* UCombatSkeletalMeshComponent::pClassPointer = NULL;

// Class CombatGame.CombatSkillManager
// 0x0068 (0x00A4 - 0x003C)
class UCombatSkillManager : public UObject
{
public:
	TArray< struct FString >                           AcceptSkillList;                                  		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UCombatActiveSkill* >                CombatActiveSkillList;                            		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UCombatPassiveSkill* >               CombatPassiveSkillList;                           		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSkillSaveInfo >                    ActiveSkillSaveData;                              		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ACombatPlayerReplicationInfo*                OwnerPRI;                                         		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned char                                      LastSkillGroupNum;                                		// 0x0070 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastCheckTime[ 0x4 ];                             		// 0x0074 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FSavedSkillInfo >                   SavedActiveSkillList;                             		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSavedSkillInfo >                   SavedPassiveSkillList;                            		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      SkipCooltime : 1;                                 		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInfiniteSkill : 1;                               		// 0x009C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UClass*                                      SkillSoundGroup;                                  		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1861 ];

		return pClassPointer;
	};

	bool CheckValidPassiveSkill ( unsigned char SkillIndex );
	bool CheckValidActiveSkill ( unsigned char SkillIndex );
	class UCombatDataTableRefSkill* GetPassiveSkillTableData ( unsigned char SkillIndex );
	class UCombatDataTableRefSkill* GetActiveSkillTableData ( unsigned char SkillIndex );
	bool GetSkillRemainCount ( unsigned char SkillIndex, int* remainCount );
	int GetSavedPassiveSkillCount ( );
	int GetSavedActiveSkillCount ( );
	bool IsActivateSkill ( int SkillIndex );
	void ToggleSkillActivate ( int SkillIndex, unsigned long bActivate );
	void NotifyUsedSkill ( int Index, unsigned long ForceusedSkill );
	bool isHoldSkill ( int Index );
	void RemoveActiveSkillInfo ( int Index );
	bool CheckUseSkill ( unsigned char SkillGroupNum );
	bool CanUseSkill ( int SkillIndex );
	void NotifyAllEmptyActiveSkill ( );
	void NotifyEmptyActiveSkill ( int Index );
	void InitSkillInfo ( int SkillIndex, unsigned char Skilltype, unsigned long isHoldSkill, unsigned char CoolTimeType, float SkillCoolTime, int SkillRemainUseCount );
	class UCombatSkill* SetSkill ( class ACombatPawn* TargetPawn, int Idx );
	void RequestBuySkill ( int Index );
	bool CanUseSkillByCooltime ( int SkillIndex );
	bool CanBuySkill ( int arrIdx, unsigned char* errorType );
	bool CheckBuySkill ( unsigned char SkillGroupNum );
	void SetSkillOption ( int Index, unsigned char Type, unsigned long State );
	void NotifyUnlockSkill ( struct FString SkillCodeName );
	void CheckUnlockSkill ( int PrevRank, int newRank );
	void PreUnlockSkill ( unsigned char selectedClass );
	TArray< class UCombatDataTableRefSkill* > FindSkillListByType ( unsigned char selectedClass, unsigned long IsDesc );
	void GetActiveSkill ( TArray< struct FString >* ActiveSkillFileList );
	bool IsSkillOption ( int Index, unsigned char Type );
	void SetSkillWeaponRemainAmmo ( int SkillIndex, unsigned char SubMagazine, unsigned char SubAmmoCount );
	class UCombatSkill* CreateSkill ( struct FString GroupCodeName, unsigned long bTest );
	void StartUseSkill ( unsigned char SkillGroupNum );
	void SetSkillCoolTime ( struct FString CodeName );
	void eventTick ( float DeltaTime );
	void AddAcceptSkillList ( int ItemIndex );
	class UCombatActiveSkill* FindActiveSkillByGroup ( unsigned char SkillGroup );
	void ResetSavedSkillList ( );
	void RemoveAllSkill ( );
	void RemoveAllPassiveSkill ( );
	void RemoveAllActiveSkill ( );
	void RemoveSkill ( unsigned char Skilltype, class UCombatSkill* RemoveSkill );
	void RemoveActiveSkillByIndex ( int Index );
	class UCombatPassiveSkill* FindPassiveSkillByIndex ( int SkillGroupIndex );
	class UCombatActiveSkill* FindActiveSkillByIndex ( int SkillGroupIndex );
	void GetPassiveSkillList ( unsigned long bFilter, int GroupFilter, TArray< class UCombatPassiveSkill* >* SkillList );
	void GetActiveSkillList ( unsigned long bFilter, int GroupFilter, TArray< class UCombatActiveSkill* >* SkillList );
	void AddPassiveSkill ( class UCombatPassiveSkill* Skill );
	void AddActiveSkill ( class UCombatActiveSkill* Skill );
	void Init ( class ACombatPlayerReplicationInfo* Target );
};

UClass* UCombatSkillManager::pClassPointer = NULL;

// Class CombatGame.CombatSkillSoundGroup
// 0x000C (0x0048 - 0x003C)
class UCombatSkillSoundGroup : public UObject
{
public:
	TArray< struct FSkillTeamAnnounceSound >           AnnounceSkillTeamSounds;                          		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1862 ];

		return pClassPointer;
	};

	void PlayAnnounceSkillSound ( class APawn* P, unsigned char AnnounceableSkill, int SkillUseTeamIndex );
};

UClass* UCombatSkillSoundGroup::pClassPointer = NULL;

// Class CombatGame.CombatStatDataStore
// 0x0044 (0x0080 - 0x003C)
class UCombatStatDataStore : public UObject
{
public:
	struct FName                                       EventType;                                        		// 0x003C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                OldRank;                                          		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                newRank;                                          		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ScoringTableIndex;                                		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      DamageType;                                       		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatWeapon*                               Weapon;                                           		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RespawnTime;                                      		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WeaponID;                                         		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      HitPart;                                          		// 0x0060 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              LoginTime;                                        		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MatchStartTime;                                   		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FStatSaveCondition                          SaveCondition;                                    		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatPlayerReplicationInfo*                PRI;                                              		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDesertion : 1;                                   		// 0x0074 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bWinner : 1;                                      		// 0x0074 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              SavedPlayTime;                                    		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              SavedRespawnTime;                                 		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1863 ];

		return pClassPointer;
	};

	void SetEvent_MatchStart ( class ACombatPC* playerPC );
	void SetEvent_Login ( class ACombatPC* playerPC );
	void SetEvent_EndPlay ( class ACombatPC* playerPC );
	void SetEvent_Respawn ( class ACombatPC* playerPC );
	void SetEvent_RankUp ( class ACombatPC* playerPC, int _oldRank, int _newRank );
	void SetEvent_Scoring ( class ACombatPC* playerPC, int tableIndex );
	void SetEvent_LastPlayer ( class ACombatPC* playerPC );
};

UClass* UCombatStatDataStore::pClassPointer = NULL;

// Class CombatGame.CombatStaticMeshActor
// 0x0002 (0x01DE - 0x01DC)
class ACombatStaticMeshActor : public AStaticMeshActor
{
public:
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x01DC (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatStaticMeshActor.MeshActorIndex

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1864 ];

		return pClassPointer;
	};

};

UClass* ACombatStaticMeshActor::pClassPointer = NULL;

// Class CombatGame.CombatBusterActor
// 0x00BA (0x0298 - 0x01DE)
class ACombatBusterActor : public ACombatStaticMeshActor
{
public:
	float                                              HealthRatio;                                      		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Health;                                           		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsActive : 1;                                    		// 0x01E8 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIgnoreSameTeamDamage : 1;                        		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                HealthMax;                                        		// 0x01EC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                CurrentHealth;                                    		// 0x01F0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                LastSubObjectIndex;                               		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MissionActorArrayIndex;                           		// 0x01F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      OwnerTeam;                                        		// 0x01FC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UIState;                                          		// 0x01FD (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FOutlineProperty                            OutlineColorForComrade;                           		// 0x0200 (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FOutlineProperty                            OutlineColorForEnemy;                             		// 0x0234 (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UCombatExplosion*                            ExplosionTemplate;                                		// 0x0268 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FSubObjectInfo >                    SubObjectInfos;                                   		// 0x026C (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                UISortPriority;                                   		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x027C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FDamageInfo >                       DamageInfoList;                                   		// 0x0280 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     HumanReadableName;                                		// 0x028C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1865 ];

		return pClassPointer;
	};

	void eventDeactivate ( );
	void eventActivate ( );
	unsigned char ScriptGetTeamNum ( );
	class AController* GetHighestDamageDealer ( );
	void AddMissionScore ( class AController* Controller, int DamageAmount );
	struct FString GetHumanReadableName ( );
	void AddDamageInfo ( class AController* Controller, int DamageAmount );
	int GetHealth ( );
	void SetHealth ( int NewHealth );
	void DoExplosion ( class UCombatExplosion* InExplosionTemplate );
	void PlayDamagedSound ( int SubObjectIndex );
	void StopDamagedParticle ( int SubObjectIndex );
	void PlayDamagedParticle ( int SubObjectIndex );
	void ApplySubObjectInfo ( );
	void RestoreSubObjectInfo ( );
	int GetSubObjectIndex ( );
	void ClearDamagedUIState ( );
	void UpdateUIState ( );
	void eventNotifyChangedHealth ( );
	void UpdateOutline ( struct FOutlineProperty* OutlineColor );
	void NotifyLocalPlayerTeamReceived ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void InitHealth ( );
	int GetObjectIconStringID ( );
	int GetObjectIconType ( );
	void Reset ( );
	void RoundEnd ( unsigned long bGameEnded, unsigned char WinnerTeamIndex );
	int GetMissionActorSortPriority ( );
	void InitMissionActor ( class ACBGameReplicationInfo* CBGRI, int ArrayIndex );
	void PostBeginPlay ( );
};

UClass* ACombatBusterActor::pClassPointer = NULL;

// Class CombatGame.CombatStaticMeshManager
// 0x0010 (0x004C - 0x003C)
class UCombatStaticMeshManager : public UObject
{
public:
	class ACBGameReplicationInfo*                      CBGRI;                                            		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ACombatStaticMeshReplicationInfo* >  SMRIList;                                         		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1866 ];

		return pClassPointer;
	};

	void DelayedUpdateAllSMActors ( );
	void RegisterSMRI ( class ACombatStaticMeshReplicationInfo* TargetSMRI, unsigned char ActorIndex );
	void UpdateSMActor ( class ACombatDestructibleSMActor* TargetSMActor );
	void UpdateClientSMActor ( class ACombatDestructibleSMActor* TargetSMActor );
	void UpdateAllSMActors ( );
	void Init ( class ACBGameReplicationInfo* InCBGRI );
};

UClass* UCombatStaticMeshManager::pClassPointer = NULL;

// Class CombatGame.CombatStaticMeshReplicationInfo
// 0x0504 (0x06D8 - 0x01D4)
class ACombatStaticMeshReplicationInfo : public AReplicationInfo
{
public:
	unsigned char                                      MeshStateList[ 0x100 ];                           		// 0x01D4 (0x0100) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ACombatDestructibleSMActor*                  MeshActorList[ 0x100 ];                           		// 0x02D4 (0x0400) [0x0000000000002000]              ( CPF_Transient )
	int                                                SMRIIndex;                                        		// 0x06D4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1867 ];

		return pClassPointer;
	};

	void eventReceivedMeshState ( int ActorIndex );
	void UpdateMeshState ( class ACombatDestructibleSMActor* TargetSMActor, int ActorIndex );
	int GetSMRIIndex ( );
	void SetSMRIIndex ( int NewIndex );
	void eventReceivedSMRIIndex ( );
};

UClass* ACombatStaticMeshReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatStatisticsTransaction
// 0x00E5 (0x0121 - 0x003C)
class UCombatStatisticsTransaction : public UObject
{
public:
	class UCBUIDataStore_Mission*                      MissionList;                                      		// 0x003C (0x0004) [0x0000000000000000]              
	struct FMatchResultData                            ResultData;                                       		// 0x0040 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< int >                                      PendingLeaveRamtchUserList;                       		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FGrainInfoData                              UI_GrainData;                                     		// 0x0088 (0x0018) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00A0 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatStatisticsTransaction.Quest_InfoMap
	struct FMatchResultMapInfoData                     MatchResultMap_InfoData;                          		// 0x00DC (0x0018) [0x0000000000000000]              
	class UCombatDBManager*                            CombatDBManager;                                  		// 0x00F4 (0x0004) [0x0000000000000000]              
	struct FString                                     CachedClanName[ 0x2 ];                            		// 0x00F8 (0x0018) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CachedClanID[ 0x2 ];                              		// 0x0110 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                AttendID;                                         		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNeedPlayStampAnimation : 1;                      		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNeedForceGotoEventScene : 1;                     		// 0x011C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      InternetCafe_Benefit;                             		// 0x0120 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1868 ];

		return pClassPointer;
	};

	void UpdateToday ( int attend_id, unsigned char joinState );
	void ClearCachedClanIDInfo ( );
	void ClearCachedClanMatchInfo ( );
	int GetClanID ( unsigned char TeamIndex );
	struct FString GetClanName ( unsigned char TeamIndex );
	int GetLastMapRefID ( );
	int GetLastModeRefID ( );
	int GetLastModeGroupRefID ( );
	int GetLastMissionRefID ( );
	int GetCurrentHudType ( );
	int GetCurrentGetModeUIType ( );
	void SetMatchMapRefInfo ( int missionID, int ModeGroupID, int ModeID, int MapID );
	bool IsClanRankingMatch ( );
	bool IsClanTeamChange ( );
	void GetCompletedQuestList ( TArray< struct FQuestInfoData >* QuestList );
	void GetProgressQuestList ( TArray< struct FQuestInfoData >* QuestList );
	int GetCurrentStep ( unsigned char QuestType );
	struct FQuestInfoData GetReciveQuestInfo ( int Index );
	void SetReceiveReward ( );
	bool GetReceiveQuestReward ( );
	void SetFirstQuest ( unsigned char QuestType );
	unsigned char GetFirstQuest ( unsigned char QuestType );
	int GetQuestCurrentScore ( unsigned char QuestType );
	bool GetQuestActivated ( unsigned char QuestType );
	int GetQuestID ( unsigned char QuestType );
	int GetGrainClanRankPoint ( );
	int GetGrainMyRankPoint ( );
	int GetGrainClanTotalExp ( );
	int GetGrainClanExp ( );
	int GetGrainMoney ( );
	int GetGrainExp ( );
	void InitGrainData ( );
	bool GetAllPlayerResultInfo ( TArray< struct FMatchResultPlayerData >* out_List );
	int PopPendingRematchLeaveUser ( );
	int GetRematchTime ( );
	bool GetCanRematch ( );
	unsigned char GetRewardRank ( );
	int GetAIObjectHealth ( );
	unsigned char GetAIWave ( );
	int GetBestMissionScorePlayerUserID ( );
	int GetBestAssistPlayerUserID ( );
	int GetBestKillPlayerUserID ( );
	int GetBestScorePlayerUserID ( );
	int GetRoundPoint ( unsigned char TeamIndex );
	unsigned char GetPlayerTeamIndex ( int PlayerUserID );
	unsigned char GetWinnerTeamIndex ( );
	unsigned char GetRoundCountType ( );
	void ClearMatchResultData ( );
	class UCombatDBManager* InitDBManager ( );
	class UCombatDBManager* eventGetDBManager ( );
};

UClass* UCombatStatisticsTransaction::pClassPointer = NULL;

// Class CombatGame.CombatStatStorageBase
// 0x0028 (0x0064 - 0x003C)
class UCombatStatStorageBase : public UObject
{
public:
	class ACombatPC*                                   StorageOwner;                                     		// 0x003C (0x0004) [0x0000000000000000]              
	class UCombatStatDataStore*                        StatDataStore;                                    		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< struct FPlayerStatInfo >                   TempSaveStat;                                     		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      Processed : 1;                                    		// 0x0050 (0x0004) [0x0000000000001000] [0x00000001] ( CPF_Native )
	struct FStatSaveCondition                          StatSaveCondition_PlayerMode[ 0x4 ];              		// 0x0054 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1869 ];

		return pClassPointer;
	};

	void SavePlayerStat ( struct FString statCodeName, int Value, unsigned long bMaxValue, unsigned long bForce );
	void SaveGameSet ( int Event, int Value, unsigned char DataSetTableKey, int PersonalID, unsigned long bMaxValue, unsigned long bForce );
	void PostEvent_MatchOver ( );
	void PreEvent_MatchOver ( );
	void EndGame ( );
	void eventOnEvent ( );
	void UpdateStatSaveCondition ( unsigned char SaveConditionType, struct FStatSaveCondition* FinalCondition );
	bool IsProcessed ( );
	void ProcessPlayerStatData ( unsigned long bDesertion, unsigned long bWinner, unsigned char SaveConditionType );
	void Init ( class ACombatPC* OwnerPC );
};

UClass* UCombatStatStorageBase::pClassPointer = NULL;

// Class CombatGame.CombatStatStorage
// 0x0020 (0x0084 - 0x0064)
class UCombatStatStorage : public UCombatStatStorageBase
{
public:
	struct FStatSaveCondition                          StatSaveCondition_ClanMode[ 0x4 ];                		// 0x0064 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FStatSaveCondition                          StatSaveCondition_Competitive[ 0x4 ];             		// 0x0074 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1870 ];

		return pClassPointer;
	};

	void SaveDamageTypeEvent ( int Event, int Value );
	void SaveWeaponEvent ( int Event, int Value );
	void UpdateStatSaveCondition ( unsigned char SaveConditionType, struct FStatSaveCondition* FinalCondition );
	void PostEvent_MatchOver ( );
	void eventOnEvent ( );
};

UClass* UCombatStatStorage::pClassPointer = NULL;

// Class CombatGame.CombatStatStoragePVE
// 0x0000 (0x0064 - 0x0064)
class UCombatStatStoragePVE : public UCombatStatStorageBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1871 ];

		return pClassPointer;
	};

	void PostEvent_MatchOver ( );
	void SaveStatByOther ( );
	void SaveStatByWin ( );
	void eventOnEvent ( );
};

UClass* UCombatStatStoragePVE::pClassPointer = NULL;

// Class CombatGame.CombatStatUnitTest
// 0x0000 (0x003C - 0x003C)
class UCombatStatUnitTest : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1872 ];

		return pClassPointer;
	};

	void Clear ( );
	void CHECK_EMPTY ( );
	void Check ( struct FString RefStatCodeName, int Count );
	void WEAPON_HIT ( struct FString RefItemCodeName, class UClass* DamageType, unsigned char HitPart );
	void WEAPON_KILL ( struct FString RefItemCodeName, class UClass* DamageType, unsigned char HitPart );
	void WEAPON_FIRE ( struct FString RefItemCodeName );
	void CHANGE_MODE ( struct FString RefModeCodeName );
	void CHANGE_MAP ( struct FString RefMapCodeName );
	void StartTest ( );
	void Play ( );
	void RankUp ( );
	void EQU_SKILL_JUGGERNAUT_MINIGUN_01 ( );
	void EQU_SKILL_FSW_AMSR_STEYR50_01 ( );
	void EQU_SKILL_FSW_GL_XM25_01 ( );
	void EQU_SKILL_FSW_GL_M32_01 ( );
	void EQU_SKILL_FSW_RL_AT4_01 ( );
	void EQU_GRE_PRI_HANDGRENADE ( );
	void EQU_MEL_TOMAHAWK ( );
	void EQU_MEL_KUKRI ( );
	void EQU_MEL_NIMRAVUS ( );
	void EQU_PRI_BASR_AXMC ( );
	void EQU_PRI_SASR_G28E ( );
	void EQU_PRI_BASR_M107A1 ( );
	void EQU_PRI_BASR_ASW338 ( );
	void EQU_PRI_BASR_MSR ( );
	void EQU_PRI_BASR_BLAZERR93 ( );
	void EQU_PRI_BASR_DSR1 ( );
	void EQU_PRI_SASR_DRAGUNOV ( );
	void EQU_PRI_SASR_M110K ( );
	void EQU_PRI_LMG_HNK121 ( );
	void EQU_PRI_LMG_PECHENEG ( );
	void EQU_PRI_LMG_MK46 ( );
	void EQU_PRI_DMR_MK14MOD1 ( );
	void EQU_PRI_DMR_SCARH ( );
	void EQU_PRI_AR_MDR_G ( );
	void EQU_PRI_AR_G36_G ( );
	void EQU_PRI_AR_CZ805_G ( );
	void EQU_PRI_AR_ARX160_G ( );
	void EQU_PRI_AR_SR47_G ( );
	void EQU_PRI_AR_SIZ556XICARBON_G ( );
	void EQU_PRI_AR_TAR21_G ( );
	void EQU_PRI_AR_AK12_G ( );
	void EQU_PRI_AR_TYPE95_G ( );
	void EQU_PRI_AR_HNK416_G ( );
	void EQU_PRI_AR_EF88_G ( );
	void EQU_PRI_AR_SCARL_G ( );
	void EQU_PRI_AR_R5_G ( );
	void EQU_PRI_SMG_SIZMPX ( );
	void EQU_PRI_SMG_KRISSSUPERV ( );
	void EQU_PRI_SMG_MP7 ( );
	void EQU_SEC_PISTOL_CHIAPPARHINO ( );
	void EQU_SEC_PISTOL_DESERTEAGLE ( );
	void EQU_SEC_PISTOL_HNK45C ( );
	void EQU_SEC_PISTOL_G17LDF ( );
	void EQU_SEC_PISTOL_GLOCK17 ( );
};

UClass* UCombatStatUnitTest::pClassPointer = NULL;

// Class CombatGame.CombatSteamAchivementManager
// 0x000C (0x0048 - 0x003C)
class UCombatSteamAchivementManager : public UObject
{
public:
	TArray< struct FSteamAchievementData >             SteamAchievements;                                		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1873 ];

		return pClassPointer;
	};

	void CheckInGameScoreAchivements ( );
	void ClearAllAchievement ( );
	void OnSteamAchievementStored ( struct FString APIName );
	bool ClearAchievementByAPIName ( struct FString APIName );
	bool ClearAchievementByArrayIndex ( int ArrayIndex );
	int GetArchievementValue ( int Index );
	bool SetAchievementByAPIName ( struct FString APIName );
	bool SetAchievementByArrayIndex ( int ArrayIndex );
	void UpdateSteamUserAchievements ( );
	void OnSteamUserStatsReceived ( );
	bool RequestStats ( );
};

UClass* UCombatSteamAchivementManager::pClassPointer = NULL;

// Class CombatGame.CombatTeamBlockingVolume
// 0x0001 (0x0205 - 0x0204)
class ACombatTeamBlockingVolume : public ABlockingVolume
{
public:
	unsigned char                                      IgnoreBlockTeam;                                  		// 0x0204 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1874 ];

		return pClassPointer;
	};

};

UClass* ACombatTeamBlockingVolume::pClassPointer = NULL;

// Class CombatGame.CombatTrigger
// 0x0004 (0x01E4 - 0x01E0)
class ACombatTrigger : public ATrigger
{
public:
	float                                              InteractDistance;                                 		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1875 ];

		return pClassPointer;
	};

	bool TriggerUnusedBy ( class APawn* User );
	bool TriggerUsedBy ( class APawn* User );
};

UClass* ACombatTrigger::pClassPointer = NULL;

// Class CombatGame.CombatTrigger_Bomb
// 0x01F4 (0x03D8 - 0x01E4)
class ACombatTrigger_Bomb : public ACombatTrigger
{
public:
	struct FSExactLocationInfo                         C4ExactLocation;                                  		// 0x01E4 (0x000C) [0x0000000000000020]              ( CPF_Net )
	int                                                BombID;                                           		// 0x01F0 (0x0004) [0x0000000000000000]              
	struct FName                                       StateName;                                        		// 0x01F4 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                BombPlantTime;                                    		// 0x01FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                BombPlantTimeCount;                               		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0204 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatTrigger_Bomb.BombDefuseTime
	unsigned char                                      UnknownData01[ 0x2 ];                             		// 0x0206 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatTrigger_Bomb.BombDefuseTimeCount
	unsigned char                                      UnknownData02[ 0x2 ];                             		// 0x0208 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatTrigger_Bomb.BombTimeLimit
	float                                              DroppedPickupCoolTime;                            		// 0x020C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      BombClass;                                        		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SpawnLocation;                                    		// 0x0214 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    SpawnRotation;                                    		// 0x0220 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                PlanterID;                                        		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACBTeamInfo*                                 PlanterTeam;                                      		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       Planter;                                          		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 PlanterController;                                		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      BombMesh;                                         		// 0x023C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceTimeVarying*                PlantedIndicatorMITV;                             		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceTimeVarying*                DefusedIndicatorMITV;                             		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceTimeVarying*                LensFlareMITV;                                    		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DefaultIndicatorMaterial;                         		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ULensFlareComponent*                         LEDLensFEffect;                                   		// 0x0250 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FBombIndicatorInfo                          IndicatorInfo[ 0x4 ];                             		// 0x0254 (0x00B0) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      IndicatorState;                                   		// 0x0304 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LastTickState;                                    		// 0x0305 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ObtainableTeam;                                   		// 0x0306 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              TicTacCycleIntervalTime;                          		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TicTacCycleDeltaTime;                             		// 0x030C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatExplosion*                            ExplosionTemplate;                                		// 0x0310 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USoundCue*                                   DroppedSound;                                     		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PickupSound;                                      		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             DefuseAC;                                         		// 0x031C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   DefuseStartSoundCue;                              		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DefuseSuccessSoundCue;                            		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BombWeaponID;                                     		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CylinderRadiusOnFalling;                          		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TossSpeed;                                        		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TossZ;                                            		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FOutlineProperty                            OutlineColorForComrade;                           		// 0x0338 (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FOutlineProperty                            OutlineColorForEnemy;                             		// 0x036C (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FOutlineProperty                            OutlineColorWhenPlanted;                          		// 0x03A0 (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      SavedInstigator;                                  		// 0x03D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1876 ];

		return pClassPointer;
	};

	int GetBP ( unsigned char Part );
	unsigned char GetGrade ( );
	void SetIndicatorState ( unsigned char NewIndicatorState );
	void StopBombDefuseSound ( );
	void eventPostDemoRewind ( );
	void PlayBombDefuseSound ( unsigned long bDefuseStart );
	void PrepareExplosionActor ( class ACombatExplosionActor* CEA );
	void TriggerExplosion ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor );
	void HideProgressBarUI ( );
	void DisplayDefusingUI ( );
	void ApplyPlantingUI ( unsigned long bInOn );
	void SuccessDefuseBomb ( );
	void DefuseBombTimer ( );
	void ProgressionDefuseUI ( );
	bool eventIsDefusingBomb ( );
	void StopDefuseBombTimer ( );
	void StartDefuseBombTimer ( );
	void FailedExplodeBomb ( );
	void SuccessExplodeBomb ( );
	void SuccessPlantBomb ( );
	void GotoNextState ( );
	bool PlantBombTimer ( unsigned long bSucess );
	bool eventIsPlantingBomb ( );
	void StopPlantBombTimer ( );
	void StartPlantBombTimer ( unsigned long bSucess );
	void GetRealBombDefuseTime ( );
	int GetRealBombPlantTime ( );
	void BombGiveTo ( class ACombatPawn* P );
	void BombDroppedPickupCoolTimer ( );
	void eventToggleCylinderSize ( unsigned long bRestore );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	bool HasDefuseKit ( class APawn* P );
	class AInventory* GetBombInventory ( class APawn* P );
	void InitTriggerSetting ( );
	bool IsPlanted ( );
	void SetIndicatorSkin ( class UMaterialInterface* IndicatorMaterial );
	void InitIndicatorSkin ( );
	void NotifyRoundTimeOver ( );
	void NotifyRoundOver ( );
	void ClientReset ( );
	void Reset ( );
	void DropVelocity ( struct FVector inVelocity );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void UpdateUIState ( );
	void UpdateOutline ( );
	void NotifyLocalPlayerTeamReceived ( );
	unsigned char eventScriptGetTeamNum ( );
	void VolumeBasedDestroy ( class APhysicsVolume* PV );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventChangedBase ( class AActor* OldBase );
	bool BombLineCheck ( class APawn* User, unsigned long bCheat );
};

UClass* ACombatTrigger_Bomb::pClassPointer = NULL;

// Class CombatGame.CombatTypes
// 0x0000 (0x003C - 0x003C)
class UCombatTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1877 ];

		return pClassPointer;
	};

	void SetSeqVar_String ( struct FName VarName, struct FString StringData, struct FSeqVar_Data* VarData );
	void SetSeqVar_Float ( struct FName VarName, float FloatData, struct FSeqVar_Data* VarData );
	void SetSeqVar_Int ( struct FName VarName, int IntData, struct FSeqVar_Data* VarData );
	void SetSeqVar_Bool ( struct FName VarName, unsigned long BoolData, struct FSeqVar_Data* VarData );
	bool GetWorldCamPosition ( struct FVector* CamLoc, struct FRotator* CamRot );
	class ACameraActor* GetWorldCamera ( );
	bool ByteToRadioKeyType ( unsigned char Num, unsigned char* Result );
	struct FTimeData AddDeltaTime ( struct FTimeData A, struct FTimeData B );
	struct FTimeData GetDeltaTime ( struct FTimeData A, struct FTimeData B );
	bool IsServicetime ( struct FTimeData StartTime, struct FTimeData EndTime );
	bool IsValidTime ( struct FTimeData* InTimeData );
	struct FTimeData GetNowServerTime ( );
	bool CylinderLineCheck ( float CylinderWidth, float CylinderHeight, struct FVector* HitLoc, struct FVector* End, struct FVector* Start, struct FVector* CylinderLocation );
	struct FVector GetReplicatedVector ( struct FVector* InVector );
	struct FRotator GetReplicatedRotator ( struct FRotator* InRotator );
	void Update_TakeDamageData ( struct FTakeDamageData* Data );
};

UClass* UCombatTypes::pClassPointer = NULL;

// Class CombatGame.CombatUIDataProvider_MenuOption
// 0x0034 (0x0098 - 0x0064)
class UCombatUIDataProvider_MenuOption : public UUIResourceDataProvider
{
public:
	TArray< struct FName >                             GameModeCodenameSet;                              		// 0x0064 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      OptionMarkUp;                                     		// 0x0070 (0x0001) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       OptionType;                                       		// 0x0074 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       UIType;                                           		// 0x007C (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       UILocationType;                                   		// 0x0084 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     IniName;                                          		// 0x008C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1878 ];

		return pClassPointer;
	};

};

UClass* UCombatUIDataProvider_MenuOption::pClassPointer = NULL;

// Class CombatGame.CombatUIDataStore_StringAliasBindingMap
// 0x004C (0x0100 - 0x00B4)
class UCombatUIDataStore_StringAliasBindingMap : public UUIDataStore_StringAliasMap
{
public:
	int                                                FakePlatform;                                     		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FMap_Mirror                                 CommandToBindNames;                               		// 0x00B8 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FControllerMap >                    ControllerMapArray;                               		// 0x00F4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1879 ];

		return pClassPointer;
	};

	void ClearBoundKeyCache ( );
	void AddMappingToBoundKeyCache ( struct FString Command, struct FString MappingStr, int FieldIndex );
	bool FindMappingInBoundKeyCache ( struct FString Command, struct FString* MappingStr, int* FieldIndex );
	int GetBoundStringWithFieldName ( struct FString FieldName, struct FString* MappedString, int* StartIndex, struct FString* BindString );
	int GetStringWithFieldName ( struct FString FieldName, struct FString* MappedString );
};

UClass* UCombatUIDataStore_StringAliasBindingMap::pClassPointer = NULL;

// Class CombatGame.CombatUIDataStore_StringAliasMap
// 0x0004 (0x00B8 - 0x00B4)
class UCombatUIDataStore_StringAliasMap : public UUIDataStore_StringAliasMap
{
public:
	int                                                FakePlatform;                                     		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1880 ];

		return pClassPointer;
	};

	int GetStringWithFieldName ( struct FString FieldName, struct FString* MappedString );
};

UClass* UCombatUIDataStore_StringAliasMap::pClassPointer = NULL;

// Class CombatGame.CombatUserInfoTransaction
// 0x0238 (0x0274 - 0x003C)
class UCombatUserInfoTransaction : public UObject
{
public:
	int                                                ConnectTime;                                      		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                Level;                                            		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                LevelExp;                                         		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                PlayTime;                                         		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                CallingCardID;                                    		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                LastRank;                                         		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                Rank;                                             		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                EmblemID;                                         		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                ClanExp;                                          		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                RankingPoint;                                     		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FString                                     NickName;                                         		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ClanName;                                         		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x007C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatUserInfoTransaction.ModeStatListMap
	struct FMatchHistoryInfo                           MatchHistoryList[ 0x8 ];                          		// 0x00B8 (0x0180) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0238 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatUserInfoTransaction.CompetitionListMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1881 ];

		return pClassPointer;
	};

	bool GetCompetitionList ( TArray< struct FCompetitionInfo >* out_List );
	bool GetMatchHistoryInfo ( int _Type, struct FMatchHistoryInfo* out_Info );
	bool GetModeStatInfo ( int ModeID, struct FModeStatInfo* out_mode_stat );
	struct FString GetClanName ( );
	struct FString GetNick ( );
	int GetRankingPoint ( );
	int GetClanExp ( );
	int GetEmblemID ( );
	int GetRank ( );
	int GetLastRank ( );
	int GetCallingCardID ( );
	int GetPlayTime ( );
	int GetLevelExp ( );
	int GetLevel ( );
	int GetConnectTime ( );
};

UClass* UCombatUserInfoTransaction::pClassPointer = NULL;

// Class CombatGame.CombatVisBlocker
// 0x0010 (0x01E4 - 0x01D4)
class ACombatVisBlocker : public AActor
{
public:
	class UCylinderComponent*                          CC;                                               		// 0x01D4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class ACombatPawn* >                       InVolumePawnList;                                 		// 0x01D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1882 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ACombatVisBlocker::pClassPointer = NULL;

// Class CombatGame.CombatVoiceBase
// 0x0024 (0x0060 - 0x003C)
class UCombatVoiceBase : public UObject
{
public:
	TArray< struct FNotifySoundInfo >                  NotifySoundList;                                  		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FRadioDisplayInfo >                 LeftKeyInfos;                                     		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FRadioDisplayInfo >                 RightKeyInfos;                                    		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1883 ];

		return pClassPointer;
	};

	void ActionVoice ( class APawn* P, struct FName PlayName, unsigned long bNoReplicate, unsigned char TeamIndex );
	TArray< int > GetLocalizedMessage ( unsigned char KeyIndex );
	int GetRadioInfo ( unsigned char KeyIndex, unsigned char msgIndex, class USoundCue** VoiceCue );
};

UClass* UCombatVoiceBase::pClassPointer = NULL;

// Class CombatGame.CombatVoiceChatUserList
// 0x0068 (0x00A4 - 0x003C)
class UCombatVoiceChatUserList : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x003C (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.CombatVoiceChatUserList.UserMap
	struct FPlayerVoiceChat                            SelfData;                                         		// 0x0078 (0x001C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                myUID;                                            		// 0x0094 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           TalkingUserList;                                  		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1884 ];

		return pClassPointer;
	};

	void UpdateTalkingUserUI ( );
	void eventOnReloadVoiceChatAllList ( );
	void eventOnDelTalkingUserList ( struct FString Nick );
	void eventOnAddTalkingUserList ( struct FString Nick, unsigned long isFront );
	void SetMyData ( );
	void ResetAllList ( );
	void ReloadUserIndex ( );
	int GetUserCurrentState ( int Uid );
	int GetUIDFromUIIndex ( int UIIndex );
	int GetUserUIIndex ( int Uid );
	void UpdateUserMapState ( int Uid, int curState, unsigned long isSelf, unsigned long ifNullAdd );
	bool isMuteUserMap ( int Uid );
	void SetMuteMap ( int Uid, unsigned long IsMuted );
	void GetUserArray ( TArray< struct FPlayerVoiceChat >* out_array );
	void GetVoiceUserData ( int Uid, struct FPlayerVoiceChat* out_voiceChat );
	void DelUserMap ( int Uid );
	void AddUserMap ( int Uid );
	void InitUserMapFromMatchroom ( int TeamID );
};

UClass* UCombatVoiceChatUserList::pClassPointer = NULL;

// Class CombatGame.CombatVoiceInterfaceVivox
// 0x00AC (0x00E8 - 0x003C)
class UCombatVoiceInterfaceVivox : public UObject
{
public:
	struct FString                                     KeyString;                                        		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PlayerName;                                       		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     VivoxAccountName;                                 		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     VivoxAccountUri;                                  		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     VivoxEchoChannelUri;                              		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     VivoxTestChannelUri;                              		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     VivoxTeamChannelUri;                              		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           VivoxAccountNames;                                		// 0x0090 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	unsigned long                                      bCombineLogin : 1;                                		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsConnected : 1;                                 		// 0x009C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsLoggedIn : 1;                                  		// 0x009C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsChannelJoined : 1;                             		// 0x009C (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                SerialNumber;                                     		// 0x00A0 (0x0004) [0x0000000000000000]              
	class ACombatPC*                                   CPC;                                              		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              RefuseVoiceMeterEnergy;                           		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CurrentRefuseVoiceMeterEnergy;                    		// 0x00AC (0x0004) [0x0000000000000000]              
	TArray< struct FDelayedCallbackFunctionData >      DelayedCallbackFunctions;                         		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              DelayedCallbackFunctionsCheckTimerDelta;          		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              DelayedCallbackFunctionsCheckCycle;               		// 0x00C0 (0x0004) [0x0000000000000000]              
	struct FString                                     OSInputDeviceName;                                		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     APPInputDeviceName;                               		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           InputDeviceNameList;                              		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1885 ];

		return pClassPointer;
	};

	int GetUIDFromVivoxAccountName ( struct FString accountName );
	void ResetRefuseMeterEnergyValue ( );
	void SetRefuseMeterEnergyValue ( float val );
	void eventProcessDelayedFunctions ( );
	void ServerReset ( );
	void LeaveTeamChannel ( );
	void ClientReset ( );
	void eventOnSetParticipantMutedForMeFailed ( struct FString targetUser, struct FString channelUri, unsigned long muted, int Status );
	void eventOnSetParticipantMutedForMeCompleted ( struct FString targetUser, struct FString channelUri, unsigned long muted );
	void eventOnSetParticipantAudioOutputDeviceVolumeForMeFailed ( struct FString targetUser, struct FString channelUri, int Volume, int Status );
	void eventOnSetParticipantAudioOutputDeviceVolumeForMeCompleted ( struct FString targetUser, struct FString channelUri, int Volume );
	void eventOnAvailableAudioDevicesChanged ( );
	void eventOnParticipantUpdated ( struct FString accountName, struct FString channelUri, struct FString participantUri, unsigned long isLoggedInUser, unsigned long speaking, float vuMeterEnergy, unsigned long isMutedForAll );
	void eventOnParticipantLeft ( struct FString accountName, struct FString channelUri, struct FString participantUri, unsigned long isLoggedInUser, int LeftReasonCode );
	void eventOnParticipantAdded ( struct FString accountName, struct FString channelUri, struct FString participantUri, unsigned long isLoggedInUser );
	void eventOnChannelExited ( struct FString accountName, struct FString channelUri, int reasonCode );
	void eventOnChannelJoined ( struct FString accountName, struct FString channelUri );
	void eventOnLogoutCompleted ( struct FString accountName );
	void eventOnLoginFailed ( struct FString accountName, int Status );
	void eventOnLoginCompleted ( struct FString accountName );
	void eventOnConnectFailed ( struct FString serverUri, int Status );
	void eventOnConnectCompleted ( struct FString serverUri );
	void ResetGlobalToken ( );
	void SetGlobalJoinToken ( struct FString JoinToken );
	void SetGlobalLoginToken ( struct FString LoginToken );
	struct FString GenerateJoinToken ( struct FString AccountUri, struct FString TeamChannelUri, unsigned long bEchoChannel );
	struct FString GenerateLoginToken ( struct FString AccountUri );
	struct FString GetKeyString ( );
	void SetKeyString ( );
	int SetParticipantAudioOutputDeviceVolumeForMe ( int targetUserID, int Volume );
	int GetParticipantAudioOutputDeviceVolumeForMe ( int targetUserID );
	int SetParticipantMutedForMe ( int targetUserID, unsigned long muted );
	void SetAudioOutputDeviceMuted ( unsigned long NewMuteOutput );
	bool GetAudioOutputDeviceMuted ( );
	void SetMasterAudioOutputDeviceVolume ( int NewOutputVolume );
	int GetMasterAudioOutputDeviceVolume ( );
	void SetAudioInputDeviceMuted ( unsigned long NewMuteInput );
	bool GetAudioInputDeviceMuted ( );
	void SetMasterAudioInputDeviceVolume ( int NewInputVolume );
	int GetMasterAudioInputDeviceVolume ( );
	struct FString GetPlayerName ( );
	struct FString GetTeamChannelUri ( );
	struct FString GetAccountUri ( );
	void SetVivoxTeamChannelUri ( struct FString ChannelName, unsigned long echochannel );
	void JoinTeamChannel ( );
	void SetPlayerName ( struct FString NewName );
	void eventSetLoginInfos ( );
	void CombineLogin ( );
	void SetPC ( class ACombatPC* C_PC );
	void RemoveDelayedCallbackFunction ( struct FString FucntionName );
	void CheckDelayedCallbackFunctions ( float DeltaSeconds );
	bool TeamChannelPlayerLogin ( );
	bool EchoChannelPlayerLogin ( );
	bool NoChannelPlayerLogin ( );
	int LeaveChannel ( struct FString channelUri );
	int JoinChannel ( struct FString channelUri );
	int LeaveAll ( );
	int Logout ( );
	int Login ( );
	bool Uninitialize ( );
	bool Disconnect ( );
	bool Connect ( );
	bool SetInputDevice ( int DeviceIndex );
	bool InitializeInputDevice ( );
	bool Initialize ( );
};

UClass* UCombatVoiceInterfaceVivox::pClassPointer = NULL;

// Class CombatGame.CombatVolumetricsActor
// 0x001C (0x01F0 - 0x01D4)
class ACombatVolumetricsActor : public AActor
{
public:
	class UMaterialInstanceConstant*                   VolumetricsMI;                                    		// 0x01D4 (0x0004) [0x0000000000000000]              
	class UMaterial*                                   ParentVolumetricsMat;                             		// 0x01D8 (0x0004) [0x0000000000000000]              
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x01DC (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	struct FColor                                      EffectColor;                                      		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Distance;                                         		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FalloffExponent;                                  		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Opacity;                                          		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1886 ];

		return pClassPointer;
	};

	void SetVMMaterial ( class UMaterialInterface* NewDecalMaterial );
};

UClass* ACombatVolumetricsActor::pClassPointer = NULL;

// Class CombatGame.CombatWeapAttachMeshActor
// 0x0024 (0x0244 - 0x0220)
class ACombatWeapAttachMeshActor : public ASkeletalMeshActorMAT
{
public:
	class UClass*                                      WeaponClass;                                      		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMeshPart >                         SubPartList;                                      		// 0x0224 (0x000C) [0x0000000000420000]              ( CPF_EditConst | CPF_NeedCtorLink )
	TArray< class USkeletalMeshComponent* >            SubPartCompList;                                  		// 0x0230 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bShowSilence : 1;                                 		// 0x023C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowLaserSite : 1;                               		// 0x023C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseFirstWeaponMesh : 1;                          		// 0x023C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UParticleSystemComponent*                    LaserSitePSC;                                     		// 0x0240 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1887 ];

		return pClassPointer;
	};

	void UpdateLaserSite ( );
	void UpdateSilence ( );
	void UpdateWeaponClass ( );
};

UClass* ACombatWeapAttachMeshActor::pClassPointer = NULL;

// Class CombatGame.DynamicLadder
// 0x0000 (0x029C - 0x029C)
class ADynamicLadder : public ALadder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1888 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	void UpdateMyLadder ( );
};

UClass* ADynamicLadder::pClassPointer = NULL;

// Class CombatGame.GamePlayEvent_Action
// 0x003C (0x0078 - 0x003C)
class UGamePlayEvent_Action : public UObject
{
public:
	TArray< struct FActionTableDataType >              TableDataList;                                    		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FTableInfoType >                    TableInfoList;                                    		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             ActionTargetList;                                 		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             EventTypeList;                                    		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      RegisteredActions;                                		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1889 ];

		return pClassPointer;
	};

	bool GetReward ( class ACombatPlayerReplicationInfo* Target, int AchievementIndex, int* Score, int* RankExp, int* CreditPoint, int* ModeDependencyScore, int* tableIndex );
	void UpdateScore ( class ACombatPlayerReplicationInfo* targetPRI, int AchievementIndex );
	void eventSendMsg ( class ACombatPlayerReplicationInfo* targetPRI, int RegisteredActionArrayIndex );
	void PlayerAchievement ( class ACombatPlayerReplicationInfo* targetPRI, int AchievementIndex );
	int eventMakeKeyByIndex ( int ActionTargetIndex, int EventTypeIndex );
	int eventMakeKey ( struct FName ActionTargetName, struct FName EventType );
	void Register ( struct FName ActionTargetName, struct FName EventType );
	void UpdateRegisterData ( );
	void SetRegisterList ( );
	bool OnEvent ( class ACombatPC* Target, struct FName ActionTargetName, struct FName EventType );
	void Init ( );
};

UClass* UGamePlayEvent_Action::pClassPointer = NULL;

// Class CombatGame.GamePlayEvent_Kill
// 0x0134 (0x0308 - 0x01D4)
class AGamePlayEvent_Kill : public AActor
{
public:
	int                                                KillPacketCount;                                  		// 0x01D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FTakeDamageData                             SavedTakeDamageData;                              		// 0x01D8 (0x0058) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	float                                              LastKillTimeResetTime;                            		// 0x0230 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LongShotCondition;                                		// 0x0234 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AssistCondition;                                  		// 0x0238 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DangerousKillCondition;                           		// 0x023C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RescueConditionTime;                              		// 0x0240 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RescueCondition;                                  		// 0x0244 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MultiKillConditon;                                		// 0x0248 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ComeBackCondition;                                		// 0x024C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                EnemyKillCondition;                               		// 0x0250 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TeamRevengeCondition;                             		// 0x0254 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ConsecutiveAssistCondition;                       		// 0x0258 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ConsecutiveKillCondition;                         		// 0x025C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FKillTableDataType >                TableDataList;                                    		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FTableInfoContainer >               TableInfoList;                                    		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             RegisteredStates;                                 		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bSuicide : 1;                                     		// 0x0284 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< int >                                      OtherPlayerRewardMask;                            		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      ProcessingStateIndex;                             		// 0x0294 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0298 (0x003C) UNKNOWN PROPERTY: MapProperty CombatGame.GamePlayEvent_Kill.Achievement
	struct FString                                     CurrentMissionNameOfVictim;                       		// 0x02D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APawn*                                       VictimPawn;                                       		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       KillerPawn;                                       		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatPawn*                                 VictimCombatPawn;                                 		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatPawn*                                 KillerCombatPawn;                                 		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 VictimController;                                 		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 KillerController;                                 		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APlayerReplicationInfo*                      KillerPRI;                                        		// 0x02F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APlayerReplicationInfo*                      VictimPRI;                                        		// 0x02FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatPlayerReplicationInfo*                VictimCombatPRI;                                  		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatPlayerReplicationInfo*                KillerCombatPRI;                                  		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1890 ];

		return pClassPointer;
	};

	bool IsSuicide ( unsigned char DamangeType );
	bool IsSurvive ( TArray< class ACombatPlayerReplicationInfo* >* survivor );
	bool IsConsecutiveAssist ( TArray< class ACombatPlayerReplicationInfo* >* Targets );
	bool IsAssist ( TArray< class ACombatPlayerReplicationInfo* >* Targets );
	bool IsOneShotOneKill ( );
	bool IsDangerousKill ( );
	bool IsEnemyKill ( );
	bool IsTeamRevenge ( );
	bool IsBackShot ( );
	bool IsRevenge ( );
	bool IsRescue ( );
	bool GetReward_Rescue_Survive ( TArray< class ACombatPlayerReplicationInfo* >* survivor );
	bool IsComeBack ( );
	bool IsConsecutiveKillDepense ( );
	bool IsMultiKill ( );
	bool IsObjectPenetration ( );
	bool IsLongShot ( );
	bool IsAfterDeathKill ( );
	bool IsFirstKill ( );
	bool IsTargetDestroy ( struct FName TargetName );
	bool IsMissionBlockingKill ( struct FName MissionName );
	bool IsWeaponKill ( struct FName WeaponTypeName );
	void SendMsg ( );
	void RemoveAchievement ( );
	void SaveAchievement ( class ACombatPlayerReplicationInfo* targetPRI, int AchievementIndex );
	bool IsIgnoreCheckAchievement ( );
	bool GetReward ( class ACombatPlayerReplicationInfo* Target, int AchievementIndex, int* Score, int* RankExp, int* CreditPoint, int* ModeDependencyScore, int* tableIndex );
	void Register ( struct FName Key );
	void SaveStat ( );
	void MakeTargetPacket ( class APlayerReplicationInfo* targetPRI, int* RewardPacket1, int* RewardPacket2 );
	bool IsPacket ( int Index, int Packet1, int Packet2 );
	void MakePacket ( int Index, int* Packet1, int* Packet2 );
	int GetMaxTableInfoArrayIndex ( unsigned char HitPartType, unsigned char ContinueCount );
	bool GetTableInfo ( int TableInfoIndex, int MapDataKey, struct FTableInfoType* outTableInfo );
	void UpdateRegisterData ( );
	bool IsFindState ( struct FName StateName );
	void SetRegisterList ( );
	bool IsReward ( struct FName rewardName, TArray< int > recvPacket );
	bool UnPack ( class ACombatPlayerReplicationInfo* Killer, unsigned char HitPart, TArray< int > recvPacket, class AActor* Option );
	bool OnEvent ( );
	void Init ( );
	void SetTakeDamageData ( struct FTakeDamageData NewData );
};

UClass* AGamePlayEvent_Kill::pClassPointer = NULL;

// Class CombatGame.GripAIDef
// 0x0000 (0x003C - 0x003C)
class UGripAIDef : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1891 ];

		return pClassPointer;
	};

};

UClass* UGripAIDef::pClassPointer = NULL;

// Class CombatGame.Interface_CombatWeaponType
// 0x0000 (0x003C - 0x003C)
class UInterface_CombatWeaponType : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1892 ];

		return pClassPointer;
	};

	bool IsGrenade ( );
	bool IsMeleeWeapon ( );
	int GetWeaponStatType ( );
	unsigned char GetWeaponType ( );
	bool IsEquipWeapon ( );
	bool IsPlacedUseItem ( );
	bool IsPlacedWeapon ( );
	bool IsPlacedActor ( );
	bool IsSkillUseItem ( );
	bool IsSkillWeapon ( );
	bool IsSkillActor ( );
};

UClass* UInterface_CombatWeaponType::pClassPointer = NULL;

// Class CombatGame.interface_SplinePath
// 0x0000 (0x003C - 0x003C)
class Uinterface_SplinePath : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1893 ];

		return pClassPointer;
	};

	void eventSetPassedSplineLength ( float NewPassedSplineLength );
	float eventGetPassedSplineLength ( );
	void eventSetStartSplineActor ( class ACombatSplineActor* NewStartActor, unsigned long bSkipDestroy );
	struct FVector eventGetSplinePositionOffset ( );
	class ACombatSplineActor* eventGetNextSplineActor ( class ACombatSplineActor* StartSplineActor );
	class ACombatSplineActor* eventGetGoalSplineActor ( );
	class ACombatSplineActor* eventGetStartSplineActor ( );
};

UClass* Uinterface_SplinePath::pClassPointer = NULL;

// Class CombatGame.interface_WavePawn
// 0x0000 (0x003C - 0x003C)
class Uinterface_WavePawn : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1894 ];

		return pClassPointer;
	};

};

UClass* Uinterface_WavePawn::pClassPointer = NULL;

// Class CombatGame.OnlineSubsystemCombatBase
// 0x0000 (0x0100 - 0x0100)
class UOnlineSubsystemCombatBase : public UOnlineSubsystem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1895 ];

		return pClassPointer;
	};

	bool IsChampionshipObserver ( unsigned char GRADE );
	bool IsChampionshipPlayer ( unsigned char GRADE );
	bool IsAdminUser ( );
	bool IsAdmin ( unsigned char GRADE );
};

UClass* UOnlineSubsystemCombatBase::pClassPointer = NULL;

// Class CombatGame.OnlineSubsystemCombat
// 0x01C4 (0x02C4 - 0x0100)
class UOnlineSubsystemCombat : public UOnlineSubsystemCombatBase
{
public:
	struct FString                                     IPAddress;                                        		// 0x0100 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                PortNumber;                                       		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     IPAddressPmang;                                   		// 0x0110 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                PortNumberPmang;                                  		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UCombatCharacterTransaction*                 CharacterTransaction;                             		// 0x0120 (0x0004) [0x0000000000000000]              
	class UCombatItemTransaction*                      ItemTransaction;                                  		// 0x0124 (0x0004) [0x0000000000000000]              
	class UCombatStatisticsTransaction*                StatisticsTransaction;                            		// 0x0128 (0x0004) [0x0000000000000000]              
	class UCombatChannelTransaction*                   ChannelTransaction;                               		// 0x012C (0x0004) [0x0000000000000000]              
	class UCombatLobbyTransaction*                     LobbyTransaction;                                 		// 0x0130 (0x0004) [0x0000000000000000]              
	class UCombatClanTransaction*                      ClanTransaction;                                  		// 0x0134 (0x0004) [0x0000000000000000]              
	class UCombatCommunityTransaction*                 CommunityTransaction;                             		// 0x0138 (0x0004) [0x0000000000000000]              
	class UCombatMailTransaction*                      MailTransaction;                                  		// 0x013C (0x0004) [0x0000000000000000]              
	class UCombatAwaitTransaction*                     AwaitTransaction;                                 		// 0x0140 (0x0004) [0x0000000000000000]              
	class UCombatRandomBoxTransaction*                 RandomBoxTransaction;                             		// 0x0144 (0x0004) [0x0000000000000000]              
	class UCombatGameOptionTransaction*                GameOptionTransaction;                            		// 0x0148 (0x0004) [0x0000000000000000]              
	class UCombatUserInfoTransaction*                  UserInfoTransaction;                              		// 0x014C (0x0004) [0x0000000000000000]              
	unsigned char                                      wantScene;                                        		// 0x0150 (0x0001) [0x0000000000000000]              
	unsigned char                                      LoggedInStatus;                                   		// 0x0151 (0x0001) [0x0000000000000002]              ( CPF_Const )
	class UOnlineProfileSettings*                      CachedProfile;                                    		// 0x0154 (0x0004) [0x0000000000000000]              
	TArray< struct FPointer >                          AsyncTasks;                                       		// 0x0158 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FString                                     ProfileDataDirectory;                             		// 0x0164 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ProfileDataExtension;                             		// 0x0170 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ProfileMessageDataExtension;                      		// 0x017C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     LoggedInPlayerName;                               		// 0x0188 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     LoggedInPlayerSteamIDStr;                         		// 0x0194 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   ReadProfileSettingsDelegates;                     		// 0x01A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   WriteProfileSettingsDelegates;                    		// 0x01AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bShowProtocolLogToChat : 1;                       		// 0x01B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bImmersionDisplayed : 1;                          		// 0x01B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNotifyDelayedPreMTSReset : 1;                    		// 0x01B8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bJustBecameClanMaster : 1;                        		// 0x01B8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNeedBackToGame : 1;                              		// 0x01B8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsUsingSpeechRecognition : 1;                    		// 0x01B8 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	struct FComplaintReceiptInfo                       CurrentComplaintReceiptInfo;                      		// 0x01BC (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GameSerialNumber;                                 		// 0x01DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ImmersionCylcleTime;                              		// 0x01E8 (0x0004) [0x0000000000000000]              
	float                                              ImmersionElapsedTime;                             		// 0x01EC (0x0004) [0x0000000000000000]              
	float                                              ImmersionLifeTime;                                		// 0x01F0 (0x0004) [0x0000000000000000]              
	int                                                ImmersionHourCount;                               		// 0x01F4 (0x0004) [0x0000000000000000]              
	struct FString                                     ClanNotice;                                       		// 0x01F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ClanIntroduce;                                    		// 0x0204 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     WebServerIPAddress;                               		// 0x0210 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     MACAddress;                                       		// 0x021C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     WarnetKey;                                        		// 0x0228 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                MaxLocalTalkers;                                  		// 0x0234 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxRemoteTalkers;                                 		// 0x0238 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FUniqueNetId >                      MuteList;                                         		// 0x023C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FPointer                                    VoiceEngine;                                      		// 0x0248 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FScriptDelegate >                   TalkingDelegates;                                 		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   SpeechRecognitionCompleteDelegates;               		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LoggedInPlayerNum;                                		// 0x0264 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FUniqueNetId                                LoggedInPlayerId;                                 		// 0x0268 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FLocalTalkerSteam                           CurrentLocalTalker;                               		// 0x0270 (0x0008) [0x0000000000000000]              
	TArray< struct FRemoteTalker >                     RemoteTalkers;                                    		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      ListenerList;                                     		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineImageDownloaderWeb*                   BannerImageDownloader;                            		// 0x0290 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnReadProfileSettingsComplete__Delegate;        		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWriteProfileSettingsComplete__Delegate;       		// 0x02A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPlayerTalkingStateChange__Delegate;           		// 0x02AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRecognitionComplete__Delegate;                		// 0x02B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1896 ];

		return pClassPointer;
	};

	void eventOnLeaveRematchQueueFailed ( unsigned char Error_Code );
	void eventOnLeaveRematchQueueSuccess ( );
	void eventOnNotifyDisperseRematchQueue ( unsigned char Reason );
	void RequestLeaveReMatchQueue ( );
	void eventOnPingDataUpdated ( );
	void eventOnRefreshCashItemBuy ( );
	void RequestRefreshCashItemBuy ( );
	void eventOnShortcutUseEnd ( );
	void BannerImageDownloadRequest ( TArray< struct FString > URLList );
	void OnBannerOnlineImageDownloaded ( struct FOnlineImageDownload CachedEntry );
	void InitBannerImageDownloader ( );
	void eventUpdateInventoryItemUIData ( );
	struct FString GetGameSerialNumber ( );
	void eventOnSetGameSerialNumber ( struct FString SerialNumber );
	void eventOnItemUnLock ( unsigned char Error_Code );
	void SendItemUnLock ( );
	void eventOnStartBulletSaleEventEffect ( );
	void eventOnSteamAchievementStored ( struct FString APIName );
	void ClearAllAchievement ( );
	bool ClearAchievementByAPIName ( struct FString APIName );
	bool ClearAchievementByArrayIndex ( int ArrayIndex );
	bool SetAchievementByAPIName ( struct FString APIName );
	bool SetAchievementByArrayIndex ( int ArrayIndex );
	void eventOnSteamUserStatsReceived ( );
	void eventOnRequestSteamStats ( );
	class UCombatSteamAchivementManager* GetSteamAchivementManager ( );
	void UpdateListenerList ( );
	void NotifyVOIPPlaybackFinished ( class UAudioComponent* VOIPAudioComponent );
	void OnVOIPPlaybackFinished ( class UAudioComponent* AC );
	void ProcessSpeechRecognitionDelegates ( );
	void ProcessTalkingDelegates ( );
	void ProcessRemoteVoicePackets ( );
	void RecieveRemoteVoicePackets ( );
	void ClearLocalVoicePackets ( );
	void SendLocalVoicePackets ( );
	void BuildLocalVoicePackets ( );
	void ProcessLocalVoicePackets ( );
	void TickVoice ( float DeltaTime );
	void UnregisterRemoteTalkers ( );
	void UnregisterLocalTalkers ( );
	void RegisterLocalTalkers ( );
	bool SetSpeechRecognitionObject ( unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj );
	bool SelectVocabulary ( unsigned char LocalUserNum, int VocabularyId );
	void ClearRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate );
	void AddRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate );
	void OnRecognitionComplete ( );
	bool GetRecognitionResults ( unsigned char LocalUserNum, TArray< struct FSpeechRecognizedWord >* Words );
	bool StopSpeechRecognition ( unsigned char LocalUserNum );
	bool StartSpeechRecognition ( unsigned char LocalUserNum );
	void StopNetworkedVoice ( unsigned char LocalUserNum );
	void StartNetworkedVoice ( unsigned char LocalUserNum );
	void ClearPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate );
	void AddPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate );
	void OnPlayerTalkingStateChange ( struct FUniqueNetId Player, unsigned long bIsTalking );
	bool UnmuteAll ( unsigned char LocalUserNum );
	bool MuteAll ( unsigned char LocalUserNum, unsigned long bAllowFriends );
	bool UnmuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, unsigned long bIsSystemWide );
	bool MuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, unsigned long bIsSystemWide );
	bool SetRemoteTalkerPriority ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, int Priority );
	bool IsHeadsetPresent ( unsigned char LocalUserNum );
	unsigned char GetLoginStatus ( unsigned char LocalUserNum );
	bool IsFriend ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool IsRemotePlayerTalking ( struct FUniqueNetId PlayerID );
	bool IsLocalPlayerTalking ( unsigned char LocalUserNum );
	bool UnregisterRemoteTalker ( struct FUniqueNetId PlayerID );
	bool RegisterRemoteTalker ( struct FUniqueNetId PlayerID );
	bool UnregisterLocalTalker ( unsigned char LocalUserNum );
	bool RegisterLocalTalker ( unsigned char LocalUserNum );
	void eventOnTierPointPenaltyNonPlay ( unsigned char CompType, unsigned char tier_state, int NextPenaltyRemainTime );
	void eventOnTierPointUpdate ( );
	void eventOnMatchroomUserPenaltyEnd ( );
	void eventOnUserServiceAgreementSuccess ( );
	void eventOnShowAccessterms ( );
	void eventOnReturnBackPlayProcessEnd ( );
	void eventOnNeedBackToGame ( int BackChannelID );
	void eventOnCalculateBulletSaleTimeDate ( int LoginTime_time_t );
	void eventOnClientEXIT ( );
	void RequestLeaveAgentServer ( );
	void eventOnUserNickChange_Failure ( unsigned char Error_Code );
	void eventOnUserNicChange_Success ( );
	void eventOnUserInfo ( unsigned char Error_Code, unsigned long bBanned );
	void RequestUserInfo ( int Id, struct FString NickName );
	void eventOnUpdateStorageExpiresCount ( );
	void eventOnUpdateStorageNewCount ( );
	void eventOnReceiveStorageContent_Failure ( unsigned char Error_Code );
	void eventOnReceiveStorageFinish ( unsigned char CONSUME_TYPE );
	void eventOnReceiveStorageContent_Success ( int Id );
	void eventOnUpdateStorageList ( unsigned char Error_Code );
	void eventOnMailBoxStateUpdate ( );
	void RequestMailBoxStateUpdate ( TArray< int > List );
	void RequestMailBoxReceive ( TArray< int > List, unsigned char ConsumeType );
	void RequestMailBoxList ( int Page, unsigned char tab_type, TArray< int > List );
	bool WaitSteamItemBuyAck ( );
	void RequestSendSteamItemBuyConfirm ( unsigned long bFlag );
	void RequestSendSteamItemBuy ( int tableIndex, int Index );
	void eventUpdateDashBoardIcon ( );
	void eventOnUpdateMatchStartWaitTime ( float DeltaSeconds );
	void eventOnEneterPracticeGame_Failure ( unsigned char Error_Code );
	void eventOnEneterPracticeGame ( );
	void RequestEnterPracticeGame ( );
	void eventOnLEAVE_PRACTICE_GAME_SUCCEED ( );
	void eventOnCheckRandomBoxInInventory ( );
	void RequestRandomBoxEnd ( );
	void RequestRandomBoxUse ( int InvenSlot );
	void eventOnNotifyGetRandomBoxNotice ( struct FString Callsign, int RefRandomBoxID, int RefRandomBoxCubeID, int GiveValue );
	void eventOnRandomBoxUseFail ( unsigned char ErrorCode );
	void eventOnRandomBoxUseSuccess ( );
	void eventUpdateTsQuestMessage ( );
	void RequestUpdatePCBangBenefit ( unsigned char Type );
	void RequestResetAttend ( );
	void eventOnUpdateAttendInfo ( int attend_id, unsigned char joinState );
	void eventOnNotifyMTSReset_Failure ( unsigned char Error_Code );
	void eventOnNotifyMTSReset ( );
	void eventOnNotifyPreMTSReset ( );
	void eventOnDisplayCurrentMTS ( );
	void SetCurComplaintReceiptInfo ( int Complainer_ID, unsigned char COMPLAINT_TYPE, int Complaint_Receipt_Time, int CurrentTick );
	void eventOnComplaintReceipt ( int Complainer_ID, unsigned char COMPLAINT_TYPE, int Complaint_Receipt_Time, int CurrentTick );
	void eventOnComplaintReceiptFailure ( int userID, unsigned char Error_Code );
	void eventOnComplaintReceiptSuccess ( int Complaint_UserID, unsigned char COMPLAINT_TYPE );
	void RequestUserComplaintReceipt ( int user_id, unsigned char COMPLAINT_TYPE, struct FString complaint_explain );
	void eventSaveMiniMapSizeOption ( );
	void eventOnUpdateGameOption ( unsigned char Error_Code, unsigned char Option_Type );
	void RequestUpdateGameOption ( unsigned char Option_Type, unsigned char Option_Value );
	void eventOnUpdateScrNotice ( );
	void eventOnNewQuestAlram ( int QuestID, int QuestType );
	void RequestChampionShipEnterMatchroomCreate ( int RegionID, int refMissionIdx, int refModeGroupIdx, int refModeIdx, int refMapIdx, int RoomNumber );
	void eventOnChampionShipUserBlockChatting_Failure ( unsigned char ErrorCode );
	void eventOnChampionShipUserBlockChatting_Success ( struct FString targetPlayerName );
	bool RequestChampionShipUserBlockChatting ( struct FString PlayerName );
	void eventOnChampionShipChannelNoticeChatting_Failure ( unsigned char ErrorCode, int PenaltySec );
	void eventOnUpdateChampionshipChannelNotice ( struct FString noticeMsg );
	bool RequestChampionShipChannelNoticeChatting ( struct FString noticeMsg );
	void eventOnChampionshipObserverInGameChatting_Success ( int senderUID_, struct FString msg_ );
	void eventOnChampionshipObserverMatchRoomChatting_Success ( int senderUID_, struct FString msg_ );
	void eventOnChampionshipObserverChannelChatting_Success ( struct FString senderName, struct FString msg );
	bool AmIChampionshipObserver ( );
	bool AmIChampionshipPlayer ( );
	bool AmIChampionshipPersonnel ( );
	bool IsExistTicket ( unsigned char _Type );
	void eventHideOverImmersionGuard ( );
	void eventShowOverImmersionGuard ( );
	void eventOnGearSetChange_Used ( unsigned char refGearIndex );
	void eventOnGearSetChange_Failure ( unsigned char ErrorCode );
	void eventOnGearSetChange_Success ( unsigned char gearSetIndex );
	void RequestGearSetChange ( unsigned char gearSetIndex );
	bool IsPlayingStartupMovie ( );
	void eventOnMatchroomInviteUser_Failure ( unsigned char Error_Code );
	void eventOnMatchroomInviteUser_Sucess ( int userID );
	void eventOnMatchroomInviteUser ( struct FString Nick );
	void RequestMatchRoomInviteUserReq ( int userID, unsigned char INVITE_TYPE );
	void eventOnMatchroomChannelInviteUserListFailed ( unsigned char ErrorCode );
	void eventOnMatchroomChannelInviteUserList ( );
	void eventOnMatchroomTeamSwapFailed ( unsigned char ErrorCode );
	void eventOnMatchroomKickUserFailed ( unsigned char ErrorCode );
	void eventOnMatchroomChangeHostFailed ( unsigned char ErrorCode );
	void RequestMatchRoomChangeHostReq ( int userID );
	void eventOnUpdateMatchRoomChannelInviteUserList ( );
	void RequestMatchRoomChannelInviteUserListReq ( int page_index, int Max_user_count );
	void RequestMatchRoomTeamSwapReq ( );
	void RequestMatchRoomKickUserReq ( int userID );
	void eventUpdateProtocoalLog ( struct FString logMsg );
	bool eventIsShowProtocolLogToChat ( );
	void ShowProtocolLogToChat ( unsigned long bShow );
	void ShutdownNetEngine ( );
	bool IsLoginComplete ( );
	bool IsAdminUser ( );
	unsigned char GetUserGrade ( );
	bool IsSpectatorMode ( );
	void eventOnSystemNotifyMessage ( unsigned char msgCode );
	void eventOnMatchroomSlotUpdateDel ( unsigned char Reason, struct FString Nick );
	void eventReceiveNoticeMessage ( struct FString Message );
	void eventOnQuestStatus_Change ( unsigned char QUEST_TYPE, unsigned long SetActive );
	void eventOnSearchUser_Sucess ( struct FString UserName, int refChannelIndex, unsigned char ChannelNumber );
	void eventOnInviteUser_Success ( struct FString UserName );
	void eventOnBlockChat_Success ( struct FString UserName );
	void eventOnBanUser_Success ( struct FString UserName );
	void eventFailBlockPlayGame_WrongActivatedType ( );
	void eventSuccessBlockPlayGame ( unsigned char activatedType );
	void eventNotifySpectatorMode ( );
	void eventOnRoundMonitoringOption_Failure ( unsigned char Error_Code );
	void eventOnRoundMonitoringOption_Success ( int Match_Room_Number, unsigned long bMonitoring_Option );
	void eventOnGMCMD_Failure ( unsigned char Error_Code );
	void eventOnGMCMD_Success ( );
	void RequestRandomBoxSimulator ( struct FString RandomBoxCodeName, int SimulateCount );
	void RequestDemoRec ( unsigned char Value );
	void RequestSendRoundMonitoringOption ( unsigned char Match_Room_Number, unsigned char Monitoring_Option );
	void RequestSendScrNoticeTimeout ( unsigned char Num, struct FString End_Time );
	void RequestSendScrNoticeDel ( unsigned char Num );
	void RequestSendScrNoticeSet ( unsigned char Num, struct FString msg, struct FString End_Time );
	void RequestSendNoticeMessage ( struct FString Message, unsigned char NoticeArea );
	void RequestSearchUser ( struct FString UserName );
	void RequestInviteUser ( struct FString UserName );
	void RequestBlockChat ( struct FString UserName );
	void RequestBanUser ( struct FString UserName );
	void RequestSpectatorMode ( );
	void RequestChangeGameForGM ( int refMissionIdx, int refModeIdx, int refMapIdx );
	void RequestEnterMatchroomForGM ( int RegionID, int refMissionIdx, int refModeGroupIdx, int refModeIdx, int refMapIdx, int RoomNumber );
	void RequestTeamShuffle ( );
	void RequestTeamSwap ( );
	void RequestBlockPlayGame ( unsigned char activatedType );
	void RequestKickUserAll ( );
	void RequestKickUser ( int kickUID );
	void RequestIAmHost ( );
	bool GetAimAssistValue ( );
	void OnWriteProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void OnReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool DoesProfileExist ( );
	bool WriteProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings );
	bool ReadProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings );
	void RequestSendDelegateClanMaster ( int MsterUserID );
	void eventSetOnClanShutdownPenalty ( unsigned char val );
	void eventFailClanGradeChange ( unsigned char Error_Code );
	void eventFailClanMasterDelegate ( unsigned char Error_Code );
	void eventFailClanJoinRefuse ( unsigned char Error_Code );
	void eventFailClanJoinApprove ( unsigned char Error_Code );
	void eventFailClanJoinCancel ( unsigned char Error_Code );
	void eventFailClanJoinApply ( unsigned char Error_Code );
	void eventFailShutDownClan ( unsigned char Error_Code );
	void eventRecvClanClearInfoUpdate ( );
	void eventRecvBecameClanMaster ( );
	void eventRecvClanMasterChangeUpdate ( );
	void eventRecvClanChangeInfoUpdate ( );
	void RequestSendClanShutDown ( struct FString clanPassword );
	void RequestSendClanMemberGradeChange ( int userID, unsigned char GRADE );
	void eventMatchRoomClanListUpdate ( int userID );
	void eventFailClanFind ( unsigned char Error_Code );
	void RequestSetClanJoinRefuse ( int userID );
	void RequestSetClanJoinApprove ( int userID );
	void RequestSetClanJoinCancel ( int ClanID );
	void RequestSetClanJoinApply ( int ClanID );
	void RequestSendClanDetail ( int ClanID );
	void RequestSendClanFind ( struct FString ClanName );
	void RequestSendClanList ( int Type, unsigned char pageNum );
	void eventSuccessClanJoinList ( int ClanID );
	void eventClanListDetailView ( );
	void eventReNewalClanList ( );
	void eventFailAcceptClan ( unsigned char Error_Code );
	void eventSuccessAcceptClan ( struct FString ClanName );
	void RequestInviteAcceptClan ( int clan_id );
	void eventFailBreakAwayClan ( unsigned char Error_Code );
	void RequestBreakAwayClan ( );
	void eventFailBanishClan ( unsigned char Error_Code );
	void RequestBanishClan ( int Id );
	void eventClanInviteSuggest ( int Id, struct FString Clan_Name, struct FString suggest_Name );
	void eventFailInviteClan ( unsigned char Error_Code );
	void eventSuccessInviteClan ( int user_id, struct FString NickName );
	void RequestInviteClan ( struct FString NickName );
	void eventFailChangeClanPassword ( int Error_Code );
	void eventSuccessChangeClanPassword ( );
	void eventFailCreateClanName ( unsigned char Error );
	void eventSuccessCreateClan ( );
	void eventOnClanRegionUpdateFailed ( unsigned char Error_Code );
	void eventOnClanRegionUpdateSucceeded ( );
	void eventOnClanRegionUpdate ( );
	void RequestSetClanRegion ( );
	void RequestModifyClanPassword ( struct FString old_Password, struct FString new_Password );
	void RequestCreateClanName ( struct FString ClanName, struct FString clanPassword );
	void eventOnCallingCardObtain_Failure ( unsigned char errer_code );
	void eventOnCallingCardObtain_Sucess ( int Id );
	void eventOnCallingCardExpire ( );
	void eventOnCallingCardChange_Failure ( unsigned char Error_Code );
	void eventOnCallingCardChange_Sucess ( );
	void RequestCallingCardChange ( int calling_card );
	void eventOnFollowingUser ( unsigned char Error_Code );
	void RequestFollowingUser ( int user_id );
	void eventOnRemoveBlackList_Failure ( unsigned char Error );
	void RequestBlackListRemove ( struct FString PlayerName );
	void eventOnAddBlackList_Failure ( unsigned char Error, struct FString PlayerName );
	void eventOnAddBlackList_Success ( int beforState, struct FString PlayerName );
	void RequestBlackListAppend ( struct FString PlayerName );
	void eventOnRemoveFriend_Failure ( unsigned char Error );
	void RequestMessengerRemoveFriend ( int userID );
	void eventOnAnswerRejectFriendSuggestion_Failure ( unsigned char Error );
	void eventOnAnswerAcceptFriendSuggestion_Failure ( unsigned char Error );
	void RequestMessengerAnswerFriendSuggestion ( struct FString PlayerName, unsigned long bAccept );
	void eventAlramFriendSuggestion ( struct FString PlayerName );
	void eventOnSuggestFriend_Failure ( unsigned char Error, struct FString PlayerName );
	void eventOnSuggestFriend_Success ( struct FString PlayerName );
	void RequestMessengerSuggestFriend ( struct FString PlayerName );
	void eventOnClanCreatableNameCheck_Success ( );
	void RequestSendClanCreatableNameCheck ( struct FString ClanName );
	void eventOnClanIntroduceUpdateFailed ( unsigned char Error_Code );
	void eventOnClanIntroduceUpdate ( struct FString Introduce );
	void eventOnClanIntroduceUpdateSucceded ( struct FString Introduce );
	void eventSetClanIntroduce ( struct FString Introduce );
	void RequestSendClanIntroduce ( struct FString Introduce );
	void eventOnClanNoticeUpdateFailed ( unsigned char Error_Code );
	void GetArrayedClanNotice ( TArray< struct FString >* arrayedNotice );
	void eventOnClanNoticeUpdate ( struct FString notice );
	void eventOnClanNoticeUpdateSucceded ( struct FString notice );
	void eventSetClanNotice ( struct FString notice );
	void RequestSendClanNotice ( struct FString notice );
	void eventUpdateClanMessenge_ClanList_Offline ( );
	void eventUpdateClanMember_ClanList ( int ClanID );
	void eventOnClanMemberKick ( struct FString NickName, int userID, unsigned long bMyKick );
	void eventOnClanMemberKickSucceed ( struct FString NickName, int userID );
	void eventOnClanBreakAway ( struct FString NickName, int userID );
	void eventOnClanBreakAwaySucceed ( int userID );
	void eventOnClanAccept ( struct FString NickName );
	void eventOnClanJoinApproveClan ( struct FString NickName );
	void eventOnClanJoinApproveSucceed ( struct FString NickName );
	void eventOnClanShutDownSucceed ( int userID );
	void eventUpdateOnClanShutDown ( );
	void eventUpdateMessenger_BlockList ( );
	void eventUpdateMessenger_FriendList_Offline ( );
	void eventUpdateMessenger_FriendList ( );
	void eventUpdateMessenger_SuggestionList ( );
	void eventUpdateRadioMessage ( int senderUID, unsigned char UniqueRadioID, unsigned char chatType, unsigned long bGameManager_ );
	void eventOnSendInGameTeamChatting_Success ( int senderUID_, struct FString msg_, unsigned long bGameManager_ );
	void eventOnSendInGameChatting_Success ( int senderUID_, struct FString msg_, unsigned long bGameManager_ );
	void eventDisplayPlayerInOutMessage ( unsigned long bIn, struct FString PlayerName );
	void eventOnSendMatchRoomChatting_Success ( int senderUID_, struct FString msg_, unsigned long bGameManager_ );
	void eventOnSendChannelChatting_Success ( struct FString senderName, struct FString senderClanName, struct FString msg, unsigned long bGameManager );
	void eventUpdateMessenger_NotifyMessage ( int userID );
	void eventUpdateClanChat ( int userID, struct FString TargetName, struct FString msg );
	void eventUpdateWhisperMessage ( unsigned char chatType, struct FString msg, struct FString TargetName, unsigned long bSenderIsGameManager );
	void eventOnSendChatting_Failure ( unsigned char SendType, unsigned char Error_Code, int PenaltySec, struct FString WhisperTo );
	void RequestSendChattingByType ( unsigned char SendType, struct FString msg, struct FString TargetName, unsigned char UniqueRadioID );
	void eventOnMatchHasFinished ( );
	void eventMatchEndResult ( );
	void eventOnUserCash ( );
	void RequestUserCash ( );
	void eventOnItemSell ( unsigned char Error_Code );
	void RequestItemSell ( int ItemIndex, TArray< int > SlotList );
	void eventOnSteamItemObtain ( );
	void eventDestroyedItem_Failure ( unsigned char ErrorCode, int itemInvenslot );
	void eventDestroyedItem ( int SlotIndex );
	void eventExpiredItem ( int itemInvenslot );
	void eventOnRequestSendSteamItemBuyConfirmCancle ( );
	void eventOnRequestSendSteamItemBuyConfirmOK ( );
	void eventOnSteamItemBuyConfirm ( unsigned char Error_Code );
	void eventOnSteamItemBuy ( unsigned char Error_Code );
	void eventOnLimitBuyItemTimeEnd ( int Item_Index );
	void eventOnBuyItemCancel_Failure ( unsigned char Error_Code );
	void eventOnBuyItemCancel_Success ( );
	void RequestBuyItemCancel ( );
	void eventOnBuyItem_TryPayment ( );
	void eventOnBuyItem_Failure ( unsigned char Error_Code, struct FString Error_Message );
	void eventOnBuyItem_Success ( int Index, int InvenSlot );
	void RequestBuyItem ( int Index, unsigned char _PriceType, int _PriceID, unsigned char _RecvType, unsigned long bSale );
	bool IsOnSale ( struct FTimeData* StartTime, struct FTimeData* EndTime );
	bool IsForSale ( struct FTimeData* StartTime, struct FTimeData* EndTime );
	void eventNotifyExpiredItem ( );
	void eventLogOpenCubeResult ( struct FString Data );
	void eventSuccessBuyCubeItem ( int shopItemIndex, TArray< int > itemSlotList );
	void eventUpdateItemRemainTime ( TArray< int > updateItemList );
	void eventOnUpdateInventory_Failure ( unsigned char errorType );
	void eventOnUpdateInventory_Success ( );
	void SendChangeItemExpendReq ( int Slot, struct FString Text );
	void SendItemExpendReq ( int Slot );
	void SendItemDeactiveReq ( int Slot );
	void SendItemActiveReq ( int Slot );
	void SetPlayEquipment ( unsigned char tIndex, unsigned char EquipSlot, int InventorySlotIndex );
	void ResetPlayEquipmentInformation ( );
	void RequestUpdateInventory ( );
	void eventSuccessRemoveInventoryItem ( int InventorySlotIndex );
	void RequestRemoveInventoryItem ( TArray< int > inventorySlotList );
	void eventSetItemNameInvenItems ( );
	void eventSetActiveItems ( );
	void eventSetEquippedItem ( int InventorySlotIndex, int presetIdx, int EquipSlot );
	void eventSetInitItemInfomation ( );
	void eventOnCompMatchDialogCheck ( );
	void RequestLeaveRoomSettingReq ( );
	void RequestEnterRoomSettingReq ( );
	void eventOnNotifyChangeMatchroomGameOption ( );
	void eventOnNotifyChangeHost ( int newHostUserID );
	void eventDisplayTeamUpdateType ( unsigned char TeamUpdateType );
	void eventUpdateMatchroom_TeamList ( );
	void eventUpdateMatchroom_Password ( );
	void eventUpdateMatchroom_Option ( unsigned char optionType_, unsigned char optionValueIndex_ );
	void eventUpdateMatchroom_ModeMap ( );
	void eventUpdateMatchroom_RoomName ( );
	void eventOnMatcroomUpdateOption_Failure ( unsigned char errorType_ );
	void RequestMatchRoomUpdateOptionByPassword ( unsigned char openType_, int password_ );
	void RequestMatchRoomUpdateOptionByModeOption ( unsigned char modeOptionType_, unsigned char optionValueIndex_ );
	void RequestMatchRoomUpdateOptionByGame ( int refMissionIdx_, int refModeGroup_, int refModeIdx_, int refMapIdx_ );
	void RequestMatchRoomUpdateOptionByTitle ( struct FString roomName_ );
	void eventOnLeaveMatchRoom_Failure ( unsigned char errorType );
	void PushLeaveMatchroomReasonDialog ( unsigned char leaveReason );
	void eventOnLeaveMatchRoom_Success ( unsigned char leaveReason );
	void RequestLeaveMatchRoom ( );
	void eventOnIntrude_Failure ( unsigned char errorType );
	void eventOnIntrude_Success ( );
	void eventOnIntrude_Try ( );
	void RequestIntrude ( );
	void eventOnChangeTeam_Success ( unsigned char TeamIndex );
	void eventOnChangeTeam_Failure ( unsigned char errorType );
	void RequestChangeTeam ( unsigned char TeamIndex );
	void eventOnReady_Failure ( unsigned char errorType );
	void RequestReady ( );
	void eventOnMatchBeginningAborted ( unsigned char errorType );
	void eventOnStartMatchBeginCountdown ( );
	void RequestAbortCountdown ( );
	void eventOnStartMatch_Failure_Notify ( unsigned char errorType );
	void eventOnStartMatch_Failure ( unsigned char errorType );
	void RequestStartMatch ( );
	void eventOnPlayerJoinMatchroom ( int joinUID );
	void eventOnStartEnteringMatch ( );
	void eventOnMatchRoomHostPreemption ( unsigned char Error_Code );
	void RequestMatchRoomHostPreemption ( );
	void eventOnMatchroomReadyButtonUpdate ( unsigned long bDisable );
	void eventOnNotifyLazyHostWarning ( );
	void eventOnUpdateMatchroomTeamSwap ( );
	void eventOnUpdateMatchroom ( );
	void ClearCompMatchInfo ( );
	void MakeCompMatchInfo ( );
	void ClearClanMatchInfo ( );
	void MakeClanMatchInfo ( );
	void eventOnTodayModeUpdateNotify ( );
	void eventOnTodayModeUpdateFailed ( );
	void eventOnTodayModeUpdate ( );
	bool isNeedUpdateTodayMode ( int refModeGroupIdx );
	void RequestTodayModeUpdate ( int refModeGroupIdx );
	void RequestQuickStart ( int refMissionIdx, int refModeIdx, int refMapIdx, int room_state, int room_crowd, int search_global );
	void eventOnEnterMatchroomByCreation_Failure ( unsigned char errorType );
	void eventOnEnterMatchroomByCreation_Success ( );
	void RequestEnterMatchRoomByCreate ( int Region_ID, int Mission_ID, int Mode_Group_ID, int Mode_ID, int Map_ID, unsigned char Open_Type, int Password );
	void RequestMatchChannelEnterCreateMatchRoom ( int refChannelIdx, int refMissionIdx, int refModeGroupIdx );
	void eventOnMatchRoomLookIn ( unsigned char Error_Code );
	void RequestMatchRoomLookIn ( int Number );
	void eventOnEnterMatchRoom ( unsigned char Error_Code );
	void RequestEnterMatchRoomByRoomNumber ( int Number, int Password );
	void eventOnUpdateMatchRoomList ( );
	void eventOnEnterMatchChannel ( unsigned char Error_Code );
	void RequestEnterMatchChannel ( int Index, int PropertyNumber );
	void eventOnReportSingleGameResult ( );
	void RequestReportSingleGameResult ( );
	void eventOnLeaveSingleGame ( );
	void RequestLeaveSingleGame ( );
	void eventOnEnterSingleGame ( );
	void RequestEnterSingleGame ( );
	void eventOnUpdateMatchChannelState ( );
	void RequestMatchChannelState ( TArray< int > List );
	void eventOnLeaveMatchChannel ( unsigned char Reason_Type );
	void RequestLeaveMatchChannel ( );
	void eventOnUpdateCreateNickName ( unsigned char Error_Code );
	void RequestCreateNickName ( struct FString NickName );
	void eventOnUserDataInfomation ( unsigned long bCreateCharacter );
	void TimerGotoChannel ( );
	void eventOnReceiveUserData ( );
	void eventOnEnterMatchServer_Failure ( unsigned char errorType );
	void RequestEnterMatchServer ( );
	void eventUpdateCertifyWaitUserCount ( int Count );
	void eventUpdateLoginProgressUI ( int CertificationType, int ProcessType );
	void eventOnConnectAgentServer_Failure ( unsigned char RequestType, unsigned char error_type, unsigned char Error_Code );
	void eventOnUserCertification_Failure ( unsigned char RequestType, unsigned char errorType, int ErrorCode, int BanExpireRemainTime );
	void eventOnModuleCertification_Failure ( unsigned char RequestType, unsigned char errorType, unsigned char ErrorCode );
	void eventDisplayDialog_LoginError_Init ( unsigned char errorType );
	void eventDisplayDialog_LoginError_WebServer ( unsigned char errorType, struct FString errorString );
	void eventDisplayDialog_LoginError_Wait ( );
	void StartLogin ( struct FString Id, struct FString PW );
	bool CheckPassLoginUI ( );
	void eventUpdateDashboard_ClanButtons ( );
	void eventSetFrontEndPlayerActor ( );
	void eventOnSetItemConsum_Failure ( unsigned char Error_Code );
	void eventOnSetItemConsume_Success ( int consumeitem, int StackCount );
	void eventOnItemDeActivated ( int Error_Code, int DeActivated_SlotIndex );
	void eventOnItemActivated ( int Error_Code, int Activated_SlotIndex, int DeActivated_SlotIndex );
	void eventUpdateTooltipRentalTime ( int SlotIndex, int remainRentalTime );
	bool eventIsDisplayedTooltip ( int SlotIndex );
	void eventUpdateClanLevelUpMessage ( int ClanLevel );
	void eventUpdateCurrentClanLevelData ( );
	void eventUpdateCurrentLevelData ( unsigned long bLogin, int* Exp );
	void eventOnLeaveRoomSettingSucceed ( );
	void eventOnEnterRoomSettingSucceed ( );
	void eventOnLeavePersonalMaintenance_REVISAL ( );
	void eventOnLeavePersonalMaintenance_Failure ( unsigned char errorType );
	void eventOnLeavePersonalMaintenance_Success ( );
	void RequestLeavePersonalMaintenance ( );
	void eventOnEnterPersonalMaintenance_Failure ( unsigned char errorType );
	void eventOnEnterPersonalMaintenance_Success ( );
	void RequestEnterPersonalMaintenance ( );
	void eventOnUIBlock ( unsigned long bBlock );
	void eventNotifyChangedBoosterItem ( );
	void eventFailSetActivePreset ( unsigned char errorType );
	void eventSuccessSetActivePreset ( unsigned char presetIdx );
	void RequestSetActivePreset ( unsigned char presetIdx );
	void eventDev_UpdateDevelopeMessage ( struct FString msg );
	void RequestChangeAFKState ( unsigned long bAFK );
	void OpenFrontEnd ( unsigned char Scene );
	void eventGotoChannel ( );
	void eventGotoMainLobby ( );
	void eventGotoGameResult ( );
	void eventGotoMatchRoom ( );
	void eventFailReturnToMatchRoom ( unsigned char errorType );
	void RequestReturnToMatchRoom ( );
	void OnDisconnetToMatchServerDialogOK ( struct FEventData ev );
	void ShowDisconnetToMatchServerDialog ( unsigned char disconnectType, unsigned long bisPush );
	void eventDisconnetClientResult ( int CauseID );
	void eventOnVersionDiscrepancy ( );
	void eventExit ( );
	class UCombatGFxMoviePlayer* GetMoviePlayer ( );
	class ACombatHUD* GetHUD ( );
	class AGamePlayerController* GetPC ( );
	class ACombatFrontEndInfo* GetFrontEndGameInfo ( );
	void SendResetQuest ( unsigned char QuestType );
	void SendResetQuestTime ( unsigned char QuestType, unsigned char ResetHour );
	void BoosterScheduleRegister ( int BoosterID );
	bool eventInit ( );
};

UClass* UOnlineSubsystemCombat::pClassPointer = NULL;

// Class CombatGame.OnlineSubsystemCombatDedicatedSvr
// 0x0018 (0x0118 - 0x0100)
class UOnlineSubsystemCombatDedicatedSvr : public UOnlineSubsystemCombatBase
{
public:
	TArray< struct FPresetItemInfo >                   PresetWeaponTransition;                           		// 0x0100 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	TArray< struct FAvatarItemInfo >                   AvatarItemTransition;                             		// 0x010C (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1897 ];

		return pClassPointer;
	};

	bool GetActivePreset ( int Uid, unsigned char* preset );
	bool LoadArmorListTransition ( int Uid );
	void LoadPresetWeaponTransition ( int Uid );
};

UClass* UOnlineSubsystemCombatDedicatedSvr::pClassPointer = NULL;

// Class CombatGame.PresetManager
// 0x04F4 (0x0530 - 0x003C)
class UPresetManager : public UObject
{
public:
	struct FString                                     PresetCode_First[ 0x9 ];                          		// 0x003C (0x006C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PresetCode_Sec[ 0x9 ];                            		// 0x00A8 (0x006C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PresetCode_Third[ 0x9 ];                          		// 0x0114 (0x006C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PresetCode_Fourth[ 0x9 ];                         		// 0x0180 (0x006C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FPresetData                                 PresetData_First[ 0x9 ];                          		// 0x01EC (0x00B4) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPresetData                                 PresetData_Sec[ 0x9 ];                            		// 0x02A0 (0x00B4) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPresetData                                 PresetData_Third[ 0x9 ];                          		// 0x0354 (0x00B4) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPresetData                                 PresetData_Fourth[ 0x9 ];                         		// 0x0408 (0x00B4) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           ArmorData;                                        		// 0x04BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FAmmorInfo                                  AmmorPoint;                                       		// 0x04C8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FTestChangeWeaponType >             PrimaryWeapon;                                    		// 0x04D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FTestChangeWeaponType >             SubWeapon;                                        		// 0x04E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FTestChangeWeaponType >             ArmorSet;                                         		// 0x04EC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UCombatGameTableDepot*                       TableDepot;                                       		// 0x04F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PresetData_ChaFXUpperItemID;                      		// 0x04FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PresetData_ChaFXFootItemID;                       		// 0x0500 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PresetData_C4TimeReduceItemID;                    		// 0x0504 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PresetData_SprayID;                               		// 0x0508 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      SkillItemIndex;                                   		// 0x050C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                GearSetItemIndex[ 0x3 ];                          		// 0x0518 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UClass* >                            InvListToPreventGC;                               		// 0x0524 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1898 ];

		return pClassPointer;
	};

	int GetActivatedSprayID ( );
	struct FString GetArmorData ( unsigned char TeamIndex );
	void SetInventoryListClassToPreventGC ( TArray< class UClass* >* InvList );
	void GetPresetClass ( int PresetIndex, TArray< class UClass* >* InvList );
	void GetActiveItemData ( TArray< struct FString >* InArmor );
	bool SetInitializedData ( );
	bool LoadLocalFrontEndData ( TArray< struct FString >* InArmor );
	bool GetInventoryPresetData ( );
	bool IsValidArmorData ( TArray< struct FString >* InArmor );
	void ForceChangePresetWeapon ( int GroupID, int listID );
	void Init ( );
	void InitPresetDataFromCode ( int PresetIndex );
	void SetPresetItemID ( int InPresetNumber, int InSlotIndex, int InItemID );
	struct FString GetPresetClassName ( int PresetIndex, int SlotIndex );
	int GetPresetID ( int PresetIndex, int SlotIndex );
};

UClass* UPresetManager::pClassPointer = NULL;

// Class CombatGame.RankUpSystem
// 0x0000 (0x003C - 0x003C)
class URankUpSystem : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1899 ];

		return pClassPointer;
	};

	bool ConvertExpToRank ( float Exp, unsigned char* Rank );
	int GetUnlockSkill_Range ( int OldRank, int newRank, unsigned char MilitaryClass, TArray< struct FString >* unlocks );
	int eventMakeID ( int RankSysID, int Rank );
};

UClass* URankUpSystem::pClassPointer = NULL;

// Class CombatGame.SeqAct_CheckPrimaryWeapon
// 0x0000 (0x00C4 - 0x00C4)
class USeqAct_CheckPrimaryWeapon : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1900 ];

		return pClassPointer;
	};

};

UClass* USeqAct_CheckPrimaryWeapon::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatBotSpawn
// 0x0040 (0x0118 - 0x00D8)
class USeqAct_CombatBotSpawn : public USeqAct_Latent
{
public:
	class UClass*                                      PawnClass;                                        		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ControllerClass;                                  		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpawnCount;                                       		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            SpawnPoints;                                      		// 0x00E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UCCSBTTree*                                  BehaviorTree;                                     		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bGiveDefaultInventory : 1;                        		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsSpawning : 1;                                  		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< class UClass* >                            InventoryList;                                    		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SpawnedDelay;                                     		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastSpawnedTime;                                  		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastSpawnPointIndex;                              		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SpawnedCount;                                     		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                DiedCount;                                        		// 0x0114 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1901 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventOnNotifyActorDied ( );
};

UClass* USeqAct_CombatBotSpawn::pClassPointer = NULL;

// Class CombatGame.SeqAct_CombatDelay
// 0x0008 (0x00F4 - 0x00EC)
class USeqAct_CombatDelay : public USeqAct_Delay
{
public:
	unsigned long                                      bDisplayHUD : 1;                                  		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                NotifyTime;                                       		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1902 ];

		return pClassPointer;
	};

};

UClass* USeqAct_CombatDelay::pClassPointer = NULL;

// Class CombatGame.SeqAct_GameInfo
// 0x000C (0x00D0 - 0x00C4)
class USeqAct_GameInfo : public USequenceAction
{
public:
	TArray< class UObject* >                           Instigator;                                       		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1903 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	class AController* GetControllerFromInstigator ( );
};

UClass* USeqAct_GameInfo::pClassPointer = NULL;

// Class CombatGame.SeqAct_MissionEvent
// 0x0014 (0x00E4 - 0x00D0)
class USeqAct_MissionEvent : public USeqAct_GameInfo
{
public:
	struct FName                                       EventName;                                        		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bValidMatchInProgress : 1;                        		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              fReservedProperty;                                		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                iReservedProperty;                                		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1904 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_MissionEvent::pClassPointer = NULL;

// Class CombatGame.SeqAct_SpawnGroupIndex
// 0x0001 (0x00D1 - 0x00D0)
class USeqAct_SpawnGroupIndex : public USeqAct_GameInfo
{
public:
	unsigned char                                      SpawnGroupIndex;                                  		// 0x00D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1905 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SpawnGroupIndex::pClassPointer = NULL;

// Class CombatGame.SeqCond_IsContinuableRandomBox
// 0x0000 (0x00AC - 0x00AC)
class USeqCond_IsContinuableRandomBox : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1906 ];

		return pClassPointer;
	};

};

UClass* USeqCond_IsContinuableRandomBox::pClassPointer = NULL;

// Class CombatGame.SeqCond_IsDifficulty
// 0x0000 (0x00AC - 0x00AC)
class USeqCond_IsDifficulty : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1907 ];

		return pClassPointer;
	};

};

UClass* USeqCond_IsDifficulty::pClassPointer = NULL;

// Class CombatGame.SeqCond_IsInstallSentryGun
// 0x0000 (0x00AC - 0x00AC)
class USeqCond_IsInstallSentryGun : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1908 ];

		return pClassPointer;
	};

	bool eventIsInstallSentryGun ( );
};

UClass* USeqCond_IsInstallSentryGun::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatBase
// 0x0000 (0x00DC - 0x00DC)
class USeqEvent_CombatBase : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1909 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActiveCurrentSeqEvent ( struct FName OutputName, class AController* EventInstigator, unsigned long bIgnoreReTriggerDelay );
	void SetLinkedVariables ( class UObject* NewValue, struct FString VarName );
	void ActiveSeqEvent ( struct FName OutputName, class AActor* BaseActor, class UClass* SeqClass, class AController* EventInstigator, unsigned long bIgnoreReTriggerDelay, TArray< struct FSeqVar_Data > SeqVarData );
};

UClass* USeqEvent_CombatBase::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatInvalidityTimeOver
// 0x0000 (0x00DC - 0x00DC)
class USeqEvent_CombatInvalidityTimeOver : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1910 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatInvalidityTimeOver::pClassPointer = NULL;

// Class CombatGame.USSPawn
// 0x0050 (0x04B0 - 0x0460)
class AUSSPawn : public APawn
{
public:
	struct FPointer                                    VfTable_ICCSPawn;                                 		// 0x0460 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      MovementType;                                     		// 0x0464 (0x0001) [0x0000000000000000]              
	unsigned char                                      AlertnessState;                                   		// 0x0465 (0x0001) [0x0000000000000000]              
	unsigned char                                      WantedCoverPose;                                  		// 0x0466 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentCoverPose;                                 		// 0x0467 (0x0001) [0x0000000000000000]              
	unsigned long                                      bInCrouchedPosture : 1;                           		// 0x0468 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShouldCover : 1;                                 		// 0x0468 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInCover : 1;                                     		// 0x0468 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              CoverPct;                                         		// 0x046C (0x0004) [0x0000000000000000]              
	float                                              CoverPoseBlendTimeOverride;                       		// 0x0470 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   AimCurrentSkel;                                   		// 0x0474 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   AimPitchRange;                                    		// 0x047C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   AimYawRange;                                      		// 0x0484 (0x0008) [0x0000000000000000]              
	float                                              MaxPitchSpeed;                                    		// 0x048C (0x0004) [0x0000000000000000]              
	float                                              MaxYawSpeed;                                      		// 0x0490 (0x0004) [0x0000000000000000]              
	class UClass*                                      CurrentWeaponAttachmentClass;                     		// 0x0494 (0x0004) [0x0000000000000000]              
	class AUSSWeaponAttachment*                        CurrentWeaponAttachment;                          		// 0x0498 (0x0004) [0x0000000000000000]              
	float                                              WeaponHeight;                                     		// 0x049C (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             BloodParticleSystem;                              		// 0x04A0 (0x0004) [0x0000000000000000]              
	TArray< class UAnimNodeAimOffset* >                AimNodes;                                         		// 0x04A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1911 ];

		return pClassPointer;
	};

	void WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation, unsigned long bPenetration, struct FImpactInfo InImpactInfo );
	struct FVector eventGetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	bool NeedToTurn ( struct FVector Target );
	void eventDestroyed ( );
	void SetPawnRBChannels ( unsigned long bRagdollMode );
	void PlayDying ( class UClass* DamageType, struct FVector* HitLoc );
	void PlayTakeHitEffects ( float Damage, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	void PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	bool IsInCover ( );
	void MoveToInCover ( struct FVector Dest );
	bool CoverPoseTransitionOver ( );
	void SetNoCoverPose ( );
	void SetCoverPose ( unsigned char NewCoverPose, float BlendTime );
	bool CanAim ( struct FRotator AimRotation );
	bool PostureTransitionOver ( );
	void SetPostureDefault ( );
	void SetCrouched ( unsigned long bCrouched );
	bool IsCrouched ( );
	void SetMovementSpeedDefault ( );
	void SetSpeed ( unsigned char Speed );
	unsigned char GetSpeed ( );
	void SetAlertnessDefault ( );
	void SetAlertness ( unsigned char NewAlertness );
	unsigned char GetAlertness ( );
	void SetMovementTypeDefault ( );
	void SetMovementType ( unsigned char NewMovementType );
	unsigned char GetMovementType ( );
};

UClass* AUSSPawn::pClassPointer = NULL;

// Class CombatGame.CombatAnim_AimOffset
// 0x0028 (0x0140 - 0x0118)
class UCombatAnim_AimOffset : public UAnimNodeAimOffset
{
public:
	class ACombatPawn*                                 CombatPawnOwner;                                  		// 0x0118 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bOnlyUpdateIn360Aiming : 1;                       		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTurnOffWhenReloadingWeapon : 1;                  		// 0x011C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyUpdateOnBecomeRelevant : 1;                  		// 0x011C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoingWeaponReloadInterp : 1;                     		// 0x011C (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	float                                              ReloadingBlendTime;                               		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReloadingBlendTimeToGo;                           		// 0x0124 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector2D                                   LastAimOffset;                                    		// 0x0128 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector2D                                   LastPostProcessedAimOffset;                       		// 0x0130 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TurnAroundTimeToGo;                               		// 0x0138 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TurnAroundBlendTime;                              		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1912 ];

		return pClassPointer;
	};

};

UClass* UCombatAnim_AimOffset::pClassPointer = NULL;

// Class CombatGame.CombatAnim_BlendList
// 0x0018 (0x00FC - 0x00E4)
class UCombatAnim_BlendList : public UAnimNodeBlendList
{
public:
	TArray< float >                                    ChildBlendInTime;                                 		// 0x00E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned long >                            BlockSetActiveChildWhenRelevant;                  		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1913 ];

		return pClassPointer;
	};

	void SetActiveChild ( int ChildIndex, float BlendTime );
};

UClass* UCombatAnim_BlendList::pClassPointer = NULL;

// Class CombatGame.CombatAnim_TurnInPlace
// 0x0064 (0x013C - 0x00D8)
class UCombatAnim_TurnInPlace : public UAnimNodeBlend
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x00D8 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDelayBlendOutToPlayAnim : 1;                     		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPlayingTurnTransition : 1;                       		// 0x00D8 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bNoTransitionForInstantTurn : 1;                  		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      PawnJustSeen : 1;                                 		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      PawnNotSeen : 1;                                  		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bDoingInstantTurn : 1;                            		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	int                                                LastPawnYaw;                                      		// 0x00DC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              PawnRotationRate;                                 		// 0x00E0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                YawOffset;                                        		// 0x00E4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class ACombatPawn*                                 CombatPawnOwner;                                  		// 0x00E8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class ACombatPawn*                                 CachedBaseCombatPawn;                             		// 0x00EC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AActor*                                      CachedBase;                                       		// 0x00F0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FRotTransitionInfo >                RotTransitions;                                   		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              TransitionBlendInTime;                            		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TransitionBlendOutTime;                           		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentTransitionIndex;                           		// 0x0108 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TransitionThresholdAngle;                         		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UCombatAnim_TurnInPlace_Player* >    PlayerNodes;                                      		// 0x0110 (0x000C) [0x0000000000600000]              ( CPF_NeedCtorLink )
	TArray< class UCombatAnim_BlendList* >             BlendNodes;                                       		// 0x011C (0x000C) [0x0000000000600000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             BlendNodesNameList;                               		// 0x0128 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              BlendNodesBlendInTime;                            		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendNodesBlendOutTime;                           		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1914 ];

		return pClassPointer;
	};

	void ResetRotation ( );
};

UClass* UCombatAnim_TurnInPlace::pClassPointer = NULL;

// Class CombatGame.CombatAnim_TurnInPlace_Player
// 0x0018 (0x0138 - 0x0120)
class UCombatAnim_TurnInPlace_Player : public UAnimNodeSequenceBlendBase
{
public:
	TArray< struct FTIP_Transition >                   TIP_Transitions;                                  		// 0x0120 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              TransitionBlendTime;                              		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ActiveChildIndex;                                 		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendTimeToGo;                                    		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1915 ];

		return pClassPointer;
	};

};

UClass* UCombatAnim_TurnInPlace_Player::pClassPointer = NULL;

// Class CombatGame.CombatAnim_TurnInPlace_Rotator
// 0x000B (0x00D0 - 0x00C5)
class UCombatAnim_TurnInPlace_Rotator : public UAnimNodeBlendBase
{
public:
	class ACombatPawn*                                 CombatPawnOwner;                                  		// 0x00C8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UCombatAnim_TurnInPlace*                     TurnInPlaceNode;                                  		// 0x00CC (0x0004) [0x0000000000200002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1916 ];

		return pClassPointer;
	};

};

UClass* UCombatAnim_TurnInPlace_Rotator::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendBase
// 0x001C (0x0100 - 0x00E4)
class UCombatAnimBlendBase : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    ChildBlendTimes;                                  		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            ChildBlendType;                                   		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1917 ];

		return pClassPointer;
	};

	float GetAnimDuration ( int ChildIndex );
	float GetBlendTime ( int ChildIndex, unsigned long bGetDefault );
};

UClass* UCombatAnimBlendBase::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlend_SimpleJump
// 0x0004 (0x0104 - 0x0100)
class UCombatAnimBlend_SimpleJump : public UCombatAnimBlendBase
{
public:
	class ACombatPawn*                                 OwnerPawn;                                        		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1918 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlend_SimpleJump::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendBaseByZoom
// 0x0004 (0x0104 - 0x0100)
class UCombatAnimBlendBaseByZoom : public UCombatAnimBlendBase
{
public:
	class ACombatWeapon*                               Weapon;                                           		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1919 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendBaseByZoom::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByDeath
// 0x0010 (0x0110 - 0x0100)
class UCombatAnimBlendByDeath : public UCombatAnimBlendBase
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsDeadOld : 1;                                   		// 0x0104 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              UndeadTime;                                       		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NoAnimTheshold;                                   		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1920 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByDeath::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByFall
// 0x0014 (0x0114 - 0x0100)
class UCombatAnimBlendByFall : public UCombatAnimBlendBase
{
public:
	float                                              PreLandTime;                                      		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreLandStartUprightTime;                          		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FallState;                                        		// 0x0108 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastFallingVelocity;                              		// 0x010C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UCombatAnimNodeJumpLeanOffset*               CachedLeanNode;                                   		// 0x0110 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1921 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByFall::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByIdle
// 0x0014 (0x0114 - 0x0100)
class UCombatAnimBlendByIdle : public UCombatAnimBlendBase
{
public:
	float                                              IdleSpeedThreshold;                               		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdleBlendDelay;                                   		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdleSpeedThresholdSqr;                            		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeFromLastMovement;                             		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatPawn*                                 CombatPawnOwner;                                  		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1922 ];

		return pClassPointer;
	};

	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime );
};

UClass* UCombatAnimBlendByIdle::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByMovement
// 0x0004 (0x0104 - 0x0100)
class UCombatAnimBlendByMovement : public UCombatAnimBlendBase
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1923 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByMovement::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByPhysics
// 0x0035 (0x0135 - 0x0100)
class UCombatAnimBlendByPhysics : public UCombatAnimBlendBase
{
public:
	class ACombatPawn*                                 POwner;                                           		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PhysicsMap[ 0xC ];                                		// 0x0104 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LastPhysics;                                      		// 0x0134 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1924 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByPhysics::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByPosture
// 0x0000 (0x0100 - 0x0100)
class UCombatAnimBlendByPosture : public UCombatAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1925 ];

		return pClassPointer;
	};

	void OnInit ( );
};

UClass* UCombatAnimBlendByPosture::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByRISSlot
// 0x0005 (0x0105 - 0x0100)
class UCombatAnimBlendByRISSlot : public UCombatAnimBlendBase
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ActivatedSlot;                                    		// 0x0104 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1926 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByRISSlot::pClassPointer = NULL;

// Class CombatGame.CombatFirstAnimBlendByIdle
// 0x0004 (0x0104 - 0x0100)
class UCombatFirstAnimBlendByIdle : public UCombatAnimBlendBase
{
public:
	class ACombatWeapon*                               Weapon;                                           		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1927 ];

		return pClassPointer;
	};

};

UClass* UCombatFirstAnimBlendByIdle::pClassPointer = NULL;

// Class CombatGame.CombatFirstAnimBlendByZoom
// 0x0009 (0x0109 - 0x0100)
class UCombatFirstAnimBlendByZoom : public UCombatAnimBlendBase
{
public:
	unsigned long                                      bUseBlendTime : 1;                                		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class ACombatWeapon*                               Weapon;                                           		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LastZoomState;                                    		// 0x0108 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1928 ];

		return pClassPointer;
	};

};

UClass* UCombatFirstAnimBlendByZoom::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByDamage
// 0x0018 (0x0118 - 0x0100)
class UCombatAnimBlendByDamage : public UAnimNodeBlendPerBone
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageAnimBlendOutTime;                           		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAnimBlendInTime;                            		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDamageAnimDuration;                            		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAnimLength;                                 		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ElapsedDamageAnimTime;                            		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1929 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByDamage::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByDamageType
// 0x0004 (0x00E8 - 0x00E4)
class UCombatAnimBlendByDamageType : public UAnimNodeBlendList
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x00E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1930 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByDamageType::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByParts
// 0x0008 (0x00EC - 0x00E4)
class UCombatAnimBlendByParts : public UAnimNodeBlendList
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x00E4 (0x0004) [0x0000000000000000]              
	unsigned long                                      IgnoreNewHit : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      WasFinishing : 1;                                 		// 0x00E8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1931 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByParts::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendBySlotActive
// 0x0004 (0x0104 - 0x0100)
class UCombatAnimBlendBySlotActive : public UAnimNodeBlendPerBone
{
public:
	class UAnimNodeSlot*                               ChildSlot;                                        		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1932 ];

		return pClassPointer;
	};

	void SetForceLocalSpaceBlend ( unsigned long LocalBlend );
};

UClass* UCombatAnimBlendBySlotActive::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByWeapType
// 0x0000 (0x0100 - 0x0100)
class UCombatAnimBlendByWeapType : public UAnimNodeBlendPerBone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1933 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByWeapType::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendByZoom
// 0x000D (0x010D - 0x0100)
class UCombatAnimBlendByZoom : public UAnimNodeBlendPerBone
{
public:
	class ACombatPawn*                                 Owner;                                            		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendTimeToZoom;                                  		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTimeToNormal;                                		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LastZoomState;                                    		// 0x010C (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1934 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendByZoom::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendDirectional
// 0x0028 (0x010C - 0x00E4)
class UCombatAnimBlendDirectional : public UAnimNodeBlendDirectional
{
public:
	TArray< class USkelControlBase* >                  TorsoControllers;                                 		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             TorsoControllerNames;                             		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      EditorPreview : 1;                                		// 0x00FC (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	float                                              FullBwdThreshold;                                 		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkelBlendOutTime;                                 		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACombatPawn*                                 Owner;                                            		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1935 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendDirectional::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendHostage
// 0x0004 (0x00E8 - 0x00E4)
class UCombatAnimBlendHostage : public UAnimNodeBlendList
{
public:
	class ACombatHostageActor*                         HostageActor;                                     		// 0x00E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1936 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimBlendHostage::pClassPointer = NULL;

// Class CombatGame.CombatAnimBlendPerBone_Multi
// 0x001C (0x011C - 0x0100)
class UCombatAnimBlendPerBone_Multi : public UAnimNodeBlendPerBone
{
public:
	TArray< struct FBlendInfo >                        BlendInfoArr;                                     		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ACombatPawn*                                 Owner;                                            		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                ActiveChildIndex;                                 		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                LastActiveChild;                                  		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              SliderPosition;                                   		// 0x0118 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1937 ];

		return pClassPointer;
	};

	void SetChildPlayRateByDesiredTime ( int ChildIndex, float DesiredTime );
};

UClass* UCombatAnimBlendPerBone_Multi::pClassPointer = NULL;

// Class CombatGame.CombatAnimMetaData_SkelControl
// 0x0004 (0x0058 - 0x0054)
class UCombatAnimMetaData_SkelControl : public UAnimMetaData_SkelControl
{
public:
	float                                              AccumulatedWeight;                                		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1938 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimMetaData_SkelControl::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeAdditveBlending
// 0x0004 (0x00E0 - 0x00DC)
class UCombatAnimNodeAdditveBlending : public UAnimNodeAdditiveBlending
{
public:
	unsigned long                                      PlaySequenceOnRelevant : 1;                       		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1939 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeAdditveBlending::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeCopyBoneTranslation
// 0x003F (0x0104 - 0x00C5)
class UCombatAnimNodeCopyBoneTranslation : public UAnimNodeBlendBase
{
public:
	class UAnimNodeAimOffset*                          CachedAimNode;                                    		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FName                                       OldAimProfileName;                                		// 0x00CC (0x0008) [0x0000000000000000]              
	TArray< struct FBoneCopyInfo >                     DefaultBoneCopyArray;                             		// 0x00D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FBoneCopyInfo >                     DualWieldBoneCopyArray;                           		// 0x00E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FBoneCopyInfo >                     ActiveBoneCopyArray;                              		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            RequiredBones;                                    		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1940 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeCopyBoneTranslation::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeFramePlayer
// 0x0000 (0x0114 - 0x0114)
class UCombatAnimNodeFramePlayer : public UAnimNodeSequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1941 ];

		return pClassPointer;
	};

	void SetAnimPosition ( float Perc );
	void SetAnimation ( struct FName Sequence, float RateScale );
};

UClass* UCombatAnimNodeFramePlayer::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeJumpLeanOffset
// 0x003C (0x0154 - 0x0118)
class UCombatAnimNodeJumpLeanOffset : public UAnimNodeAimOffset
{
public:
	float                                              JumpLeanStrength;                                 		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLeanChangeSpeed;                               		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeanBackRatio;                                    		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMultiplyByZVelocity : 1;                         		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UAnimNodeAimOffset*                          CachedAimNode;                                    		// 0x0128 (0x0004) [0x0000000000000000]              
	struct FName                                       OldAimProfileName;                                		// 0x012C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   PreBlendAim;                                      		// 0x0134 (0x0008) [0x0000000000000000]              
	float                                              LeanWeight;                                       		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              LeanWeightTarget;                                 		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x0144 (0x0004) [0x0000000000000000]              
	int                                                LastYaw;                                          		// 0x0148 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              IgnoredLateralVelThreshold;                       		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StandardSpeed;                                    		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1942 ];

		return pClassPointer;
	};

	void SetLeanWeight ( float WeightTarget, float BlendTime );
};

UClass* UCombatAnimNodeJumpLeanOffset::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodePreAnim
// 0x0004 (0x00DC - 0x00D8)
class UCombatAnimNodePreAnim : public UAnimNodeBlend
{
public:
	unsigned long                                      bSkipPlayingPreAnimWhenNotRendered : 1;           		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1943 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodePreAnim::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeScaleRateBySpeed
// 0x0010 (0x00E0 - 0x00D0)
class UCombatAnimNodeScaleRateBySpeed : public UAnimNodeScaleRateBySpeed
{
public:
	float                                              FallingScale;                                     		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RigidBodyScale;                                   		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UsePawnGroundSpeed : 1;                           		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class APawn*                                       Owner;                                            		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1944 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeScaleRateBySpeed::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSeq_Offset
// 0x0014 (0x0128 - 0x0114)
class UCombatAnimNodeSeq_Offset : public UAnimNodeSequence
{
public:
	unsigned long                                      bUseOffset : 1;                                   		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              StartOffset;                                      		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AlternativeAnimSeqName;                           		// 0x011C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class ACombatWeapon*                               Weapon;                                           		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1945 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeSeq_Offset::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSequence
// 0x0010 (0x0124 - 0x0114)
class UCombatAnimNodeSequence : public UAnimNodeSequence
{
public:
	unsigned long                                      bAutoStart : 1;                                   		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLoopLastSequence : 1;                            		// 0x0114 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FName >                             SeqStack;                                         		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1946 ];

		return pClassPointer;
	};

	void eventOnInit ( );
	void PlayAnimationSet ( TArray< struct FName > Sequences, float SeqRate, unsigned long bLoopLast );
	void PlayAnimation ( struct FName Sequence, float SeqRate, unsigned long bSeqLoop );
};

UClass* UCombatAnimNodeSequence::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSeqHitDirection
// 0x005C (0x0180 - 0x0124)
class UCombatAnimNodeSeqHitDirection : public UCombatAnimNodeSequence
{
public:
	struct FName                                       DefaultAnim;                                      		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LeftAnim;                                         		// 0x012C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RightAnim;                                        		// 0x0134 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FrontAnim;                                        		// 0x013C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BackAnim;                                         		// 0x0144 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FrontLeftAnim;                                    		// 0x014C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FrontRightAnim;                                   		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BackLeftAnim;                                     		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BackRightAnim;                                    		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RandomFactor;                                     		// 0x016C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DirMode;                                          		// 0x016D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LastDirIdx;                                       		// 0x016E (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              FrontHitThreshold;                                		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirAngle;                                         		// 0x0174 (0x0004) [0x0000000000000000]              
	float                                              SliderPosition;                                   		// 0x0178 (0x0004) [0x0000000000000000]              
	class ACombatPawn*                                 OwnerPawn;                                        		// 0x017C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1947 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeSeqHitDirection::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSeqWeap
// 0x0028 (0x014C - 0x0124)
class UCombatAnimNodeSeqWeap : public UCombatAnimNodeSequence
{
public:
	struct FName                                       DefaultAnim;                                      		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DualPistolAnim;                                   		// 0x012C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SinglePistolAnim;                                 		// 0x0134 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShoulderRocketAnim;                               		// 0x013C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StingerAnim;                                      		// 0x0144 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1948 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeSeqWeap::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSequenceBlendBase
// 0x0008 (0x0128 - 0x0120)
class UCombatAnimNodeSequenceBlendBase : public UAnimNodeSequenceBlendBase
{
public:
	int                                                DominantIdx;                                      		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DominanceThreshold;                               		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1949 ];

		return pClassPointer;
	};

	void SetAnim ( struct FName Sequence );
};

UClass* UCombatAnimNodeSequenceBlendBase::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSeqDirection
// 0x002C (0x0154 - 0x0128)
class UCombatAnimNodeSeqDirection : public UCombatAnimNodeSequenceBlendBase
{
public:
	float                                              BlendSpeed;                                       		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      Use8WayBlend : 1;                                 		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInterpolateWeights : 1;                          		// 0x012C (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	float                                              DirAngle;                                         		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              LastDirAngle;                                     		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRelevantTime;                                 		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FullBwdThreshold;                                 		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TooSlowSpeed;                                     		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    TargetPlayRateData;                               		// 0x0144 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      AOwner;                                           		// 0x0150 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1950 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeSeqDirection::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSeqDirectionFire
// 0x0000 (0x0154 - 0x0154)
class UCombatAnimNodeSeqDirectionFire : public UCombatAnimNodeSeqDirection
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1951 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeSeqDirectionFire::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_AttachStaticMesh
// 0x0064 (0x00A0 - 0x003C)
class UCombatAnimNotify_AttachStaticMesh : public UAnimNotify
{
public:
	struct FName                                       SocketName;                                       		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TargetBoneName;                                   		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 StaticMesh;                                       		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 CurrStaticMesh;                                   		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TargetBoneIndex;                                  		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0058 (0x0008) MISSED OFFSET
	struct FMatrix                                     SocketMatrix;                                     		// 0x0060 (0x0040) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1952 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_AttachStaticMesh::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_CameraEffect
// 0x002C (0x006C - 0x0040)
class UCombatAnimNotify_CameraEffect : public UAnimNotify_CameraEffect
{
public:
	struct FString                                     PS_CameraEffect;                                  		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PS_CameraEffectNonExtremeContent;                 		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LifeSpan;                                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistFromCamera;                                   		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseFOV;                                          		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DepthGroup;                                       		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bClearCameraEffectOnStopAnim : 1;                 		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1953 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_CameraEffect::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_ChangeWeapAttachMeshSocket
// 0x0014 (0x0050 - 0x003C)
class UCombatAnimNotify_ChangeWeapAttachMeshSocket : public UAnimNotify
{
public:
	struct FName                                       NewSocketName;                                    		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DefaultSocketNameForPreview;                      		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      PreviewSkelComp;                                  		// 0x004C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1954 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_ChangeWeapAttachMeshSocket::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_DetachDroppedWeapon
// 0x0000 (0x003C - 0x003C)
class UCombatAnimNotify_DetachDroppedWeapon : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1955 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_DetachDroppedWeapon::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_HideBone
// 0x0010 (0x004C - 0x003C)
class UCombatAnimNotify_HideBone : public UAnimNotify
{
public:
	struct FName                                       TargetBoneName;                                   		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHideBone : 1;                                    		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              NotifyDuration;                                   		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1956 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_HideBone::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_HideBoneForAttachedMesh
// 0x0010 (0x005C - 0x004C)
class UCombatAnimNotify_HideBoneForAttachedMesh : public UCombatAnimNotify_HideBone
{
public:
	struct FName                                       AttachedBoneName;                                 		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AttachedSocketName;                               		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1957 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_HideBoneForAttachedMesh::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_LockSlide
// 0x0000 (0x003C - 0x003C)
class UCombatAnimNotify_LockSlide : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1958 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_LockSlide::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_MaterialParam
// 0x0068 (0x00A4 - 0x003C)
class UCombatAnimNotify_MaterialParam : public UAnimNotify
{
public:
	struct FAnimNotifyScalarParameter                  ScalarConstantParam;                              		// 0x003C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FAnimNotifyVectorParameter                  VectorConstantParam;                              		// 0x004C (0x0028) [0x0000000000000001]              ( CPF_Edit )
	struct FTextureParameterValue                      TextureConstantParam;                             		// 0x0074 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMICParam >                         SavedMICParam;                                    		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              AnimStartTime;                                    		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NotifyDuration;                                   		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1959 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_MaterialParam::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_MeleeAttackCheck
// 0x0000 (0x003C - 0x003C)
class UCombatAnimNotify_MeleeAttackCheck : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1960 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_MeleeAttackCheck::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_MITVParam
// 0x0048 (0x0084 - 0x003C)
class UCombatAnimNotify_MITVParam : public UAnimNotify
{
public:
	unsigned long                                      bOverride_AutoActiveAll : 1;                      		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoActivateAll : 1;                             		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bApplyPlayRate : 1;                               		// 0x003C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	TArray< struct FAnimNotifyMITVScalarParam >        ScalarParam;                                      		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAnimNotifyMITVVectorParam >        VectorParam;                                      		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAnimNotifyMITVLinearColorParam >   LinearColorParam;                                 		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAnimNotifyMITVTextureParam >       TextureParam;                                     		// 0x0064 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMITVParam >                        SavedMITVParam;                                   		// 0x0070 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              AnimStartTime;                                    		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NotifyDuration;                                   		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1961 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_MITVParam::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_ReleaseSlide
// 0x0000 (0x003C - 0x003C)
class UCombatAnimNotify_ReleaseSlide : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1962 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_ReleaseSlide::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_SpawnKActor
// 0x008C (0x00C8 - 0x003C)
class UCombatAnimNotify_SpawnKActor : public UAnimNotify
{
public:
	struct FName                                       SocketName;                                       		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TargetBoneName;                                   		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 StaticMesh;                                       		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifeSpan;                                         		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSkipIfLowFrameRate : 1;                          		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UClass*                                      KActorClass;                                      		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     KActorLinearVelocity;                             		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     KActorAngularVelocity;                            		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                TargetBoneIndex;                                  		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0078 (0x0008) MISSED OFFSET
	struct FMatrix                                     SocketMatrix;                                     		// 0x0080 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	class AKActorSpawnable*                            PreviewKActor;                                    		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMeshComponent*                        PreviewSMC;                                       		// 0x00C4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1963 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_SpawnKActor::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_StopCustomAnim
// 0x0004 (0x0040 - 0x003C)
class UCombatAnimNotify_StopCustomAnim : public UAnimNotify
{
public:
	float                                              BlendOutTime;                                     		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1964 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_StopCustomAnim::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_StopFrame
// 0x0004 (0x0040 - 0x003C)
class UCombatAnimNotify_StopFrame : public UAnimNotify
{
public:
	float                                              PassedTime;                                       		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1965 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_StopFrame::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_SwitchAnim
// 0x0010 (0x004C - 0x003C)
class UCombatAnimNotify_SwitchAnim : public UAnimNotify
{
public:
	float                                              BlendInTime;                                      		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NewAnim;                                          		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1966 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_SwitchAnim::pClassPointer = NULL;

// Class CombatGame.CombatAnimNotify_UpdateHandGripPos
// 0x0000 (0x003C - 0x003C)
class UCombatAnimNotify_UpdateHandGripPos : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1967 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNotify_UpdateHandGripPos::pClassPointer = NULL;

// Class CombatGame.CombatHandGripController
// 0x0018 (0x00E4 - 0x00CC)
class UCombatHandGripController : public USkelControlSingleBone
{
public:
	struct FName                                       WeaponBoneName;                                   		// 0x00CC (0x0008) [0x0000000000000000]              
	struct FName                                       WeaponBoneName_Left;                              		// 0x00D4 (0x0008) [0x0000000000000000]              
	struct FName                                       GripSocketName;                                   		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1968 ];

		return pClassPointer;
	};

};

UClass* UCombatHandGripController::pClassPointer = NULL;

// Class CombatGame.CombatSkelCtrl_CantileverBeam
// 0x003C (0x0174 - 0x0138)
class UCombatSkelCtrl_CantileverBeam : public USkelControlLookAt
{
public:
	struct FVector                                     WorldSpaceGoal;                                   		// 0x0138 (0x000C) [0x0000000000000000]              
	struct FVector                                     InitialWorldSpaceGoalOffset;                      		// 0x0144 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Velocity;                                         		// 0x0150 (0x000C) [0x0000000000000000]              
	float                                              SpringStiffness;                                  		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpringDamping;                                    		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PercentBeamVelocityTransfer;                      		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __EntireBeamVelocity__Delegate;                   		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1969 ];

		return pClassPointer;
	};

	struct FVector EntireBeamVelocity ( );
};

UClass* UCombatSkelCtrl_CantileverBeam::pClassPointer = NULL;

// Class CombatGame.CombatSkelCtrl_Hinge
// 0x0028 (0x00F4 - 0x00CC)
class UCombatSkelCtrl_Hinge : public USkelControlSingleBone
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	class ACombatPawn*                                 OwnerPawn;                                        		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FName                                       AttachedBoneName;                                 		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class URB_BodyInstance*                            BodyInstance;                                     		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              MaxAngle;                                         		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PivotAxis;                                        		// 0x00E4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              AVModifier;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentAngle;                                     		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpringStiffness;                                  		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1970 ];

		return pClassPointer;
	};

};

UClass* UCombatSkelCtrl_Hinge::pClassPointer = NULL;

// Class CombatGame.CombatSkelCtrl_Recoil
// 0x0014 (0x012C - 0x0118)
class UCombatSkelCtrl_Recoil : public UGameSkelCtrl_Recoil
{
public:
	unsigned long                                      TestRecoil : 1;                                   		// 0x0118 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	int                                                GunIndex;                                         		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRecoilProfileData >                RecoilArray;                                      		// 0x0120 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1971 ];

		return pClassPointer;
	};

	void SetGunIndex ( int NewGunIndex, unsigned long bForce );
};

UClass* UCombatSkelCtrl_Recoil::pClassPointer = NULL;

// Class CombatGame.CombatSkelCtrl_Spring
// 0x005C (0x0128 - 0x00CC)
class UCombatSkelCtrl_Spring : public USkelControlSingleBone
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	class ACombatPawn*                                 OwnerPawn;                                        		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FName                                       AttachedBoneName;                                 		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class URB_BodyInstance*                            BodyInstance;                                     		// 0x00DC (0x0004) [0x0000000000000000]              
	struct FRotator                                    MaxAngle;                                         		// 0x00E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    MinAngle;                                         		// 0x00EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              Falloff;                                          		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpringStiffness;                                  		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AVModifier;                                       		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    CurrentAngle;                                     		// 0x0104 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              RandomPortion;                                    		// 0x0110 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastHitMomentum;                                  		// 0x0114 (0x000C) [0x0000000000000000]              
	float                                              LastHitTime;                                      		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              MomentumPortion;                                  		// 0x0124 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1972 ];

		return pClassPointer;
	};

};

UClass* UCombatSkelCtrl_Spring::pClassPointer = NULL;

// Class CombatGame.CombatSkelCtrl_WeaponLag
// 0x001C (0x00E8 - 0x00CC)
class UCombatSkelCtrl_WeaponLag : public USkelControlSingleBone
{
public:
	int                                                PreviewIdx;                                       		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTranslationPack >                  Translations;                                     		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FRotationPack >                     Rotations;                                        		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1973 ];

		return pClassPointer;
	};

	void ApplyData ( int Idx );
};

UClass* UCombatSkelCtrl_WeaponLag::pClassPointer = NULL;

// Class CombatGame.CombatCameraThirdPersonCameraMode_default
// 0x0004 (0x0240 - 0x023C)
class UCombatCameraThirdPersonCameraMode_default : public UGameThirdPersonCameraMode_Default
{
public:
	unsigned long                                      bResetInterpolationOnActive : 1;                  		// 0x023C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1974 ];

		return pClassPointer;
	};

	void OnBecomeActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* PrevMode );
	float GetDesiredFOV ( class APawn* ViewedPawn );
};

UClass* UCombatCameraThirdPersonCameraMode_default::pClassPointer = NULL;

// Class CombatGame.CombatCameraThirdPersonCameraMode_Dead
// 0x0068 (0x02A8 - 0x0240)
class UCombatCameraThirdPersonCameraMode_Dead : public UCombatCameraThirdPersonCameraMode_default
{
public:
	struct FName                                       TargetBoneName;                                   		// 0x0240 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DistanceFromTarget;                               		// 0x0248 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CamHeightOffset;                                  		// 0x024C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxCamPitchLimit;                                 		// 0x0250 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bFollowKillerPawn : 1;                            		// 0x0254 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDrawDebug : 1;                                   		// 0x0254 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              FollowKillerPawnDelayTime;                        		// 0x0258 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              FollowKillerPawnDuration;                         		// 0x025C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              KillerPawnHeightOffset;                           		// 0x0260 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DeathCamRotInterpSpeed;                           		// 0x0264 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DeathCamInterpolationTime;                        		// 0x0268 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DeathCamInterpolationExp;                         		// 0x026C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UCameraAnim*                                 DeadCamAnim;                                      		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeadCamAnimBlendInTime;                           		// 0x0274 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DeadCamAnimBlendOutTime;                          		// 0x0278 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     DeathCamStartLocation;                            		// 0x027C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     DeathCamEndLocation;                              		// 0x0288 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DeathCamRotation;                                 		// 0x0294 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              ActiveTimeSeconds;                                		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                UnrealMaxCamPitchLimit;                           		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1975 ];

		return pClassPointer;
	};

	void OnBecomeInActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* NewMode );
	void OnBecomeActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* PrevMode );
	struct FVector eventGetTargetLocation ( class APawn* TargetPawn );
	void InitCameraLocation ( class APawn* TargetPawn );
	struct FVector eventGetCameraWorstCaseLoc ( class APawn* TargetPawn, struct FTViewTarget CurrentViewTarget );
};

UClass* UCombatCameraThirdPersonCameraMode_Dead::pClassPointer = NULL;

// Class CombatGame.CombatGamePlayerCamera
// 0x0088 (0x05B8 - 0x0530)
class ACombatGamePlayerCamera : public AGamePlayerCamera
{
public:
	unsigned long                                      bDOFUpdated : 1;                                  		// 0x0530 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAdjustDOF : 1;                                   		// 0x0530 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSetRotateCamPosition : 1;                        		// 0x0530 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              DOF_InterpolationDuration;                        		// 0x0534 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOF_BlurKernelSize;                               		// 0x0538 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOF_FalloffExponent;                              		// 0x053C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOF_FocusDistance;                                		// 0x0540 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOF_FocusInnerRadius;                             		// 0x0544 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DOF_FocusType;                                    		// 0x0548 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOF_MaxFarBlurAmount;                             		// 0x054C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOF_MaxNearBlurAmount;                            		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DOFTraceExtent;                                   		// 0x0554 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOFDistanceInterpSpeed;                           		// 0x0560 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastDOFRadius;                                    		// 0x0564 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDOFDistance;                                  		// 0x0568 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DOF_RadiusFalloff;                                		// 0x056C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   DOF_RadiusRange;                                  		// 0x0570 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   DOF_RadiusDistRange;                              		// 0x0578 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RotateCamPostion;                                 		// 0x0580 (0x000C) [0x0000000000000000]              
	struct FRotator                                    RotateCamRotation;                                		// 0x058C (0x000C) [0x0000000000000000]              
	struct FVector                                     RotateCamViewPoint;                               		// 0x0598 (0x000C) [0x0000000000000000]              
	int                                                RotateCamYaw;                                     		// 0x05A4 (0x0004) [0x0000000000000000]              
	int                                                RotateCamYawDelta;                                		// 0x05A8 (0x0004) [0x0000000000000000]              
	float                                              UnitRotateCamDistance;                            		// 0x05AC (0x0004) [0x0000000000000000]              
	float                                              RotateCamDistance;                                		// 0x05B0 (0x0004) [0x0000000000000000]              
	float                                              RotateCamTraceRange;                              		// 0x05B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1976 ];

		return pClassPointer;
	};

	void SetAfterImageTextureSize ( int X, int Y );
	void ShowAfterImage ( unsigned long bShow );
	void InitializeAfterImage ( );
	void eventUpdateCamera ( float DeltaTime );
	struct FTPOV BlendPOV ( struct FTPOV OldPOV, struct FTPOV NewPOV, float Alpha );
	struct FVector DOFTrace ( class AActor* TraceOwner, struct FVector StartTrace, struct FVector EndTrace );
	struct FVector GetDOFFocusLoc ( class AActor* TraceOwner, struct FVector StartTrace, struct FVector EndTrace );
	void UpdatePostProcess ( float DeltaTime, struct FTViewTarget* VT );
	void UpdateRotateCamViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	class UCameraAnim* ChooseDirectionalCameraShakeAnim ( struct FVector Epicenter, struct FScreenShakeAnimStruct* Shake );
	class UCameraAnimInst* PlayCameraShakeAnim ( struct FScreenShakeAnimStruct* Shake );
	void PlayRadialCameraShakeAnim ( struct FScreenShakeAnimStruct Shake, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, unsigned long bTryForceFeedback );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	class UGameCameraBase* FindBestCameraType ( class AActor* CameraTarget );
	void CameraShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	void InitializeFor ( class APlayerController* PC );
};

UClass* ACombatGamePlayerCamera::pClassPointer = NULL;

// Class CombatGame.CBWeaponAttachment
// 0x016C (0x0340 - 0x01D4)
class ACBWeaponAttachment : public AActor
{
public:
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x01D4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FMeshPart >                         MeshParts;                                        		// 0x01D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoundsScaleForHolster;                            		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultBoundsScale;                               		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAlwaysShowTheHolster : 1;                        		// 0x01F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseGripIK : 1;                                    		// 0x01F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bExistLauncherGripSocket : 1;                     		// 0x01F0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCalculateGripOffset : 1;                         		// 0x01F0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bInitWeaponMesh : 1;                              		// 0x01F0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	struct FName                                       ExtraEffectSocket;                                		// 0x01F4 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    MuzzleFlashPSC;                                   		// 0x01FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             MuzzleFlashPSCTemplate;                           		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             MuzzleFlashPSCSilencerTemplate;                   		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    ExtraPSC;                                         		// 0x0208 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             ExtraPSCTemplate;                                 		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             TracerPSCTemplate;                                		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             TracerPSCTemplate3rd;                             		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MuzzleFlashLightClass;                            		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MuzzleLowDetailFlashLightClass;                   		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCombatExplosionLight*                       MuzzleFlashLight;                                 		// 0x0220 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              MuzzleFlashDuration;                              		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AttachmentSocket;                                 		// 0x0228 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AttachmentSocket_Inven;                           		// 0x0230 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   BulletWhip;                                       		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BulletWhipRadius;                                 		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BulletWhipAdditionalHeight;                       		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxImpactEffectDistance;                          		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFireEffectDistance;                            		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDecalRangeSq;                                  		// 0x024C (0x0004) [0x0000000000000000]              
	int                                                SpawnTracerPerNum;                                		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpawnTracerPerNumForFP;                           		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WeapAimProfileName[ 0x2 ];                        		// 0x0258 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeSlot*                               CustomAnim;                                       		// 0x0268 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FString                                     WeaponMasterAnimSet[ 0x2 ];                       		// 0x026C (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     WeaponSubAnimSet[ 0x2 ];                          		// 0x0284 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     AttachmentAnimSet[ 0x2 ];                         		// 0x029C (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       HandGripSocket[ 0x2 ];                            		// 0x02B4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LauncherGripSocket[ 0x2 ];                        		// 0x02C4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     InvenAnimSeq;                                     		// 0x02D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              InvenAnimChances[ 0x3 ];                          		// 0x02E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FireAnimType;                                     		// 0x02EC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HoldersGender;                                    		// 0x02ED (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bPendingToLoadAsyncAnimSet;                       		// 0x02EE (0x0001) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAnimNotifyObjectData >             AnimNotifyData;                                   		// 0x02F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CharacterAnimSetBlendTime;                        		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastAnimSetBlendTime;                             		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    PSC_ShellEject;                                   		// 0x0304 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                RecoilIndex;                                      		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FHideBoneDataByWeaponState >        HideBoneDataByWeapState;                          		// 0x030C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             CachedHideBoneData;                               		// 0x0318 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       HolsterSocketName;                                		// 0x0324 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HolsterBoneName;                                  		// 0x032C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ACombatWeapon*                               OwnerWeapon;                                      		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlSingleBone*                      IronSightTMNodeRear;                              		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlSingleBone*                      IronSightTMNodeFront;                             		// 0x033C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1977 ];

		return pClassPointer;
	};

	void MakeIronSightBone ( );
	void SetDecal ( );
	void GetCachedResources ( unsigned long bIsDedicatedServer, TArray< class UObject* >* ResourceList );
	void eventOnLoadAsyncAnimSetFinished ( );
	void ActiveExtraEffect ( unsigned long Active );
	void PlayMuzzleFlashPSC ( );
	bool AttachExtraEffect ( unsigned long bForce );
	bool AttachMuzzleFlash ( unsigned long bForce );
	class UParticleSystem* GetMuzzleFlashParticleSystem ( );
	void SetHideBone ( unsigned long bTurnOnSilence );
	void SetSilencer ( unsigned long Turnon );
	void ForceNetRelevant ( );
	void eventDestroyed ( );
	void PlayShellCaseEject ( );
	void HidePSC_ShellEject ( );
	void ChangeVisibility ( unsigned long bIsVisible );
	void eventInitHideBones ( );
	void eventStopThirdPersonFireEffects ( );
	void PlayRecoilNode ( );
	void eventThirdPersonFireEffects ( );
	void CauseMuzzleFlash ( );
	void AttachMuzzleFlashLight ( );
	void MuzzleFlashTimer ( );
	bool AttachToHolster ( );
	void DetachWeapon ( );
	void AttachTo ( class ACombatPawn* OwnerPawn );
	struct FVector GetGripOffset ( int Space );
	class USkeletalMeshComponent* eventGetTargetMesh ( );
	bool TryToAttachWeapon ( unsigned long bNeedToAnimUpdate );
	void eventUpdateGender ( );
	bool IsValidWeaponAnimSet ( );
	bool IsValidWeaponMesh ( );
	void eventReAttachToGivenHand ( struct FName PawnHandSocket );
	void eventPreBeginPlay ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void VerifyWeapAttachAnimSeqName ( );
	void LoadAsyncAnimset ( );
	void PlayWeaponAttachmentAnim ( float AnimDuration, float StartTime, int Index, struct FCustomAnimData* CurrentStateInfo );
	void SetWeaponMesh ( unsigned long bSkipAsyncLoading );
	void UpdateAlwaysHideBone ( );
	bool HideBoneByWeaponState ( unsigned char InWeapState );
};

UClass* ACBWeaponAttachment::pClassPointer = NULL;

// Class CombatGame.CombatExplosion
// 0x006C (0x0154 - 0x00E8)
class UCombatExplosion : public UGameExplosion
{
public:
	float                                              MinDamage;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FullDamageRadius;                                 		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AmbientExploDamageRadius;                         		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FDecalData                                  DecalData;                                        		// 0x00F4 (0x002C) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalTraceDistance;                               		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          RadialuBlurMaterial;                              		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialBlurFallOffExponent;                        		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialBlurScale;                                  		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ForceHitNormalCheckForDecal : 1;                  		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreBlock : 1;                                 		// 0x0130 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIgnoreBlockForCamShake : 1;                      		// 0x0130 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIgnoreCamShake : 1;                              		// 0x0130 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      IsPlantExplosion : 1;                             		// 0x0130 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	TArray< struct FExplosionDamageAdjustment >        DamageAdjustmentList;                             		// 0x0134 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DamageRatioForInstigator;                         		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CheckOffSet;                                      		// 0x0144 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    AddParticleSpawnRotation;                         		// 0x0148 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1978 ];

		return pClassPointer;
	};

};

UClass* UCombatExplosion::pClassPointer = NULL;

// Class CombatGame.CombatExplosionActor
// 0x0018 (0x0244 - 0x022C)
class ACombatExplosionActor : public AGameExplosionActor
{
public:
	class UTimeDilationAnimInst*                       ActiveTimeDilationAnim;                           		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    ExplosionParticleComponent;                       		// 0x0230 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FRotator                                    ExplosionParticleSystemRotation;                  		// 0x0234 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      ShowDebugLines : 1;                               		// 0x0240 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1979 ];

		return pClassPointer;
	};

	void SpecialPawnEffectsForPawn ( class ACombatPawn* VictimPawn, float VictimDist );
	void DoExplosionCameraEffects ( );
	void Explode ( class UGameExplosion* NewExplosionTemplate, struct FVector Direction );
	void SpawnExplosionDecal ( );
	class UCombatDecal* CreateDecal ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, struct FDecalData* DecalData, struct FTraceHitInfo* HitInfo );
	void SetParticleSystemRotation ( struct FRotator NewRot );
	bool DoExplosionDamage ( unsigned long bCauseDamage, unsigned long bCauseEffects );
	bool IsDamagableActor ( class AActor* Victim );
	float GetEffectCheckRadius ( unsigned long bCauseDamage, unsigned long bCauseFractureEffects, unsigned long bCauseEffects );
	bool IsBehindExplosion ( class AActor* A );
	float GetDamageRatio ( class ACombatPawn* VictimPawn, struct FTraceHitInfo* HitInfo );
	class UPhysicalMaterial* GetPhysicalMaterial ( );
	void SpawnExplosionParticleSystem ( class UParticleSystem* Template );
	void UpdateExplosionTemplateWithPerMaterialFX ( class UPhysicalMaterial* PhysMaterial );
	void Destroyed ( );
	void OnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void DeferredDestroy ( float DelaySec );
	void ClientReset ( );
	void Rest ( );
	void PlayTimeDilationAnim ( class UTimeDilationAnim* Anim, float Rate, unsigned long bLoop, unsigned long bRandomStartTime, float Duration );
};

UClass* ACombatExplosionActor::pClassPointer = NULL;

// Class CombatGame.CombatFlashExplosionActor
// 0x001C (0x0260 - 0x0244)
class ACombatFlashExplosionActor : public ACombatExplosionActor
{
public:
	TArray< struct FFlashEffectDataStruct >            FlashEffectDataList;                              		// 0x0244 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DefaultFlashEffectPlayTime;                       		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __RangeSort__Delegate;                            		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1980 ];

		return pClassPointer;
	};

	float GetCurrentInabilityRate ( int Type, float remainTime );
	bool IsUnderFlashEffect ( int Type, float remainTime, unsigned long bOnlyInability );
	int GetFlashEffectType ( float Distance, unsigned long bBlocked );
	bool GetFlashEffectData ( int Type, float* FlashIntensity, float* AfterImageIntensity, float* EffectTime, float* InabilityTime );
	bool IsAffectableToPawn ( class ACombatPawn* Pawn, int Type );
	void SpecialPawnEffectsForPawn ( class ACombatPawn* VictimPawn, float VictimDist );
	bool DoExplosionDamage ( unsigned long bCauseDamage, unsigned long bCauseEffects );
	float GetEffectCheckRadius ( unsigned long bCauseDamage, unsigned long bCauseFractureEffects, unsigned long bCauseEffects );
	void PostBeginPlay ( );
	int RangeSort ( struct FFlashEffectDataStruct A, struct FFlashEffectDataStruct B );
};

UClass* ACombatFlashExplosionActor::pClassPointer = NULL;

// Class CombatGame.CombatProjectile
// 0x00BC (0x02CC - 0x0210)
class ACombatProjectile : public AProjectile
{
public:
	unsigned long                                      bSuppressAudio : 1;                               		// 0x0210 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoStartInFlightAudio : 1;                      		// 0x0210 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreInstigatorCollision : 1;                   		// 0x0210 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAddBaseVelocity : 1;                             		// 0x0210 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bThrowSound : 1;                                  		// 0x0210 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRegisterIndicator : 1;                           		// 0x0210 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bInitRotation : 1;                                		// 0x0210 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDeactivateTrailWhenStopped : 1;                  		// 0x0210 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bUseZeroExtentCollision : 1;                      		// 0x0210 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bStopSimulation : 1;                              		// 0x0210 (0x0004) [0x0000000000002021] [0x00000200] ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned long                                      BounceOnAPawn : 1;                                		// 0x0210 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bWaitForEffects : 1;                              		// 0x0210 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bIgnoreEventChangedInstigator : 1;                		// 0x0210 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bIgnoreCamShake : 1;                              		// 0x0210 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bIgnoreBlockForCamShake : 1;                      		// 0x0210 (0x0004) [0x0000000000000000] [0x00004000] 
	class UAudioComponent*                             InFlightSound;                                    		// 0x0214 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USoundCue*                                   InFlightSoundTemplate;                            		// 0x0218 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             TrailTemplate;                                    		// 0x021C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystemComponent*                    TrailPSC;                                         		// 0x0220 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           ProjLightEnvironment;                             		// 0x0224 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ExploCameraEffectRadius;                          		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TossZ;                                            		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TossUpDegree;                                     		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GravityScale;                                     		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IndicatorPriority;                                		// 0x0238 (0x0004) [0x0000000000000000]              
	float                                              GrenadeIndicatorsUpdateCycle;                     		// 0x023C (0x0004) [0x0000000000000000]              
	float                                              GrenadeIndicatorsLastUpdateTime;                  		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              RegisterIndicatorDelayTime;                       		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SimFixedFPS;                                      		// 0x0248 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SimFixedTimeStep;                                 		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SimInternalAdvanceTime;                           		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WeaponIndex;                                      		// 0x0254 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	struct FVector                                     InitialLocation;                                  		// 0x0258 (0x000C) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	struct FRotator                                    InitialRotation;                                  		// 0x0264 (0x000C) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	struct FVector                                     InitialVelocity;                                  		// 0x0270 (0x000C) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned char                                      NotifyMovement;                                   		// 0x027C (0x0001) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned char                                      ExplosionEffectType;                              		// 0x027D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LastHitNormal;                                    		// 0x0280 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UPrimitiveComponent*                         Mesh;                                             		// 0x028C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      SkeletalMeshComp;                                 		// 0x0290 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        StaticMeshComp;                                   		// 0x0294 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FMeshPart                                   ProjSkeletalMeshParts;                            		// 0x0298 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	struct FStaticMeshPart                             ProjStaticMeshParts;                              		// 0x02AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               ProjSkeletalPhysicsAsset;                         		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FExplosionDamageAdjustment >        DamageAdjustmentList;                             		// 0x02B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DamageRatioForInstigator;                         		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AIModeDamageRate;                                 		// 0x02C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1981 ];

		return pClassPointer;
	};

	void eventFellOutOfWorld ( class UClass* dmgType );
	void CalcHitNormal ( struct FVector VDir );
	bool HandleCollision ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void HitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void Landed ( struct FVector HitNormal, class AActor* FloorActor );
	void eventTriggerExplosion ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor );
	void TeammateTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void Touch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void RegisterIndicator ( unsigned long bRegister );
	void StopTrailEmitter ( );
	void ShoutGrenadeWarning ( );
	void eventStopSimulating ( unsigned long bForce );
	bool IsStopSimulation ( );
	void PostVelocityWork ( struct FVector ProjectileDir );
	void Init ( struct FVector Direction, unsigned long bMartyrdom );
	void Destroyed ( );
	void SuppressAudio ( unsigned long bSuppress );
	void StartInFlightAudio ( );
	void StopInFlightAudio ( );
	void SpawnTrail ( );
	void PostBeginPlay ( );
	void SetWeaponIndex ( int Index );
	void InitEffect ( );
	void InitMovement ( );
	void ClientReset ( );
	void Reset ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventChangedInstigator ( class APawn* OldInstigator );
	void InitMesh ( );
	float GetGravityZ ( );
	unsigned char GetExplosionEffectType ( );
};

UClass* ACombatProjectile::pClassPointer = NULL;

// Class CombatGame.CombatProj_ExplosiveBase
// 0x0044 (0x0310 - 0x02CC)
class ACombatProj_ExplosiveBase : public ACombatProjectile
{
public:
	unsigned long                                      bAutoDestroyOnExplosion : 1;                      		// 0x02CC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasExploded : 1;                                 		// 0x02CC (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bAttachExplosionToHitMover : 1;                   		// 0x02CC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      IsCollideTeammatePawn : 1;                        		// 0x02CC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      IgniteWhenToss : 1;                               		// 0x02CC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              MinDamage;                                        		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FullDamageRadius;                                 		// 0x02D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DamageFalloffExp;                                 		// 0x02D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCombatExplosion*                            ExplosionTemplate;                                		// 0x02DC (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USoundCue*                                   GrenadeBounceSound;                               		// 0x02E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      TeamNum;                                          		// 0x02E4 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      ObjectGrade;                                      		// 0x02E5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeBeforeBeep;                                   		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeAfterBeep;                                    		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxBounceCountToArm;                              		// 0x02F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                BounceCount;                                      		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              VelocityDampingFactor;                            		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopSimulatingVelocitySqrThreshhold;              		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Bounciness;                                       		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPrimitiveComponent*                         BouncedComp;                                      		// 0x0304 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                BP;                                               		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ExplosionActorClass;                              		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1982 ];

		return pClassPointer;
	};

	int GetBP ( unsigned char Part );
	unsigned char GetGrade ( );
	void StopBounce ( class UPrimitiveComponent* OtherComp, struct FVector* HitNormal );
	void IgniteGrenade ( );
	void DeferredDestroy ( float DelaySec );
	void SetDisplay ( unsigned long bSetHide );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	struct FVector GetExplosionDirection ( struct FVector HitNormal );
	void PrepareExplosionActor ( class ACombatExplosionActor* CEA );
	void ForceExploded ( );
	void eventTriggerExplosion ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor );
	void PrepareExplosionTemplate ( );
	void SetRadialDamageValues ( );
	void WarnProjExplode ( );
	void NotifyProjLanded ( );
	void Bounce ( struct FVector HitLocation, struct FVector HitNormal, class AActor* Other, class UPrimitiveComponent* OtherComp );
	void NotifyMaxBouncedCount ( );
	void DoExplosion ( );
	bool HandleCollision ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventSetHasExploded ( unsigned long bExploded );
	unsigned char eventGetTeamNum ( );
	void PostBeginPlay ( );
};

UClass* ACombatProj_ExplosiveBase::pClassPointer = NULL;

// Class CombatGame.CombatProj_Grenade
// 0x0010 (0x0320 - 0x0310)
class ACombatProj_Grenade : public ACombatProj_ExplosiveBase
{
public:
	unsigned long                                      IsStickyBomb : 1;                                 		// 0x0310 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShoutWarning : 1;                                		// 0x0310 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              WarningDistance;                                  		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForWardAdditionalTossRate;                        		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BackWardAdditionalTossRate;                       		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1983 ];

		return pClassPointer;
	};

	void PostVelocityWork ( struct FVector ProjectileDir );
	bool CanSplash ( );
	void TakeDamage ( int Dmg, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TriggerExplosion ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor );
	void ShoutGrenadeWarning ( );
	void StopBounce ( class UPrimitiveComponent* OtherComp, struct FVector* HitNormal );
};

UClass* ACombatProj_Grenade::pClassPointer = NULL;

// Class CombatGame.CombatProj_AttachGL
// 0x0000 (0x0320 - 0x0320)
class ACombatProj_AttachGL : public ACombatProj_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1984 ];

		return pClassPointer;
	};

	void NotifyMaxBouncedCount ( );
};

UClass* ACombatProj_AttachGL::pClassPointer = NULL;

// Class CombatGame.CombatProj_Plant
// 0x0064 (0x0374 - 0x0310)
class ACombatProj_Plant : public ACombatProj_ExplosiveBase
{
public:
	int                                                Health;                                           		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TeamNumIndex;                                     		// 0x0314 (0x0001) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	struct FName                                       StateName;                                        		// 0x0318 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                PlayerID;                                         		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionDelayTime;                               		// 0x0324 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DirectionalExplosionAngle;                        		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AmbientExploDamageRadius;                         		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    DropRotation;                                     		// 0x0330 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VolumeRadius;                                     		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeOffSetX;                                    		// 0x0340 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeTouchHegiht;                                		// 0x0344 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastPawnCheckTime;                                		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bExplosionAngleDrawDebug : 1;                     		// 0x034C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bStartExplosionTimer : 1;                         		// 0x034C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bChangedLocation : 1;                             		// 0x034C (0x0004) [0x0000000000000000] [0x00000004] 
	class ULensFlareComponent*                         AllyLensFEffect;                                  		// 0x0350 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULensFlareComponent*                         EnemyLensFEffect;                                 		// 0x0354 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       EffectSocketName;                                 		// 0x0358 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   DetectSound;                                      		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCylinderComponent*                          TouchCylinder;                                    		// 0x0364 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class ACombatPawn* >                       CheckPawnList;                                    		// 0x0368 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1985 ];

		return pClassPointer;
	};

	void eventTriggerExplosion ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor );
	void ForceExploded ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void SetRadialDamageValues ( );
	void eventStartVolumeCheck ( );
	void TornOff ( );
	void eventStartExplosionTimer ( );
	void StartExplosion ( );
	void eventBaseChange ( );
	void Destroyed ( );
	void Init ( struct FVector Direction, unsigned long bMartyrdom );
	void SetLensFEffect ( );
	void NotifyLocalPlayerTeamReceived ( );
	void eventReplicatedEvent ( struct FName VarName );
	void LineCheckPawn ( class ACombatPawn* P );
	void SetTouchVolume ( );
};

UClass* ACombatProj_Plant::pClassPointer = NULL;

// Class CombatGame.CombatWeapon
// 0x16D0 (0x19A8 - 0x02D8)
class ACombatWeapon : public AWeapon
{
public:
	struct FPointer                                    VfTable_IInterface_CombatWeaponType;              		// 0x02D8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UAnimNodeBlendPerBone*                       SlideNode;                                        		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayAmmoChat : 1;                                		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlayFireSound : 1;                               		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPlayingFiringSound : 1;                          		// 0x02E0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bAutofire : 1;                                    		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bNotAutofireReFireCheck : 1;                      		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bAutoSwitchEmptyWeapon : 1;                       		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAutoDestroyEmptyWeapon : 1;                      		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bCanEquipEmptyWeapon : 1;                         		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIgnorePutdownEmptyWeapon : 1;                    		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bRestoreZoomStatebyFire : 1;                      		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      EnableSoonZoom : 1;                               		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bCrosshairinZOOM : 1;                             		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bUseActualSpreadUI : 1;                           		// 0x02E0 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bIgnoreFiringStateOnRadar : 1;                    		// 0x02E0 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bAutoReload : 1;                                  		// 0x02E0 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bCancelReloadingByFire : 1;                       		// 0x02E0 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bClearPendingFire : 1;                            		// 0x02E0 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bShowReloadingUI : 1;                             		// 0x02E0 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      UseHitpriority : 1;                               		// 0x02E0 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bMagType : 1;                                     		// 0x02E0 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bSilencerSupport : 1;                             		// 0x02E0 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bRealTimeRecoilRecover : 1;                       		// 0x02E0 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bRoundTrip : 1;                                   		// 0x02E0 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bAddBlendOutTimeAtAnimDuration : 1;               		// 0x02E0 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bClearFireDelayOnEndFire : 1;                     		// 0x02E0 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bGetFromPickupFactory : 1;                        		// 0x02E0 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bUseCameraShake : 1;                              		// 0x02E0 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      IsVerticalRecoilMax : 1;                          		// 0x02E0 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      IsSilencerAttached : 1;                           		// 0x02E0 (0x0004) [0x0000000000000020] [0x10000000] ( CPF_Net )
	unsigned long                                      bTrySilencerAttach : 1;                           		// 0x02E0 (0x0004) [0x0000000000002020] [0x20000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bRemoveVerticalRecoil : 1;                        		// 0x02E0 (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bRemoveHorizonRecoil : 1;                         		// 0x02E0 (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	unsigned long                                      bNoSpread : 1;                                    		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bMaxSpread : 1;                                   		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLastRightRecoil : 1;                             		// 0x02E4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bSuppressSounds : 1;                              		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEnableFirstPersonMuzzleFlash : 1;                		// 0x02E4 (0x0004) [0x0000000000002001] [0x00000010] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bTargetFrictionEnabled : 1;                       		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bInfiniteSpareAmmo : 1;                           		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bInfiniteExtraAmmo : 1;                           		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bInfiniteWeaponReload : 1;                        		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      AllowShellEjectPerBullet : 1;                     		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bZoomDisabled : 1;                                		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bPreloadTextures : 1;                             		// 0x02E4 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bInitWeaponMesh : 1;                              		// 0x02E4 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bIsLocalWeapon : 1;                               		// 0x02E4 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bIsAIWeapon : 1;                                  		// 0x02E4 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bReceiveOwnerEvents : 1;                          		// 0x02E4 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bisDropped : 1;                                   		// 0x02E4 (0x0004) [0x0000000000000020] [0x00010000] ( CPF_Net )
	unsigned long                                      AcceptPendingFire : 1;                            		// 0x02E4 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bUseTickIsDisabled : 1;                           		// 0x02E4 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bAsyncLoadedActor : 1;                            		// 0x02E4 (0x0004) [0x0000000000002001] [0x00080000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bEnableHackCheck : 1;                             		// 0x02E4 (0x0004) [0x0000000000004001] [0x00100000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bIsFullReloading : 1;                             		// 0x02E4 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bNeedNotifyWeaponAmmoChanged : 1;                 		// 0x02E4 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      WeaponMeshFilpped : 1;                            		// 0x02E4 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      CannotBeFilpped : 1;                              		// 0x02E4 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      EnableBoneTransform : 1;                          		// 0x02E4 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      IsIronSight : 1;                                  		// 0x02E4 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bSpawnGunTrail : 1;                               		// 0x02E4 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bRepFlipMesh : 1;                                 		// 0x02E4 (0x0004) [0x0000000000000020] [0x10000000] ( CPF_Net )
	unsigned long                                      bHoldmode : 1;                                    		// 0x02E4 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	int                                                MinDamage;                                        		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxDamage;                                        		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDamageRate;                                    		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SilencerDamagePenalty;                            		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FsDamageAdjustment >                DamageAdjustment;                                 		// 0x02F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FsDamageAdjustment >                DamageAdjustmentVSPowerBullet;                    		// 0x0304 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MaxDamageRange;                                   		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDamageRange;                                   		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PenetrationDamageRate;                            		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamagedDecelerationRatio;                         		// 0x031C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ZoomCancelDelaybyFire;                            		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LastZoomStateByFire;                              		// 0x0324 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      MainCrosshair;                                    		// 0x0325 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnderBarrelCrosshair;                             		// 0x0326 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SubAmmoCount;                                     		// 0x0327 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      ServerSubAmmoCount;                               		// 0x0328 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      ServerSubMagazineAmmo;                            		// 0x0329 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      MaxSubAmmoCount;                                  		// 0x032A (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SubMagazineAmmo;                                  		// 0x032B (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      SubMaxMagazineAmmo;                               		// 0x032C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SubAmmoPerReload;                                 		// 0x032D (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ChangingRISSlot;                                  		// 0x032E (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ObjectGrade;                                      		// 0x032F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LeftrightStart;                                   		// 0x0330 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ObjectPenetrationNum;                             		// 0x0331 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PersonPenetrationNum;                             		// 0x0332 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CurrObjectPenetrationNum;                         		// 0x0333 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrPersonPenetrationNum;                         		// 0x0334 (0x0001) [0x0000000000000000]              
	unsigned char                                      bLastRecoilDir;                                   		// 0x0335 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      InventoryGroup;                                   		// 0x0336 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SlotIndex;                                        		// 0x0337 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WeaponType;                                       		// 0x0338 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MeshSlideIndex;                                   		// 0x0339 (0x0001) [0x0000000000000000]              
	unsigned char                                      MeshSlideBlendType;                               		// 0x033A (0x0001) [0x0000000000000000]              
	unsigned char                                      RotLagBlendType;                                  		// 0x033B (0x0001) [0x0000000000000000]              
	unsigned char                                      ZoomState;                                        		// 0x033C (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      PreviousZoomState;                                		// 0x033D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      WeaponState;                                      		// 0x033E (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      PreWeaponState;                                   		// 0x033F (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ActiveRISSlot;                                    		// 0x0340 (0x0001) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned char                                      PreviousActiveRISSlot;                            		// 0x0341 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      DeactivatedRISSlot;                               		// 0x0342 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      GimmickType;                                      		// 0x0343 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BloodTexStatus;                                   		// 0x0344 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      AltFireBlock[ 0x5 ];                              		// 0x0345 (0x0005) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HUDDroppedPickupIconType;                         		// 0x034A (0x0001) [0x0000000000000000]              
	float                                              BulletDropDelay;                                  		// 0x034C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Durability;                                       		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ControlAccuracy;                                  		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpreadRateForUI;                                  		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpreadMaxForUI;                                   		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxActualSpreadForCrosshairLength;                		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxRecoilForCrosshairLegnth;                      		// 0x0364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0368 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.AmmoCount
	int                                                ShardNumber;                                      		// 0x036C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      UnknownData01[ 0x2 ];                             		// 0x0370 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.ServerAmmoCount
	unsigned char                                      UnknownData02[ 0x2 ];                             		// 0x0372 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.ServerMagazineAmmo
	unsigned char                                      UnknownData03[ 0x2 ];                             		// 0x0374 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.MaxAmmoCount
	unsigned char                                      UnknownData04[ 0x2 ];                             		// 0x0376 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.WeaponAmmoStart
	unsigned char                                      UnknownData05[ 0x2 ];                             		// 0x0378 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.MagazineAmmo
	unsigned char                                      UnknownData06[ 0x2 ];                             		// 0x037A (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.MaxMagazineAmmo
	unsigned char                                      UnknownData07[ 0x2 ];                             		// 0x037C (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatWeapon.AmmoPerReload
	TArray< unsigned char >                            ClientShotCountOnFiring;                          		// 0x0380 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            ServerShotCountOnFiring;                          		// 0x038C (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	float                                              LastFiringTime;                                   		// 0x0398 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              ReloadTime;                                       		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReloadingActionTime;                              		// 0x03A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreReloadingActionTime;                           		// 0x03A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreReloadTime;                                    		// 0x03A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PostReloadTime;                                   		// 0x03AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RevertMagazineAmmoTime;                           		// 0x03B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivePartTimeList[ 0x5 ];                        		// 0x03B4 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeactivePartTimeList[ 0x5 ];                      		// 0x03C8 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentFireDelayTime;                             		// 0x03DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ScreenShakePitchAdhustment;                       		// 0x03E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ScreenShakeYawAdhustment;                         		// 0x03E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RecoilTime;                                       		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RecoilAutoCorrectDelay;                           		// 0x03EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SilencerBoneName;                                 		// 0x03F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LaserBoneName;                                    		// 0x03F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LaserSiteBoneName;                                		// 0x0400 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScopeBoneName;                                    		// 0x0408 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              SilencerEquipTime;                                		// 0x0410 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Decalstring;                                      		// 0x0414 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture*                                    DecalTexture;                                     		// 0x0420 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              FireDelayTime;                                    		// 0x0424 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    PreFireDelayTime;                                 		// 0x0428 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      InstantProjectile;                                		// 0x0434 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BP[ 0xA ];                                        		// 0x0438 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstantProjectileHitNormalAddScale;               		// 0x0460 (0x0004) [0x0000000000000000]              
	float                                              FirstpersonTracerSpawnDistance;                   		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRecoilFactor >                     RecoilFactorForHipShotView;                       		// 0x0468 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FRecoilFactor >                     RecoilFactorForFirstZoomedView;                   		// 0x0474 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FRecoilFactor >                     RecoilFactorForSecZoomedView;                     		// 0x0480 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              RecoilInterpSpeed;                                		// 0x048C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RecoilAutoCorrectSpeed;                           		// 0x0490 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Leftrightreactionswitch;                          		// 0x0494 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RecoilSpeedDownFirstRadius;                       		// 0x0498 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RecoilSpeedDownSecondRadius;                      		// 0x049C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpreadCorrectInterpOuterSpeed;                    		// 0x04A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpreadCorrectInterpInnerSpeed;                    		// 0x04A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpreadOuterSpeedAccuracy;                         		// 0x04A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastFiredTimeSeconds;                             		// 0x04AC (0x0004) [0x0000000000000000]              
	float                                              LastProjectileTimeSeconds;                        		// 0x04B0 (0x0004) [0x0000000000000000]              
	float                                              ValidRefireToleranceTime;                         		// 0x04B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                AddedPitchVerticalRecoilSum;                      		// 0x04B8 (0x0004) [0x0000000000000000]              
	struct FRotator                                    WeaponRecoilOffset;                               		// 0x04BC (0x000C) [0x0000000000000000]              
	struct FRotator                                    LastFiredRecoilOffset;                            		// 0x04C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    AutoCorrectWeaponRecoilOffset;                    		// 0x04D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              RecoilAutoCorrectTime;                            		// 0x04E0 (0x0004) [0x0000000000000000]              
	float                                              fPitch;                                           		// 0x04E4 (0x0004) [0x0000000000000000]              
	float                                              fYaw;                                             		// 0x04E8 (0x0004) [0x0000000000000000]              
	int                                                FiredAmmo;                                        		// 0x04EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ValidFiredNum;                                    		// 0x04F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Accuracy;                                         		// 0x04F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentRecoilFactorType;                          		// 0x04F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRecoilFactor                               CurRecoilFactor;                                  		// 0x04FC (0x0044) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DeltaRecoil;                                      		// 0x0540 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      ShotCost;                                         		// 0x054C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCameraShakeRotationFactor >        CameraShake_IncreaseByWeapon;                     		// 0x0558 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    CameraShake_HitBodyAdjust;                        		// 0x0564 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      AttachmentClass;                                  		// 0x0570 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class ACBWeaponAttachment*                         WeaponAttachment;                                 		// 0x0574 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                SoundCueIndex;                                    		// 0x0578 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USoundCue* >                         WeaponFireSnd3rd;                                 		// 0x057C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class USoundCue* >                         WeaponFireSnd;                                    		// 0x0588 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   WeaponDryFireSnd;                                 		// 0x0594 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ZoomInSound;                                      		// 0x0598 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ZoomOutSound;                                     		// 0x059C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ZoomInSound3rd;                                   		// 0x05A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ZoomOutSound3rd;                                  		// 0x05A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   WeaponBulletDropSnd;                              		// 0x05A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   WeaponChangeSnd;                                  		// 0x05AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    BobDamping;                                       		// 0x05B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    BobDampingZ;                                      		// 0x05BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    WeaponBobSoundRatio;                              		// 0x05C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MaxPitchLag;                                      		// 0x05D4 (0x0004) [0x0000000000000000]              
	float                                              MaxYawLag;                                        		// 0x05D8 (0x0004) [0x0000000000000000]              
	float                                              LastRotUpdate;                                    		// 0x05DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    LastRotation;                                     		// 0x05E0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastLocation;                                     		// 0x05EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              OldLeadMag[ 0x2 ];                                		// 0x05F8 (0x0008) [0x0000000000000000]              
	int                                                OldRotDiff[ 0x2 ];                                		// 0x0600 (0x0008) [0x0000000000000000]              
	float                                              OldMaxDiff[ 0x2 ];                                		// 0x0608 (0x0008) [0x0000000000000000]              
	float                                              RotChgSpeed;                                      		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReturnChgSpeed;                                   		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MuzzleFlashSocket;                                		// 0x0618 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SilencerMuzzleFlashSocket;                        		// 0x0620 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LauncherMuzzleFlashSocket;                        		// 0x0628 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HeadBloodSocket;                                  		// 0x0630 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BloodSocket;                                      		// 0x0638 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ExtraEffectSocket;                                		// 0x0640 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShellEjectSocket;                                 		// 0x0648 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    MuzzleFlashPSC;                                   		// 0x0650 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             MuzzleFlashPSCTemplate;                           		// 0x0654 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             MuzzleFlashPSCTemplateForSilencer;                		// 0x0658 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             MuzzleFlashPSCTemplateForGrenade;                 		// 0x065C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystem*                             MuzzleFlashPSCTemplateForGrenade3rd;              		// 0x0660 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatFPMuzzleFlashLight*                   MuzzleFlashLight;                                 		// 0x0664 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UClass*                                      MuzzleFlashLightClass;                            		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MuzzleFlashDuration;                              		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           PlayerViewOffset;                                 		// 0x0670 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     CurrentPlayerViewOffset;                          		// 0x067C (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              CurrentRating;                                    		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AIWeaponSpreadRandom;                             		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AIModeDamageRate;                                 		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetFrictionDistanceMin;                        		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetFrictionDistanceMax;                        		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetFrictionOffset;                             		// 0x069C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetAdhesionAimDistZ;                           		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetAdhesionAimDistY;                           		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimAssistSpreadMultiplier;                        		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunSpeed;                                         		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkingPct;                                       		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrouchedPct;                                      		// 0x06BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AccelRate;                                        		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JumpZ;                                            		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxGroundSpeed;                                   		// 0x06C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PickAddAmmo;                                      		// 0x06CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     WeaponStatType;                                   		// 0x06D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UParticleSystemComponent*                    PSC_ShellEject;                                   		// 0x06DC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                ShotInBurstCount;                                 		// 0x06E0 (0x0004) [0x0000000000000000]              
	TArray< int >                                      ShotPerFireBurst;                                 		// 0x06E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                FiredBulletNum;                                   		// 0x06F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatSkelCtrl_WeaponLag*                   PitchControl[ 0x2 ];                              		// 0x06F4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UCombatSkelCtrl_WeaponLag*                   YawControl[ 0x2 ];                                		// 0x06FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UCombatSkelCtrl_WeaponLag*                   TransControl[ 0x4 ];                              		// 0x0704 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             PitchControlName;                                 		// 0x0714 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             YawControlName;                                   		// 0x0720 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             TransControlName;                                 		// 0x072C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     WeaponCodeName;                                   		// 0x0738 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     WeaponName;                                       		// 0x0744 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	class UCombatDataTableRefItem*                     RefItem;                                          		// 0x0750 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                WeaponID;                                         		// 0x0754 (0x0004) [0x0000000000000000]              
	int                                                OriginalWeaponID;                                 		// 0x0758 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   MeshSlide;                                        		// 0x075C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   MeshSlideSpeed;                                   		// 0x0764 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   MeshSlideComebackSpeed;                           		// 0x076C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   MeshSlideComebackThreshold;                       		// 0x0774 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   MeshSlideStartThreshold;                          		// 0x077C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    ForegroundFOV;                                    		// 0x0784 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    WorldFOV;                                         		// 0x0790 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LastForegroundFOV;                                		// 0x079C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastWorldFOV;                                     		// 0x07A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ForegroundFOVAppliedRISList;                      		// 0x07A4 (0x0004) [0x0000000000000000]              
	TArray< float >                                    WeaponBobRatio;                                   		// 0x07A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    WeaponLagRatio;                                   		// 0x07B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    WeaponZoomDuration;                               		// 0x07C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    WeaponFOVDelayRatio;                              		// 0x07CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    ZoomRotLagRatio;                                  		// 0x07D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              FOVInterpSpeed;                                   		// 0x07E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    ZoomAnimBlendTimes;                               		// 0x07E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ZoomStateChangedTime;                             		// 0x07F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ZoomStateChangeDurationRatio;                     		// 0x07F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentWeaponZoomDuration;                        		// 0x07FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WeaponStateChangedTime;                           		// 0x0800 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       WeaponStateName[ 0x1E ];                          		// 0x0804 (0x00F0) [0x0000000000000001]              ( CPF_Edit )
	struct FCustomAnimData                             StateInfo[ 0x1E ];                                		// 0x08F4 (0x0780) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FCustomAnimData                             OverrideStateInfo[ 0x1E ];                        		// 0x1074 (0x0780) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FCustomAnimData                             CurrentStateInfo;                                 		// 0x17F4 (0x0040) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UAnimNodeSlot*                               CustomAnim;                                       		// 0x1834 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UAnimNodeSlot*                               CustomAnimOnIdle;                                 		// 0x1838 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	TArray< struct FCustomAnimOnIdleData >             CustomAnimOnIdleData;                             		// 0x183C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UCombatWeaponRISBase* >              RISList;                                          		// 0x1848 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UCombatWeaponRISBase* >              TickableRISList;                                  		// 0x1854 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      DefaultRISList[ 0x5 ];                            		// 0x1860 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FHideBoneDataByWeaponState >        HideBoneDataByWeapState;                          		// 0x1874 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FHideBoneDataByZoomState >          HideBoneDataByZoomState;                          		// 0x1880 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FHideBoneDataByScreenPos >          HideBoneDataByScreenPos;                          		// 0x188C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             CachedHideBoneData;                               		// 0x1898 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            SavedDeactiveParts;                               		// 0x18A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMeshPart >                         MeshParts;                                        		// 0x18B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             AlwaysHideBoneName;                               		// 0x18BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FSocketLocation                             FirstMuzzleFlashLoc;                              		// 0x18C8 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FSocketLocation                             ThirdMuzzleFlashLoc;                              		// 0x18D8 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                RelatedSkillGroupID;                              		// 0x18E8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              IdleVel;                                          		// 0x18EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdleVelocitySquareForRecoil;                      		// 0x18F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatPawn*                                 CombatInstigator;                                 		// 0x18F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      WeaponMesh;                                       		// 0x18F8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              ZoomLv1MouseSensRatio;                            		// 0x18FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ZoomLv2MouseSensRatio;                            		// 0x1900 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ExposuredBulletNum;                               		// 0x1904 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             BulletNames;                                      		// 0x1908 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             BulletHeadNames;                                  		// 0x1914 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                LastReloadedNum;                                  		// 0x1920 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HideBoneNum;                                      		// 0x1924 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Last_PV;                                          		// 0x1928 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   MeshBob_WalkingMod;                               		// 0x1934 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentBloodTexValue;                             		// 0x193C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BloodTexDuration;                                 		// 0x1940 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartBloodTexTime;                                		// 0x1944 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentBloodTexBlendTime;                         		// 0x1948 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BloodTexBlendTotalTime;                           		// 0x194C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BloodScalarParam;                                 		// 0x1950 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AllowedDelayTimeFromLastFiringTime;               		// 0x1958 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ValidFiringDistance;                              		// 0x195C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ValidHitBoundScale;                               		// 0x1960 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AllowTraceRangeRatio;                             		// 0x1964 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ValidShotGunFiringDistance;                       		// 0x1968 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                ValidShotGunNumHits;                              		// 0x196C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ProjectileFireDelay;                              		// 0x1970 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                killcount;                                        		// 0x1974 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FsBoneTransform >                   ABoneTransforms;                                  		// 0x1978 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkelControlSingleBone*                      BoneTransformNode;                                		// 0x1984 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlSingleBone*                      IronSightNodeRear;                                		// 0x1988 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlSingleBone*                      IronSightNodeFront;                               		// 0x198C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    IronSightRotRear;                                 		// 0x1990 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    IronSightRotFront;                                		// 0x199C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1986 ];

		return pClassPointer;
	};

	void ChangeSlide ( unsigned long bLock );
	void SetForegroundFOV ( );
	void SetMeshForegroundFOV ( float FOVDelta, unsigned char SetZoomState );
	void MakeIronSightBone ( );
	bool IsDisplayDroppedLocator ( );
	unsigned char SetPenetration ( unsigned long bObjectPenetration, unsigned long bPersonPenetration );
	void SetBuff ( class ACombatPawn* TargetPawn );
	void NotifyFiringForHUD ( );
	bool CanDamageCameraShake ( );
	bool GetMagType ( );
	bool IsGrenade ( );
	bool IsMeleeWeapon ( );
	int GetWeaponStatType ( );
	unsigned char GetWeaponType ( );
	bool IsEquipWeapon ( );
	bool IsPlacedUseItem ( );
	bool IsPlacedWeapon ( );
	bool IsPlacedActor ( );
	bool IsSkillUseItem ( );
	bool IsSkillWeapon ( );
	bool IsSkillActor ( );
	void NotifyTeamChanged ( );
	bool IsInactive ( );
	bool ReleaseUse ( class ACombatPawn* CBInstigator );
	bool Use ( class ACombatPawn* CBInstigator );
	void PlayCustomAnimOnIdle ( struct FName EventName );
	void StopCustomAnim ( float BlendOutTime, unsigned long bStopCustomAnimOnIdle );
	void PlayBloodEffectForFP ( unsigned long IsHead );
	void NotifySelectSkillHuD ( );
	bool IsChangeSoundMode ( );
	bool IsAIController ( );
	int GetBP ( unsigned char Part );
	unsigned char GetGrade ( );
	void MakeBulletHeadBoneVisibility ( int FiredNum );
	void eventMakebulletBone ( );
	void MakeBoneTransform ( int Num );
	void MakeBoneVisibility ( int ExpotureNum );
	void eventHideBoneForNotify ( );
	void ResetBoneVisibility ( unsigned long bShow );
	unsigned char HasBoneGimmic ( );
	bool IsValidFireSound ( );
	void OwnerEvent ( struct FName EventName );
	bool eventCanAttachToHolster ( );
	unsigned char GetWeaponGroup ( );
	void SetAnimRateScale ( float RateScale );
	bool IsDisplayedLaserSiteUI ( );
	void eventGetCachedResources ( unsigned long bIsDedicatedServer, TArray< class UObject* >* ResourceList );
	void ToggleGrenadeLauncher ( );
	void ReselectWeapon ( );
	void eventInitHideBones ( );
	void eventSetSilencer ( unsigned long Turnon, unsigned long SlotSet );
	void ToggleLaserSite ( );
	bool CanToggleSilencer ( );
	void ServerToggleSilencer ( unsigned long bEquip );
	void ToggleSilencer ( unsigned long bEquip );
	void AddRIS ( class UCombatWeaponRISBase* RISEntity );
	class UClass* GetWeaponAttachmentClass ( );
	void StartAltFire ( );
	void StopFire ( unsigned char FireModeNum );
	void UpdateHoldmode ( unsigned long NewValue );
	void StartFire ( unsigned char FireModeNum );
	void HandleFinishedFiring ( );
	void PlayNeedsAmmoChatter ( );
	bool IsShellByShellReload ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void NotifyFireEvent ( );
	void NotifyWeaponFinishedFiring ( unsigned char FireMode );
	void NotifyWeaponFired ( unsigned char FireMode );
	void PlayBulletDropSnd ( );
	void eventPlayShellCaseEject ( );
	void HidePSC_ShellEject ( );
	float GetEffectedPutDownTime ( );
	class AActor* TraceNoVolumesOrTriggers ( class APawn* TraceOwner, struct FVector End, struct FVector Start, struct FVector Extent, struct FVector* HitLocation );
	void eventWeaponStoppedFiring ( unsigned char FiringMode );
	bool ShouldRegisterDamage ( class AActor* A );
	void GetFireModeDamage ( struct FVector HitLocation );
	void SpawnPentrationTracer ( struct FVector Start, struct FVector End );
	struct FVector PlayPenetrationEffects ( struct FVector* StartLocation, struct FVector* HitLocation );
	bool CheckBulletWhip ( struct FVector* HitLocation );
	void SpawnTracer ( struct FVector End );
	void ProcessInstantHit_Internal ( unsigned char FiringMode, int ImpactListIndex, unsigned long bSpawnTracer, struct FImpactInfo* Impact );
	void ServerGotoState ( struct FName NewStateName );
	void ServerNotifyHit ( struct FCompressedImpactInfo CompressedImpact, float StartLocX, float StartLocY, float StartLocZ, int MergedAimRot, int MergedRecoilRot, unsigned char ClientZoomState, unsigned char ClientStanceState, unsigned char NumHits, unsigned char FiringMode, unsigned char PenetrateBeforeHit );
	void ServerNotifySimpleHit ( struct FCompressedImpactInfo CompressedImpact, unsigned char NumHits, unsigned char FiringMode );
	float GetBodyDamageAdjustment ( class UPhysicalMaterial* InPhysMaterial, unsigned long UsePowerBullet );
	bool PassThroughDamageByPA ( class AActor* HitActor, struct FVector StartTrace, struct FVector EndTrace, struct FImpactInfo* HitInfo );
	struct FImpactInfo CalcPenetration ( class AActor* TraceActor, struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList );
	bool CheckPersonPenetration ( class AActor* TraceActor );
	struct FImpactInfo CalcWeaponFireNoPenetraion ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList );
	struct FImpactInfo CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList );
	void GetPawnFinalHit ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, struct FTraceHitInfo* out_HitInfo, class AActor** out_HitActor, struct FVector* out_HitLocation, struct FVector* out_HitNormal );
	void eventUpdateBloodTexOnWeapon ( float DeltaTime );
	void ClearBloodTexOnWeapon ( );
	void eventInitBloodMIC ( );
	void NotifyTakeHit ( );
	void NextBloodColumn ( unsigned char TexStatus );
	void InitBloodTexOnWeapon ( float Value );
	void EndViewTarget ( class APlayerController* PC );
	void BecomeViewTarget ( class APlayerController* PC );
	void eventInitLastViewRotation ( );
	struct FRotator eventAddSpread ( struct FRotator BaseAim );
	void ResetSpread ( );
	void ResetRecoil ( unsigned long bRecoverRotation );
	void eventCalcWeaponSpread ( );
	void eventCalcWeaponRecoil ( );
	void Activate ( );
	bool CanFireOnReload ( );
	void ServerAbortWeaponReload ( unsigned char PendingFireMode );
	bool eventIsReloadingWeapon ( );
	void PerformReload ( );
	void AbortWeaponReload ( unsigned char PendingFireMode );
	bool IsFullReloading ( );
	void ReleaseMagazineAmmo ( );
	bool CanMeleeAttack ( );
	bool CanStare ( );
	bool CanReload ( );
	bool DoMeleeAIAttack ( );
	void ServerUpdateReloadState ( unsigned long bClientPendingFire );
	void UpdateReloadState ( );
	void ServerDoStare ( );
	void DoStare ( );
	void ClientUpdateReloadState ( float NextStateDelay );
	void DoReload ( unsigned long inCallByAutoReload );
	bool HasInfiniteSpareAmmo ( );
	void SetInfiniteSpareAmmo ( );
	unsigned char GetSubAmmoPerReload ( );
	void GetCurrentServerAmmoCount ( );
	void GetCurrentServerMagazineAmmo ( );
	void GetCurrentMagazineAmmo ( );
	int GetMaxSpareAmmoSize ( );
	void ItemRemovedFromInvManager ( );
	class UPrimitiveComponent* eventGetDroppedPickupMesh ( );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity, class AInventory* SwapInventory, class AController* Killer );
	bool IsPlayerOperating ( );
	float DetourWeight ( class APawn* Other, float PathWeight );
	void ClientStopFire ( unsigned char FireModeNum );
	void ClientStartFire ( unsigned char FireModeNum );
	bool IsValidFireMode ( unsigned char FireModeNum );
	void InternalDelayedDestroy ( );
	void DelayedDestroy ( float DelayTime, unsigned long bSkipPendingDestroyState );
	void eventDestroyed ( );
	void NotifyUsedSkill ( );
	void ServerStopFire ( unsigned char FireModeNum, unsigned char InClientShotCount );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir );
	bool ShouldRefire ( );
	bool TryPutDown ( );
	void NotifyWeaponReloadedUI ( unsigned long bStart_ );
	void SetClientSilencerState ( unsigned long onoff );
	void GotoNextState ( );
	void ServerStartFire ( unsigned char FireModeNum );
	void UpdateWeaponState ( struct FName PreviousStateName );
	void eventInitChangedWeaponInfo ( );
	void ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate );
	bool eventIsForceNetRelevant ( );
	void AttachToHolster ( );
	void eventSetAIWeapon ( unsigned long bFlag );
	void InitRecoilSeed ( );
	void SetLocalWeapon ( unsigned long bFlag );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	void RestoreLastZoomStateByFire ( );
	void EndZoomByFire ( );
	void FireAmmunition ( );
	void SetMouseSensitivity ( );
	float GetMouseSensitivityRatio ( unsigned char TargetZoomState );
	void EndZoom ( );
	bool StartZoom ( );
	float GetWeaponBobSoundRatio ( );
	float eventGetWeaponBobRatio ( );
	void eventZoomStateChanged ( );
	void ServerSetPreviousZoomState ( unsigned char NewPreviousZoomState );
	void SetPreviousZoomState ( unsigned char NewPreviousZoomState );
	void ServerSetZoomState ( unsigned char NewZoomState );
	void SetZoomState ( unsigned char NewZoomState );
	bool HasZoomProperties ( unsigned char InFireModeNum );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int AimRot, unsigned char NumHits, int ImpactListIndex, unsigned char PenetrateBeforeHit, unsigned long bSpawnTracer );
	bool NeedServerNotifyHit ( class AActor* HitActor, class UStaticMeshComponent* HitComponent );
	void CheckMultiHit ( int MergedAimRot, unsigned char FiringMode, unsigned char NumHits, unsigned char PenetrateBeforeHit, struct FImpactInfo* Impact );
	void ClientConsumeAmmo ( unsigned char FireMode );
	class AProjectile* ProjectileFire ( );
	bool IsWhenDieDropGrenade ( );
	void IncrementFlashCount ( );
	class AProjectile* MakeProjectile ( );
	void ServerMakeProjectile ( float ClientCurrentFireDelayTime );
	bool IsMartyrdom ( );
	void InstantFire ( );
	struct FVector InstantFireEndTrace ( struct FVector StartTrace );
	void WeaponEmpty ( );
	bool HasAnyAmmo ( );
	float GetNextStateDelay ( );
	bool CanEquipUp ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	bool HasSpareAmmo ( );
	bool IsMaxSubAmmo ( );
	bool IsMaxAmmo ( );
	unsigned char GetMaxSubAmmoCount ( );
	void GetMaxAmmoCount ( );
	int AddSubAmmo ( int Amount );
	int AddAmmo ( int inAmount );
	void ServerNotifyFireEvent ( );
	void ConsumeAmmo ( unsigned char FireModeNum );
	bool StillFiring ( unsigned char FireMode );
	bool ReadyToFire ( unsigned long bFinished );
	bool IsFullyCharged ( );
	unsigned char BestMode ( );
	bool ShouldFireWithoutTarget ( );
	float RangedAttackTime ( );
	float SuggestDefenseStyle ( );
	float SuggestAttackStyle ( );
	bool RecommendRangedAttack ( );
	bool FocusOnLeader ( unsigned long bLeaderFiring );
	float BotDesireability ( class AActor* PickupHolder, class APawn* P, class AController* C );
	bool CanAttack ( class AActor* Other );
	float GetWeaponRating ( );
	bool CanUseGlobalSkill ( );
	float RelativeStrengthVersus ( class APawn* P, float Dist );
	void AdjustDistanceDamage ( struct FVector HitLocation, int* Damage );
	bool CanThrow ( );
	void GetViewAxes ( struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis );
	struct FName eventGetExtraSocketName ( );
	class UParticleSystem* GetMuzzleFlashParticleSystem ( );
	struct FName eventGetMuzzleFlashLightSocketName ( );
	struct FName eventGetMuzzleFlashPSCSocketName ( );
	void DetachComponents ( );
	bool UseTickIsDisabled ( );
	void DetachWeapon ( );
	void PlayMuzzleFlashPSC ( );
	bool AttachMuzzleFlash ( unsigned long bForce );
	void PlayWeaponChangeSound ( );
	void WeaponChanged ( unsigned long bUpdateWeaponUI );
	void eventAttachShellEjectPSC ( );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	bool TryToAttachWeapon ( );
	bool IsValidWeaponMesh ( );
	float GetEffectedEquipTime ( );
	void TimeWeaponEquipping ( );
	void WeaponIsDown ( );
	void TimeWeaponPutDown ( );
	bool IsAllowShellEjectPerBullet ( );
	void eventCauseMuzzleFlash ( );
	void eventCauseMuzzleFlashLight ( );
	void eventMuzzleFlashTimer ( );
	void eventPlayFiringSound ( );
	bool GetPlayingFiringSound ( );
	void RemovePlayingFiringSound ( );
	void eventWeaponFadeOutSound ( float FadeOutTime, float FadeVolumeLevel, class USoundCue* FirstPersonCamSound, class USoundCue* ThirdPersonCamSound );
	void eventWeaponPlaySound ( class USoundCue* FirstPersonCamSound, class USoundCue* ThirdPersonCamSound, struct FVector SoundTargetLocation, unsigned long bSingleChannel, unsigned long bFiringSoundMode );
	void StopFireEffects ( unsigned char FireModeNum );
	struct FVector eventGetMuzzleLoc ( );
	void PlayImpactEffects ( class UClass* DmgTypeClass, struct FImpactInfo InImpactInfo );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation, unsigned long bPenetration, struct FImpactInfo InImpactInfo, unsigned long bSpawnTracer );
	void SetEnableFirstPersonMuzzleFlash ( unsigned long bEnable );
	float GetFireInterval ( unsigned char FireModeNum );
	void eventInitFOV ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void GetWeaponDebug ( TArray< struct FString >* DebugInfo );
	bool ConvertSpreadConeToScreenCord ( float f_accuracy, class AHUD** HUD, int* out_spreadSize_int );
	void DrawWeaponCrosshair ( class AHUD* HUD );
	void FlipMesh ( unsigned long Flip );
	bool IsEmptyCrossHair ( );
	float GetAccuracyFactor ( );
	void ActiveRenderOverlays ( class AHUD* H );
	int GetRemainAmmoCountForUIEX ( int* AmCount );
	unsigned char GetSubMaxMagazineAmmo ( );
	void GetMaxMagazineAmmo ( );
	int GetPickAddAmmo ( );
	void GetDefaultMaxMagazineAmmo ( );
	int GetWeaponAmmoStart ( );
	void GetDefaultWeaponAmmoStart ( );
	void eventNotifyWeaponAmmoChanged ( struct FName EventType, unsigned long bForce );
	void SetSubMagazineAmmo ( unsigned char NewSubMagazineAmmo, struct FName EventType );
	void SetMagazineAmmo ( struct FName EventType );
	void InitServerMagazineAmmo ( );
	void UpdateServerMagazineAmmo ( );
	unsigned char GetSubMagazineAmmo ( );
	void GetDefaultMagazineAmmo ( );
	void GetMagazineAmmo ( );
	unsigned char GetSubAmmoCount ( );
	void GetAmmoCount ( );
	void SetHiddenPrimitiveComponents ( unsigned long bFlag );
	void IgnoreWeaponInput ( unsigned long bNetFlag );
	void IgnoreInput ( unsigned long bLockMoveInput, unsigned long bLockLookInput );
	void ChangeVisibility ( unsigned long bIsVisible, unsigned long bWeapAttachIsVisible );
	bool AllowSwitchTo ( class AWeapon* NewWeapon );
	bool eventIsAimCorrect ( );
	bool HasAnyPendingFire ( );
	void ClearAllPendingFire ( );
	void ClearAllShotCountOnFiring ( );
	void AddShotCountOnFiring ( unsigned char FireModeNum, unsigned char inAmount );
	unsigned char GetShotCountOnFiring ( unsigned char FireModeNum );
	void UpdateFlipMesh ( );
	void ServerSetFlipMesh ( unsigned long Flip );
	void PostBeginPlay ( );
	void SetData ( class UCombatDataTableRefItem* inRefItem );
	void SetInfiniteWeaponReload ( );
	void eventPreBeginPlay ( );
	class UCombatDataTableRefItem* GetRefItem ( );
	void eventChangedWeaponState ( );
	int eventDecideAnimSeq ( int MaxSeqNums );
	void eventRestorePawnProperties ( class ACombatPawn* TargetPawn );
	void eventOverridePawnProperties ( class ACombatPawn* TargetPawn );
	float eventGetAnimDuration ( );
	void eventChangedRISSlot ( unsigned char TargetSlot, unsigned long bTurnOn );
	void eventServerSetActiveRISSlot ( unsigned char NewActiveRISSlot );
	void SetAmmoCount ( unsigned char InSubAmmoCount );
	void eventUpdateServerAmmoCount ( );
	void eventReceivedServerAmmoCount ( unsigned long bCalledByTimer );
	void eventUpdateKillCount ( );
	void ReplicatedEvent ( struct FName VarName );
	void GetAmmoPerReload ( );
	struct FRotator GetMinRecoilRotation ( int InFiredNum );
	int GetMergedRecoilRotation ( );
	bool IsValidHitActor ( class AActor* InHitActor, int MergedAimRot, int MergedRecoilRot, unsigned char InZoomState, unsigned char InStanceState, struct FVector* InHitLocation, struct FVector* InStartLoc, unsigned char* errorType, struct FString* ErrorMessage );
	bool IsValidAmmo ( );
	class ACBWeaponAttachment* GetWeaponAttachment ( );
	float GetInterpValueByZoomState ( TArray< float >* SourceData );
	struct FVector InstantFireStartTrace ( );
	void CorrectAccuracy ( float DeltaTime );
	void UpdateRecoil ( float DeltaTime );
	void InitRecoilFactor ( unsigned char ViewMode, unsigned char StandState );
	unsigned char GetStanceState ( );
	int GetRecoilGaussRandom ( int RandomMax );
	int GetRecoilRandom ( int RandomMax );
	void InitAnimTreeWeight ( );
	void InitRISList ( );
	void SetWeaponMesh ( );
	void PreloadTextures ( unsigned long bForcePreLoad );
	bool IsAIWeapon ( );
	bool IsLocalWeapon ( );
	float GetForegroundFOV ( );
	float GetWorldFOV ( );
	void eventChangedInstigator ( class APawn* OldInstigator );
	bool CanPlayRecoilNode ( );
	float GetWeaponFireSnd ( class USoundCue** FireSndFirst, class USoundCue** FireSnd3rd );
	bool GetThirdPersonMuzzleLoc ( struct FVector* MuzzleLoc );
	bool GetFirstPersonMuzzleLoc ( struct FVector* MuzzleLoc );
	void UpdateAlwaysHideBone ( );
	void UpdateWeaponStateAnim ( unsigned long bIsVisible );
	void PlayWeaponAnim ( float AnimDuration, float StartTime, struct FCustomAnimData* InCurrentStateInfo );
	bool HasHolsterName ( );
	bool IsDroppedWeapon ( );
	bool IsInActiveState ( unsigned char CurrState );
	bool IsFireState ( unsigned char CurrState );
	unsigned char GetWeaponState ( );
	void SetWeaponState ( unsigned char NewWeaponState );
	void ClearAllActiveRISSlot ( );
	bool IsActiveRISSLot ( unsigned char Slot );
	void SetDeactivatedRISSlot ( unsigned char Slot, unsigned long bDeactive );
	bool ToggleActiveRISSlot ( unsigned char Slot );
	void SetActiveRISSlot ( unsigned char Slot, unsigned long bTurnOn );
	void NotifyPostDeactivePart ( );
	void UpdateActiveRISSlot ( unsigned long bNotifyToServer );
	bool SetRISState ( unsigned char InRISState, int Param1 );
	bool SetRISWeaponState ( unsigned char InWeaponState, int Param1 );
	void InitPlayerViewOffset ( );
	unsigned char GetValidZoomState ( );
	unsigned char GetZoomState ( unsigned long bExceptInterpolatingState );
	void UpdateZoomInterpolation ( );
	void HideBoneByZoomState ( unsigned char InZoomState );
	void HideBoneByWeaponState ( unsigned char InWeapState );
};

UClass* ACombatWeapon::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_ETC
// 0x001C (0x19C4 - 0x19A8)
class ACombatWeapon_ETC : public ACombatWeapon
{
public:
	struct FCameraAnimData                             AttachedCameraAnim;                               		// 0x19A8 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1987 ];

		return pClassPointer;
	};

	void EndViewTarget ( class APlayerController* PC );
	void BecomeViewTarget ( class APlayerController* PC );
	void StopAttachedCameraAnim ( );
	void PlayAttachedCameraAnim ( );
	bool CanPlayAttachedCameraAnim ( );
	void Destroyed ( );
};

UClass* ACombatWeapon_ETC::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_Parachute
// 0x0058 (0x1A1C - 0x19C4)
class ACombatWeaponBase_Parachute : public ACombatWeapon_ETC
{
public:
	float                                              OverrideGravityScalingForPawn[ 0x3 ];             		// 0x19C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverrideViewPitchMax[ 0x3 ];                      		// 0x19D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverrideTerminalVelocity[ 0x3 ];                  		// 0x19DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverrideAirControl;                               		// 0x19E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverrideMaxFallSpeed;                             		// 0x19EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LandedAnimDuration;                               		// 0x19F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FallingSound;                                     		// 0x19F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      InitialParachuteState;                            		// 0x19F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CurrentParachuteState;                            		// 0x19F9 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bParachuteOpenOnPressJump : 1;                    		// 0x19FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UMaterialInterface*                          LandingZoneMaterialForAlly;                       		// 0x1A00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LandingZoneMaterialForEnemy;                      		// 0x1A04 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LandingZoneSize;                                  		// 0x1A08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LandingZoneDecalDepth;                            		// 0x1A0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             FallingSoundCom;                                  		// 0x1A10 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class ACombatPlayerStart*                          InstigatorAnchor;                                 		// 0x1A14 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ACombatPlayerStart*                          LastInstigatorAnchor;                             		// 0x1A18 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1988 ];

		return pClassPointer;
	};

	void StartFallingSound ( );
	void StopFallingSound ( );
	void OwnerEvent ( struct FName EventName );
	void RestorePawnProperties ( class ACombatPawn* TargetPawn );
	void UpdateAttachmentMeshVisibility ( );
	void ChangeVisibility ( unsigned long bIsVisible, unsigned long bWeapAttachIsVisible );
	void ApplyMaxVelocity ( class ACombatPawn* TargetPawn );
	void OverridePawnProperties ( class ACombatPawn* TargetPawn );
	void ParachuteStateChanged ( );
	bool CanPlayAttachedCameraAnim ( );
	void SetParachuteState ( unsigned char NewParachuteState );
	void eventSetInstigatorAnchor ( class ACombatPlayerStart* InNewAnchor, unsigned long bForce );
	void UpdateLandingZone ( );
	class UMaterialInterface* GetLandingZoneDecalMaterial ( class ACombatPlayerStart* InNewAnchor );
	void NotifyTeamChanged ( );
	void ChangedInstigator ( class APawn* OldInstigator );
	void ReplicatedEvent ( struct FName VarName );
	void SetLocalWeapon ( unsigned long bFlag );
	void Destroyed ( );
	void PostBeginPlay ( );
};

UClass* ACombatWeaponBase_Parachute::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_Skill_Weapon
// 0x001C (0x19C4 - 0x19A8)
class ACombatWeapon_Skill_Weapon : public ACombatWeapon
{
public:
	struct FName                                       FireActionVoiceName;                              		// 0x19A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      TargetActor;                                      		// 0x19B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     TargetLoc;                                        		// 0x19B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bForceFireAmmunition : 1;                         		// 0x19C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1989 ];

		return pClassPointer;
	};

	int GetBP ( unsigned char Part );
	void ForceEndFire ( );
	void ServerSkillFire ( class AActor* inTargetActor, struct FVector InTargetLoc );
	void FireAmmunition ( );
	void NotifyWeaponFired ( unsigned char FireMode );
	void eventPlayFiringSound ( );
	void PlayFireActionVoice ( );
	struct FVector GetSkillFireTargetLoc ( );
	class AActor* GetSkillFireTarget ( );
	void SkillFire ( );
};

UClass* ACombatWeapon_Skill_Weapon::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_Guided_Weapon
// 0x000C (0x19D0 - 0x19C4)
class ACombatWeapon_Guided_Weapon : public ACombatWeapon_Skill_Weapon
{
public:
	class UParticleSystemComponent*                    GuidedPSC;                                        		// 0x19C4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             SimulatingEffect;                                 		// 0x19C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             TargetingEffect;                                  		// 0x19CC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1990 ];

		return pClassPointer;
	};

	void ChangeVisibility ( unsigned long bIsVisible, unsigned long bWeapAttachIsVisible );
	void UpdateMITVParameter ( );
	void SetGuidedEffect ( class UParticleSystem* NewTemplate, unsigned char ParticleDPG );
	void Destroyed ( );
	struct FVector UpdateTargetLocation ( );
};

UClass* ACombatWeapon_Guided_Weapon::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase
// 0x0980 (0x09BC - 0x003C)
class UCombatWeaponRISBase : public UObject
{
public:
	class ACombatWeapon*                               OwnerWeapon;                                      		// 0x003C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bIsFirstPersonCam : 1;                            		// 0x0040 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsAttachedToWeapon : 1;                          		// 0x0040 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bAutoAttachToWeapon : 1;                          		// 0x0040 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCallTickFunction : 1;                            		// 0x0040 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FFunctionTable                              FunctionTableForWeaponState[ 0x1E ];              		// 0x0044 (0x0168) [0x0000000000000001]              ( CPF_Edit )
	struct FFunctionTable                              FunctionTableForRISState[ 0xA ];                  		// 0x01AC (0x0078) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RISSlotIndex;                                     		// 0x0224 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FCustomAnimData                             PartStateInfo[ 0x1E ];                            		// 0x0228 (0x0780) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ActivePartTime;                                   		// 0x09A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeactivePartTime;                                 		// 0x09AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            SavedWeaponPropery;                               		// 0x09B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1991 ];

		return pClassPointer;
	};

	void WeaponPartChanged ( );
	void RemoveAnimSet ( class USkeletalMeshComponent* SkeletalMeshComp, class UAnimSet* NewAnimSet );
	void AddAnimSet ( class USkeletalMeshComponent* SkeletalMeshComp, class UAnimSet* NewAnimSet );
	void Init ( class ACombatWeapon* InOwnerWeapon );
	bool eventInitRIS ( class ACombatWeapon* InOwnerWeapon );
	bool IsFirstPersonCam ( );
	bool PostDeactivePart ( int Param1 );
	bool PreActivePart ( );
	bool ModifyWeaponProperties ( );
	bool NotifyTeamChanged ( );
	bool InitThirdPersonMesh ( );
	bool InitFirstPersonMesh ( );
	bool OwnerChangeViewMode ( int Param1 );
	bool ZoomStateChanged ( );
	bool DetachFromWeapon ( );
	bool AttachToWeapon ( );
	bool WeaponDeactivePart ( int Param1 );
	bool WeaponActivePart ( int Param1 );
	void RestoreWeaponProperty ( struct FName StructName );
	void ApplyWeaponProperty ( struct FName StructName );
	bool IsAttachedToWeapon ( );
	bool IsValidForAttach ( );
	bool SetRISState ( unsigned char Command, int Param1 );
	bool SetRISWeaponState ( unsigned char Command, int Param1 );
	void InitFunctionList ( );
};

UClass* UCombatWeaponRISBase::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_SkeletalmeshComponent
// 0x003C (0x09F8 - 0x09BC)
class UCombatWeaponRISBase_SkeletalmeshComponent : public UCombatWeaponRISBase
{
public:
	class USkeletalMeshComponent*                      FirstPersonSkelComponent;                         		// 0x09BC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPhysicsAsset*                               FirstPersonPhysicsAsset;                          		// 0x09C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FirstPersonNameToAttach;                          		// 0x09C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsAttachToFirstPersonSocket : 1;                 		// 0x09CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsAttachToThirdPersonSocket : 1;                 		// 0x09CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< struct FMeshPart >                         FirstPersonMeshParts;                             		// 0x09D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      ThirdPersonSkelComponent;                         		// 0x09DC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPhysicsAsset*                               ThirdPersonPhysicsAsset;                          		// 0x09E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ThirdPersonNameToAttach;                          		// 0x09E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMeshPart >                         ThirdPersonMeshParts;                             		// 0x09EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1992 ];

		return pClassPointer;
	};

	bool DetachFromWeapon ( );
	bool AttachToWeapon ( );
	void SetThirdPersonSkelComponentPhysics ( class USkeletalMeshComponent* ParentComponent );
	void SetFirstPersonSkelComponentPhysics ( class USkeletalMeshComponent* ParentComponent );
	bool AttachSkeletalMeshComponent ( class USkeletalMeshComponent* ParentMeshComponent, class USkeletalMeshComponent* RISMeshComponent, unsigned long bAttachToSocket, struct FName NameToAttach );
	class USkeletalMeshComponent* GetThirdPersonWeaponMeshComponent ( );
	class USkeletalMeshComponent* GetFirstPersonWeaponMeshComponent ( );
};

UClass* UCombatWeaponRISBase_SkeletalmeshComponent::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_Aiming
// 0x0094 (0x0A8C - 0x09F8)
class UCombatWeaponRISBase_Aiming : public UCombatWeaponRISBase_SkeletalmeshComponent
{
public:
	TArray< float >                                    WorldFOVMagnification;                            		// 0x09F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    OverrideForegroundFOV;                            		// 0x0A04 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    OverrideWeaponBobRatio;                           		// 0x0A10 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    OverrideWeaponLagRatio;                           		// 0x0A1C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    OverrideWeaponZoomDuration;                       		// 0x0A28 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    OverrideWeaponFOVDelayRatio;                      		// 0x0A34 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    OverrideZoomRotLagRatio;                          		// 0x0A40 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              OverrideWeaponFOVInterpSpeed;                     		// 0x0A4C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           OverrideViewOffset;                               		// 0x0A50 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    OverrideBobDamping;                               		// 0x0A5C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    OverrideBobDampingZ;                              		// 0x0A68 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    OverrideZoomAnimBlendTimes;                       		// 0x0A74 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FHideBoneDataByScreenPos >          OverrideHideBoneDataByScreenPos;                  		// 0x0A80 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1993 ];

		return pClassPointer;
	};

	bool ModifyWeaponProperties ( );
};

UClass* UCombatWeaponRISBase_Aiming::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_Scope
// 0x0044 (0x0AD0 - 0x0A8C)
class UCombatWeaponRISBase_Scope : public UCombatWeaponRISBase_Aiming
{
public:
	class UAnimNodeSlot*                               FPCustomAnim;                                     		// 0x0A8C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FName                                       FireAnimName;                                     		// 0x0A90 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstance*                           ScopeMaterial;                                    		// 0x0A98 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FScopeMaterialVectorParameter               ReadyToFireParam;                                 		// 0x0A9C (0x0018) [0x0000000000000001]              ( CPF_Edit )
	struct FScopeMaterialVectorParameter               UnavailableToFireParam;                           		// 0x0AB4 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLastReadyToFire : 1;                             		// 0x0ACC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1994 ];

		return pClassPointer;
	};

	bool ZoomStateChanged ( );
	void SetVisibleScope ( unsigned long bFlag );
	void StopCustomAnim ( float BlendOutTime );
	bool WeaponZoomFireSec ( );
	bool WeaponZoomFire ( );
	class UAnimNodeSlot* GetCustomAnimNode ( );
	bool OwnerChangeViewMode ( int Param );
	bool DetachFromWeapon ( );
	bool eventReadyToFire ( );
	void InitScopeMaterial ( );
	void Init ( class ACombatWeapon* InOwnerWeapon );
	void UpdateScopeMaterial ( unsigned long bForceUpdate );
	bool IsVisibleScope ( );
};

UClass* UCombatWeaponRISBase_Scope::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_GrenadeLauncher
// 0x0038 (0x0A30 - 0x09F8)
class UCombatWeaponRISBase_GrenadeLauncher : public UCombatWeaponRISBase_SkeletalmeshComponent
{
public:
	struct FName                                       OverrideDataName;                                 		// 0x09F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              WorldFOVMagnification;                            		// 0x0A00 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseLauncherForegroundFOV : 1;                    		// 0x0A04 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              LauncherForegroundFOV;                            		// 0x0A08 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LauncherZoomInDelayRatio;                         		// 0x0A0C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LauncherZoomOutDelayRatio;                        		// 0x0A10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverrideWeaponBobRatio;                           		// 0x0A14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverrideWeaponLagRatio;                           		// 0x0A18 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverrideZoomRotLagRatio;                          		// 0x0A1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   OverrideWeaponFireSnd;                            		// 0x0A20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   OverrideWeaponFireSnd3rd;                         		// 0x0A24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             OverrideMuzzleFlashPSCTemplateForGrenade;         		// 0x0A28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             OverrideMuzzleFlashPSCTemplateForGrenade3rd;      		// 0x0A2C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1995 ];

		return pClassPointer;
	};

	bool WeaponDeactivePart ( int Param1 );
	bool PostDeactivePart ( int Param1 );
	bool PreActivePart ( );
	bool ModifyWeaponProperties ( );
};

UClass* UCombatWeaponRISBase_GrenadeLauncher::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_LaserPoint
// 0x005C (0x0A54 - 0x09F8)
class UCombatWeaponRISBase_LaserPoint : public UCombatWeaponRISBase_SkeletalmeshComponent
{
public:
	struct FLinearColor                                TeamColor[ 0x2 ];                                 		// 0x09F8 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FirstPersonBoneName;                              		// 0x0A18 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TeamColorParameterName;                           		// 0x0A20 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    ThirdPersonPSC;                                   		// 0x0A28 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             ThirdPersonPSCTemplate;                           		// 0x0A2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ThirdPersonSocketName;                            		// 0x0A30 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParticleLengthParameterName;                      		// 0x0A38 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParticleLengthUpdateDelay;                        		// 0x0A40 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   LaserSightOnSnd;                                  		// 0x0A44 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   LaserSightOffSnd;                                 		// 0x0A48 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstance*                           LaserPointMI;                                     		// 0x0A4C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastParticleLengthUpdateTime;                     		// 0x0A50 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1996 ];

		return pClassPointer;
	};

	void UpdateLaserPoint ( );
	bool NotifyTeamChanged ( );
	bool InitThirdPersonMesh ( );
	bool InitFirstPersonMesh ( );
	bool OwnerChangeViewMode ( int Param );
	bool DetachFromWeapon ( );
	bool AttachToWeapon ( );
	bool PostDeactivePart ( int Param1 );
	bool PreActivePart ( );
	void UpdateParticleLength ( );
};

UClass* UCombatWeaponRISBase_LaserPoint::pClassPointer = NULL;

// Class CombatGame.CBGameReplicationInfo
// 0x00A4 (0x02C4 - 0x0220)
class ACBGameReplicationInfo : public AGameReplicationInfo
{
public:
	struct FName                                       InitGameStatus;                                   		// 0x0220 (0x0008) [0x0000000000000020]              ( CPF_Net )
	int                                                CountDownTime;                                    		// 0x0228 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                LastCountDownTime;                                		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                GoalRound;                                        		// 0x0230 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                GoalMission;                                      		// 0x0234 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CurrentRound;                                     		// 0x0238 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ModeID;                                           		// 0x023C (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      RankSystemID;                                     		// 0x0240 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      SpawnGroupIndex;                                  		// 0x0241 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      BindRegion;                                       		// 0x0242 (0x0001) [0x0000000000000020]              ( CPF_Net )
	class ACombatPlayerControllerBase*                 PCOwner;                                          		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsSuddenDeath : 1;                               		// 0x0248 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      UseRigidBodyForInformation : 1;                   		// 0x0248 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsChampionship : 1;                              		// 0x0248 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bUseParachuteRespawn : 1;                         		// 0x0248 (0x0004) [0x0000000000002020] [0x00000008] ( CPF_Net | CPF_Transient )
	unsigned long                                      bSkipSkillLicense : 1;                            		// 0x0248 (0x0004) [0x0000000000002020] [0x00000010] ( CPF_Net | CPF_Transient )
	unsigned long                                      bSupportPickUpItem : 1;                           		// 0x0248 (0x0004) [0x0000000000000000] [0x00000020] 
	TArray< class ACombatProj_Decoy* >                 DecoyActors;                                      		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UCombatInGameResourcePool*                   ResourcePool;                                     		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      CombatGameClass;                                  		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FMissionActorInfo                           TeamMissionActor[ 0x2 ];                          		// 0x0260 (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FMissionActorInfo                           NeutralMissionActor;                              		// 0x0278 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ACombatPlayerReplicationInfo* >      PlayerPRIArray;                                   		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UCombatChampionshipManager*                  ChampionshipManager;                              		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCombatStaticMeshManager*                    CombatSMManager;                                  		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       CurrentGameClassShortName;                        		// 0x0298 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class AGamePlayEvent_Kill*                         GamePlayKillEvent;                                		// 0x02A0 (0x0004) [0x0000000000000000]              
	class UGamePlayEvent_Action*                       GamePlayActionEvent;                              		// 0x02A4 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            PickupItemActors;                                 		// 0x02A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TotalPickupItemsCount;                            		// 0x02B4 (0x0004) [0x0000000000000000]              
	int                                                SeqAct_CombatDelayTime;                           		// 0x02B8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                CompetitiveWarmingUpReamainTime;                  		// 0x02BC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                SurrendCanRound;                                  		// 0x02C0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1997 ];

		return pClassPointer;
	};

	void GetSyncedElapsedTime ( );
	bool TriggerInGameClientEvent ( class AActor* InInstigator, struct FName EventName, unsigned char TeamIndex, int ActivateIndex );
	void RemovePRI ( class APlayerReplicationInfo* PRI );
	void RemovePlayerPRI ( class APlayerReplicationInfo* PRI );
	void AddPlayerPRI ( class APlayerReplicationInfo* PRI );
	bool IsRealPlayer ( class APlayerReplicationInfo* PRI );
	bool CanUseClassSystem ( );
	int GetClassSelectCondition ( );
	float GetRespawnDelay ( class AController* TargetPC );
	void SetRankSystemID ( unsigned char Value );
	bool eventGetRankSystemID ( unsigned char* InRankSysID );
	bool IsTeamGame ( );
	bool eventIsMatchPointRoundForNative ( );
	bool IsMatchPointRound ( );
	void SetStopCountDown ( unsigned long bStop );
	bool IsClientReady2ChangeHUDState ( );
	void Check ( );
	unsigned char GetSpawnGroupIndex ( );
	void SetSpawnGroupIndex ( unsigned char NewSpawnGroupIndex );
	void ChangeHUDState ( struct FName NewHUDState );
	void ChangeState ( struct FName NewState );
	bool IsPlayingGameState ( );
	bool eventIsWarmupState ( );
	void eventCheckGlobalCoolTime ( );
	void eventTimer ( );
	bool UpdateModeInfo ( );
	void eventReplicatedEvent ( struct FName VarName );
	void NotifyRoundOver ( );
	bool IsCanSurrend ( int TeamID );
	class ACBTeamInfo* GetTeam ( int Index );
	void Reset ( );
	void eventDestroyed ( );
	void RemoveDeocyActor ( class ACombatProj_Decoy* DecoyActor );
	void AddDecoyActor ( class ACombatProj_Decoy* DecoyActor );
	void eventPreBeginPlay ( );
	void CheckChampionshipSetting ( struct FName SettingLabel, class APlayerReplicationInfo* PRI );
	void ProcessTakeDamage ( struct FTakeDamageData SavedTakeDamageData );
	class UCombatStaticMeshManager* GetCombatSMManager ( );
	void InitCombatSMManager ( );
	void eventPostBeginPlay ( );
	void ReceivedGameClass ( );
	bool CanBeBaseForPawn ( );
	bool IsSupportsRespawn ( );
	class ATeamInfo* GetTeamInfo ( unsigned char TeamNum );
	void UpdatePickupLocatorActors ( );
	void CleanUpIndicatedPickupItems ( );
	void RemovePickupItemInfo ( class AActor* _Actor );
	void AddPickupItemInfo ( class AActor* _Actor, unsigned long bUpdate );
	bool IsSupportPickUpItem ( );
	void InitPickUpItemActor ( );
	void InitMissionActor ( );
	void SortMissionActor ( );
	int SortMissionActorByPriority ( class AActor* A, class AActor* B );
	void RemoveMissionActor ( class AActor* RemoveActor );
	bool AddMissionActor ( class AActor* NewActor );
	void eventGetAllMissionActors ( unsigned char TeamIndex, unsigned long bIncludeNeutralTeam, TArray< class AActor* >* ActorList );
	class AActor* GetMissionActor ( int ObjectIndex, unsigned char TeamIndex );
	int GetMissionActorNum ( unsigned char TeamIndex );
	int GetTotalMissionActorNum ( );
	class ACombatTrigger_Bomb* GetBomb ( int Idx );
	class ACombatBombsiteVolume* GetBombSite ( int Idx );
	class UCombatInGameResourcePool* GetResourcePool ( );
	class ACombatPlayerControllerBase* GetCachedLocalPC ( );
	void eventUpdateSeqActDelayTime ( int Time );
};

UClass* ACBGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatAIGameReplicationInfo
// 0x0074 (0x0338 - 0x02C4)
class ACombatAIGameReplicationInfo : public ACBGameReplicationInfo
{
public:
	class ACombatBarricade*                            MissionActor;                                     		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                WaveCount;                                        		// 0x02C8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                WaveStartTime;                                    		// 0x02CC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PlayTime;                                         		// 0x02D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CurrentWaveRemainBotCount;                        		// 0x02D4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FSAimRocket                                 RepAimRocket;                                     		// 0x02D8 (0x003C) [0x0000000000000020]              ( CPF_Net )
	TArray< class USeqAct_ProjAttack* >                SeqAct_ProjAttackArray;                           		// 0x0314 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bInitProjAttackSequence : 1;                      		// 0x0320 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      RewardRank;                                       		// 0x0324 (0x0001) [0x0000000000000020]              ( CPF_Net )
	int                                                ValidComboTime;                                   		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UCombatDataTableRefKillCombo* >      ComboList;                                        		// 0x032C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1998 ];

		return pClassPointer;
	};

	void Recv_AimRocket ( );
	void Send_AimRocket ( class USeqAct_ProjAttack* inSeqAct );
	bool UpdateModeInfo ( );
	class ACombatBarricade* eventGetDefenseObject ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* ACombatAIGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatCTFGameReplicationInfo
// 0x0000 (0x02C4 - 0x02C4)
class ACombatCTFGameReplicationInfo : public ACBGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1999 ];

		return pClassPointer;
	};

};

UClass* ACombatCTFGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatDemGameReplicationInfo
// 0x0022 (0x02E6 - 0x02C4)
class ACombatDemGameReplicationInfo : public ACBGameReplicationInfo
{
public:
	TArray< class ACombatBombsiteVolume* >             Bombsites;                                        		// 0x02C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ACombatTrigger_Bomb* >               Bombs;                                            		// 0x02D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TotalBombsites;                                   		// 0x02DC (0x0004) [0x0000000000000000]              
	int                                                TotalBombs;                                       		// 0x02E0 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x02E4 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatDemGameReplicationInfo.PlantedBombSettingTime

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2000 ];

		return pClassPointer;
	};

	void NotifyRoundOver ( );
	void GetBombLocation ( TArray< struct FVector >* BombLocations );
	void GetBombsiteLocation ( TArray< struct FVector >* BombsiteLocations );
	void eventPostBeginPlay ( );
	void eventDestroyed ( );
	void Reset ( );
	void RemoveBomb ( class ACombatTrigger_Bomb* RemoveBomb );
	bool FindBomb ( int BombID, class ACombatTrigger_Bomb** GetBomb );
	void AddBomb ( class ACombatTrigger_Bomb* newBomb );
	void CleanUpBombsites ( );
	void RemoveBombSite ( class ACombatBombsiteVolume* Site );
	void AddBombsite ( class ACombatBombsiteVolume* Site );
	class ACombatTrigger_Bomb* GetBomb ( int Idx );
	class ACombatBombsiteVolume* GetBombSite ( int Idx );
};

UClass* ACombatDemGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatRSCGameReplicationInfo
// 0x0005 (0x02C9 - 0x02C4)
class ACombatRSCGameReplicationInfo : public ACBGameReplicationInfo
{
public:
	class ACombatHostageActor*                         HostageActor;                                     		// 0x02C4 (0x0004) [0x0000000000000000]              
	unsigned char                                      CurrentScene;                                     		// 0x02C8 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2001 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	bool IsLastScene ( );
	void SetCurrentScene ( unsigned char NewScene );
	void Reset ( );
	void eventPostBeginPlay ( );
};

UClass* ACombatRSCGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatSEIGameReplicationInfo
// 0x0010 (0x02D4 - 0x02C4)
class ACombatSEIGameReplicationInfo : public ACBGameReplicationInfo
{
public:
	TArray< class ACombatOccupiedAreaVolume* >         OccupiedAreas;                                    		// 0x02C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                TotalOccupiedAreaNum;                             		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2002 ];

		return pClassPointer;
	};

	void AddOccupiedAreaVolume ( class ACombatOccupiedAreaVolume* AreaVolume );
	bool FindOccupiedAreaVolume ( int AreaID, class ACombatOccupiedAreaVolume** FoundVol );
	void NotifyDeadOccupiedPawn ( int AreaID, class APawn* OccupiedPawn );
	void eventPostBeginPlay ( );
};

UClass* ACombatSEIGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CBTeamInfo
// 0x00A0 (0x0290 - 0x01F0)
class ACBTeamInfo : public ATeamInfo
{
public:
	TArray< class AController* >                       TeamMembers;                                      		// 0x01F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x01FC (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CBTeamInfo.Kills
	unsigned char                                      UnknownData01[ 0x2 ];                             		// 0x01FE (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CBTeamInfo.AssistCount
	unsigned char                                      UnknownData02[ 0x2 ];                             		// 0x0200 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CBTeamInfo.DeathCount
	unsigned char                                      WinRounds;                                        		// 0x0202 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      AliveMemberCount;                                 		// 0x0203 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      SkillGlobalCooltime[ 0x10 ];                      		// 0x0204 (0x0010) [0x0000000000000000]              
	unsigned char                                      RepNotifyActiveSkilltime;                         		// 0x0214 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bWasPlayerInRoundStart : 1;                       		// 0x0218 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsActiveSkillCooltime : 1;                       		// 0x0218 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bActiveTimer : 1;                                 		// 0x0218 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUseClassSystem : 1;                              		// 0x0218 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIsSetGlobalSkill : 1;                            		// 0x0218 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned char                                      UnknownData03[ 0x2 ];                             		// 0x021C (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CBTeamInfo.CurrentMissionCount
	int                                                SkillOwnerplayerID;                               		// 0x0220 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      UnknownData04[ 0x20 ];                            		// 0x0224 (0x0020) UNKNOWN PROPERTY: WordProperty CombatGame.CBTeamInfo.CurrentSkillGlobalCooltime
	float                                              CoolCheckTime;                                    		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MissionScore;                                     		// 0x0248 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                OriginalTeamIndex;                                		// 0x024C (0x0004) [0x0000000000000000]              
	class ACombatPC*                                   LastUser;                                         		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ClanMatch_MainClanID;                             		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ClanMatch_ModeID;                                 		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SurrendRemainTime;                                		// 0x025C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                SurrendCoolTime;                                  		// 0x0260 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                SurrendStartUserCount;                            		// 0x0264 (0x0004) [0x0000000000000000]              
	struct FSurrendInfo                                SurrendInfoArray[ 0x5 ];                          		// 0x0268 (0x0028) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2003 ];

		return pClassPointer;
	};

	void AddBounsTargetMemeber ( struct FName EventName );
	int GetMainClanMemberCount ( );
	bool IsMainClanMember ( class ACombatPlayerReplicationInfo* PRI );
	int GetRoundPointForUI ( unsigned char roundPointType );
	int GetSpecialScore ( );
	void InitScoreCount ( unsigned char FlagSpawnID );
	void AddMissionScore ( float IncreasedScore );
	void AddScore ( float IncreasedScore );
	bool IsMemberAllDead ( );
	int eventGetValue ( unsigned char condition );
	void IncrementMissionCount ( );
	int GetSuccessedMission ( );
	bool IsMatchPoint ( );
	void IncrementDeathCount ( );
	void IncrementAssistCount ( );
	void IncrementKills ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventDestroyed ( );
	bool BotNameTaken ( struct FString BotName );
	void SetBotOrders ( class ACBBot* NewBot );
	void Initialize ( int NewTeamIndex );
	bool AllBotsSpawned ( );
	void SettingGlobalCoolTime ( );
	void CheckGlobalCoolTime ( );
	void UpdateGlobalSkill ( );
	void eventTimer ( );
	bool CanUseGlobalSkill ( unsigned char GetType, unsigned char SkillCategory );
	void NotifyGlobalActiveSkilltime ( );
	void SetGlobalCooltime ( class ACombatPC* OwerPC, unsigned char GetType, unsigned char SkillCategory, unsigned char SetCoolTime );
	void Reset ( );
	int GetPlayerCount ( );
	void RemoveFromTeam ( class AController* Other );
	bool AddToTeam ( class AController* Other );
	void PostBeginPlay ( );
};

UClass* ACBTeamInfo::pClassPointer = NULL;

// Class CombatGame.CombatBusterTeamInfo
// 0x0000 (0x0290 - 0x0290)
class ACombatBusterTeamInfo : public ACBTeamInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2004 ];

		return pClassPointer;
	};

};

UClass* ACombatBusterTeamInfo::pClassPointer = NULL;

// Class CombatGame.CombatLCTFTeamInfo
// 0x0000 (0x0290 - 0x0290)
class ACombatLCTFTeamInfo : public ACBTeamInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2005 ];

		return pClassPointer;
	};

};

UClass* ACombatLCTFTeamInfo::pClassPointer = NULL;

// Class CombatGame.CombatSEIModeTeamInfo
// 0x0004 (0x0294 - 0x0290)
class ACombatSEIModeTeamInfo : public ACBTeamInfo
{
public:
	unsigned long                                      bFirstOccupation : 1;                             		// 0x0290 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2006 ];

		return pClassPointer;
	};

	int GetValue ( unsigned char condition );
	int GetOccupationScoreInNotOccupationZone ( );
};

UClass* ACombatSEIModeTeamInfo::pClassPointer = NULL;

// Class CombatGame.CombatPlayerReplicationInfoBase
// 0x0070 (0x02F8 - 0x0288)
class ACombatPlayerReplicationInfoBase : public APlayerReplicationInfo
{
public:
	class ACombatPawn*                                 CachedPawn;                                       		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatPlayerReplicationInfoBase*            KillerForOutline;                                 		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsLive : 1;                                      		// 0x0290 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bClientExposedByLocalPlayer : 1;                  		// 0x0290 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bClientExposedByUAV : 1;                          		// 0x0290 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FBasePlayerStateForHUDInfo                  BasePlayerStateForHUDList[ 0x5 ];                 		// 0x0294 (0x003C) [0x0000000000000000]              
	struct FCurrentPlayerStateForHUDInfo               CurrentHUDPlayerStateList[ 0x5 ];                 		// 0x02D0 (0x0028) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2007 ];

		return pClassPointer;
	};

	void OnSetSteamID ( );
	void DropCTFFlag ( struct FVector StartLocation );
	bool IsHaveCTFFlag ( );
	unsigned char GetTeamNum ( );
	void IncrementDefusedCount ( );
	void IncrementPlantedCount ( );
	void SetBomb ( unsigned long bNewFlag );
	bool eventHasBomb ( );
	void UpdateObserverWeaponInfo ( );
	void UpdateLocalPlayerTeamReceived ( );
	void UpdatePreloadTexture ( );
	void ClientInitialize ( class AController* C );
	bool IsInPlayerStateForHUD ( unsigned char wantedState );
	void UpdatePlayerHUDState ( );
	void NotifyPlayingState ( unsigned char NewState );
	float GetPlayerStateForHUD_Duration ( int PlayerState );
	void ResetExposedByLocalPlayer ( );
	void ResetPlayerHUDState ( );
	void ReleasePawn ( class ACombatPawn* Pawn );
	void InitPawn ( class ACombatPawn* Pawn );
	void SetWaitingPlayer ( unsigned long B );
	void ClientReset ( );
	void Reset ( );
	void PostBeginPlay ( );
	void eventSetKillerOutline ( unsigned long bFlag );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ACombatPlayerReplicationInfoBase::pClassPointer = NULL;

// Class CombatGame.CombatBotReplicationInfo
// 0x0010 (0x0308 - 0x02F8)
class ACombatBotReplicationInfo : public ACombatPlayerReplicationInfoBase
{
public:
	int                                                SpawnerID;                                        		// 0x02F8 (0x0004) [0x0000000000000000]              
	int                                                Cost;                                             		// 0x02FC (0x0004) [0x0000000000000000]              
	int                                                BotGroupID;                                       		// 0x0300 (0x0004) [0x0000000000000000]              
	int                                                BotID;                                            		// 0x0304 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2008 ];

		return pClassPointer;
	};

};

UClass* ACombatBotReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatPlayerReplicationInfo
// 0x0124 (0x041C - 0x02F8)
class ACombatPlayerReplicationInfo : public ACombatPlayerReplicationInfoBase
{
public:
	float                                              InGameCR;                                         		// 0x02F8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              TotalGameCR;                                      		// 0x02FC (0x0004) [0x0000000000000000]              
	unsigned long                                      bChangedCR : 1;                                   		// 0x0300 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAllSkillReady : 1;                               		// 0x0300 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsLastman : 1;                                   		// 0x0300 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bSkillTest : 1;                                   		// 0x0300 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bDelayApplySkill : 1;                             		// 0x0300 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDelayApplyCooltime : 1;                          		// 0x0300 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bChangedSkillOption : 1;                          		// 0x0300 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bActiveUAV : 1;                                   		// 0x0300 (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      bSelectedMilitaryClass : 1;                       		// 0x0300 (0x0004) [0x0000000000002020] [0x00000100] ( CPF_Net | CPF_Transient )
	unsigned long                                      bClientReadyToPlay : 1;                           		// 0x0300 (0x0004) [0x0000000000000020] [0x00000200] ( CPF_Net )
	unsigned long                                      bNeedLoadGameKillCount : 1;                       		// 0x0300 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bBestScorePlayer : 1;                             		// 0x0300 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bBestKillPlayer : 1;                              		// 0x0300 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bBestAssistPlayer : 1;                            		// 0x0300 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bBestModeScorePlayer : 1;                         		// 0x0300 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bChampionshipSettingDone : 1;                     		// 0x0300 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bEnableChaFXItem : 1;                             		// 0x0300 (0x0004) [0x0000000000000020] [0x00010000] ( CPF_Net )
	unsigned long                                      bSessionConnected : 1;                            		// 0x0300 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0304 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatPlayerReplicationInfo.AccumulatedAssist
	int                                                pendingAssistCount;                               		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData01[ 0x2 ];                             		// 0x030C (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatPlayerReplicationInfo.ScoreKills
	unsigned char                                      UnknownData02[ 0x2 ];                             		// 0x030E (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatPlayerReplicationInfo.SuicideCount
	unsigned char                                      UnknownData03[ 0x2 ];                             		// 0x0310 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatPlayerReplicationInfo.HeadShotCount
	class UCombatRewardDataBase*                       RewardData;                                       		// 0x0314 (0x0004) [0x0000000000000000]              
	int                                                LastKillTime;                                     		// 0x0318 (0x0004) [0x0000000000000000]              
	int                                                RespawnCount;                                     		// 0x031C (0x0004) [0x0000000000000000]              
	unsigned char                                      Rank;                                             		// 0x0320 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      SavedActiveSkillOption[ 0x4 ];                    		// 0x0321 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      bRepNotifySavedSkillOption;                       		// 0x0325 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      RepNotifyApplyInstanceItem;                       		// 0x0326 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      RepNotifyAcceptSkillList;                         		// 0x0327 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      RepNotifyCoolTime;                                		// 0x0328 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NotifySkillReset;                                 		// 0x0329 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      MilitaryClass;                                    		// 0x032A (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      SortOrder;                                        		// 0x032B (0x0001) [0x0000000000000000]              
	unsigned char                                      ChampionshipIndex;                                		// 0x032C (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      AccountGrade;                                     		// 0x032D (0x0001) [0x0000000000000000]              
	unsigned char                                      WinRounds;                                        		// 0x032E (0x0001) [0x0000000000000000]              
	unsigned char                                      LoseRounds;                                       		// 0x032F (0x0001) [0x0000000000000000]              
	unsigned char                                      ActionAchievement[ 0xA ];                         		// 0x0330 (0x000A) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      ActionAchievement_StartIndex;                     		// 0x033A (0x0001) [0x0000000000000000]              
	unsigned char                                      ActionAchievement_EndIndex;                       		// 0x033B (0x0001) [0x0000000000000020]              ( CPF_Net )
	float                                              RankExp;                                          		// 0x033C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     RankName;                                         		// 0x0340 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RankBigIconName;                                  		// 0x034C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RankSmallIconName;                                		// 0x0358 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RankBigIconImageID;                               		// 0x0364 (0x0004) [0x0000000000000000]              
	int                                                RankSmallIconImageID;                             		// 0x0368 (0x0004) [0x0000000000000000]              
	struct FString                                     OldRankBigIconName;                               		// 0x036C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                OldRankBigIconImageID;                            		// 0x0378 (0x0004) [0x0000000000000000]              
	class UCombatClassSystem*                          CombatClassSystem;                                		// 0x037C (0x0004) [0x0000000000000000]              
	class UCombatSkillManager*                         SkillManager;                                     		// 0x0380 (0x0004) [0x0000000000000000]              
	class UCombatInstanceItemManager*                  InstanceItemManager;                              		// 0x0384 (0x0004) [0x0000000000000000]              
	struct FString                                     SkillManagerClassName;                            		// 0x0388 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      InstanceItems[ 0x4 ];                             		// 0x0394 (0x0010) [0x0000000000000020]              ( CPF_Net )
	int                                                AcceptSkillItemIndexList[ 0x10 ];                 		// 0x03A4 (0x0040) [0x0000000000000020]              ( CPF_Net )
	int                                                RepNotifyPassiveSkillIndex;                       		// 0x03E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     SkillCoolTimeCodeName;                            		// 0x03E8 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	TArray< struct FString >                           CharClassInfoData;                                		// 0x03F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      CurrCharClassInfo;                                		// 0x0400 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                ChaFXUpperItemID;                                 		// 0x0404 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ChaFXFootItemID;                                  		// 0x0408 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                RepC4TimeReduceItemID;                            		// 0x040C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      C4TimeReduceItemClass;                            		// 0x0410 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ClanID;                                           		// 0x0414 (0x0004) [0x0000000000000000]              
	int                                                PingWarnningCount;                                		// 0x0418 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2009 ];

		return pClassPointer;
	};

	void SelectedMilitaryClass ( );
	void OnSurrendChangeTeam ( unsigned char NewTeam );
	void GameSurrenderResult ( unsigned long surrend );
	void GameSurrendReplyUpdate ( int Index, int Type );
	void GameSurrenderReply ( unsigned long surrend );
	void GameSurrenderFailed ( );
	void GameSurrender ( struct FString UserName, int StartMemberCount, unsigned long showChatting, unsigned long Canvote );
	void GameSurrenderRequest ( );
	void eventNotifyCurrentGameKillCount ( int Id, int Count );
	void eventPushActionAchievementMsg ( int RegisteredActionArrayIndex );
	void DropCTFFlag ( struct FVector StartLocation );
	bool IsHaveCTFFlag ( );
	void SetPlayerTeam ( class ATeamInfo* NewTeam );
	void SetCharClassInfoData ( TArray< struct FString > InCharClassInfoData );
	void SaveLastKillTime ( );
	int GetSpecialScore ( );
	void eventIncrementAssists ( );
	void TestLoadC4TimeReduceItem ( );
	bool GetRefItem ( int inItemIndex, class UCombatDataTableRefItem** outRefItem );
	void LoadC4TimeReduceItem ( );
	void RecvC4TimeReduceItemIDFromLobby ( int InC4TimeReduceItemID );
	void ServerToggleChaFXItem ( );
	void UpdateChaFXItem ( );
	void LoadChaFXFootItem ( );
	void LoadChaFXUpperItem ( );
	void RecvChaFXItemInfoFromLobby ( int _ChaFXUpperItemID, int _ChaFXFootItemID );
	class UCombatSkill* NotifyCreateSkill ( struct FString CodeName, unsigned long bTest );
	void NotifySetTestMode ( unsigned long bTest );
	void NotifyRemoveAllSkill ( );
	void ServerStartUseSkill ( unsigned char SkillGroupNum );
	void ServerBuySkill ( unsigned char SkillGroupNum );
	void ServerUnlockClass ( unsigned char selectedClass );
	void NotifySelectedMilitaryClass ( unsigned char SelectedMilitaryClass );
	void NotifyRankUp ( int newRank, int PrevRank );
	void eventAddRankExp ( float Exp );
	void AddMissionScore ( struct FName EventName, float IncreasedScore );
	void AddScore ( float IncreasedScore );
	void ForcedSelecetedPosition ( );
	void ForcedSelecetPosition ( );
	void AddAcceptSkillList ( );
	void NotifySkillItemIndex ( TArray< int > SkillItemIndex );
	void NotifyGearSetItem ( );
	void EmptyGearSetItem ( int prestindex );
	void CreateGearSetItemIndex ( int prestindex, int SetGearSetItemIndex );
	void CreateGearSet ( int prestindex, unsigned char SetGearSet );
	void NotifySetCooltime ( struct FString SkillCodeName );
	void NotifyChangeSkillGroupNum ( );
	void NotifyChangedSkillOption ( );
	void ClientChampionshipPlayer ( );
	void UpdateActionAchievement ( );
	void CheckInGameSteamAchivements ( );
	void IncreaseHeadShotCount ( );
	void IncreaseSuicideCount ( );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsChampionshipObserver ( );
	bool IsChampionshipTarget ( struct FName Target );
	bool IsChampionshipPlayer ( );
	bool UpdateRankSmallIconName ( );
	bool UpdateRankBigIconName ( );
	struct FString GetRankCodeName ( );
	bool UpdateRankName ( );
	float GetRankExp ( );
	int GetRank ( );
	int GetRankSmallIconImageID ( );
	int GetRankBigIconImageID ( );
	struct FString GetRankSmallIconName ( );
	struct FString GetRankBigIconName ( );
	struct FString GetRankName ( );
	void CopyProperties ( class APlayerReplicationInfo* PRI );
	void OverrideWith ( class APlayerReplicationInfo* PRI );
	void IncrementKills ( );
	void IncrementDeaths ( );
	bool CanChangeCR ( float CRValue );
	void NotifyChangedCR ( );
	void eventChangeCR ( float AddedCR );
	class ACombatPlayerReplicationInfo* GetPRIFromPlayerName ( struct FString SearchName );
	class ACombatPlayerReplicationInfo* GetPRIFromPlayerId ( int searchID );
	bool CheckValidUserID ( int Uid );
	void eventTick ( float DeltaTime );
	class UCombatInstanceItemManager* GetInstanceItemManager ( );
	void CreateClassSystem ( );
	void CreateRewardData ( );
	void UpdatePreloadTexture ( );
	void eventDestroyed ( );
	void InitPawn ( class ACombatPawn* Pawn );
	void CheckRepPRI ( );
	void eventPostBeginPlay ( );
};

UClass* ACombatPlayerReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatAIModePRI
// 0x0014 (0x0430 - 0x041C)
class ACombatAIModePRI : public ACombatPlayerReplicationInfo
{
public:
	int                                                LifeCount;                                        		// 0x041C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                MaxLifeCount;                                     		// 0x0420 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bGiveRewardLife : 1;                              		// 0x0424 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                ConsecutiveCombo;                                 		// 0x0428 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentStep;                                      		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2010 ];

		return pClassPointer;
	};

	void SelectedMilitaryClass ( );
	void ClientForceGarbageCollection ( );
	void OnWaveEnd ( );
	void SetPauseComboTimer ( unsigned long bPause );
	void SetInvalidComboTimer ( unsigned long bForceHide );
	void UpdateKillCombo ( );
	void IncrementKills ( );
	bool DecrementLifeCount ( );
	bool IncrementLifeCount ( );
	bool HasLifeCount ( );
};

UClass* ACombatAIModePRI::pClassPointer = NULL;

// Class CombatGame.CombatBusterModePRI
// 0x0004 (0x0420 - 0x041C)
class ACombatBusterModePRI : public ACombatPlayerReplicationInfo
{
public:
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x041C (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatBusterModePRI.BusterDamage
	unsigned char                                      UnknownData01[ 0x2 ];                             		// 0x041E (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatBusterModePRI.LastBusterDamage

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2011 ];

		return pClassPointer;
	};

	int GetSpecialScore ( );
	void DisplayScore ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	void AddMissionScore ( struct FName EventName, float IncreasedScore );
	void Reset ( );
};

UClass* ACombatBusterModePRI::pClassPointer = NULL;

// Class CombatGame.CombatDemModePRI
// 0x000C (0x0428 - 0x041C)
class ACombatDemModePRI : public ACombatPlayerReplicationInfo
{
public:
	unsigned long                                      bHasBomb : 1;                                     		// 0x041C (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	int                                                BombPlantedCount;                                 		// 0x0420 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                BombDefusedCount;                                 		// 0x0424 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2012 ];

		return pClassPointer;
	};

	int GetSpecialScore ( );
	void IncrementDefusedCount ( );
	void IncrementPlantedCount ( );
	void SetBomb ( unsigned long bNewFlag );
	bool eventHasBomb ( );
	void CheckSteamDefuseAchivement ( );
	void eventReplicatedEvent ( struct FName VarName );
	void Reset ( );
	void CopyProperties ( class APlayerReplicationInfo* PRI );
};

UClass* ACombatDemModePRI::pClassPointer = NULL;

// Class CombatGame.CombatLCTFModePRI
// 0x001A (0x0436 - 0x041C)
class ACombatLCTFModePRI : public ACombatPlayerReplicationInfo
{
public:
	class ACombatLCTFFlagActor*                        CTFFlag;                                          		// 0x041C (0x0004) [0x0000000000000000]              
	int                                                TakeCount;                                        		// 0x0420 (0x0004) [0x0000000000000000]              
	TArray< struct FLimitAddScoreCountStruct >         AddScoreCountList;                                		// 0x0424 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bHaveCTFFlag : 1;                                 		// 0x0430 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bFirstExtortion : 1;                              		// 0x0430 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x0434 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatLCTFModePRI.TotalCTFScore

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2013 ];

		return pClassPointer;
	};

	int GetSpecialScore ( );
	void AddMissionScore ( struct FName EventName, float IncreasedScore );
	void DisplayScore ( struct FName VarName, unsigned long bOwner );
	void eventDisplayFirstExtortion ( );
	void InitTakeCount ( );
	void DropCTFFlag ( struct FVector StartLocation );
	void ReturnToHomeCTFFlag ( );
	bool IsHaveCTFFlag ( );
	bool IsFirstExtortion ( );
	void SetHaveCTFFlag ( class ACombatLCTFFlagActor* setCTFFlag );
	void AddScoreCount ( unsigned char FlagSpawnID );
	bool IsAddScore ( unsigned char FlagSpawnID );
	void ResetScoreCount ( unsigned char FlagSpawnID );
	void Reset ( );
};

UClass* ACombatLCTFModePRI::pClassPointer = NULL;

// Class CombatGame.CombatSEIModePRI
// 0x0008 (0x0424 - 0x041C)
class ACombatSEIModePRI : public ACombatPlayerReplicationInfo
{
public:
	int                                                OccupyingAreaID;                                  		// 0x041C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                OccupationScore;                                  		// 0x0420 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2014 ];

		return pClassPointer;
	};

	int GetSpecialScore ( );
	void AddMissionScore ( struct FName EventName, float IncreasedScore );
	void AddScore ( float IncreasedScore );
	void Reset ( );
};

UClass* ACombatSEIModePRI::pClassPointer = NULL;

// Class CombatGame.CombatTDMMeleeModePRI
// 0x0004 (0x0420 - 0x041C)
class ACombatTDMMeleeModePRI : public ACombatPlayerReplicationInfo
{
public:
	unsigned long                                      bHasSpecialWeapon : 1;                            		// 0x041C (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bLastHasSpecialWeapon : 1;                        		// 0x041C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2015 ];

		return pClassPointer;
	};

	void InitPawn ( class ACombatPawn* Pawn );
	bool eventHasSpecialWeapon ( );
	void SetSpecialWeapon ( unsigned long bNewFlag );
	void eventReplicatedEvent ( struct FName VarName );
	void Reset ( );
};

UClass* ACombatTDMMeleeModePRI::pClassPointer = NULL;

// Class CombatGame.CombatTeamOwnedInfo
// 0x0004 (0x01D8 - 0x01D4)
class ACombatTeamOwnedInfo : public AReplicationInfo
{
public:
	class ATeamInfo*                                   Team;                                             		// 0x01D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2016 ];

		return pClassPointer;
	};

	unsigned char GetTeamNum ( );
};

UClass* ACombatTeamOwnedInfo::pClassPointer = NULL;

// Class CombatGame.CombatSquadAI
// 0x0034 (0x020C - 0x01D8)
class ACombatSquadAI : public ACombatTeamOwnedInfo
{
public:
	class ANavigationPoint*                            RouteObjective;                                   		// 0x01D8 (0x0004) [0x0000000000000000]              
	TArray< class ANavigationPoint* >                  ObjectiveRouteCache;                              		// 0x01DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ANavigationPoint* >                  PreviousObjectiveRouteCache;                      		// 0x01E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ACombatBot*                                  PendingSquadRouteMaker;                           		// 0x01F4 (0x0004) [0x0000000000000000]              
	int                                                SquadRouteIteration;                              		// 0x01F8 (0x0004) [0x0000000000000000]              
	TArray< struct FAlternateRoute >                   SquadRoutes;                                      		// 0x01FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MaxSquadRoutes;                                   		// 0x0208 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2017 ];

		return pClassPointer;
	};

};

UClass* ACombatSquadAI::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatMovementOnlyNode
// 0x0004 (0x0090 - 0x008C)
class UCCSBTCombatMovementOnlyNode : public UGripBTBooleanCondition
{
public:
	unsigned long                                      bClearEnemy : 1;                                  		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2018 ];

		return pClassPointer;
	};

};

UClass* UCCSBTCombatMovementOnlyNode::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatTargetExistence
// 0x0005 (0x0091 - 0x008C)
class UCCSBTCombatTargetExistence : public UGripBTBooleanCondition
{
public:
	unsigned long                                      CurrentTarget : 1;                                		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ClosestEnemy : 1;                                 		// 0x008C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      VisibleEnemy : 1;                                 		// 0x008C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      LowestLKPAgeEnemy : 1;                            		// 0x008C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      EnemyAware : 1;                                   		// 0x008C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      CheckMethod;                                      		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2019 ];

		return pClassPointer;
	};

};

UClass* UCCSBTCombatTargetExistence::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatTargetLost
// 0x0000 (0x0088 - 0x0088)
class UCCSBTCombatTargetLost : public UGripBTNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2020 ];

		return pClassPointer;
	};

};

UClass* UCCSBTCombatTargetLost::pClassPointer = NULL;

// Class CombatGame.CCSBTActionWhileMoving
// 0x0007 (0x0096 - 0x008F)
class UCCSBTActionWhileMoving : public UCCSBTMoveTo
{
public:
	float                                              DelayBetweenBursts;                               		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Target;                                           		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Action;                                           		// 0x0095 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2021 ];

		return pClassPointer;
	};

};

UClass* UCCSBTActionWhileMoving::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatPatrol
// 0x0009 (0x0099 - 0x0090)
class UCCSBTCombatPatrol : public UCCSBTMoveToActor
{
public:
	float                                              TargetSelectionCycleTime;                         		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VisibleRange;                                     		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TargetSelectionAlgorithm;                         		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2022 ];

		return pClassPointer;
	};

};

UClass* UCCSBTCombatPatrol::pClassPointer = NULL;

// Class CombatGame.CombatAIManager
// 0x0050 (0x0228 - 0x01D8)
class ACombatAIManager : public AGripAIManagerHolder
{
public:
	TArray< struct FAITypeInfo >                       AITypeList;                                       		// 0x01D8 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultBotControllerClassName;                    		// 0x01E4 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bUseFlocking : 1;                                 		// 0x01F0 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	class UCombatFlocking*                             FlockingObj;                                      		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACombatGame*                                 GameInfo;                                         		// 0x01F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      DefaultBotControllerClass;                        		// 0x01FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           DebugCategoryList;                                		// 0x0200 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ACombatGuy_NPC*                              CurDebugTarget;                                   		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ACombatBotController* >              BotList;                                          		// 0x0210 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AAIBeacon* >                         AIBeaconArray;                                    		// 0x021C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2023 ];

		return pClassPointer;
	};

	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void RemoveDebugCategory ( struct FString inString );
	void AddDebugCategory ( struct FString inString );
	void ToggleDebugCategory ( struct FString inString );
	void NextDebugTarget ( );
	void PrevDebugTarget ( );
	void TraceDebugTarget ( class ACombatGuy_NPC* InTarget );
	void UnRegisterAI ( class ACombatBotController* inController );
	void RegisterAI ( class ACombatBotController* inController );
	void ForceNetRelevant ( );
	class AActor* SpawnBot ( int AIType, unsigned char TeamIndex, struct FString inPawnClassName, TArray< struct FString > inWeaponClassName, struct FVector* SpawnLocation, struct FRotator* SpawnRotation );
	class UCCSBTTree* GetBTTree ( int AIType );
	bool GetWeaponClass ( int AIType, TArray< class UClass* >* WeaponClassList );
	class UClass* GetControllerClass ( int AIType );
	class UClass* GetPawnClass ( int AIType );
	void ResetAIBeacons ( );
	void PostBeginPlay ( );
};

UClass* ACombatAIManager::pClassPointer = NULL;

// Class CombatGame.CombatPatrolPoint
// 0x0004 (0x0298 - 0x0294)
class ACombatPatrolPoint : public ANavigationPoint
{
public:
	int                                                Priority;                                         		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2024 ];

		return pClassPointer;
	};

};

UClass* ACombatPatrolPoint::pClassPointer = NULL;

// Class CombatGame.Path_AvoidActor
// 0x0004 (0x0048 - 0x0044)
class UPath_AvoidActor : public UPathConstraint
{
public:
	class AActor*                                      AvoidTarget;                                      		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2025 ];

		return pClassPointer;
	};

	bool AvoidActor ( class APawn* inPawn, class AActor* inAvoidTarget );
};

UClass* UPath_AvoidActor::pClassPointer = NULL;

// Class CombatGame.ParticleModuleKillVolume
// 0x0065 (0x00A9 - 0x0044)
class UParticleModuleKillVolume : public UParticleModuleKillBase
{
public:
	struct FString                                     VolumeName;                                       		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FRawDistributionVector                      LowerLeftCorner;                                  		// 0x0050 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      UpperRightCorner;                                 		// 0x006C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Height;                                           		// 0x0088 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bAbsolute : 1;                                    		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKillInside : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAxisAlignedAndFixedSize : 1;                     		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bFloor : 1;                                       		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bApplyPSysScale : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      KillVolumeType;                                   		// 0x00A8 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2026 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleKillVolume::pClassPointer = NULL;

// Class CombatGame.ParticleModuleRadialBlur
// 0x0060 (0x00E0 - 0x0080)
class UParticleModuleRadialBlur : public UParticleModuleLocationPrimitiveBase
{
public:
	class UMaterialInterface*                          OpacityMaterial;                                  		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       BlurScale;                                        		// 0x0084 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       BlurFalloffExponent;                              		// 0x00A0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       BlurOpacity;                                      		// 0x00BC (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              MaxCullDistance;                                  		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceFalloffExponent;                          		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2027 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleRadialBlur::pClassPointer = NULL;

// Class CombatGame.CombatSplineActor
// 0x0024 (0x0248 - 0x0224)
class ACombatSplineActor : public ASplineActor
{
public:
	unsigned long                                      bSpawnPoint : 1;                                  		// 0x0224 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bMovementOnly : 1;                                		// 0x0224 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFixedTrack : 1;                                  		// 0x0224 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSkipDestroy : 1;                                 		// 0x0224 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAddedSplineActorList : 1;                        		// 0x0224 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              MovementSpeedModifier;                            		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaitingPeriod;                                    		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DefaultPointColor;                                		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      WaitingPointColor;                                		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MovementPointColor;                               		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TeamIndex;                                        		// 0x023C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MovementSpeedType;                                		// 0x023D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SPawnActorType;                                   		// 0x023E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class USpriteComponent*                            SpriteComp;                                       		// 0x0240 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UDrawSphereComponent*                        SphereComp;                                       		// 0x0244 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2028 ];

		return pClassPointer;
	};

	unsigned char eventScriptGetTeamNum ( );
	class ACombatSplineActor* GetNearestSplineActor ( struct FVector TargetLocation, unsigned long bIncludeSpawnPoint );
	class ACombatSplineActor* GetSpawnSplineActor ( unsigned char InTeamIndex, unsigned char AIType, struct FVector PawnLoation );
	bool FindCirculationList ( TArray< class ACombatSplineActor* >* OutRoute );
	bool IsDisableDestination ( );
	void InitSplineActorList ( );
};

UClass* ACombatSplineActor::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatBusterActor
// 0x0000 (0x0078 - 0x0078)
class UActorFactoryCombatBusterActor : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41129 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatBusterActor::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatDestructibleSMActor
// 0x0000 (0x0078 - 0x0078)
class UActorFactoryCombatDestructibleSMActor : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41131 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatDestructibleSMActor::pClassPointer = NULL;

// Class CombatGame.CombatDestructibleSMActor
// 0x0016 (0x01F4 - 0x01DE)
class ACombatDestructibleSMActor : public ACombatStaticMeshActor
{
public:
	TArray< struct FMeshInfo >                         MeshInfoList;                                     		// 0x01E0 (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      CurrentMeshInfoIndex;                             		// 0x01EC (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentDamage;                                    		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41133 ];

		return pClassPointer;
	};

	void eventForceNetRelevant ( );
	void UpdateMesh ( );
	unsigned char GetMeshInfoIndex ( );
	void eventSetMeshInfo ( unsigned char NewIndex );
	void TakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void Reset ( );
};

UClass* ACombatDestructibleSMActor::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatGroupStart
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryCombatGroupStart : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41134 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatGroupStart::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatMapPoint
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryCombatMapPoint : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41136 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatMapPoint::pClassPointer = NULL;

// Class CombatGame.CombatMapPoint
// 0x0014 (0x01E8 - 0x01D4)
class ACombatMapPoint : public AActor
{
public:
	unsigned char                                      iconType;                                         		// 0x01D4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                DesStringID;                                      		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Priority;                                         		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MapPointName;                                     		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41138 ];

		return pClassPointer;
	};

	void eventForceNetRelevant ( );
};

UClass* ACombatMapPoint::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatSplineActor
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryCombatSplineActor : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41139 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatSplineActor::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatStaticMesh
// 0x0000 (0x0078 - 0x0078)
class UActorFactoryCombatStaticMesh : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41141 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatStaticMesh::pClassPointer = NULL;

// Class CombatGame.ActorFactoryCombatTeamStart
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryCombatTeamStart : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41143 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCombatTeamStart::pClassPointer = NULL;

// Class CombatGame.ActorFactorySplineActor
// 0x0000 (0x0068 - 0x0068)
class UActorFactorySplineActor : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41146 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySplineActor::pClassPointer = NULL;

// Class CombatGame.CombatOnlineMetaphors
// 0x0098 (0x00D4 - 0x003C)
class UCombatOnlineMetaphors : public UObject
{
public:
	float                                              BUFF_ADDMAINAMMO_MIN;                             		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_ADDMAINAMMO_MAX;                             		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_ADDSUBAMMO_MIN;                              		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_ADDSUBAMMO_MAX;                              		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_RELOADING_RATE_MIN;                          		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_RELOADING_RATE_MAX;                          		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_WEAPONCHANGE_RATE_MIN;                       		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_WEAPONCHANGE_RATE_MAX;                       		// 0x0058 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_MAXAUTOCUREHEALTH_MIN;                       		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_MAXAUTOCUREHEALTH_MAX;                       		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_HEALTHCURE_RATE_MIN;                         		// 0x0064 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_HEALTHCURE_RATE_MAX;                         		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_CROUCHSPEED_RATE_MIN;                        		// 0x006C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_CROUCHSPEED_RATE_MAX;                        		// 0x0070 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_FPSSPEED_RATE_MIN;                           		// 0x0074 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_FPSSPEED_RATE_MAX;                           		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_ACCELATION_RATE_MIN;                         		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_ACCELATION_RATE_MAX;                         		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_RUNSPEED_RATE_MIN;                           		// 0x0084 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_RUNSPEED_RATE_MAX;                           		// 0x0088 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_SPRINTSPEED_RATE_MIN;                        		// 0x008C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_SPRINTSPEED_RATE_MAX;                        		// 0x0090 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_DETAILEDRADAR_DISTANCE_MIN;                  		// 0x0094 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_DETAILEDRADAR_DISTANCE_MAX;                  		// 0x0098 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_RADAR_RANGE_MIN;                             		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_RADAR_RANGE_MAX;                             		// 0x00A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_GUNATTACK_RATE_MIN;                          		// 0x00A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_GUNATTACK_RATE_MAX;                          		// 0x00A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_GUNGUARD_RATE_MIN;                           		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_GUNGUARD_RATE_MAX;                           		// 0x00B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_MELEEATTACK_RATE_MIN;                        		// 0x00B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_MELEEATTACK_RATE_MAX;                        		// 0x00B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_MELEEGUARD_RATE_MIN;                         		// 0x00BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_MELEEGUARD_RATE_MAX;                         		// 0x00C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_EXPLOSIVEATTACK_RATE_MIN;                    		// 0x00C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_EXPLOSIVEATTACK_RATE_MAX;                    		// 0x00C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_EXPLOSIVEGUARD_RATE_MIN;                     		// 0x00CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BUFF_EXPLOSIVEGUARD_RATE_MAX;                     		// 0x00D0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41158 ];

		return pClassPointer;
	};

	int CATEGORY_CLAN ( );
	bool IsGearSetSlotIndex ( int Index );
	bool IsWeaponBySlotIndex ( int slot_index );
};

UClass* UCombatOnlineMetaphors::pClassPointer = NULL;

// Class CombatGame.ActorFactroyCombatLCTFFlagActor
// 0x0000 (0x0068 - 0x0068)
class UActorFactroyCombatLCTFFlagActor : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41423 ];

		return pClassPointer;
	};

};

UClass* UActorFactroyCombatLCTFFlagActor::pClassPointer = NULL;

// Class CombatGame.ActorFactroyCombatLCTFFlagPoint
// 0x0000 (0x0068 - 0x0068)
class UActorFactroyCombatLCTFFlagPoint : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41425 ];

		return pClassPointer;
	};

};

UClass* UActorFactroyCombatLCTFFlagPoint::pClassPointer = NULL;

// Class CombatGame.ActorFactroyCombatPlayerStartGroup
// 0x0000 (0x0068 - 0x0068)
class UActorFactroyCombatPlayerStartGroup : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41427 ];

		return pClassPointer;
	};

};

UClass* UActorFactroyCombatPlayerStartGroup::pClassPointer = NULL;

// Class CombatGame.AIDebugCameraController
// 0x0084 (0x066C - 0x05E8)
class AAIDebugCameraController : public ADebugCameraController
{
public:
	class ACombatAIManager*                            AIManager;                                        		// 0x05E8 (0x0004) [0x0000000000000000]              
	class ACombatPawn*                                 SelectedPawn;                                     		// 0x05EC (0x0004) [0x0000000000000000]              
	unsigned char                                      CameraType;                                       		// 0x05F0 (0x0001) [0x0000000000000000]              
	struct FName                                       PCCameraType;                                     		// 0x05F4 (0x0008) [0x0000000000000000]              
	unsigned long                                      bPressUp : 1;                                     		// 0x05FC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPressDown : 1;                                   		// 0x05FC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPressLeft : 1;                                   		// 0x05FC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bPressRight : 1;                                  		// 0x05FC (0x0004) [0x0000000000000000] [0x00000008] 
	struct FMatrix                                     RelativeRotMat;                                   		// 0x0600 (0x0040) [0x0000000000000000]              
	struct FVector                                     RelativeLoc;                                      		// 0x0640 (0x000C) [0x0000000000000000]              
	float                                              RelativeDist;                                     		// 0x064C (0x0004) [0x0000000000000000]              
	float                                              RelativeDistZ;                                    		// 0x0650 (0x0004) [0x0000000000000000]              
	struct FRotator                                    RelativeRot;                                      		// 0x0654 (0x000C) [0x0000000000000000]              
	TArray< struct FString >                           DebugCategories;                                  		// 0x0660 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41460 ];

		return pClassPointer;
	};

	void NextSelectAI ( );
	void PrevSelectAI ( );
	void ToggleCamera ( );
	void TogglePCMesh ( );
	void SelectPawn ( class ACombatPawn* inPawn );
	void SelectPC ( );
	void ClearKeyInput ( );
	bool NativeInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void OnDeactivate ( class APlayerController* InPC );
	void OnActivate ( class APlayerController* InPC );
};

UClass* AAIDebugCameraController::pClassPointer = NULL;

// Class CombatGame.CameraLocationPoint
// 0x0158 (0x032C - 0x01D4)
class ACameraLocationPoint : public AActor
{
public:
	float                                              CameraActorFOV;                                   		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPostProcessSettings                        CameraActorOverridePostProcess;                   		// 0x01D8 (0x0154) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41556 ];

		return pClassPointer;
	};

};

UClass* ACameraLocationPoint::pClassPointer = NULL;

// Class CombatGame.CBAnimBlendByFall
// 0x0000 (0x0114 - 0x0114)
class UCBAnimBlendByFall : public UCombatAnimBlendByFall
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41578 ];

		return pClassPointer;
	};

};

UClass* UCBAnimBlendByFall::pClassPointer = NULL;

// Class CombatGame.CBAnimBlendByIdle
// 0x0000 (0x0114 - 0x0114)
class UCBAnimBlendByIdle : public UCombatAnimBlendByIdle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41589 ];

		return pClassPointer;
	};

};

UClass* UCBAnimBlendByIdle::pClassPointer = NULL;

// Class CombatGame.CBAnimBlendByPhysics
// 0x0003 (0x0138 - 0x0135)
class UCBAnimBlendByPhysics : public UCombatAnimBlendByPhysics
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41594 ];

		return pClassPointer;
	};

};

UClass* UCBAnimBlendByPhysics::pClassPointer = NULL;

// Class CombatGame.CBAnimBlendByPosture
// 0x0000 (0x0100 - 0x0100)
class UCBAnimBlendByPosture : public UCombatAnimBlendByPosture
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41597 ];

		return pClassPointer;
	};

};

UClass* UCBAnimBlendByPosture::pClassPointer = NULL;

// Class CombatGame.CBAnimBlendBySlotActive
// 0x0000 (0x0104 - 0x0104)
class UCBAnimBlendBySlotActive : public UCombatAnimBlendBySlotActive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41602 ];

		return pClassPointer;
	};

};

UClass* UCBAnimBlendBySlotActive::pClassPointer = NULL;

// Class CombatGame.CBAnimBlendByWeapType
// 0x0000 (0x0100 - 0x0100)
class UCBAnimBlendByWeapType : public UCombatAnimBlendByWeapType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41604 ];

		return pClassPointer;
	};

};

UClass* UCBAnimBlendByWeapType::pClassPointer = NULL;

// Class CombatGame.CBAnimNodeFramePlayer
// 0x0000 (0x0114 - 0x0114)
class UCBAnimNodeFramePlayer : public UCombatAnimNodeFramePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41611 ];

		return pClassPointer;
	};

};

UClass* UCBAnimNodeFramePlayer::pClassPointer = NULL;

// Class CombatGame.CBAnimNodeJumpLeanOffset
// 0x0000 (0x0154 - 0x0154)
class UCBAnimNodeJumpLeanOffset : public UCombatAnimNodeJumpLeanOffset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41629 ];

		return pClassPointer;
	};

};

UClass* UCBAnimNodeJumpLeanOffset::pClassPointer = NULL;

// Class CombatGame.CBAnimNodeSequence
// 0x0000 (0x0124 - 0x0124)
class UCBAnimNodeSequence : public UCombatAnimNodeSequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41645 ];

		return pClassPointer;
	};

};

UClass* UCBAnimNodeSequence::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSequenceByBoneRotation
// 0x0018 (0x012C - 0x0114)
class UCombatAnimNodeSequenceByBoneRotation : public UAnimNodeSequence
{
public:
	struct FName                                       BoneName;                                         		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneAxis;                                         		// 0x011C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAnimByRotation >                   AnimList;                                         		// 0x0120 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41647 ];

		return pClassPointer;
	};

	void eventOnBecomeRelevant ( );
};

UClass* UCombatAnimNodeSequenceByBoneRotation::pClassPointer = NULL;

// Class CombatGame.CBAnimNodeSequenceByBoneRotation
// 0x0000 (0x012C - 0x012C)
class UCBAnimNodeSequenceByBoneRotation : public UCombatAnimNodeSequenceByBoneRotation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41662 ];

		return pClassPointer;
	};

};

UClass* UCBAnimNodeSequenceByBoneRotation::pClassPointer = NULL;

// Class CombatGame.CBAnimNodeSeqWeap
// 0x0000 (0x014C - 0x014C)
class UCBAnimNodeSeqWeap : public UCombatAnimNodeSeqWeap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41669 ];

		return pClassPointer;
	};

};

UClass* UCBAnimNodeSeqWeap::pClassPointer = NULL;

// Class CombatGame.CBCharInfo
// 0x0024 (0x0060 - 0x003C)
class UCBCharInfo : public UObject
{
public:
	TArray< struct FCharacterInfo >                    Characters;                                       		// 0x003C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< class UClass* >                            Families;                                         		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LOD1DisplayFactor;                                		// 0x0054 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LOD2DisplayFactor;                                		// 0x0058 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LOD3DisplayFactor;                                		// 0x005C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41768 ];

		return pClassPointer;
	};

	struct FString GetRandomCharClassName ( );
};

UClass* UCBCharInfo::pClassPointer = NULL;

// Class CombatGame.CombatSkill
// 0x0018 (0x0054 - 0x003C)
class UCombatSkill : public UObject
{
public:
	unsigned char                                      Skilltype;                                        		// 0x003C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SkillGroup;                                       		// 0x003D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class ACombatPawn*                                 SkillOwner;                                       		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SkillCodeName;                                    		// 0x0044 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                refIndex;                                         		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42303 ];

		return pClassPointer;
	};

	void SetSkillTableInfo ( struct FString CodeName, TArray< struct FString > AcceptSkillList, int SkillIndex );
	void Init ( class ACombatPawn* GetOwner );
	void DeactivateSkill ( );
	void ActivateSkill ( unsigned long ActiveWeapon );
};

UClass* UCombatSkill::pClassPointer = NULL;

// Class CombatGame.CombatInstanceItem_ArmorBase
// 0x0018 (0x00B4 - 0x009C)
class UCombatInstanceItem_ArmorBase : public UCombatInstanceItem
{
public:
	struct FArmorMeshInfo                              MeshInfo[ 0x2 ];                                  		// 0x009C (0x0018) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42512 ];

		return pClassPointer;
	};

	unsigned char GetRightMaterialSet ( unsigned char TeamIndex );
	unsigned char GetLeftMaterialSet ( unsigned char TeamIndex );
	class USkeletalMesh* GetRightMesh ( unsigned char TeamIndex );
	class USkeletalMesh* GetLeftMesh ( unsigned char TeamIndex );
};

UClass* UCombatInstanceItem_ArmorBase::pClassPointer = NULL;

// Class CombatGame.CBFrontEndPlayerInput
// 0x0000 (0x0280 - 0x0280)
class UCBFrontEndPlayerInput : public UCombatPlayerInputBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43375 ];

		return pClassPointer;
	};

	bool IsReadyState ( );
	bool IsShowWall ( );
	bool IsInputExpired ( );
};

UClass* UCBFrontEndPlayerInput::pClassPointer = NULL;

// Class CombatGame.CombatProj_SpecialGrenade
// 0x0004 (0x0324 - 0x0320)
class ACombatProj_SpecialGrenade : public ACombatProj_Grenade
{
public:
	float                                              Lifetime;                                         		// 0x0320 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43404 ];

		return pClassPointer;
	};

	void SpendAllTime ( );
	void ExplodedEffect ( );
	void TriggerExplosion ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor );
};

UClass* ACombatProj_SpecialGrenade::pClassPointer = NULL;

// Class CombatGame.CombatProj_Decoy
// 0x000C (0x0330 - 0x0324)
class ACombatProj_Decoy : public ACombatProj_SpecialGrenade
{
public:
	float                                              RadarExposeRange;                                 		// 0x0324 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    EnemyAttachPSC;                                   		// 0x0328 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    FriendlyAttachPSC;                                		// 0x032C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43403 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void ExplodedEffect ( );
};

UClass* ACombatProj_Decoy::pClassPointer = NULL;

// Class CombatGame.CombatBombsiteVolume
// 0x001C (0x021C - 0x0200)
class ACombatBombsiteVolume : public AVolume
{
public:
	struct FString                                     BombsiteName;                                     		// 0x0200 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      MapIconType;                                      		// 0x020C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SiteEffect;                                       		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SiteEffectSizeRatio;                              		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlantedBombID;                                    		// 0x0218 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43453 ];

		return pClassPointer;
	};

	void UnTouch ( class AActor* Other );
	bool IsBombPlanted ( );
	int GetPlantedBombID ( );
	void SetPlantedBombID ( int BombID );
	void UpdateUIState ( );
	void NotifyBombPlantInfo ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ACombatBombsiteVolume::pClassPointer = NULL;

// Class CombatGame.Interface_MissionActor
// 0x0000 (0x003C - 0x003C)
class UInterface_MissionActor : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43488 ];

		return pClassPointer;
	};

	int GetMissionActorSortPriority ( );
	void InitMissionActor ( class ACBGameReplicationInfo* CBGRI, int ArrayIndex );
};

UClass* UInterface_MissionActor::pClassPointer = NULL;

// Class CombatGame.Interface_PickupItemActor
// 0x0000 (0x003C - 0x003C)
class UInterface_PickupItemActor : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43500 ];

		return pClassPointer;
	};

	bool IsDisplayLocator ( );
	void InvalidatePickup ( );
	bool ValidPickup ( );
};

UClass* UInterface_PickupItemActor::pClassPointer = NULL;

// Class CombatGame.CombatTDMMovie
// 0x0008 (0x0828 - 0x0820)
class UCombatTDMMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_PickupItemContainer*              PickupItemContainer;                              		// 0x0820 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PickupLocatorNum;                                 		// 0x0824 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43512 ];

		return pClassPointer;
	};

	void SetVisiblePickupLocator ( unsigned long bVisible, class AActor** PickupActor );
	void UpdatePickupLocator ( float DeltaSeconds );
	void Tick ( float DeltaSeconds );
	void UpdatePickupLocatorActor ( );
	void registerLevelObject ( class UCombatHUD_PickupItemLocator* M );
	void RegisterGOContainer ( );
	void NotifyPickupSpecialWeaponSystemMessage ( int TextID, struct FString WeaponName, struct FString OwnerCallSign );
	int GetRounOverPoint ( unsigned char TeamIndex );
	int GetRoundPoint ( unsigned char TeamIndex );
	void ClearRoundStatusBoard ( );
	void ChangeRoundStausMode ( int MyTeamIndex );
};

UClass* UCombatTDMMovie::pClassPointer = NULL;

// Class CombatGame.GamePlayEvent_KillData
// 0x0000 (0x0308 - 0x0308)
class AGamePlayEvent_KillData : public AGamePlayEvent_Kill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43534 ];

		return pClassPointer;
	};

	void SetRegisterList ( );
};

UClass* AGamePlayEvent_KillData::pClassPointer = NULL;

// Class CombatGame.SeqEvent_InGameClientEvent
// 0x0009 (0x00E5 - 0x00DC)
class USeqEvent_InGameClientEvent : public USequenceEvent
{
public:
	struct FName                                       EventName;                                        		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TeamIndex;                                        		// 0x00E4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43709 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_InGameClientEvent::pClassPointer = NULL;

// Class CombatGame.CBGunMuzzleFlashLight
// 0x0018 (0x0244 - 0x022C)
class UCBGunMuzzleFlashLight : public UCombatExplosionLight
{
public:
	TArray< struct FLightValues >                      RedTeamTimeShift;                                 		// 0x022C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLightValues >                      BlueTeamTimeShift;                                		// 0x0238 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43735 ];

		return pClassPointer;
	};

	void SetTeam ( unsigned char NewTeam );
};

UClass* UCBGunMuzzleFlashLight::pClassPointer = NULL;

// Class CombatGame.CBGunLowDetailMuzzleFlashLight
// 0x0000 (0x0244 - 0x0244)
class UCBGunLowDetailMuzzleFlashLight : public UCBGunMuzzleFlashLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43743 ];

		return pClassPointer;
	};

};

UClass* UCBGunLowDetailMuzzleFlashLight::pClassPointer = NULL;

// Class CombatGame.CombatActiveSkill
// 0x003C (0x0090 - 0x0054)
class UCombatActiveSkill : public UCombatSkill
{
public:
	TArray< struct FGivenWeaponInfo >                  GivenWeaponClassName;                             		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           GivenWeaponClassNameOnFinished;                   		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bDiscardInventoryOnFinished : 1;                  		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bActivatedSkill : 1;                              		// 0x006C (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FString >                           StartUpResources;                                 		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       ActiveActionVoiceName;                            		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponIndex;                                      		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       ActiveSkillType;                                  		// 0x0088 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44168 ];

		return pClassPointer;
	};

	TArray< struct FString > GetWeaponClassName ( );
	struct FString GetPawnClassName ( );
	void GetCachedResourceNameList ( TArray< struct FString >* ResourceList );
	class ACombatWeapon* GiveWeapon ( class ACombatPawn* PlayerPawn, int InClassIndex, unsigned long bFinishedWeaponList );
	void Use ( class AActor* Target, struct FVector TargetLoc );
	void PendingUse ( class AActor* Target, struct FVector UseLocation );
	void DeactivateSkill ( );
	void PlayActiveActionVoice ( );
	void ActivateSkill ( unsigned long bActiveWeapon );
};

UClass* UCombatActiveSkill::pClassPointer = NULL;

// Class CombatGame.CombatSkill_SentryGun
// 0x0000 (0x0090 - 0x0090)
class UCombatSkill_SentryGun : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44167 ];

		return pClassPointer;
	};

	void Use ( class AActor* Target, struct FVector TargetLoc );
};

UClass* UCombatSkill_SentryGun::pClassPointer = NULL;

// Class CombatGame.CombatSkill_TrophyTurret
// 0x0000 (0x0090 - 0x0090)
class UCombatSkill_TrophyTurret : public UCombatActiveSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44170 ];

		return pClassPointer;
	};

	void Use ( class AActor* Target, struct FVector TargetLoc );
	class UClass* LoadTrophyTurretPawnClass ( );
};

UClass* UCombatSkill_TrophyTurret::pClassPointer = NULL;

// Class CombatGame.CombatItemFXBase
// 0x0010 (0x004C - 0x003C)
class UCombatItemFXBase : public UObject
{
public:
	struct FSItemFX                                    ItemFX[ 0x2 ];                                    		// 0x003C (0x0010) [0x0000000000080001]              ( CPF_Edit | CPF_Component )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44172 ];

		return pClassPointer;
	};

	void ClearFX ( class AActor* _Actor );
	void UpdateFX ( unsigned long bItemOn, unsigned long bIsFirst );
	void LoadFX ( class AActor* _Actor );
	class UParticleSystem* GetParticleSystem ( );
};

UClass* UCombatItemFXBase::pClassPointer = NULL;

// Class CombatGame.CombatHUD_IFFObject
// 0x00AC (0x0138 - 0x008C)
class UCombatHUD_IFFObject : public UCombatHUDComponent_Base
{
public:
	class UCombatHUD_IFFContainer*                     Container;                                        		// 0x008C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  BombMC;                                           		// 0x0090 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  RadioMC;                                          		// 0x0094 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  KillerMC;                                         		// 0x0098 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  RankIconMC;                                       		// 0x009C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  HPMC;                                             		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  AggroMC;                                          		// 0x00A4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  FriendlyNameMC;                                   		// 0x00A8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  EnemyNameMC;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  FlashIconMC;                                      		// 0x00B0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsDisplayRadio : 1;                              		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsDisplayKiller : 1;                             		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFlashIconVisible : 1;                            		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCurrentIFFEnemy : 1;                             		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FString                                     LastRankIcon;                                     		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastClanName;                                     		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastRankIconImageID;                              		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              MinLocatorScale;                                  		// 0x00D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxLocatorScale;                                  		// 0x00D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DistanceForMinScale;                              		// 0x00DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LocatorScale;                                     		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastLocatorScale;                                 		// 0x00E4 (0x0004) [0x0000000000000000]              
	struct FIFFInfo                                    CurrentIFFInfo;                                   		// 0x00E8 (0x004C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              IFFUpdateTime;                                    		// 0x0134 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44198 ];

		return pClassPointer;
	};

	void UpdateFlashEffect ( float FlashRate );
	void SetFlashBangVisible ( unsigned long bVisible, unsigned long bForce );
	void UpdateNameTextScale ( float Distance );
	void UpdateKillerIcon ( );
	float GetCurrentLocatorScale ( struct FVector* Location, struct FVector* InCameraLoc );
	void SetRankIcon ( struct FString rankIconName, int Id );
	void SetAggroTargetName ( struct FString AggroTargetName );
	void SetIFFType ( struct FString TeamType, struct FString ClanName, struct FString NickName, unsigned long bShowHPBar, unsigned long bShowIndex, int Index );
	void UpdateIFFHUD ( );
	void ClearIFFTimer ( );
	void SetIFFTimer ( );
	void SetIFFInfo ( struct FIFFInfo _IFFInfo, unsigned long _bEnemy );
	void Show ( );
	void Hide ( );
	void SetRankIconVisible ( unsigned long bShow );
	void SetHP ( unsigned char Health );
	void ToggleKillerIcon ( unsigned long bToggleOn );
	void SetKillerIconVisible ( unsigned long bShow );
	void ToggleRadioIcon ( unsigned long bToggleOn );
	void SetRadioVisible ( unsigned long bShow );
	void ToggleBombEquip ( unsigned long bToggleOn );
	void SetBombVisible ( unsigned long bShow );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_IFFObject::pClassPointer = NULL;

// Class CombatGame.CombatDecal
// 0x0008 (0x0348 - 0x0340)
class UCombatDecal : public UDecalComponent
{
public:
	class UMaterialInstanceTimeVarying*                MITV_Decal;                                       		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinExplosionThickness;                            		// 0x0344 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44208 ];

		return pClassPointer;
	};

	void SetMITV ( class UMaterialInterface* MI );
	class UMaterialInstanceTimeVarying* GetMITV ( );
};

UClass* UCombatDecal::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Air
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Air : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44414 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Air::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Flesh
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Flesh : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44416 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Flesh::pClassPointer = NULL;

// Class CombatGame.CBPhysM_BodyMetalPart
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_BodyMetalPart : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44418 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_BodyMetalPart::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Brick
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Brick : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44420 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Brick::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Common
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Common : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44422 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Common::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Dust
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Dust : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44424 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Dust::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Earth
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Earth : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44426 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Earth::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Fabric
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Fabric : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44428 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Fabric::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Flesh_Arm
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Flesh_Arm : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44430 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Flesh_Arm::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Flesh_Body
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Flesh_Body : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44432 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Flesh_Body::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Flesh_Head
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Flesh_Head : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44434 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Flesh_Head::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Flesh_Leg
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Flesh_Leg : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44436 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Flesh_Leg::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Fresh_ChestUpper
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Fresh_ChestUpper : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44438 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Fresh_ChestUpper::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Fresh_HeadCenter
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Fresh_HeadCenter : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44440 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Fresh_HeadCenter::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Glass
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Glass : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44442 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Glass::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Grass
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Grass : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44444 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Grass::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Ice
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Ice : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44446 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Ice::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Metal
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Metal : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44448 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Metal::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Plastic
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Plastic : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44450 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Plastic::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Stone
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Stone : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44452 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Stone::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Vehicle
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Vehicle : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44454 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Vehicle::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Vehicle_WeakP
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Vehicle_WeakP : public UCBPhysM_Flesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44456 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Vehicle_WeakP::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Water
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Water : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44458 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Water::pClassPointer = NULL;

// Class CombatGame.CBPhysM_WetMetal
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_WetMetal : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44460 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_WetMetal::pClassPointer = NULL;

// Class CombatGame.CBPhysM_Wood
// 0x0000 (0x0098 - 0x0098)
class UCBPhysM_Wood : public UCBPhysicalMaterialProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44462 ];

		return pClassPointer;
	};

};

UClass* UCBPhysM_Wood::pClassPointer = NULL;

// Class CombatGame.CBSpawnedEmitter
// 0x0000 (0x01E0 - 0x01E0)
class ACBSpawnedEmitter : public ACBEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44464 ];

		return pClassPointer;
	};

	void HideBecauseFinished ( class UParticleSystemComponent* FinishedComponent );
};

UClass* ACBSpawnedEmitter::pClassPointer = NULL;

// Class CombatGame.CombatLocalMessage
// 0x0000 (0x0050 - 0x0050)
class UCombatLocalMessage : public ULocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44522 ];

		return pClassPointer;
	};

	void ClientReceiveEx ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
};

UClass* UCombatLocalMessage::pClassPointer = NULL;

// Class CombatGame.CombatSkillMessage
// 0x0000 (0x0050 - 0x0050)
class UCombatSkillMessage : public UCombatLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44521 ];

		return pClassPointer;
	};

	void AnnouncePredatorUseToTeam ( class APlayerController* P, class APlayerReplicationInfo* SkillOwnerPRI );
	void AnnounceHowitzerUseToTeam ( class APlayerController* P, class APlayerReplicationInfo* SkillOwnerPRI );
	void AnnounceAirStrikeUseToTeam ( class APlayerController* P, class APlayerReplicationInfo* SkillOwnerPRI );
	void AnnounceAttackHelicopterUseToTeam ( class APlayerController* P, class APlayerReplicationInfo* SkillOwnerPRI );
	void AnnounceUAVPatrolUseToTeam ( class APlayerController* P, class APlayerReplicationInfo* SkillOwnerPRI );
	void NotifyFailedBuySkill ( class APlayerController* P, int TextID, int errorType );
	void NotifyBuySkill ( class APlayerController* P, int TextID );
	void NotifyUnlockSkill ( class APlayerController* P, int TextID );
	void NotifyFailedNoLicenseSkill ( class APlayerController* P );
	void ClientReceiveEx ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
};

UClass* UCombatSkillMessage::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_QuickstartSetting
// 0x0014 (0x007C - 0x0068)
class UCBUIDataStore_QuickstartSetting : public UUIDataStore_Settings
{
public:
	int                                                CurrentSelections[ 0x5 ];                         		// 0x0068 (0x0014) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45314 ];

		return pClassPointer;
	};

};

UClass* UCBUIDataStore_QuickstartSetting::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_StringAliasBindingsMap
// 0x0000 (0x0100 - 0x0100)
class UCBUIDataStore_StringAliasBindingsMap : public UCombatUIDataStore_StringAliasBindingMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45350 ];

		return pClassPointer;
	};

};

UClass* UCBUIDataStore_StringAliasBindingsMap::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_StringAliasMap
// 0x0000 (0x00B8 - 0x00B8)
class UCBUIDataStore_StringAliasMap : public UCombatUIDataStore_StringAliasMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45357 ];

		return pClassPointer;
	};

};

UClass* UCBUIDataStore_StringAliasMap::pClassPointer = NULL;

// Class CombatGame.CBUIDataStore_TacticalGear
// 0x000C (0x0074 - 0x0068)
class UCBUIDataStore_TacticalGear : public UUIDataStore_Settings
{
public:
	TArray< struct FUITacticalGearStruct >             UITacticalGearList;                               		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45359 ];

		return pClassPointer;
	};

	void UpdateUITacticalGearList_Condition ( unsigned char conditionType );
	void PrintUITacticalGearList ( );
	void InitUITacticalGearList ( );
};

UClass* UCBUIDataStore_TacticalGear::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_IronSight
// 0x0000 (0x0A8C - 0x0A8C)
class UCombatWeaponRISBase_IronSight : public UCombatWeaponRISBase_Aiming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45575 ];

		return pClassPointer;
	};

};

UClass* UCombatWeaponRISBase_IronSight::pClassPointer = NULL;

// Class CombatGame.CombatWeaponRISBase_modifiedIronSight
// 0x0004 (0x0A90 - 0x0A8C)
class UCombatWeaponRISBase_modifiedIronSight : public UCombatWeaponRISBase_IronSight
{
public:
	unsigned long                                      IronSight : 1;                                    		// 0x0A8C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45574 ];

		return pClassPointer;
	};

};

UClass* UCombatWeaponRISBase_modifiedIronSight::pClassPointer = NULL;

// Class CombatGame.CBWeaponAttachment_DualWeaponBase
// 0x0038 (0x0378 - 0x0340)
class ACBWeaponAttachment_DualWeaponBase : public ACBWeaponAttachment
{
public:
	class USkeletalMeshComponent*                      DualMesh;                                         		// 0x0340 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    MuzzleFlashPSCForDual;                            		// 0x0344 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             TracerPSCTemplateForDual;                         		// 0x0348 (0x0004) [0x0000000000000000]              
	class UCombatExplosionLight*                       MuzzleFlashLightForDual;                          		// 0x034C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    PSC_ShellEjectForDual;                            		// 0x0350 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bRightFired : 1;                                  		// 0x0354 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FVector                                     RightElbowPos;                                    		// 0x0358 (0x000C) [0x0000000000000000]              
	struct FVector                                     LeftElbowPos;                                     		// 0x0364 (0x000C) [0x0000000000000000]              
	struct FName                                       AttachmentSocket_Left;                            		// 0x0370 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45623 ];

		return pClassPointer;
	};

};

UClass* ACBWeaponAttachment_DualWeaponBase::pClassPointer = NULL;

// Class CombatGame.CBWeaponAttachment_ETC
// 0x0000 (0x0340 - 0x0340)
class ACBWeaponAttachment_ETC : public ACBWeaponAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45637 ];

		return pClassPointer;
	};

};

UClass* ACBWeaponAttachment_ETC::pClassPointer = NULL;

// Class CombatGame.CBWeaponAttachment_ParachuteBase
// 0x0004 (0x0344 - 0x0340)
class ACBWeaponAttachment_ParachuteBase : public ACBWeaponAttachment_ETC
{
public:
	float                                              TranslationOffset;                                		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45642 ];

		return pClassPointer;
	};

	void UpdateMeshRotation ( );
	bool AttachToHolster ( );
};

UClass* ACBWeaponAttachment_ParachuteBase::pClassPointer = NULL;

// Class CombatGame.CBWeaponAttachment_ShotGunBase
// 0x0008 (0x0348 - 0x0340)
class ACBWeaponAttachment_ShotGunBase : public ACBWeaponAttachment
{
public:
	class ACombatWeapon_Shotgun_Base*                  OwnerShotgunWeapon;                               		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SimulatedAccuracy;                                		// 0x0344 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45667 ];

		return pClassPointer;
	};

	void eventPreBeginPlay ( );
};

UClass* ACBWeaponAttachment_ShotGunBase::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_Shotgun_Base
// 0x0004 (0x19AC - 0x19A8)
class ACombatWeapon_Shotgun_Base : public ACombatWeapon
{
public:
	int                                                TransientShotgunDamage;                           		// 0x19A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45670 ];

		return pClassPointer;
	};

	void PlayImpactEffects ( class UClass* DmgTypeClass, struct FImpactInfo InImpactInfo );
	bool PlayImpactEffect ( unsigned long bPlayedBulletWhip, struct FImpactInfo* InImpactInfo );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation, unsigned long bPenetration, struct FImpactInfo InImpactInfo, unsigned long bSpawnTracer );
	float GetBodyDamageAdjustment ( class UPhysicalMaterial* InPhysMaterial, unsigned long UsePowerBullet );
	void GetFireModeDamage ( struct FVector HitLocation );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int AimRot, unsigned char NumHits, int ImpactListIndex, unsigned char PenetrateBeforeHit, unsigned long bSpawnTracer );
	void ServerNotifyHit ( struct FCompressedImpactInfo CompressedImpact, float StartLocX, float StartLocY, float StartLocZ, int MergedAimRot, int MergedRecoilRot, unsigned char ClientZoomState, unsigned char ClientStanceState, unsigned char NumHits, unsigned char FiringMode, unsigned char PenetrateBeforeHit );
	void SetTransientShotgunDamage ( unsigned char NumHits );
	void FireAllPellets ( struct FVector StartLocation, unsigned char FireModeNum );
	void CustomFire ( );
	void InitRecoilSeed ( );
};

UClass* ACombatWeapon_Shotgun_Base::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatChangeBTTree
// 0x0008 (0x009C - 0x0094)
class UCCSBTCombatChangeBTTree : public UGripBTScriptBehavior
{
public:
	class ACombatBotController*                        bc;                                               		// 0x0094 (0x0004) [0x0000000000000000]              
	class UCCSBTTree*                                  NewBTTree;                                        		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45839 ];

		return pClassPointer;
	};

	void ExecutePost ( class UGripBTInterface* BTInterface );
	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	void Initialize ( );
};

UClass* UCCSBTCombatChangeBTTree::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatMelee
// 0x0004 (0x0098 - 0x0094)
class UCCSBTCombatMelee : public UGripBTScriptBehavior
{
public:
	class ACombatGuy_NPC*                              CAIP;                                             		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45850 ];

		return pClassPointer;
	};

	void ExecutePost ( class UGripBTInterface* BTInterface );
	unsigned char Execute ( class UGripBTInterface* BTInterface, unsigned long PushToFinish );
	bool ExecutePre ( class UGripBTInterface* BTInterface );
	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	void Initialize ( );
};

UClass* UCCSBTCombatMelee::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatReloadWeapon
// 0x0004 (0x0098 - 0x0094)
class UCCSBTCombatReloadWeapon : public UGripBTScriptBehavior
{
public:
	class ACombatBotController*                        bc;                                               		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45883 ];

		return pClassPointer;
	};

	void ExecutePost ( class UGripBTInterface* BTInterface );
	unsigned char Execute ( class UGripBTInterface* BTInterface, unsigned long PushToFinish );
	bool ExecutePre ( class UGripBTInterface* BTInterface );
	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	void Initialize ( );
};

UClass* UCCSBTCombatReloadWeapon::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatSwitchWeapon
// 0x0008 (0x009C - 0x0094)
class UCCSBTCombatSwitchWeapon : public UGripBTScriptBehavior
{
public:
	unsigned char                                      WeaponSlotIndex;                                  		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class ACombatBotController*                        bc;                                               		// 0x0098 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45899 ];

		return pClassPointer;
	};

	void ExecutePost ( class UGripBTInterface* BTInterface );
	unsigned char Execute ( class UGripBTInterface* BTInterface, unsigned long PushToFinish );
	bool ExecutePre ( class UGripBTInterface* BTInterface );
	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	void Initialize ( );
};

UClass* UCCSBTCombatSwitchWeapon::pClassPointer = NULL;

// Class CombatGame.CCSBTCombatThrowGrenade
// 0x0018 (0x00AC - 0x0094)
class UCCSBTCombatThrowGrenade : public UGripBTScriptBehavior
{
public:
	class ACombatGuy_NPC*                              CAIP;                                             		// 0x0094 (0x0004) [0x0000000000000000]              
	class ACCSController*                              CCSController;                                    		// 0x0098 (0x0004) [0x0000000000000000]              
	struct FRotator                                    FireRor;                                          		// 0x009C (0x000C) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45925 ];

		return pClassPointer;
	};

	void ExecutePost ( class UGripBTInterface* BTInterface );
	unsigned char Execute ( class UGripBTInterface* BTInterface, unsigned long PushToFinish );
	bool ExecutePre ( class UGripBTInterface* BTInterface );
	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	void Initialize ( );
};

UClass* UCCSBTCombatThrowGrenade::pClassPointer = NULL;

// Class CombatGame.CCSBTCrouch
// 0x0005 (0x009D - 0x0098)
class UCCSBTCrouch : public UCCSBTScriptBehavior
{
public:
	unsigned long                                      bCrouch : 1;                                      		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      Speed;                                            		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45967 ];

		return pClassPointer;
	};

	void eventExecutePost ( class UGripBTInterface* BTInterface );
	unsigned char eventExecute ( class UGripBTInterface* BTInterface, unsigned long PushToFinish );
	bool eventExecutePre ( class UGripBTInterface* BTInterface );
};

UClass* UCCSBTCrouch::pClassPointer = NULL;

// Class CombatGame.CCSBTHealth
// 0x0008 (0x00A0 - 0x0098)
class UCCSBTHealth : public UCCSBTScriptCondition
{
public:
	unsigned char                                      Operator;                                         		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                Threshold;                                        		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45982 ];

		return pClassPointer;
	};

	struct FString eventGetNodeTitle ( );
	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	void FlagUsedBBMembers ( class UGripBlackboard* Blackboard );
};

UClass* UCCSBTHealth::pClassPointer = NULL;

// Class CombatGame.CCSBTMelee
// 0x0020 (0x00B8 - 0x0098)
class UCCSBTMelee : public UCCSBTScriptBehavior
{
public:
	float                                              BlendInTime;                                      		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MeleeBlendName;                                   		// 0x00A0 (0x0008) [0x0000000000000000]              
	struct FName                                       MeleeSequenceName;                                		// 0x00A8 (0x0008) [0x0000000000000000]              
	class UAnimNodeBlend*                              MeleeBlend;                                       		// 0x00B0 (0x0004) [0x0000000000000000]              
	class UAnimNodeSequence*                           MeleeSequence;                                    		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45999 ];

		return pClassPointer;
	};

	void ExecutePost ( class UGripBTInterface* BTInterface );
	unsigned char Execute ( class UGripBTInterface* BTInterface, unsigned long PushToFinish );
	bool ExecutePre ( class UGripBTInterface* BTInterface );
	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	void Initialize ( );
};

UClass* UCCSBTMelee::pClassPointer = NULL;

// Class CombatGame.CCSBTSetHealth
// 0x0004 (0x009C - 0x0098)
class UCCSBTSetHealth : public UCCSBTScriptBehavior
{
public:
	int                                                Health;                                           		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46063 ];

		return pClassPointer;
	};

	unsigned char Execute ( class UGripBTInterface* BTInterface, unsigned long PushToFinish );
	bool ExecutePre ( class UGripBTInterface* BTInterface );
};

UClass* UCCSBTSetHealth::pClassPointer = NULL;

// Class CombatGame.CCSBTSimpleFlee
// 0x0028 (0x00C0 - 0x0098)
class UCCSBTSimpleFlee : public UCCSBTScriptBehavior
{
public:
	float                                              FleeDistance;                                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CachedEnemyPosition;                              		// 0x009C (0x000C) [0x0000000000000000]              
	struct FVector                                     CachedPawnPosition;                               		// 0x00A8 (0x000C) [0x0000000000000000]              
	unsigned long                                      CachedResult : 1;                                 		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CachedMaxDist2D;                                  		// 0x00B8 (0x0004) [0x0000000000000000]              
	class UCCSAFMoveTo*                                MoveToHandle;                                     		// 0x00BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46078 ];

		return pClassPointer;
	};

	class AActor* GetEnemy ( class UGripBlackboard* BB );
	bool ValidateFleePoint ( struct FVector* FleePoint );
	bool PickFleePoint ( struct FVector EnemyLocation, struct FVector* FleePoint );
	unsigned char eventExecute ( class UGripBTInterface* BTInterface, unsigned long PushToFinish );
	bool eventExecutePre ( class UGripBTInterface* BTInterface );
	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	void FlagUsedBBMembers ( class UGripBlackboard* Blackboard );
};

UClass* UCCSBTSimpleFlee::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_Grenade
// 0x0004 (0x19AC - 0x19A8)
class ACombatWeapon_Grenade : public ACombatWeapon
{
public:
	unsigned long                                      bMartyrdom : 1;                                   		// 0x19A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      IsAlreadyMakeProjectile : 1;                      		// 0x19A8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46188 ];

		return pClassPointer;
	};

	bool IsInstigatorAlive ( );
	class AProjectile* MakeProjectile ( );
	void ServerMakeProjectile ( float ClientCurrentFireDelayTime );
	void HolderDied ( );
	class UClass* GetProjectileClass ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ACombatWeapon_Grenade::pClassPointer = NULL;

// Class CombatGame.SeqAct_SetState
// 0x000C (0x00D0 - 0x00C4)
class USeqAct_SetState : public USequenceAction
{
public:
	struct FString                                     StateName;                                        		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46207 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetState::pClassPointer = NULL;

// Class CombatGame.SeqAct_RemoveState
// 0x000C (0x00D0 - 0x00C4)
class USeqAct_RemoveState : public USequenceAction
{
public:
	struct FString                                     StateName;                                        		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46211 ];

		return pClassPointer;
	};

};

UClass* USeqAct_RemoveState::pClassPointer = NULL;

// Class CombatGame.SeqAct_SetInitialCover
// 0x000C (0x00D0 - 0x00C4)
class USeqAct_SetInitialCover : public USequenceAction
{
public:
	TArray< class AActor* >                            Actors;                                           		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46216 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetInitialCover::pClassPointer = NULL;

// Class CombatGame.SeqAct_CCSTriggerEvent
// 0x000C (0x00D0 - 0x00C4)
class USeqAct_CCSTriggerEvent : public USequenceAction
{
public:
	struct FString                                     EventType;                                        		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46220 ];

		return pClassPointer;
	};

};

UClass* USeqAct_CCSTriggerEvent::pClassPointer = NULL;

// Class CombatGame.CombatPawn_SentryGun
// 0x0010 (0x0AF4 - 0x0AE4)
class ACombatPawn_SentryGun : public ACombatPawn_AttackSkillActor
{
public:
	unsigned long                                      Reloading : 1;                                    		// 0x0AE4 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	struct FName                                       ReloadAnim;                                       		// 0x0AE8 (0x0008) [0x0000000000000000]              
	class USkelControlSingleBone*                      BaseControl;                                      		// 0x0AF0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46334 ];

		return pClassPointer;
	};

	void GetRemovedFromPC ( class ACombatPC* CPC );
	void GetRegisteredToPC ( class ACombatPC* CPC );
	void SetIKPrePassBone ( );
	void StopFire ( unsigned char FireModeNum );
	void PostBeginPlay ( );
	void NotifyLocalPlayerTeamReceived ( );
	void NotifyTeamChanged ( );
	void SetBaseYaw ( int Yaw );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void PlayReloadAnim ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ACombatPawn_SentryGun::pClassPointer = NULL;

// Class CombatGame.CombatInstanceItemManager
// 0x0010 (0x004C - 0x003C)
class UCombatInstanceItemManager : public UObject
{
public:
	class UClass*                                      InstanceItemList[ 0x4 ];                          		// 0x003C (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47067 ];

		return pClassPointer;
	};

	void ApplyAP ( class ACombatPawn* inPawn, class UClass* inInstanceItem );
	int InstanceItemListCount ( );
	class UClass* GetGEARItemInfo ( int prestindex );
	class UClass* CreateGEARItemIndex ( int prestindex, int Idx );
	class UClass* CreateGEARItem ( int prestindex, int Idx );
	void SetGearItemClass ( int prestindex, class UClass* ItemClass );
	void Init ( );
};

UClass* UCombatInstanceItemManager::pClassPointer = NULL;

// Class CombatGame.interface_BP
// 0x0000 (0x003C - 0x003C)
class Uinterface_BP : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47113 ];

		return pClassPointer;
	};

	int GetBP ( unsigned char Part );
	unsigned char GetGrade ( );
};

UClass* Uinterface_BP::pClassPointer = NULL;

// Class CombatGame.CombatWeaponBase_Melee
// 0x0070 (0x1A18 - 0x19A8)
class ACombatWeaponBase_Melee : public ACombatWeapon
{
public:
	struct FMeleeAttackFactor                          MeleeFactors[ 0x2 ];                              		// 0x19A8 (0x0058) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bHitPawn : 1;                                     		// 0x1A00 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHitWorldActor : 1;                               		// 0x1A00 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bContinousAttack : 1;                             		// 0x1A00 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                LastAttackIndex;                                  		// 0x1A04 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            VictimsSaveList;                                  		// 0x1A08 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                ArcSectIndex;                                     		// 0x1A14 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47416 ];

		return pClassPointer;
	};

	void CustomFire ( );
	bool IsArcSectionAttack ( );
	bool IsArcFire ( );
	struct FVector PlayPenetrationEffects ( struct FVector* StartLocation, struct FVector* HitLocation );
	int DecideAnimSeq ( int MaxSeqNums );
	void GetFireModeDamage ( struct FVector HitLocation );
	struct FVector GetMeleeStartTraceLocation ( );
	bool CalcWeaponArcFire ( class AActor* TagetActor, struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, struct FImpactInfo* HitImpactInfo );
	void DoFireArc ( );
	void EndOfMeleeAttack ( );
	void MeleeAttackEnded ( );
	float PlayMeleeAttackAnimation ( class ACombatPawn* P );
	void PlayMeleeAttack ( );
	float eventGetTraceRange ( );
	void ServerSetLastImpactLocation ( struct FVector InClientLoc, unsigned long bPenetration );
	void eventCheckMeleeAttackCollision ( );
	void MeleeAttackStarted ( );
	bool IsMeleeing ( );
};

UClass* ACombatWeaponBase_Melee::pClassPointer = NULL;

// Class CombatGame.CombatProj_SmokeGrenade
// 0x0024 (0x0344 - 0x0320)
class ACombatProj_SmokeGrenade : public ACombatProj_Grenade
{
public:
	class UParticleSystem*                             SmokeTemplate;                                    		// 0x0320 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystemComponent*                    SmokePSC;                                         		// 0x0324 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              SmokeDuration;                                    		// 0x0328 (0x0004) [0x0000000000000000]              
	float                                              VolumeHeight;                                     		// 0x032C (0x0004) [0x0000000000000000]              
	float                                              VolumeRadius;                                     		// 0x0330 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   StartSound;                                       		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SmokeLoopingSound;                                		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             SmokeLoopingSoundCom;                             		// 0x033C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned long                                      Is : 1;                                           		// 0x0340 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47661 ];

		return pClassPointer;
	};

	void StartSmokeLoopingSound ( );
	void StopSmokeLoopingSound ( );
	void EndSmoke ( );
	void SpawnSmoke ( );
	void TriggerExplosion ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor );
};

UClass* ACombatProj_SmokeGrenade::pClassPointer = NULL;

// Class CombatGame.ComBatPC_AIGame
// 0x0008 (0x0958 - 0x0950)
class AComBatPC_AIGame : public ACombatPC
{
public:
	class USoundCue*                                   AIAggroMeSound;                                   		// 0x0950 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   AIAggroMeReleaseSound;                            		// 0x0954 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47739 ];

		return pClassPointer;
	};

	void OnAIAggroMeRelease ( struct FString InInstigator );
	void OnAIAggroMe ( struct FString InInstigator, struct FString InTarget );
};

UClass* AComBatPC_AIGame::pClassPointer = NULL;

// Class CombatGame.Combat_MissionPawn
// 0x0000 (0x0A8C - 0x0A8C)
class ACombat_MissionPawn : public ACombatGuy_NPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47807 ];

		return pClassPointer;
	};

	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum );
	void GoRagdoll_MissionPawn ( );
	int GetObjectIconType ( );
	int GetMissionActorSortPriority ( );
	void RemoveMissionActorIcon ( );
	void InitMissionActor ( class ACBGameReplicationInfo* CBGRI, int ArrayIndex );
	void eventDestroyed ( );
	void PostBeginPlay ( );
};

UClass* ACombat_MissionPawn::pClassPointer = NULL;

// Class CombatGame.CombatAssasinGame
// 0x0008 (0x05BC - 0x05B4)
class ACombatAssasinGame : public ACombatPVPGame
{
public:
	unsigned long                                      bVIPMove : 1;                                     		// 0x05B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bVIPalive : 1;                                    		// 0x05B4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      GameStatus;                                       		// 0x05B8 (0x0001) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x05BA (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatAssasinGame.EVACRemainTime

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47827 ];

		return pClassPointer;
	};

	void SetRemainTime ( );
	void EnableEVACPoint ( );
	void AddTeamBonus ( class ACombatPlayerReplicationInfo* PlayerPRI, struct FName EventName );
	void OnMissionSuccess ( class AActor* Target, class AActor* Object );
	void OnMissionEvent ( class USeqAct_MissionEvent* Action );
	void Reset ( );
	bool CheckLive ( );
	bool CheckTimeOver ( );
	bool CheckGoalScore ( );
};

UClass* ACombatAssasinGame::pClassPointer = NULL;

// Class CombatGame.CombatAccessControl
// 0x0000 (0x02DC - 0x02DC)
class ACombatAccessControl : public AAccessControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47847 ];

		return pClassPointer;
	};

	bool ForceKickPlayer ( class APlayerController* C, struct FString KickReason );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FUniqueNetId UniqueId, unsigned long bSupportsAuth, unsigned long bSpectator, struct FString* OutError );
};

UClass* ACombatAccessControl::pClassPointer = NULL;

// Class CombatGame.CombatAI_Helicopter
// 0x0000 (0x0494 - 0x0494)
class ACombatAI_Helicopter : public ACombatBotController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48102 ];

		return pClassPointer;
	};

	struct FRotator GetAdjustedAimFor ( class AWeapon* InWeapon, struct FVector projStart );
};

UClass* ACombatAI_Helicopter::pClassPointer = NULL;

// Class CombatGame.CombatAI_Minetrain
// 0x0000 (0x0494 - 0x0494)
class ACombatAI_Minetrain : public ACombatBotController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48110 ];

		return pClassPointer;
	};

};

UClass* ACombatAI_Minetrain::pClassPointer = NULL;

// Class CombatGame.CombatAI_MoveToPathNode
// 0x0000 (0x0494 - 0x0494)
class ACombatAI_MoveToPathNode : public ACombatBotController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48114 ];

		return pClassPointer;
	};

	void OnAIMoveToActor ( class USeqAct_AIMoveToActor* Action );
};

UClass* ACombatAI_MoveToPathNode::pClassPointer = NULL;

// Class CombatGame.CombatAI_MoveToPathNodeForTut
// 0x0000 (0x0494 - 0x0494)
class ACombatAI_MoveToPathNodeForTut : public ACombatAI_MoveToPathNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48122 ];

		return pClassPointer;
	};

};

UClass* ACombatAI_MoveToPathNodeForTut::pClassPointer = NULL;

// Class CombatGame.CombatAI_SentryGun
// 0x0000 (0x0494 - 0x0494)
class ACombatAI_SentryGun : public ACombatBotController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48126 ];

		return pClassPointer;
	};

	bool eventFireWeapon ( );
};

UClass* ACombatAI_SentryGun::pClassPointer = NULL;

// Class CombatGame.CombatAI_TDMBase
// 0x0010 (0x04A4 - 0x0494)
class ACombatAI_TDMBase : public ACombatBotController_GuyBase
{
public:
	unsigned long                                      bThrowedGrenadeCount : 1;                         		// 0x0494 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class ACombatAIPawn_TDMBase*                       AIPawn_TDMBase;                                   		// 0x0498 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatAIGameTDMBase*                        AIGame_TDMBase;                                   		// 0x049C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                UsableAIBeaconIndex;                              		// 0x04A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48147 ];

		return pClassPointer;
	};

	void PawnDied ( class APawn* inPawn );
	void NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode );
	int GetUsableAIBeaconIndex ( );
	void TakePossession ( );
	void Possess ( class APawn* inPawn, unsigned long bVehicleTransition );
};

UClass* ACombatAI_TDMBase::pClassPointer = NULL;

// Class CombatGame.CombatTDMGameBase
// 0x0002 (0x05B6 - 0x05B4)
class ACombatTDMGameBase : public ACombatPVPGame
{
public:
	unsigned char                                      UnknownData00[ 0x2 ];                             		// 0x05B4 (0x0002) UNKNOWN PROPERTY: WordProperty CombatGame.CombatTDMGameBase.SuddenDeathTime

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48152 ];

		return pClassPointer;
	};

	void BroadcastSuddenDeathMessage ( );
	bool CheckTimeOver ( );
	void CheckRoundOver ( );
	bool CheckSuddenDeathKill ( );
	bool CheckGoalMission ( );
};

UClass* ACombatTDMGameBase::pClassPointer = NULL;

// Class CombatGame.CombatTDMGame
// 0x0002 (0x05B8 - 0x05B6)
class ACombatTDMGame : public ACombatTDMGameBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48151 ];

		return pClassPointer;
	};

	unsigned char eventGetGoalScoreValue ( );
	bool CheckLive ( );
};

UClass* ACombatTDMGame::pClassPointer = NULL;

// Class CombatGame.CombatAIGameTDMBase
// 0x0058 (0x0610 - 0x05B8)
class ACombatAIGameTDMBase : public ACombatTDMGame
{
public:
	TArray< struct FSAITypeInfo >                      AITypeInfoArray;                                  		// 0x05B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSAIWeaponInfo >                    PrimaryWeaponInfoArray;                           		// 0x05C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSAIWeaponInfo >                    SubWeaponInfoArray;                               		// 0x05D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSAIWeaponInfo >                    MeleeWeaponInfoArray;                             		// 0x05DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSAIWeaponInfo >                    GrenadeWeaponInfoArray;                           		// 0x05E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      AITeam;                                           		// 0x05F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlayerTeam;                                       		// 0x05F5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              AIRespawnDelay;                                   		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AIInvulnerableTime;                               		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UCCSBTTree* >                        BTResouceArray;                                   		// 0x0600 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ACombatAIManager*                            AIMan;                                            		// 0x060C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48150 ];

		return pClassPointer;
	};

	float GetInvulnerableTime ( class ACombatPawn* TargetPawn );
	float GetRespawnDelay ( class AController* TargetPC );
	void RestartPlayer ( class AController* NewPlayer );
	class UClass* GetDefaultPlayerClass ( class AController* C );
	unsigned char PickTeam ( unsigned char Num, class AController* C );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void SpawnBotsDestNumber ( );
	class AAISpawnPoint* FindAISpawnPoint ( unsigned char InTeam );
	class AAISpawnPoint* ChooseAISpawnPoint ( unsigned char InTeam, TArray< class AAISpawnPoint* >* outAISpawnPointArray );
	bool IsValidAISpawnPoint ( class AAISpawnPoint* inSpawnPoint );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void StartBots ( );
	unsigned char GetDestAINumber ( );
	unsigned char GetCurAINumber ( );
	unsigned char GetCurPlayerNumber ( );
	bool GetRandomAIWeapon ( struct FSAIWeaponInfo* outResult, TArray< struct FSAIWeaponInfo >* outInWeaponArray );
	int GetRandomAITypePRINone ( );
	void RemoveAIPRI ( class APlayerReplicationInfo* inPRI );
	void InitAITypeInfo ( );
};

UClass* ACombatAIGameTDMBase::pClassPointer = NULL;

// Class CombatGame.CombatAIPawn_TDMBase
// 0x0010 (0x0A9C - 0x0A8C)
class ACombatAIPawn_TDMBase : public ACombatGuy_NPC
{
public:
	class ACombatAI_TDMBase*                           AI_TDMBase;                                       		// 0x0A8C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatAIGameTDMBase*                        AIGame_TDMBase;                                   		// 0x0A90 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      BotArmorClass;                                    		// 0x0A94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsAIFemale : 1;                                  		// 0x0A98 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48154 ];

		return pClassPointer;
	};

	bool IsPossessWeaponByGroup ( unsigned char Group );
	void AddDefaultInventory ( TArray< class UClass* > AdditionalInvetoryClass );
	bool IsFemale ( );
	void ApplyArmor ( );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
};

UClass* ACombatAIPawn_TDMBase::pClassPointer = NULL;

// Class CombatGame.CombatAI_TDMBase_SMG
// 0x0000 (0x04A4 - 0x04A4)
class ACombatAI_TDMBase_SMG : public ACombatAI_TDMBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48184 ];

		return pClassPointer;
	};

};

UClass* ACombatAI_TDMBase_SMG::pClassPointer = NULL;

// Class CombatGame.CombatAI_TDMBase_Sniper
// 0x0000 (0x04A4 - 0x04A4)
class ACombatAI_TDMBase_Sniper : public ACombatAI_TDMBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48188 ];

		return pClassPointer;
	};

};

UClass* ACombatAI_TDMBase_Sniper::pClassPointer = NULL;

// Class CombatGame.CombatAIAction_Sleep
// 0x0004 (0x0054 - 0x0050)
class UCombatAIAction_Sleep : public UCombatAIActionBase
{
public:
	class UCombatAIActionNode_Sleep*                   ActionNode;                                       		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48246 ];

		return pClassPointer;
	};

	void ExecutePost ( class UGripBTInterface* inBTInterface );
	void EndAIAction ( );
	bool ExecutePre ( class UGripBTInterface* inBTInterface, class UCombatAIActionNodeBase* inActionNode );
};

UClass* UCombatAIAction_Sleep::pClassPointer = NULL;

// Class CombatGame.CombatAIActionNode_Sleep
// 0x0004 (0x00AC - 0x00A8)
class UCombatAIActionNode_Sleep : public UCombatAIActionNodeBase
{
public:
	float                                              SleepTime;                                        		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48248 ];

		return pClassPointer;
	};

	struct FString eventGetNodeTitle ( );
};

UClass* UCombatAIActionNode_Sleep::pClassPointer = NULL;

// Class CombatGame.CombatAICond_TargetExistenceDetail
// 0x000C (0x00A4 - 0x0098)
class UCombatAICond_TargetExistenceDetail : public UCCSBTScriptCondition
{
public:
	unsigned char                                      Target;                                           		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DistanceOperator;                                 		// 0x0099 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EnableDistanceCheck : 1;                          		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableVisibleCheck : 1;                           		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      Visible : 1;                                      		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              Distance;                                         		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48293 ];

		return pClassPointer;
	};

	struct FString eventGetNodeTitle ( );
	bool ComputeCondition ( class UGripBTInterface* BTInterface );
	void FlagUsedBBMembers ( class UGripBlackboard* Blackboard );
};

UClass* UCombatAICond_TargetExistenceDetail::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatBGMPlay
// 0x0000 (0x00DC - 0x00DC)
class USeqEvent_CombatBGMPlay : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48337 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatBGMPlay::pClassPointer = NULL;

// Class CombatGame.CombatGameMessage
// 0x000C (0x005C - 0x0050)
class UCombatGameMessage : public UCombatLocalMessage
{
public:
	TArray< struct FName >                             RegisteredMessage;                                		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48659 ];

		return pClassPointer;
	};

	void LastUserMessage ( class APlayerController* P, class APlayerReplicationInfo* LastUserPRI );
	void SuddenDeathMessage ( class APlayerController* P );
	void GameResultMessage ( class APlayerController* P, unsigned char GameResult );
	void RoundResultMessage ( class APlayerController* P, unsigned char ReasonType, unsigned char winType );
	void ClientReceiveEx ( class APlayerController* P, int MessageType, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
	int GetMessageType ( struct FName MessageName );
};

UClass* UCombatGameMessage::pClassPointer = NULL;

// Class CombatGame.Interface_RoundEnd
// 0x0000 (0x003C - 0x003C)
class UInterface_RoundEnd : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48686 ];

		return pClassPointer;
	};

	void RoundEnd ( unsigned long bGameEnded, unsigned char WinnerTeamIndex );
};

UClass* UInterface_RoundEnd::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatRoundProgress
// 0x0000 (0x00DC - 0x00DC)
class USeqEvent_CombatRoundProgress : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48691 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatRoundProgress::pClassPointer = NULL;

// Class CombatGame.CombatBroadcastHandler
// 0x0000 (0x01DC - 0x01DC)
class ACombatBroadcastHandler : public ABroadcastHandler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49015 ];

		return pClassPointer;
	};

	void eventAllowBroadcastLocalizedEx ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02, unsigned char TargetTeamIndex );
	void eventAllowBroadcastLocalizedTeamEx ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
	void BroadcastLocalizedEx ( class AActor* Sender, class ACombatPC* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
};

UClass* ACombatBroadcastHandler::pClassPointer = NULL;

// Class CombatGame.CombatErrorMessage
// 0x0000 (0x0050 - 0x0050)
class UCombatErrorMessage : public UCombatLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49092 ];

		return pClassPointer;
	};

	void ClientReceiveEx ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
};

UClass* UCombatErrorMessage::pClassPointer = NULL;

// Class CombatGame.CombatOccupiedAreaVolume
// 0x009C (0x029C - 0x0200)
class ACombatOccupiedAreaVolume : public AVolume
{
public:
	struct FFlagParticleParam                          ParticleParamList_Unocuupied;                     		// 0x0200 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	struct FFlagParticleParam                          ParticleParamList_Battling;                       		// 0x0214 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	struct FFlagParticleParam                          ParticleParamList_OurTeam;                        		// 0x0228 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	struct FFlagParticleParam                          ParticleParamList_Enemy;                          		// 0x023C (0x0014) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SeizeEffect;                                      		// 0x0250 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    SeizePSC;                                         		// 0x0254 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              SeizeEffectSizeRatio;                             		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FirstOccupiedTeamIndex;                           		// 0x025C (0x0004) [0x0000000000000000]              
	TArray< class ACombatOccupiedAreaData* >           OccupationAreaDatas;                              		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOccupiedTeamMemberInfo >           WithInTeamInfo;                                   		// 0x026C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FOccupyDataType                             CurrentOccupyState;                               		// 0x0278 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                AreaID;                                           		// 0x0280 (0x0004) [0x0000000000000000]              
	struct FString                                     AreaName;                                         		// 0x0284 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bDirectGoalSetting : 1;                           		// 0x0290 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                GoalScore;                                        		// 0x0294 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	class ACombatSeizeFlagActor*                       TargetFlagActor;                                  		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49582 ];

		return pClassPointer;
	};

	bool IsOccupied ( );
	void AddScore ( class ACombatPlayerReplicationInfo* targetPRI, class ACombatSEIModeTeamInfo* TargetTeam, int AdditionalScore );
	int GetOccupationScore ( int TargetAreaID, int TeamIndex );
	int GetOccupiedScoringTime ( int TargetAreaID, int TeamIndex );
	int CheckOccupationNum ( int TargetAreaID, int TeamIndex, unsigned long bInOccupiedArea );
	void AddOccupationScore ( class ACombatPlayerReplicationInfo* targetPRI, class ACBTeamInfo* TargetTeam, int TargetAreaID, int Point );
	void NotifyTurnOff ( );
	void NotifyWork ( );
	void OutOccupiedArea ( class APawn* P );
	void SetFlagState ( unsigned char OccupyState, int TeamIndex );
	void PostBeginPlay ( );
	void AddOccupationAreaData ( class ACombatOccupiedAreaData* NewData );
	void SetOccupationAreaData ( );
	int GetFirstOccupiedTeamIndex ( );
	void SetFirstOccupiedTeamIndex ( int TeamIndex );
	class ACombatSeizeFlagActor* GetSeizeFlagActor ( );
	void UpdateOccupyParticle ( );
	void ChangedOccupyState ( );
	void eventReplicatedEvent ( struct FName VarName );
	void SuccessedOccupation ( class ACombatSEIModeTeamInfo* Team );
	void ReleaseTouchInfo ( );
	void CheckFirstMissionSuccesser ( class ACombatSEIModeTeamInfo* Team );
	void Reset ( );
};

UClass* ACombatOccupiedAreaVolume::pClassPointer = NULL;

// Class CombatGame.CombatAIGameMessage
// 0x0000 (0x005C - 0x005C)
class UCombatAIGameMessage : public UCombatGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49785 ];

		return pClassPointer;
	};

	void ClientReceiveEx ( class APlayerController* P, int MessageType, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
};

UClass* UCombatAIGameMessage::pClassPointer = NULL;

// Class CombatGame.CombatStatStorageAIDefence
// 0x0000 (0x0064 - 0x0064)
class UCombatStatStorageAIDefence : public UCombatStatStoragePVE
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49786 ];

		return pClassPointer;
	};

	void SaveStatByOther ( );
	void SaveStatByWin ( );
	void eventOnEvent ( );
};

UClass* UCombatStatStorageAIDefence::pClassPointer = NULL;

// Class CombatGame.CombatInGameLocalSoundGroup_Base
// 0x0098 (0x00DC - 0x0044)
class UCombatInGameLocalSoundGroup_Base : public UCombatHUDSoundGroup
{
public:
	class USoundCue*                                   CountDownSound;                                   		// 0x0044 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   RespawnSound;                                     		// 0x0048 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   PresetChangeInfo[ 0x3 ];                          		// 0x004C (0x000C) [0x0000000000000000]              
	class USoundCue*                                   TeamChangeSound;                                  		// 0x0058 (0x0004) [0x0000000000000000]              
	TArray< struct FTeamSoundData >                    TeamSoundDataList;                                		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USoundCue*                                   RadioWindowOpenSound;                             		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   RadioWindowCloseSound;                            		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SkillBuySound_Success;                            		// 0x0070 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   SkillBuySound_Fail;                               		// 0x0074 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   SelectPlayerClass;                                		// 0x0078 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   HostageVocieList[ 0x6 ];                          		// 0x007C (0x0018) [0x0000000000000000]              
	class USoundCue*                                   AnnounceSoundList[ 0x3 ];                         		// 0x0094 (0x000C) [0x0000000000000000]              
	class USoundCue*                                   C4BombPickupSound;                                		// 0x00A0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   C4BombDropSound;                                  		// 0x00A4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   C4BombPlantBGM;                                   		// 0x00A8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   ModeScoreGettingSound;                            		// 0x00AC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   SpearTacRespawn;                                  		// 0x00B0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   StartWaveSound;                                   		// 0x00B4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   SuccessedWaveSound;                               		// 0x00B8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   FailedWaveSound;                                  		// 0x00BC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   WarningSound;                                     		// 0x00C0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   ExplotionBeepSound;                               		// 0x00C4 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             ExplosionBeepSoundComponent;                      		// 0x00C8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   ChangedViewTargetOnSpectator;                     		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USoundCue* >                         AIRewardRankSound;                                		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49941 ];

		return pClassPointer;
	};

	class USoundCue* GetRoundConditionSound ( unsigned char Type, int TeamIndex );
	void Init ( class ACombatPlayerControllerBase* OwnerPC );
	void PlayChangedViewTargetOnSpectator ( );
	void StopExplotionBeepSound ( );
	void PlayExplotionBeepSound ( );
	void PlayAnnounceSound ( unsigned char AnnounceSoundType );
	void OnChangePlayerClass ( unsigned char NewClass );
};

UClass* UCombatInGameLocalSoundGroup_Base::pClassPointer = NULL;

// Class CombatGame.CombatHUD_RadioMessage
// 0x003B (0x00C8 - 0x008D)
class UCombatHUD_RadioMessage : public UCombatHUDEntity_Base
{
public:
	struct FLableDataType                              LableData[ 0x2 ];                                 		// 0x0090 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGetRadioMsgKeyBinding__Delegate;              		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSetRadioKeyBinding__Delegate;                 		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50379 ];

		return pClassPointer;
	};

	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
	void ToggleDisplay ( );
	void Hide ( );
	void Show ( );
	void SelectTab ( unsigned char KeyIndex, unsigned long bPressSameKey );
	void AddLabels ( class UClass* VoiceClass );
	void OnSetRadioKeyBinding ( unsigned long bBinding );
	bool OnGetRadioMsgKeyBinding ( struct FString* Key1, struct FString* Key2 );
};

UClass* UCombatHUD_RadioMessage::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PresetSelectScene
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_PresetSelectScene : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50383 ];

		return pClassPointer;
	};

	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_PresetSelectScene::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Preset
// 0x0010 (0x00A0 - 0x0090)
class UCombatHUD_Preset : public UCombatHUD_PresetSelectScene
{
public:
	struct FString                                     DescriptionStr;                                   		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  DescriptionMC;                                    		// 0x009C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50382 ];

		return pClassPointer;
	};

	void HideOkButton ( );
	void ShowOkButton ( );
	void SetOkButton ( struct FString Key, struct FString Description );
	void HidePresetDescription ( );
	void ShowPresetDescription ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
	void SelectPreset ( unsigned char presetIdx, unsigned long bShowAnimation, unsigned long bSmallSize );
	void UpdateLocalPreset ( );
	void receivePresetHide ( );
	void SetKeyString ( );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_Preset::pClassPointer = NULL;

// Class CombatGame.CombatHUD_SpawnPointSelection
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_SpawnPointSelection : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50387 ];

		return pClassPointer;
	};

	void SetKeyString ( );
	void SelectSpawnPoint ( unsigned char SPIdx, unsigned long bShowAnimation, unsigned long bSmallSize );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_SpawnPointSelection::pClassPointer = NULL;

// Class CombatGame.CombatAIGameHUD
// 0x0000 (0x04E4 - 0x04E4)
class ACombatAIGameHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50646 ];

		return pClassPointer;
	};

	void DisplayMatchEnd ( );
	void SetPlayerIsDead ( unsigned long bFlag );
	void PauseComboUI ( unsigned long bPause );
	void HideComboUI ( );
	void UpdateKillComboUI ( int ConsecutiveCombo, unsigned long bAchieve, int Point, int DescriptionID, struct FString SoundCuePath );
	void StopWave ( );
	void StartWave ( );
	void AIGlobalMessage ( unsigned long bWarning, struct FString msg );
	void OnChangedCountDown ( int CountDownTime );
	int GetRoundGoalInfo ( );
	bool CheckPlayerInfoForScoreboard ( struct FCachedPlayerInfo* out_prevInfo, class ACombatPlayerReplicationInfo** out_curPRI );
	void SetUIData_Scoreboard ( class UGFxObject** out_sendData, struct FCachedPlayerInfo* out_playerData );
	void SetPlayerInfoForScoreboard ( struct FCachedPlayerInfo* out_prevInfo, class ACombatPlayerReplicationInfo** out_curPRI );
	void UpdateScoreboard_PlayTime ( );
	void UpdateScoreboard ( );
	class UCombatAIGameMovie* AIGameMovie ( );
	void eventPostRender ( );
};

UClass* ACombatAIGameHUD::pClassPointer = NULL;

// Class CombatGame.CombatCommon_VoiceChatOption
// 0x0000 (0x0080 - 0x0080)
class UCombatCommon_VoiceChatOption : public UCombatCommon_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50759 ];

		return pClassPointer;
	};

	void receiveVoicechatTeamsettingStateBtn ( int Index, unsigned long isMute );
	void receiveVoicechatTeamsettingCloseBtn ( );
	void receiveVoicechatTeamsettingMuteAllBtn ( unsigned long isMute );
	void CallSetPlayerVoice ( int Index, int voiceState, struct FString player_name );
	void CallSetMuteAllSelected ( unsigned long State );
	void CallSetMuteAllText ( struct FString Text );
	void CallSetCloseLabel ( struct FString Label );
	void CallSetTitle ( struct FString Text );
	void ResetUserListAll ( );
	void ReloadListAll ( );
	void UpdateUserStatusList ( int Uid );
	void UpdateUserList ( );
	void InitLabels ( );
	void Init ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatCommon_VoiceChatOption::pClassPointer = NULL;

// Class CombatGame.CombatCommon_OverImmersionGuard
// 0x001C (0x009C - 0x0080)
class UCombatCommon_OverImmersionGuard : public UCombatCommon_Base
{
public:
	unsigned char                                      Icon1;                                            		// 0x0080 (0x0001) [0x0000000000000000]              
	unsigned char                                      Icon2;                                            		// 0x0081 (0x0001) [0x0000000000000000]              
	struct FString                                     HourCountStr;                                     		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     WarningStr;                                       		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50761 ];

		return pClassPointer;
	};

	void CallHideAnimation ( );
	void CallShowAnimation ( int IconNumber1, int IconNumber2, struct FString strHourCount, struct FString strWarning );
	void ShowAnimaion ( unsigned long bShow );
	void SetHourString ( int HourCount );
	void InitIconAndString ( );
	void Init ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatCommon_OverImmersionGuard::pClassPointer = NULL;

// Class CombatGame.CombatCommon_Option
// 0x00D0 (0x0150 - 0x0080)
class UCombatCommon_Option : public UCombatCommon_Base
{
public:
	unsigned char                                      OptionMode;                                       		// 0x0080 (0x0001) [0x0000000000000000]              
	unsigned char                                      SelectedTab;                                      		// 0x0081 (0x0001) [0x0000000000000000]              
	unsigned char                                      SelectedGamePlaySubTab;                           		// 0x0082 (0x0001) [0x0000000000000000]              
	unsigned char                                      SelectedControlSubTab;                            		// 0x0083 (0x0001) [0x0000000000000000]              
	int                                                LabelSettingInfoIndex;                            		// 0x0084 (0x0004) [0x0000000000000000]              
	TArray< struct FLabelSettingInfo >                 LabelSettingInfos;                                		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ButtonEnableInfoIndex;                            		// 0x0094 (0x0004) [0x0000000000000000]              
	TArray< struct FButtonEnableInfo >                 ButtonEnableInfos;                                		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVideoOptionItemInfo >              VideoOptionInfos;                                 		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                VideoOptionInitDataIndex;                         		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                VideoOptionSetValueIndex;                         		// 0x00B4 (0x0004) [0x0000000000000000]              
	TArray< struct FVideoOptionPresetInfo >            VideoPresets;                                     		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ControlValueSettingInfoIndex;                     		// 0x00C4 (0x0004) [0x0000000000000000]              
	TArray< struct FControlOptionItemInfo >            ControlOptionInfos;                               		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SoundValueSettingInfoIndex;                       		// 0x00D4 (0x0004) [0x0000000000000000]              
	TArray< struct FSoundOptionItemInfo >              SoundOptionInfos;                                 		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SoundOptionInitDataIndex;                         		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                SoundOptionSetValueIndex;                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	struct FString                                     VoiceInputModBindingKeyString;                    		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GamePlayValueSettingInfoIndex;                    		// 0x00F8 (0x0004) [0x0000000000000000]              
	TArray< struct FGamePlayOptionItemInfo >           GamePlayOptionInfos;                              		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CrosshairOptionItemInfoIndex;                     		// 0x0108 (0x0004) [0x0000000000000000]              
	TArray< struct FCrosshairOptionItemInfo >          CrosshairOptionItemInfos;                         		// 0x010C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOptionKeyBindingInfo >             KeyBindingInfos;                                  		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedKeySlotIndex;                             		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                OldSelectedKeySlotIndex;                          		// 0x0128 (0x0004) [0x0000000000000000]              
	TArray< struct FKeymapDatum >                      UnbindingKeys;                                    		// 0x012C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           RatingStrings;                                    		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      CrosshairSettingsChanged : 1;                     		// 0x0144 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                VivoxDeviceIndex;                                 		// 0x0148 (0x0004) [0x0000000000000000]              
	int                                                VivoxOldDeviceIndex;                              		// 0x014C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50763 ];

		return pClassPointer;
	};

	bool GetProfileSettings_IgnoreTeamChat ( );
	bool GetProfileSettings_IgnoreAllChat ( );
	void receiveCommonOptionGamePlayCrossHairRecoilChange ( int Id );
	void receiveCommonOptionGamePlayCrossHairAlphaChange ( int Id );
	void receiveCommonOptionGamePlayCrossHairShadowChange ( int Id );
	void receiveCommonOptionGamePlayCrossHairLengthChange ( int Id );
	void receiveCommonOptionGamePlayCrossHairColorChange ( int Id, int R, int G, int B );
	void receiveCommonOptionGamePlayCrossHairFormChange ( int Id );
	void CallSetCrosshairDataArray ( class UGFxObject* Data );
	void CallSetCrosshairColorIndex ( int Idx );
	void CallSetCrosshairCustomColor ( int clr );
	void CallSetCrosshairValue ( int val );
	bool SaveCrosshairSetting ( class UCombatProfileSettings* ProfileSettings );
	void CancelCrosshairSetting ( );
	void SetCrosshairDataArray ( unsigned char Item_Index );
	void InitFriendInviteRefuseSetting ( );
	void InitCrosshairSetting ( unsigned long bResetToDefault );
	void CallsetRatingDesc ( struct FString RatingDesc );
	void CallsetRatingIcon ( class UGFxObject* RatingSetArray );
	void InitializeRatingSetting ( );
	void receiveCommonOptionGamePlaySubTabClick ( int Index );
	void receiveCommonOptionTabMenuClick ( int Index );
	bool ReceiveControlOptionReturnCode ( struct FString OptionMenu, int Code );
	void SetVideoAdvancedOption ( unsigned long bInit );
	void SetOneFrameThreadLag ( );
	void SetSystemCounter ( );
	void SetFPS ( );
	void SetGamma ( );
	void ReceiveVideoOptionIndex ( unsigned char VideoIndex, int ReceivedIndex );
	void receiveLobbyOptionReturnCode ( struct FString OptionMenu, int Code );
	void receiveCommonOptionCancelBtnClick ( );
	void CallInitialization ( );
	void DisplayOptionRestartDialog ( );
	void receiveCommonOptionSaveBtnClick ( );
	void receiveCommonOptionInitBtnClick ( );
	void receiveCommonOptionApplyBtnClick ( unsigned long bSaveAll );
	void SetInGameForegroundFOV ( int FOVValue );
	void receiveCommonOptionGamePlayWFovChange ( int FOVValue );
	void receiveCommonOptionGamePlayIffVeiwOnOffChange ( int Id );
	void receiveCommonOptionGamePlayWeaponFlipChange ( int Id );
	void receiveCommonOptionGamePlayFovChange ( int FOVValue );
	void receiveCommonOptionGamePlayDeadChatBtnClik ( unsigned long bSet );
	void receiveCommonOptionGamePlayFriendRequestBtnClick ( unsigned long bSet );
	void receiveCommonOptionGamePlayTeamChatBtnClik ( unsigned long bSet );
	void receiveCommonOptionGamePlayFullChatBtnClick ( unsigned long bSet );
	bool SaveGamePlaySetting ( class UCombatProfileSettings* ProfileSettings );
	void CallSetGamePlayIntValue ( int NewValue );
	void CallSetGamePlayBoolValue ( unsigned long NewValue );
	void ToggleTeamChat ( );
	void ToggleAllChat ( );
	void CallSetHoldToAimDataArray ( class UGFxObject* Data );
	void CallSetTeamOutlineDataArray ( class UGFxObject* Data );
	void CallSetIffViewDataArray ( class UGFxObject* Data );
	void CallWeaponFlipDataArray ( class UGFxObject* Data );
	void CallPresentlyFovData ( int Number );
	void CallSetPreviousFovData ( int Number );
	void CallSetPresentlyFovLabel ( struct FString Label );
	void CallSetPreviousFovLabel ( struct FString Label );
	void SetFovDefaultData ( );
	void SetGamePlayValue ( unsigned char GamePlayIndex, int NewValue );
	void CancelGamePlayOptionSetting ( );
	void InitializeHoldtoAimDataSetting ( );
	void InitializeTeamOutlineSetting ( );
	void InitializeIFFViewSetting ( );
	void InitializeFlipMeshSetting ( );
	void InitializeGamePlayOptionSetting ( unsigned long bResetToDefault );
	void SaveVivoxInputDeviceSoundSetting ( class UCombatProfileSettings* ProfileSettings, class UCombatVoiceInterfaceVivox* Vivox );
	bool SaveSoundSetting ( class UCombatProfileSettings* ProfileSettings );
	void CallSetInputModeKeyValue ( struct FString Key );
	void UpdateVoiceInputModBindingKeyString ( class UCombatProfileSettings* ProfileSettings );
	void CallSetSoundBoolValue ( unsigned long NewValue );
	void CallSetSoundArrayValue ( int NewValue );
	void CallSetSoundIntValue ( int NewValue );
	void ReceiveSoundOptionIndex ( unsigned char SoundIndex, int ReceivedIndex, unsigned long bCallFromGfxCallback );
	void SetSoundValue ( unsigned char SoundIndex, int NewValue );
	void CancelSoundOptionSetting ( );
	void CallSetSoundOptionDataArray ( class UGFxObject* Data );
	void SetSoundOptionDataArray ( unsigned char Item_Index );
	void SetSoundOptionInputDeviceDataArray ( );
	void receiveCommonOptionInputDeviceChange ( int Index );
	void SetVCInputDeviceSoundValue ( struct FString profInputDevice, unsigned long bResetToDefault );
	void InitializeSoundOptionSetting ( unsigned long bResetToDefault );
	bool SaveKeyBindingSetting ( class UCombatProfileSettings* ProfileSettings );
	bool SaveMouseSetting ( class UCombatProfileSettings* ProfileSettings );
	bool SaveControlSetting ( class UCombatProfileSettings* ProfileSettings );
	void CallOffKeyCodeDataLink ( );
	void CheckKeyBindingDuplication ( class UCombatProfileSettings* ProfileSettings, int keyCode );
	bool CheckUnbindingKey ( int keyCode );
	void SetSlotKeyBinding ( int keyCode );
	void ReleaseKeySlot ( );
	void receiveCommonOptionKeyboardKeyUp ( int keyCode );
	void CallonKeyCodeDataLink ( );
	void CallUpdateKeyBindingData ( class UGFxObject* Data );
	void UpdateKeyBindingData ( int Id, unsigned long bAlert, struct FString KeyString );
	void PrepareForKeyBinding ( );
	void CallSelectKeyBindingList ( int Id );
	void SetOldSlotKeyBinding ( );
	void receiveCommonOptionKeyBindingBtnClick ( int Id );
	void CallSetKeyBindingData ( class UGFxObject* Data );
	void CancelKeyBinding ( );
	void InitializeKeyBinding ( unsigned long bResetToDefault );
	void receiveCommonOptionIndividualMouseSensitivityBtnClick ( );
	void receiveCommonOptionMasterMouseSensitivityBtnClick ( );
	void CallSelectIndividualSensitivityBtn ( unsigned long bSelected );
	void CallSelectMasterSensitivityBtn ( unsigned long bSelected );
	void CallSelectReverseMouseBtn ( unsigned long NewValue );
	void receiveCommonOptionGamePlayHoldToAimChange ( int Id );
	void receiveCommonOptionReverseMouseBtnClick ( unsigned long bSet );
	void CancelHoldtoAim ( );
	void CancelMouseInvert ( );
	void CancelPresetMouseSensitivity ( );
	void CancelMasterMouseSensitivity ( );
	void CancelMouseSensMode ( );
	void CancelMouseSetting ( );
	void InitializeHoldtoAim ( class UCombatProfileSettings* ProfileSettings, unsigned long bResetToDefault );
	void InitializeMouseInvert ( class UCombatProfileSettings* ProfileSettings, unsigned long bResetToDefault );
	void InitializePresetMouseSensitivity ( class UCombatProfileSettings* ProfileSettings, unsigned long bResetToDefault );
	void InitializeMasterMouseSensitivity ( class UCombatProfileSettings* ProfileSettings, unsigned long bResetToDefault );
	void InitializeMouseSensMode ( class UCombatProfileSettings* ProfileSettings, unsigned long bResetToDefault );
	void InitializeMouseSetting ( unsigned long bResetToDefault );
	void CancelControlOptionSetting ( );
	void ReceiveCommonOptionPresetAllChkBtnClick ( unsigned char ControlIndex, unsigned long bSet );
	void ReceiveControlOptionIndex ( unsigned char ControlIndex, int ReceivedIndex );
	void CallSetControlValueWithTwoParam ( int Param1, int Pram2, float NewValue );
	void CallSetControlValueWithOneParam ( int Param1, float NewValue );
	void CallSetControlValue ( float NewValue );
	void SetControlValueWithTwoParamAndSetOldIndex ( unsigned char ControlIndex, int Param1, int Param2, float NewValue );
	void SetControlValueWithTwoParam ( unsigned char ControlIndex, int Param1, int Param2, float NewValue );
	void SetControlValueWithOneParam ( unsigned char ControlIndex, int Param1, float NewValue );
	void SetControlValue ( unsigned char ControlIndex, float NewValue );
	void InitializeControlOptionSetting ( );
	bool SaveGraphicSetting ( );
	void SelectSceneTone ( );
	void SelectBackgroundShadow ( );
	void SelectGoreLevel ( unsigned long bIsTeen );
	void SelectScreenMode ( );
	void SelectScanRates ( int SelectedIndex );
	void SelectResolutions ( );
	void SelectAspectRatios ( );
	void ApplyScreenResolution ( );
	void SetVideoAdvancedOptionDisabled ( unsigned long bDisabled );
	void CalldisableGrpQuality ( unsigned long bSet, int Index );
	void CallSetVideoOptionDataArray ( class UGFxObject* Data );
	void SetVideoOptionDataArray ( unsigned char Item_Index );
	int GetVideoPresetLevelIndex ( int OptionItemIndex, int QuiltyLevel );
	void PresetVideoQualityLevel ( );
	void VideoItemSelectSetUI ( );
	void AddScanResolutionItem ( int Width, int Height );
	void AddScanRateItem ( int HZ );
	void AddAspectRatioItem ( int Horiz, int Vert, unsigned long bWide );
	void AddScreenInfoLabel ( );
	void CallSetVideoValue ( int NewValue );
	void SetVideoValue ( unsigned char VideoIndex, int NewValue );
	void CancelAspectAndResolution ( );
	void SetAspectRatios ( int AspIndex, int ResIndex );
	void CancelVideoOptionSetting ( );
	void ResetInitVideoOptions ( );
	void InitializeVideoOptionSetting ( );
	void CallSetButtonActivation ( unsigned long bSet );
	void SetButtonActivation ( int LabelID, unsigned long bSet );
	void InitButtonEnable ( );
	void CallSetLabelAndTwoValues ( int Param1, int Param2, struct FString Label );
	void CallSetLabelAndValue ( int Param1, struct FString Label );
	void CallSetLabelAndTooltip ( struct FString Label, struct FString ToolTip );
	void CallSetLabel ( struct FString Label );
	void InitLabelData ( );
	void CallControlSubSelectTab ( int TabIndex );
	void CallGamePlaySubSelectTab ( int TabIndex );
	void CallSelectTab ( int TabIndex );
	void Init ( );
	void SetMode ( unsigned char Mode );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatCommon_Option::pClassPointer = NULL;

// Class CombatGame.CombatChatManager
// 0x08E8 (0x0924 - 0x003C)
class UCombatChatManager : public UObject
{
public:
	class UInterface_Chat*                             MainChatUI;                                       		// 0x003C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0040 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UInterface_Chat*                             MirrorChatUI;                                     		// 0x0044 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0048 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FChattingDisplayInfo                        ChattingDisplayInfoList[ 0x18 ];                  		// 0x004C (0x0840) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FChattingDisplayInfo                        GameManagerChattingDisplayInfo;                   		// 0x088C (0x0058) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultColor;                                     		// 0x08E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      ChattingType;                                     		// 0x08F0 (0x0001) [0x0000000000000000]              
	struct FString                                     MsgColor;                                         		// 0x08F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ChatUserColor;                                    		// 0x0900 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ClanNameColor;                                    		// 0x090C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FChattingInfo >                     ChatListInfo;                                     		// 0x0918 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50765 ];

		return pClassPointer;
	};

	void Dev_UpdateDevelopeMessage ( struct FString msg );
	void AddGMChatMessage ( unsigned char chatType, struct FString msg, struct FString TargetName );
	void AddChatMessage ( unsigned char chatType, struct FString msg, struct FString TargetName, struct FString senderClanName, unsigned char TargetType, unsigned long bGameManager );
	unsigned char MakeChatUIInfo ( unsigned char chatType, struct FString TargetName, struct FString msg, unsigned char TargetType, unsigned long bGameManager, struct FString senderClanName );
	void AddMsg ( unsigned long bUserChat, struct FString msg );
	void AddClanName ( struct FString ClanName, unsigned long bGameManager );
	void AddChatUser ( struct FString TargetName, unsigned long bGameManager );
	void AddGMLabel ( unsigned long bGameManager );
	void AddInGameTeamLabel ( int userID );
	void AddChatLabal ( );
	void SetChatColors ( unsigned char TargetType, unsigned long bGameManager );
	struct FString GetGMLabel ( );
	struct FString GetChatLabel ( );
	void GetChatUserInfo ( struct FString ChatUserName, struct FString ChatUserClanName, struct FChattingUserInfo* _ChatUserInfo );
	void ClearMirrorChatUI ( );
	void SetMirrorChatUI ( class UInterface_Chat* chatUI );
	void SetMainChatUI ( class UInterface_Chat* chatUI );
	void Init ( );
};

UClass* UCombatChatManager::pClassPointer = NULL;

// Class CombatGame.CombatDialogManager
// 0x0054 (0x0090 - 0x003C)
class UCombatDialogManager : public UObject
{
public:
	class UInterface_Dialog*                           OwnerMovie;                                       		// 0x003C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0040 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	int                                                DefaultOKBtnLabelID;                              		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                DefaultCancelBtnLabelID;                          		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                DefaultTitleLabelID;                              		// 0x004C (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultOKBtnLabel;                                		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultCancelBtnLabel;                            		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultTitleLabel;                                		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDialogInfo >                       DialogInfos;                                      		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned long >                            DialogUseInfos;                                   		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIgnoreCreateDailog : 1;                          		// 0x008C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50768 ];

		return pClassPointer;
	};

	void SetIgnoreCreateDialog ( unsigned long bIgnore );
	bool IsDialogShown ( );
	void HideDialog ( int Id );
	int ShowDialog ( int Type, struct FScriptDelegate DelegateOK, struct FScriptDelegate DelegateCancel, struct FDialogLocalizingData* out_dialogData );
	void InitDialogDefaultLabels ( );
	void InitDialogInfos ( );
	void Init ( class UInterface_Dialog* Owner );
};

UClass* UCombatDialogManager::pClassPointer = NULL;

// Class CombatGame.Interface_Dialog
// 0x0000 (0x003C - 0x003C)
class UInterface_Dialog : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50823 ];

		return pClassPointer;
	};

	void UnloadDialog ( int Depth );
	struct FString LoadDialog ( int Id, int Type, struct FDialogLocalizingData* out_dialogData );
};

UClass* UInterface_Dialog::pClassPointer = NULL;

// Class CombatGame.CombatDialog
// 0x0020 (0x00A0 - 0x0080)
class UCombatDialog : public UCombatCommon_Base
{
public:
	class UGFxClikWidget*                              OKBtn;                                            		// 0x0080 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CancelBtn;                                        		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             OKBtnDelegate;                                    		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             CancelBtnDelegate;                                		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50897 ];

		return pClassPointer;
	};

	void ASRemoveAllEventListeners ( struct FString Event );
	void ASAddEventListener ( struct FString Type, class UGFxObject* O, struct FString func );
	void SetListener ( class UGFxObject* O, struct FString Member, struct FScriptDelegate Listener );
	void RemoveAllEventListeners ( struct FString Event );
	void CombatAddEventListener ( class UGFxObject* Target, struct FString Type, struct FScriptDelegate Listener );
	void SetButtonListener ( struct FString Type, struct FScriptDelegate DelegateListener );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void InitDailog ( struct FScriptDelegate OKBtnDelegate_, struct FScriptDelegate CancelBtnDelegate_ );
};

UClass* UCombatDialog::pClassPointer = NULL;

// Class CombatGame.CombatHUD_StatusEffect
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_StatusEffect : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51364 ];

		return pClassPointer;
	};

	void CallSetFlashEffectGauge ( float Rate );
	void CallHideFlashEffect ( );
	void CallShowFlashEffect ( );
};

UClass* UCombatHUD_StatusEffect::pClassPointer = NULL;

// Class CombatGame.CombatHUD_TutorialMessage
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_TutorialMessage : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51366 ];

		return pClassPointer;
	};

	void CallSetMessage ( struct FString Text );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_TutorialMessage::pClassPointer = NULL;

// Class CombatGame.CombatHUD_TutorialQuest
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_TutorialQuest : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51368 ];

		return pClassPointer;
	};

	void CallResetQuest ( );
	void CallCompleteQuest ( struct FString Id );
	void CallAddQuest ( struct FString Id, struct FString Normal, struct FString complete );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_TutorialQuest::pClassPointer = NULL;

// Class CombatGame.CombatHUD_TutorialHelp
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_TutorialHelp : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51370 ];

		return pClassPointer;
	};

	void CallSetHelpText ( struct FString Title, struct FString Desc, struct FString InputKey );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_TutorialHelp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_TutorialDialog
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_TutorialDialog : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51372 ];

		return pClassPointer;
	};

	void CallSetShowTime ( int Num );
	void CallAddDialog ( struct FString Text );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_TutorialDialog::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ChampionshipObserverDebugMessage
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_ChampionshipObserverDebugMessage : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51374 ];

		return pClassPointer;
	};

	void ToggleDisplay ( );
	void CallAddMessage ( struct FString msg );
};

UClass* UCombatHUD_ChampionshipObserverDebugMessage::pClassPointer = NULL;

// Class CombatGame.CombatHUD_BigSizeStringTextBox
// 0x0010 (0x009C - 0x008C)
class UCombatHUD_BigSizeStringTextBox : public UCombatHUD_Base
{
public:
	class UGFxObject*                                  TextField;                                        		// 0x008C (0x0004) [0x0000000000000000]              
	struct FString                                     msg;                                              		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51377 ];

		return pClassPointer;
	};

	void SetArmorSet ( struct FString Key, struct FString WeaponName );
	void SetSubWeapon ( struct FString Key, struct FString WeaponName );
	void SetPrimaryWeapon ( struct FString Key, struct FString WeaponName );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_BigSizeStringTextBox::pClassPointer = NULL;

// Class CombatGame.CombatHUD_VoiceChatTalking
// 0x000F (0x009C - 0x008D)
class UCombatHUD_VoiceChatTalking : public UCombatHUDEntity_Base
{
public:
	TArray< struct FString >                           CurrentTalkingUsers;                              		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51388 ];

		return pClassPointer;
	};

	void CallDrawOff ( int Index );
	void CallDrawOn ( int Index, struct FString player_name );
	void UIReset ( );
	void UpdateTalkingUser ( );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_VoiceChatTalking::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ChangeTeam
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_ChangeTeam : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51390 ];

		return pClassPointer;
	};

	unsigned char GetActivateHUDByGameState ( unsigned char Status );
	void CallFadeOut ( );
	void CallStoppedAnimation ( struct FString Message, int currentTeam );
	void CallStartAnimation ( struct FString Message, int currentTeam );
};

UClass* UCombatHUD_ChangeTeam::pClassPointer = NULL;

// Class CombatGame.CombatHUD_NoticePosition
// 0x000F (0x009C - 0x008D)
class UCombatHUD_NoticePosition : public UCombatHUDEntity_Base
{
public:
	unsigned char                                      CurrentStatus;                                    		// 0x0090 (0x0001) [0x0000000000000000]              
	unsigned long                                      bTryShowNoticeposition : 1;                       		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              LastUpdateTime;                                   		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51392 ];

		return pClassPointer;
	};

	void CallShowBlinkMessageFadeInOutAnimation ( struct FString Message );
	void SetShowBlinkMessageFadeInOutAnimation ( struct FString Message );
	void CallShowMessageFadeInOutAnimation ( struct FString Message );
	void SetShowMessageFadeInOutAnimation ( struct FString Message );
	void CallSetNoticePositionMessage ( struct FString Message, unsigned long SetAnimation );
	void SetNoticePositionMessage ( struct FString Message, unsigned long SetAnimation );
	void SetShowMessageFadeInOutCombinationText ( int Id, struct FString Replace, struct FString With, struct FString Replace01, struct FString With01, struct FString Replace02, struct FString With02, struct FString Replace03, struct FString With03 );
	void SetNoticepositionCombinationText ( int Id, struct FString Replace, struct FString With, struct FString Replace01, struct FString With01, struct FString Replace02, struct FString With02, struct FString Replace03, struct FString With03 );
	void CallHideAnimationNoticePosition ( );
	void Tick ( float DeltaSeconds );
	void Show ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
	void Custom ( unsigned char _GameStatus, unsigned char _PlayerState );
};

UClass* UCombatHUD_NoticePosition::pClassPointer = NULL;

// Class CombatGame.CombatHUD_OccupationMessage
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_OccupationMessage : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51394 ];

		return pClassPointer;
	};

	void CallMessage ( struct FString msg );
};

UClass* UCombatHUD_OccupationMessage::pClassPointer = NULL;

// Class CombatGame.CombatHUD_SelectSkillList
// 0x0017 (0x00A4 - 0x008D)
class UCombatHUD_SelectSkillList : public UCombatHUDEntity_Base
{
public:
	unsigned long                                      bTryShowSkillList : 1;                            		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      binitCreateSkilldata : 1;                         		// 0x0090 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                CurrentGroupIndex;                                		// 0x0094 (0x0004) [0x0000000000000000]              
	TArray< int >                                      UnlockAnimPlayedIndices;                          		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51396 ];

		return pClassPointer;
	};

	void SetGlobalCoolTimeText ( int Index, int CountTime );
	void SetCoolTimeText ( int Index, int CountTime );
	void callUnlockAnimation ( int Index );
	void CallstartFadeInAnimation ( );
	void CallSelectAnimation ( int Index );
	void CallsetSkillPriceText ( struct FString PriceText );
	struct FString GetHotKeyString ( int category_ );
	void callstopCoolTime ( int InIndex );
	void callPlayCoolTime ( int InIndex, int inType, int inCount, int inSecond, int inStartRatio, int inEndRatio );
	void callLockAnimation ( int InIndex );
	void callUpdateCRPoint ( int inCRPoint );
	void DoLockAnimation ( unsigned long bLock, int InIndex );
	void CallsetData ( class UGFxObject* inData );
	void UpdateSkillList ( unsigned char updateCause, class UCombatSkillManager** constClassSystem_ );
	void SelectSkillList ( int Index );
	void CreateSkillList ( );
	void StartCreateSkillList ( );
	void ShowSkillList ( );
	bool IsInitSkillList ( );
	void InitSkillList ( );
	void Tick ( float DeltaSeconds );
	void Hide ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
	void Custom ( unsigned char _GameStatus, unsigned char _PlayerState );
};

UClass* UCombatHUD_SelectSkillList::pClassPointer = NULL;

// Class CombatGame.CombatHUD_SelectPosition
// 0x0017 (0x00A4 - 0x008D)
class UCombatHUD_SelectPosition : public UCombatHUDEntity_Base
{
public:
	unsigned char                                      CurrentStatus;                                    		// 0x0090 (0x0001) [0x0000000000000000]              
	float                                              LastUpdateTime;                                   		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bTryShowSelectposition : 1;                       		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                CurrentSelectPositionIndex;                       		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  SelectInfo;                                       		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51398 ];

		return pClassPointer;
	};

	void GetPositionData ( struct FPositionStruct setPositon, class UGFxObject** out_Data );
	void GetSkillPositionData ( struct FPositionInfoStruct PositionInfo, class UGFxObject** out_Data );
	void SetPosistionInfo ( int Index );
	void SetPositionList ( );
	void CallSelectionInfoHide ( );
	void CallSelectionInfoShow ( );
	void CallSetUpdatePositionList ( class UGFxObject* positionData_ );
	void CallSetSelectedIndex ( int Index );
	void SetSelectedIndex ( int Index );
	bool IsInitSelectposition ( );
	void Tick ( float DeltaSeconds );
	void Show ( );
	void HideAnimation ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
	void Custom ( unsigned char _GameStatus, unsigned char _PlayerState );
	void SetpositionInfo ( class UGFxObject* Info );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_SelectPosition::pClassPointer = NULL;

// Class CombatGame.CombatHUD_MagazineState
// 0x006B (0x00F8 - 0x008D)
class UCombatHUD_MagazineState : public UCombatHUDEntity_Base
{
public:
	int                                                LastMagazineState;                                		// 0x0090 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInitLabels : 1;                                  		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     StateString[ 0x4 ];                               		// 0x0098 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StateFontColor[ 0x4 ];                            		// 0x00C8 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51400 ];

		return pClassPointer;
	};

	void CallSetMagazineStateTxt ( struct FString htmlText_ );
	void InitLabels ( );
	void UpdateMagazineState ( );
	void Hide ( );
	void Init ( class UCombatTeamGameMovie* Movie );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_MagazineState::pClassPointer = NULL;

// Class CombatGame.CombatHUD_NoticeHotKey
// 0x0033 (0x00C0 - 0x008D)
class UCombatHUD_NoticeHotKey : public UCombatHUDEntity_Base
{
public:
	struct FString                                     HotKeyFontColor;                                  		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ItemFontColor;                                    		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PrevHotKey;                                       		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PrevActionName;                                   		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51402 ];

		return pClassPointer;
	};

	void CallSetNoticeTxt ( struct FString msg_ );
	void SetHotKeyText ( unsigned char hotKeyType_, struct FString hotKey_, struct FString actionName_ );
	bool IsShowHotKey ( );
	void HideHotKey ( );
	void DisplayHotKey ( unsigned char hotKeyType_, struct FString* hotKey_, struct FString* actionName_ );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
	void Custom ( unsigned char _GameStatus, unsigned char _PlayerState );
};

UClass* UCombatHUD_NoticeHotKey::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_RankUp
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_Message_RankUp : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51405 ];

		return pClassPointer;
	};

	void CallAlertRankUpMessage ( struct FString newIconImgPath, struct FString Label, struct FString oldIconImgPath );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_Message_RankUp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Surrender
// 0x000F (0x009C - 0x008D)
class UCombatHUD_Surrender : public UCombatHUDEntity_Base
{
public:
	unsigned char                                      CurrentTeamIndex;                                 		// 0x0090 (0x0001) [0x0000000000000000]              
	int                                                UI_RemainSecond;                                  		// 0x0094 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCanVote : 1;                                     		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51407 ];

		return pClassPointer;
	};

	void CallSetVotingIcon ( int Index, int Type );
	void CallSetShortKey ( int Index, struct FString shotKey, struct FString Text );
	void CallSetTitleText ( struct FString Text );
	void UpdateSurrendReply ( int Index, int Type );
	void UpdateSurrenderTitle ( );
	void Tick ( float DeltaSeconds );
	void HideSurrender ( );
	void UpdateTeamIndex ( unsigned char NewTeam );
	void InitSurrender ( int Team, int StartMemberCount, unsigned long Canvote );
};

UClass* UCombatHUD_Surrender::pClassPointer = NULL;

// Class CombatGame.CombatHUD_BattleLog
// 0x0007 (0x0094 - 0x008D)
class UCombatHUD_BattleLog : public UCombatHUDEntity_Base
{
public:
	unsigned long                                      bDisplayed : 1;                                   		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51409 ];

		return pClassPointer;
	};

	void Callinitialize ( );
	void CallsetData ( class UGFxObject* Obj );
	void Hide ( );
	void Show ( );
	void SetBattleLogData ( class UCombatInGameBattleLog* battleLog );
	void Init ( class UCombatTeamGameMovie* Movie );
	void DisplayTimer ( );
	bool GetDisplayed ( );
	void SetDisplayed ( unsigned long bSet );
};

UClass* UCombatHUD_BattleLog::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ChampionshipSpectatedPlayerInfo
// 0x000F (0x009C - 0x008D)
class UCombatHUD_ChampionshipSpectatedPlayerInfo : public UCombatHUDEntity_Base
{
public:
	struct FString                                     LastPlayerName;                                   		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51411 ];

		return pClassPointer;
	};

	void CallChangeBg ( int TeamNum );
	void CallHidePlayerInfo ( );
	void CallShowPlayerInfo ( );
	void CallSetClanInfo ( struct FString clanImgPath, struct FString ClanName );
	void CallSetPlayerName ( int Number, struct FString PlayerName );
	unsigned char GetGrenadeUIType ( class ACombatWeapon* TargetWeapon );
	unsigned char GetWeaponUIType ( class ACombatWeapon* TargetWeapon );
	void UpdateGreandeCount ( class ACombatWeapon* ViewTargetWeapon, class UCBUIDataStore_HUD** out_UIDataStore_HUD );
	void InitGrenadeCount ( class ACombatPawn* ViewTargetPawn );
	void UpdateObserverWeaponInfo ( class ACombatPawn* ViewTargetPawn );
	void ClearViewTargetInfo ( );
	void UpdateViewTargetInfo ( );
	void SetObserverInformation ( );
	void Init ( class UCombatTeamGameMovie* Movie );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
};

UClass* UCombatHUD_ChampionshipSpectatedPlayerInfo::pClassPointer = NULL;

// Class CombatGame.CombatHUD_DeathCamRecord
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_DeathCamRecord : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51413 ];

		return pClassPointer;
	};

	void ClassSetSuicideMessage ( struct FString Message );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	void Init ( class UCombatTeamGameMovie* Movie );
	void CallSetScore ( struct FString myName, int MyScore, struct FString enemyName, int EnemyScore );
};

UClass* UCombatHUD_DeathCamRecord::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ObserverHelp
// 0x0007 (0x0094 - 0x008D)
class UCombatHUD_ObserverHelp : public UCombatHUDEntity_Base
{
public:
	unsigned long                                      bInitKeyData : 1;                                 		// 0x0090 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51415 ];

		return pClassPointer;
	};

	bool IsChangeSpectatingCameraMode ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	void InitLabels ( );
	void Show ( );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_ObserverHelp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ObserverInfo
// 0x005B (0x00E8 - 0x008D)
class UCombatHUD_ObserverInfo : public UCombatHUDEntity_Base
{
public:
	int                                                LastHealth;                                       		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastAmmoCount;                                    		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastMagazineCount;                                		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastGrenadeA;                                     		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastGrenadeB;                                     		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LastWeaponName;                                   		// 0x00A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      LastHasBomb : 1;                                  		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      LastShowBullet : 1;                               		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                LastLevel;                                        		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastTierPoint;                                    		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastCCardID;                                      		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LastLevelImgPath;                                 		// 0x00C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     LastTierImgSmallPath;                             		// 0x00CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     LastCCardPath;                                    		// 0x00D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                LastKillCount;                                    		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51417 ];

		return pClassPointer;
	};

	void UpdateBombImage ( class ACombatPawn* ViewTargetPawn );
	void UpdateGreandeCount ( class ACombatWeapon* CurrentWeapon );
	void InitGrenadeCount ( class ACombatPawn* ViewTargetPawn );
	void CallSetWeaponKill ( int killcount );
	void UpdateWeaponName ( class ACombatWeapon* CurrentWeapon );
	void UpdateKillCount ( class ACombatWeapon* CurrentWeapon );
	void UpdateObserverWeaponInfo ( class ACombatPawn* ViewTargetPawn );
	void CallSetPlayerInfo ( int Mode, unsigned long bMyTeam, struct FString RankIconPath, struct FString PlayerName, struct FString ClanIconPath, struct FString ClanName, struct FString ClanLevel, struct FString ClanLevelColor, struct FString miniClassIconUrl, struct FString CallingCardURL );
	void UpdateViewTargetInfo ( );
	class UCombatDataTableRefCallingCard* GetRefCallingCardTable ( int CallingCardID );
	void Init ( class UCombatTeamGameMovie* Movie );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
};

UClass* UCombatHUD_ObserverInfo::pClassPointer = NULL;

// Class CombatGame.CombatHUD_GrenadeIndicator
// 0x0027 (0x00B4 - 0x008D)
class UCombatHUD_GrenadeIndicator : public UCombatHUDEntity_Base
{
public:
	class UGFxObject*                                  Indicators[ 0x4 ];                                		// 0x0090 (0x0010) [0x0000000000000000]              
	class UGFxObject*                                  GrenadeIconMC[ 0x4 ];                             		// 0x00A0 (0x0010) [0x0000000000000000]              
	unsigned long                                      bShowInit : 1;                                    		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51422 ];

		return pClassPointer;
	};

	void SetIndicatorRotation ( int Index, int rotation_value );
	void HideAllIndicators ( );
	void HideIndicator ( int Index );
	void Init ( class UCombatTeamGameMovie* Movie );
	void Hide ( );
	void Show ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_GrenadeIndicator::pClassPointer = NULL;

// Class CombatGame.CombatHUD_CompetitionWarmUp
// 0x0007 (0x0094 - 0x008D)
class UCombatHUD_CompetitionWarmUp : public UCombatHUDEntity_Base
{
public:
	int                                                UI_ReaminSecond;                                  		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51423 ];

		return pClassPointer;
	};

	void CallSetTeamData ( struct FString leftTeam, struct FString rightTeam, int leftTeamScore, int rightTeamScore, struct FString leftTeamImg, struct FString rightTeamImg );
	void CallsetTimer ( struct FString Text );
	void CallSetBottomText ( struct FString Text );
	void CallSetBG ( struct FString img );
	void CallUpdateUserState ( int teamNumber, int Index, int State );
	void CallSetCompetitionData ( int teamNumber, int Index, struct FString _Name, struct FString ClanName, int CoverIndex, struct FString clanImg, struct FString RankImg, struct FString tierImg, struct FString CallingCardURL, int State );
	void Callinitialize ( );
	void UpdateWarmUpInfomation ( );
	void InitWarmUpInfomation ( );
	void Tick ( float DeltaSeconds );
	void Init ( class UCombatTeamGameMovie* Movie );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_CompetitionWarmUp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_WarmUp
// 0x001B (0x00A8 - 0x008D)
class UCombatHUD_WarmUp : public UCombatHUDEntity_Base
{
public:
	TArray< struct FWarmUpInfo >                       WarmUpPmInfos;                                    		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FWarmUpInfo >                       WarmUpVcInfos;                                    		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51424 ];

		return pClassPointer;
	};

	void Reset ( );
	void UpdateWarmUpInfomation ( );
	void Tick ( float DeltaSeconds );
	void CallHideModeGuide ( );
	void CallShowModeGuide ( );
	void CallHideAnimation ( );
	void CallSetWeapon ( struct FString Title, struct FString Key, struct FString PlayerName, struct FString ImageURL, unsigned long bNoWeapon, struct FString gradeUrl );
	void CallSetVcPlayerList ( class UGFxObject* Data );
	void CallSetPmPlayerList ( class UGFxObject* Data );
	void SetWarmUpPresetImage ( int nPresetNumber );
	void Init ( class UCombatTeamGameMovie* Movie );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_WarmUp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_RoundOver
// 0x009B (0x0128 - 0x008D)
class UCombatHUD_Message_RoundOver : public UCombatHUDEntity_Base
{
public:
	struct FString                                     RoundWinLabel;                                    		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RoundLoseLabel;                                   		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MatchEndWinLabel;                                 		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MatchEndLoseLabel;                                		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AISuccessLabel;                                   		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AIFailLabel;                                      		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AIPlayTimeLabel;                                  		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AIWaveLabel;                                      		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AIDefendMarkHpLabel;                              		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AITeamScoreLabel;                                 		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RoundWinReasonLabelID;                            		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                RoundLoseReasonLabelID;                           		// 0x010C (0x0004) [0x0000000000000000]              
	struct FString                                     RoundWinReasonLabel;                              		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RoundLoseReasonLabel;                             		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51427 ];

		return pClassPointer;
	};

	void CallStartAIRoundMessage ( class UGFxObject* Object );
	void CallStartCompititiveRoundMessage ( unsigned long Outcome, int myTeam, int PMScore, int VCScore, class UGFxObject* clanData );
	void CallStartSingleRound ( unsigned long Outcome, int myTeam, int PMScore, int VCScore, class UGFxObject* ClanMatchData );
	void CallStartMultiRound ( unsigned long Outcome, int myTeam, int PMScore, int VCScore, unsigned long bfinal, class UGFxObject* ClanMatchData );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
	class UGFxObject* MakeCompetitiveMatchClanData ( );
	class UGFxObject* MakeClanMatchData ( );
	void DisplayAIMatchEndInfo ( unsigned long bWin, struct FString PlayTime, int Wave, int ObjectHP, int TeamScore, int Rank );
	void DisplayMatchEndInfo ( unsigned char RoundCountType, unsigned long bWin, unsigned char myTeamType, int VCScore, int PMScore );
	void DisplayRoundOverInfo ( unsigned char RoundCountType, unsigned long bWin, unsigned char myTeamType, int VCScore, int PMScore );
	void SendLabels_MatchEnd ( );
	void SendLabels_RoundOver ( );
	void SetRoundReasonLabels ( int winLocalID, int loseLocalID );
	void InitLabels ( );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_Message_RoundOver::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_CountDown
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_Message_CountDown : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51429 ];

		return pClassPointer;
	};

	void CallMessage ( struct FString Count );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_Message_CountDown::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_RoundStart
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_Message_RoundStart : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51430 ];

		return pClassPointer;
	};

	void CallHideAnimationMessage ( );
	void CallStartMessage ( unsigned long mark, int Team, struct FString Title, struct FString SubTitle );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_Message_RoundStart::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Chat
// 0x000C (0x0098 - 0x008C)
class UCombatHUD_Chat : public UCombatHUDComponent_Base
{
public:
	struct FString                                     LastWhisperSenderName;                            		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51437 ];

		return pClassPointer;
	};

	void UpdateLastWhisperList ( struct FString Recipient );
	void SaveLastWhisperSenderName ( struct FString senderName );
	void AddMessage ( unsigned char TabType, TArray< struct FChattingInfo > chatInfo );
	bool AbleClanChatting ( );
	void CallSetWhisperId ( struct FString NickName );
	void CallSetModeLables ( struct FString Whisper );
	void CallSetKeyLabels ( struct FString KeyLabel, struct FString keyDescription );
	void CallAddMessage ( class UGFxObject* List );
	void CallSetLabelLastWhisperList ( struct FString Move_, struct FString Select_ );
	void CallRemoveLastWhisperListData ( );
	void CallSetLastWhisperListData ( class UGFxObject* List );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_Chat::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PresetSelectWaiting
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_PresetSelectWaiting : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51441 ];

		return pClassPointer;
	};

	unsigned char GetActivateHUDByGameState ( unsigned char Status );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_PresetSelectWaiting::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PresetTimer
// 0x0000 (0x0090 - 0x0090)
class UCombatHUD_PresetTimer : public UCombatHUD_PresetSelectScene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51443 ];

		return pClassPointer;
	};

	void CallStartTimer ( int TimeSec );
	void CallSetTimerEnd ( int TimeSec );
};

UClass* UCombatHUD_PresetTimer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PresetHelp
// 0x0000 (0x0090 - 0x0090)
class UCombatHUD_PresetHelp : public UCombatHUD_PresetSelectScene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51445 ];

		return pClassPointer;
	};

	void SetDisplayText ( );
	void SetKeyString ( );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_PresetHelp::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Bomb_TimeBar
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_Bomb_TimeBar : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51448 ];

		return pClassPointer;
	};

	void CallC4KitDefusing ( unsigned long bDefusing );
	void CallC4KitMessage ( struct FString InMessage, unsigned long bAnimation );
	void CallEndTimeBar ( int Type, int remainTime );
	void CallStartTimeBar ( int Type, int StartTime, int TotalTime, unsigned long bAnimation );
	void CallInitTimeBar ( );
	void HideBombProgressBar ( );
	void EndBombDefuseProgressBar ( int remainTime );
	void EndBombPlantProgressBar ( int remainTime );
	void StartBombDefuseProgressBar ( int TimeTill, int TotalTime, unsigned long bAnimation, struct FString Text, unsigned long bActivateC4Kit );
	void SetBombPlantProgressBar ( unsigned long bActivateC4Kit );
};

UClass* UCombatHUD_Bomb_TimeBar::pClassPointer = NULL;

// Class CombatGame.CombatHUD_DeviceCoolTimer
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_DeviceCoolTimer : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51450 ];

		return pClassPointer;
	};

	void Reset ( );
	void CallInitCoolTime ( );
	void CallStartCoolTime ( int Time );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_DeviceCoolTimer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_GOContainer
// 0x0017 (0x00A4 - 0x008D)
class UCombatHUD_GOContainer : public UCombatHUDEntity_Base
{
public:
	TArray< class UCombatHUD_GameObject* >             Components;                                       		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                Count;                                            		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                LastGOLocalMessageID;                             		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51453 ];

		return pClassPointer;
	};

	void DisplayGODistanceMessage ( );
	void Update ( float DeltaSeconds, TArray< struct FVector >* GO_Locations );
	void RegisterComponent ( class UCombatTeamGameMovie* Movie, class UCombatHUD_GameObject** Component );
	void Hide ( );
	void Show ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_GOContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_BombsitesContainer
// 0x0004 (0x00A8 - 0x00A4)
class UCombatHUD_BombsitesContainer : public UCombatHUD_GOContainer
{
public:
	float                                              GoMsgUpdateTime;                                  		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51452 ];

		return pClassPointer;
	};

	bool CheckNearbyGO ( int* MessageId );
	bool CheckHotKeyMessage ( struct FString* HotKey, struct FString* Action );
	bool CheckAvailableGO ( int* MessageId );
	void DisplayGODistanceMessage ( );
	void Update ( float DeltaSeconds, TArray< struct FVector >* Bombsite_Locations );
	void RegisterComponent ( class UCombatTeamGameMovie* Movie, class UCombatHUD_GameObject** Component );
};

UClass* UCombatHUD_BombsitesContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_HitDamageBoard
// 0x001B (0x00A8 - 0x008D)
class UCombatHUD_HitDamageBoard : public UCombatHUDEntity_Base
{
public:
	TArray< class UGFxObject* >                        BoardList;                                        		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UGFxObject* >                        BoardList_DamageTF;                               		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51456 ];

		return pClassPointer;
	};

	struct FString GetBoardName ( int Index );
	void SetDamage ( int Index, int Damage );
	void SetBoardPosition ( int Index, float X, float Y );
	void SetBoardVisible ( int Index, unsigned long bShow );
	void Init ( class UCombatTeamGameMovie* Movie );
	void Hide ( );
	void Show ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_HitDamageBoard::pClassPointer = NULL;

// Class CombatGame.CombatHUD_KillMark
// 0x0027 (0x00B4 - 0x008D)
class UCombatHUD_KillMark : public UCombatHUDEntity_Base
{
public:
	TArray< struct FKillMarkStringStruct >             KMStringList;                                     		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ImagePath;                                        		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SoundPath;                                        		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51458 ];

		return pClassPointer;
	};

	void ShowVictimName ( struct FString VictimName );
	struct FString GetSoundPath ( struct FString soundName );
	void CallVictimNameMessage ( struct FString PlayerName );
	int CallKillMessage ( struct FString nameText_, int succession_, struct FString imageURL_, int bg_, int id_, int grade_ );
	bool DisplayKillMark ( class UCombatDataTableRefGameScoring* refScoring_ );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_KillMark::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ScoringRight
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_ScoringRight : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51461 ];

		return pClassPointer;
	};

	void CallMessage ( struct FString Message, struct FString Score, unsigned char Type );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_ScoringRight::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ScoringList
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_ScoringList : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51463 ];

		return pClassPointer;
	};

	void CallComboMessage ( struct FString msg, struct FString scorePoint );
	void CallMessage ( struct FString msg, struct FString scorePoint );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_ScoringList::pClassPointer = NULL;

// Class CombatGame.CombatHUD_BlockAndReport
// 0x0037 (0x00C4 - 0x008D)
class UCombatHUD_BlockAndReport : public UCombatHUDEntity_Base
{
public:
	struct FString                                     ImageReportURL;                                   		// 0x0090 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FBlockAndReportLabelSettingInfo >   BlockAndReportLabelSettingInfos;                  		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBlockAndReportLabelSettingInfo >   BlockAndReportRadioButtonInfos;                   		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FReportPlayerInfo >                 ReportReceiptList;                                		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ReportPlayerID;                                   		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51466 ];

		return pClassPointer;
	};

	void receiveBlackListDeclarationCancelButton ( );
	void receiveBlackListDeclarationOkButton ( int Index );
	void receiveBlackListPlayerListCancelButton ( );
	void receiveBlackListPlayerListOkButton ( struct FString ReportPlayerName );
	void CallChangePlayerListMode ( );
	void CallSetDeclarationTarget ( struct FString TargetName );
	void CallChangeDeclarationMode ( );
	void CallSetPlayerList ( class UGFxObject* FriendList, class UGFxObject* EnemyList );
	void UpdateReportReceiptList ( int PlayerID, unsigned char ReportType );
	unsigned char ReportReceiptCheck ( int PlayerID, unsigned char ReportType );
	void SetCurrentReportPlayerID ( struct FString ReportPlayerName );
	bool IsTeamMateByUserID ( int userID );
	void UpdateUserList ( );
	void InitLabels ( );
	void Show ( );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_BlockAndReport::pClassPointer = NULL;

// Class CombatGame.CombatInGameOptionMenu
// 0x000F (0x009C - 0x008D)
class UCombatInGameOptionMenu : public UCombatHUDEntity_Base
{
public:
	TArray< struct FMenuInfo >                         MenuInfoList;                                     		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51467 ];

		return pClassPointer;
	};

	void receiveOptionMenuButton ( int Index );
	void OptionBtnDisable ( );
	void BlockAndReportBtnDisable ( );
	void CallSetVisibleButton ( int Index, unsigned long bVisible );
	void CallSetDisableButton ( int Index, unsigned long bDisable );
	void InitBtns ( );
	void InitLabels ( );
	void SetButtonDisable ( int Index, unsigned long Disable );
	void Hide ( );
	void Show ( );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatInGameOptionMenu::pClassPointer = NULL;

// Class CombatGame.CombatHUD_KillDeathList
// 0x0057 (0x00E4 - 0x008D)
class UCombatHUD_KillDeathList : public UCombatHUDEntity_Base
{
public:
	struct FString                                     KillDeathList_KillTypeIcons[ 0x7 ];               		// 0x0090 (0x0054) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51469 ];

		return pClassPointer;
	};

	void AddKillDeathInfo ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Killed, int WeaponIndex, int Option );
	void AddSuicideInfo ( class APlayerReplicationInfo* Killed );
	void CallKillInfoList ( int killerType, struct FString KillerName, int victimType, struct FString VictimName, struct FString killTypeImagePath, struct FString WeaponImagePath );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_KillDeathList::pClassPointer = NULL;

// Class CombatGame.CombatHUD_IFFContainer
// 0x0017 (0x00A4 - 0x008D)
class UCombatHUD_IFFContainer : public UCombatHUDEntity_Base
{
public:
	class UGFxObject*                                  AttachLayerMC;                                    		// 0x0090 (0x0004) [0x0000000000000000]              
	TArray< struct FIFFObjectData >                    IFFs;                                             		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                IFFObjectCreateRange;                             		// 0x00A0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51471 ];

		return pClassPointer;
	};

	void CallFlashEffectAlign ( class UGFxObject* Target );
	void CallFlashEffectGauge ( class UGFxObject* Target, float Rate );
	void CallSetLevelIcon ( class UGFxObject* IFF, struct FString RankImagePath );
	void CallSetAggroName ( class UGFxObject* IFF, struct FString AggroName );
	void CallInitAlign ( class UGFxObject* IFF, struct FString TeamType, struct FString ClanName, struct FString NickName, unsigned long bShowHPBar, unsigned long bShowIndex, int Index );
	void ClearIFF ( class UCombatHUD_IFFObject* ClearObject );
	void Init ( class UCombatTeamGameMovie* Movie );
	void ResizeIFF ( );
	bool FindNoUsingIFF ( class UCombatHUD_IFFObject** NewObject );
	void GetIFF ( class UCombatHUD_IFFObject** NewObject );
	void SetObserverIFF ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_IFFContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_Personal
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_Message_Personal : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51474 ];

		return pClassPointer;
	};

	void ClearMessage ( );
	void SetMessage ( struct FString Message );
	void Hide ( );
	void Show ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_Message_Personal::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_Personal_Auto
// 0x0000 (0x0090 - 0x0090)
class UCombatHUD_Message_Personal_Auto : public UCombatHUD_Message_Personal
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51473 ];

		return pClassPointer;
	};

	void SetMessage ( struct FString Message );
};

UClass* UCombatHUD_Message_Personal_Auto::pClassPointer = NULL;

// Class CombatGame.CombatHUD_GlobalMessage
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_GlobalMessage : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51477 ];

		return pClassPointer;
	};

	void CallMessagePush ( int MessageType, struct FString mainMsg, struct FString subMsg );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_GlobalMessage::pClassPointer = NULL;

// Class CombatGame.CombatHUD_RespawnProgressBar
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_RespawnProgressBar : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51479 ];

		return pClassPointer;
	};

	void CallStartTimer ( int Time, struct FString Label );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_RespawnProgressBar::pClassPointer = NULL;

// Class CombatGame.CombatHUD_RoundStatusBar
// 0x0023 (0x00B0 - 0x008D)
class UCombatHUD_RoundStatusBar : public UCombatHUDEntity_Base
{
public:
	class UGFxObject*                                  MinTF;                                            		// 0x0090 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SecTF;                                            		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                LastWinCondition;                                 		// 0x0098 (0x0004) [0x0000000000000000]              
	struct FString                                     C4Label;                                          		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UObject*                                     Option;                                           		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                TimerState;                                       		// 0x00AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51486 ];

		return pClassPointer;
	};

	void CallVCPeopleCount ( int myTeam, int Count );
	void SetVCPlayerCount ( int myTeam, int Count );
	void CallPMPeopleCount ( int myTeam, int Count );
	void SetPMPlayerCount ( int myTeam, int Count );
	void HideVipStatus ( );
	void ShowVipStatus ( struct FString msg );
	void InvokeSetModeScoring ( int TeamNum, struct FString Score, int ScoringType );
	void SetModeScoring ( unsigned char TeamNum, int Score );
	void SetBunkerGoalNum ( unsigned char TeamNum, unsigned char Index, unsigned char BusterState );
	bool SetMissionActorState ( unsigned char TeamIndex, int MissionActorIndex, unsigned char CurrState );
	void InvokeCreateBunkerMode ( class UGFxObject* MissionActorLabel, int myTeamNum );
	bool CreateBunkerMode ( );
	void SetC4IconVisible ( unsigned long bVisible );
	void SetRoundWinCondition ( int condition_ );
	void SetCount ( unsigned char teamIndex_, int count_ );
	void SetMyTeam ( int teamIndex_ );
	void CallHideHostageState ( );
	void CallSetHostageState ( class UGFxObject* State );
	void CallTimerOnOff ( unsigned long onoff );
	void CallSetDurationTime ( int Duration );
	void CallStopC4Timer ( );
	void CallUpdateC4Minute ( int remainSecond );
	void CallStartC4Timer ( int remainSecond, struct FString Message );
	void CallPauseTimer ( );
	void CallUpdateMinute ( int remainSecond );
	void CallStartOneMinute ( int remainSecond );
	void CallInitTimer ( );
	void Custom ( unsigned char _GameStatus, unsigned char _PlayerState );
	void StartRescueTimer ( int rescueTime );
	void StartC4Timer ( int c4Time );
	void ChangeAIWaveMode ( class UClass* OptionClass );
	void ChangeRescueDeffenseMode ( );
	void ChangeRescueAttackMode ( );
	void ChangeBusterMode ( );
	void ChangeSEIMode ( );
	void ChangeDemolitionDeffenseMode ( );
	void ChangeDemolitionAttackMode ( );
	void ChangeTdmHardCoreMode ( );
	void ChangeTdmMode ( );
	void SetTime_Sec ( unsigned char Sec );
	void SetTime_Min ( unsigned char Min );
	void Reset ( );
	void Init ( class UCombatTeamGameMovie* Movie );
	void SetObserverRoundDisplay ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_RoundStatusBar::pClassPointer = NULL;

// Class CombatGame.CombatHUD_HitIndicator
// 0x001F (0x00AC - 0x008D)
class UCombatHUD_HitIndicator : public UCombatHUDEntity_Base
{
public:
	class UGFxObject*                                  Direction[ 0x7 ];                                 		// 0x0090 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51492 ];

		return pClassPointer;
	};

	void Disappear ( int Dir );
	void Appear ( int Dir );
	void SetDirectionRotation ( int Dir, float rotation_value );
	void Init ( class UCombatTeamGameMovie* Movie );
	void Hide ( );
	void Show ( );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_HitIndicator::pClassPointer = NULL;

// Class CombatGame.CombatHUD_WeaponInfo
// 0x0033 (0x00C0 - 0x008D)
class UCombatHUD_WeaponInfo : public UCombatHUDEntity_Base
{
public:
	int                                                LastAmmoCount;                                    		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                LastRemainAmmoCount;                              		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                LastChamberAmmoCount;                             		// 0x0098 (0x0004) [0x0000000000000000]              
	unsigned char                                      LastUIType;                                       		// 0x009C (0x0001) [0x0000000000000000]              
	unsigned char                                      LastSelectedGrenadeSlot;                          		// 0x009D (0x0001) [0x0000000000000000]              
	struct FString                                     LastGrenadeSlotACount;                            		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastGrenadeSlotBCount;                            		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastGrenadeSlotAType;                             		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                LastGrenadeSlotBType;                             		// 0x00BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51504 ];

		return pClassPointer;
	};

	void CallStopSkill ( struct FString Id, unsigned long Visible, unsigned long reuse );
	void CallPlaySkill ( struct FString Id, int Time, int StartValue, int EndValue );
	void CallHideSkill ( struct FString Id, unsigned long StopAnim );
	void CallShowSkill ( struct FString Id, struct FString imgUrl );
	void CallHideKillInfo ( );
	void CallShowKillInfo ( struct FString txt );
	bool IsAvailableGrenadeType ( unsigned char grenadeType );
	void SetSelectedGrenadeType ( unsigned char grenadeType, unsigned long bInit );
	void SetGrenadeSlotBType ( unsigned char grenadeType, unsigned long bInit );
	void SetGrenadeSlotBCount ( int Count, unsigned long bInit );
	void SetGrenadeSlotAType ( unsigned char grenadeType, unsigned long bInit );
	void SetGrenadeSlotACount ( int Count, unsigned long bInit );
	void CallAlarmC4 ( );
	void CallHideC4 ( );
	void CallShowC4 ( unsigned long bAnimation );
	void CallSetWeapon ( struct FString WeaponName, struct FString WeaponImagePath );
	void CallSetBulletType3 ( int ammoCnt_, int maxMagazineCnt_, int remainAmmoCnt, unsigned long bChangeMode_ );
	void CallSetBulletType2 ( int ammoCnt_, int maxMagazineCnt_, int remainAmmoCnt, int chamberAmmoCnt, unsigned long bChangeMode_ );
	void CallSetBulletType1 ( int ammoCnt_, unsigned long bChangeMode_ );
	void CallSetBulletType0 ( );
	void Reset ( );
	void UpdateObserverWeaponInfo ( class ACombatPawn* ViewTargetPawn );
	void UpdateGreandeCount ( class ACombatWeapon* ViewTargetWeapon, class UCBUIDataStore_HUD** out_UIDataStore_HUD );
	void InitGrenadeCount ( class ACombatPawn* ViewTargetPawn );
	unsigned char GetGrenadeUIType ( class ACombatWeapon* TargetWeapon );
	unsigned char GetWeaponUIType ( class ACombatWeapon* TargetWeapon );
	void UpdateGrenadeCount ( unsigned long bChangeWeapon_ );
	void UpdateAmmoCount ( unsigned long bChangeWeapon_ );
	void UpdateKillCount ( );
	void ChangeWeaponInfo ( unsigned long isObserver );
	void Init ( class UCombatTeamGameMovie* Movie );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_WeaponInfo::pClassPointer = NULL;

// Class CombatGame.CombatHUD_CharacterInfo
// 0x0027 (0x00B4 - 0x008D)
class UCombatHUD_CharacterInfo : public UCombatHUDEntity_Base
{
public:
	int                                                LastHealth;                                       		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                LastHealthMax;                                    		// 0x0094 (0x0004) [0x0000000000000000]              
	struct FString                                     LastRankName;                                     		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastRankIconPath;                                 		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastPositionType;                                 		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51507 ];

		return pClassPointer;
	};

	void CallSetPortrait ( struct FString ImagPath );
	void CallHideBottomEffect ( );
	void CallShowBottomEffect ( );
	void CallHideTopEffect ( );
	void CallShowTopEffect ( );
	void CallHideTactical ( );
	void CallShowTactical ( struct FString ImagPath );
	void CallHidePassiveSkill ( );
	void CallShowPassiveSkill ( struct FString ImagPath );
	void CallSetCrPoint ( struct FString Point );
	void CallShowPosition ( int position_ );
	void CallUpdateHP ( int remainHP, int maxHP );
	void CallUpdateLevelInfo ( struct FString RankName, struct FString RankImagePath );
	void SetPortraitIcon ( struct FString inImgPath );
	void UpdateBottomEffect ( unsigned long _bOn );
	void UpdateTopEffect ( unsigned long _bOn );
	void ShowTacticalGearSetIcon ( );
	void Tick ( float DeltaSeconds );
	void Reset ( );
	void UpdateRankInfo ( struct FString RankName, struct FString RankImagePath, int _RankBigIconImageID );
	void UpdateHP ( int CurrentHealth, int currentHealthMax );
	unsigned char GetActivateHUDByPlayerState ( unsigned char PlayerState );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
	void Show ( );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_CharacterInfo::pClassPointer = NULL;

// Class CombatGame.CombatMain_HUD
// 0x0000 (0x0080 - 0x0080)
class UCombatMain_HUD : public UCombatMain_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51549 ];

		return pClassPointer;
	};

	void Init ( class UCombatGFxMoviePlayer* Movie );
};

UClass* UCombatMain_HUD::pClassPointer = NULL;

// Class CombatGame.Interface_Chat
// 0x0000 (0x003C - 0x003C)
class UInterface_Chat : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51632 ];

		return pClassPointer;
	};

	void UpdateLastWhisperList ( struct FString Recipient );
	void SaveLastWhisperSenderName ( struct FString senderName );
	void AddMessage ( unsigned char TabType, TArray< struct FChattingInfo > chatInfo );
};

UClass* UInterface_Chat::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ChampionshipPlayerInfoList
// 0x0000 (0x008C - 0x008C)
class UCombatHUD_ChampionshipPlayerInfoList : public UCombatHUDComponent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51686 ];

		return pClassPointer;
	};

	void Initialize ( );
	void CallSetPlayerHp ( int ListIndex, int healthPercent );
	void CallSetPlayerName_AttackTeam ( int ListIndex, int playerStatus, unsigned long bHasC4 );
	void CallSetPlayerName_DefenseTeam ( int ListIndex, int playerStatus );
	void CallSetPlayerStatus ( int ListIndex, int Status );
	void CallSetPlayerKillNum ( int ListIndex, int killcount );
	void CallSetPlayerWeaponName ( int ListIndex, struct FString WeaponName );
	void CallSetPlayerName ( int ListIndex, struct FString PlayerName );
};

UClass* UCombatHUD_ChampionshipPlayerInfoList::pClassPointer = NULL;

// Class CombatGame.CombatInGameBattleLog
// 0x0070 (0x00AC - 0x003C)
class UCombatInGameBattleLog : public UObject
{
public:
	TArray< struct FbattleLog >                        BattleLogData;                                    		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDisplayTable >                     OtherPlayersTables;                               		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FDisplayTable                               MyTable;                                          		// 0x0054 (0x002C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LocalPlayerName;                                  		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                KillerIndex;                                      		// 0x008C (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           SupportedGameNames;                               		// 0x0090 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bActive : 1;                                      		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	class UCombatHUD_BattleLog*                        BattleLogMC;                                      		// 0x00A0 (0x0004) [0x0000000000000000]              
	class ACombatPC*                                   LocalPC;                                          		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              DisplayTableSettingDelayTime;                     		// 0x00A8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51877 ];

		return pClassPointer;
	};

	void ResetAll ( );
	void SetBattleLog ( );
	void SortOtherPlayersTablesByTimeStamp ( );
	void SetMyTable ( );
	void ExtractOtherPlayersTables ( );
	void SetOtherPlayersTables ( );
	void SetDisplayTables ( );
	void GatheringLastTakeHitInfo ( struct FString CauserName, struct FString VictimName, int HitBodyIndex );
	bool GetActive ( );
	void SetActive ( unsigned long bSet );
	void SetGameMode ( struct FString GameModeName );
	bool GetDisplayed ( );
	void SetBattleLogMC ( class UCombatHUD_BattleLog* mc );
	void Init ( struct FString PlayerName );
};

UClass* UCombatInGameBattleLog::pClassPointer = NULL;

// Class CombatGame.CombatInGameChatManager
// 0x0000 (0x0924 - 0x0924)
class UCombatInGameChatManager : public UCombatChatManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52562 ];

		return pClassPointer;
	};

	void AddInGameTeamLabel ( int userID );
};

UClass* UCombatInGameChatManager::pClassPointer = NULL;

// Class CombatGame.CombatHUD_AIDefenseKillCombo
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_AIDefenseKillCombo : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52568 ];

		return pClassPointer;
	};

	void CallPlayWave ( );
	void CallPauseWave ( );
	void CallPlayAnimation ( struct FString Description, int Combo );
	void CallSetSecond ( int Sec );
	void CallSetComboImageUrl ( struct FString URL );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_AIDefenseKillCombo::pClassPointer = NULL;

// Class CombatGame.CombatHUD_AIMissionActorContainer
// 0x0000 (0x00A4 - 0x00A4)
class UCombatHUD_AIMissionActorContainer : public UCombatHUD_GOContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52570 ];

		return pClassPointer;
	};

	void Update ( float DeltaSeconds, TArray< struct FVector >* GO_Locations );
	void InitGameObject ( class ACBGameReplicationInfo* CBGRI );
	void RegisterComponent ( class UCombatTeamGameMovie* Movie, class UCombatHUD_GameObject** Component );
};

UClass* UCombatHUD_AIMissionActorContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUDOption_AIWaveRoundStatus
// 0x0018 (0x0054 - 0x003C)
class UCombatHUDOption_AIWaveRoundStatus : public UObject
{
public:
	struct FRoundStatusInfo                            RoundStatus;                                      		// 0x003C (0x0014) [0x0000000000002000]              ( CPF_Transient )
	int                                                ObjectHealthWarningCondition;                     		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52572 ];

		return pClassPointer;
	};

	void SetLabel ( class UGFxObject* NewLabel );
	void UpdateObjectHealthWarning ( );
	void UpdateObjectHealth ( );
	void UpdateRemainingBotCount ( );
	void UpdateMaxWave ( );
	void UpdateCurrentWave ( );
	void UpdateTeamScore ( );
	void Update ( unsigned long bForceUpdate, struct FRoundStatusInfo newInfo );
	void InitData ( );
};

UClass* UCombatHUDOption_AIWaveRoundStatus::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Message_Warning
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_Message_Warning : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52576 ];

		return pClassPointer;
	};

	void CallStartWarning ( );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_Message_Warning::pClassPointer = NULL;

// Class CombatGame.CombatHUD_WaveModePlayTime
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_WaveModePlayTime : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52578 ];

		return pClassPointer;
	};

	void CallSetPlayTime ( struct FString playTimeText );
	unsigned char GetActivateHUDByGameState ( unsigned char Status );
};

UClass* UCombatHUD_WaveModePlayTime::pClassPointer = NULL;

// Class CombatGame.CombatHUD_AIMissionActor
// 0x0009 (0x0159 - 0x0150)
class UCombatHUD_AIMissionActor : public UCombatHUD_GameObject
{
public:
	class ACombatBarricade*                            TargetActor;                                      		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastDisplayHealth;                                		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LastUIState;                                      		// 0x0158 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52659 ];

		return pClassPointer;
	};

	void CallsetHpGauge ( class UGFxObject* MovieClip, int ColorNumber, int Percenet );
	void UpdateHealth ( );
	void SetTarget ( class AActor* NewTarget );
	void GetLevelObjectMovieClips ( );
	void UpdateVisible ( );
	void Update ( float DeltaSeconds, struct FVector Location );
	void GetIconFrameLabel ( struct FString* out_label );
};

UClass* UCombatHUD_AIMissionActor::pClassPointer = NULL;

// Class CombatGame.SeqAct_ProjAttack
// 0x0048 (0x0120 - 0x00D8)
class USeqAct_ProjAttack : public USeqAct_Latent
{
public:
	class UClass*                                      ProjectileClass;                                  		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnHegiht;                                      		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomRadius;                                     		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InitDelay;                                        		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxSpawnCount;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             AimPS;                                            		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseWarningMessage : 1;                           		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVector >                           SpawnLocationList;                                		// 0x00F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FVector >                           DestinationList;                                  		// 0x0104 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FVector >                           AimPSLocList;                                     		// 0x0110 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                ProjSpawnCount;                                   		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52814 ];

		return pClassPointer;
	};

	void OnWarning ( );
	void TimerSpawnProjectile ( );
	void SpawnAimPS ( class AWorldInfo* inWorldInfo, TArray< struct FVector > inAimPSLocList );
	void ReadyToAttack ( );
	void SuccessFinish ( );
	void eventActivated ( );
};

UClass* USeqAct_ProjAttack::pClassPointer = NULL;

// Class CombatGame.CombatTDMGameReplicationInfo
// 0x0000 (0x02C4 - 0x02C4)
class ACombatTDMGameReplicationInfo : public ACBGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52858 ];

		return pClassPointer;
	};

};

UClass* ACombatTDMGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatStatStorageAITDM
// 0x0000 (0x0064 - 0x0064)
class UCombatStatStorageAITDM : public UCombatStatStoragePVE
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52978 ];

		return pClassPointer;
	};

	void SaveStatByOther ( );
};

UClass* UCombatStatStorageAITDM::pClassPointer = NULL;

// Class CombatGame.CombatBotPRI_AITDM
// 0x0000 (0x041C - 0x041C)
class ACombatBotPRI_AITDM : public ACombatPlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52979 ];

		return pClassPointer;
	};

	void ResetPlayerHUDState ( );
	void NotifyPlayingState ( unsigned char NewState );
};

UClass* ACombatBotPRI_AITDM::pClassPointer = NULL;

// Class CombatGame.Interface_ClientReset
// 0x0000 (0x003C - 0x003C)
class UInterface_ClientReset : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53129 ];

		return pClassPointer;
	};

	void ClientReset ( );
};

UClass* UInterface_ClientReset::pClassPointer = NULL;

// Class CombatGame.CombatInstanceItem_C4TimeReduceKitBase
// 0x0008 (0x00A4 - 0x009C)
class UCombatInstanceItem_C4TimeReduceKitBase : public UCombatInstanceItem
{
public:
	int                                                ReducePlantTime;                                  		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                ReduceDefuseTime;                                 		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53133 ];

		return pClassPointer;
	};

};

UClass* UCombatInstanceItem_C4TimeReduceKitBase::pClassPointer = NULL;

// Class CombatGame.CombatAINoWaveGame
// 0x0000 (0x05B4 - 0x05B4)
class ACombatAINoWaveGame : public ACombatPVEGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53452 ];

		return pClassPointer;
	};

	class APlayerStart* CheckBestStartForPlayer ( class AController* Player, unsigned char InTeam );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
};

UClass* ACombatAINoWaveGame::pClassPointer = NULL;

// Class CombatGame.CombatTDMHUD
// 0x0000 (0x04E4 - 0x04E4)
class ACombatTDMHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53591 ];

		return pClassPointer;
	};

	void NotifyPickupSpecialWeaponGlobalMessage ( int TextID, struct FString WeaponName, struct FString OwnerCallSign );
	void NotifyPickupSpecialWeaponSystemMessage ( int TextID, struct FString WeaponName, struct FString OwnerCallSign );
	int GetGoalStringIDForScoreboard ( );
	int GetRoundGoalInfo ( );
};

UClass* ACombatTDMHUD::pClassPointer = NULL;

// Class CombatGame.CombatTDMRadarCore
// 0x0000 (0x03A8 - 0x03A8)
class ACombatTDMRadarCore : public ACombatRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53614 ];

		return pClassPointer;
	};

};

UClass* ACombatTDMRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatAITeamGameHUD
// 0x0000 (0x04E4 - 0x04E4)
class ACombatAITeamGameHUD : public ACombatTDMHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53615 ];

		return pClassPointer;
	};

};

UClass* ACombatAITeamGameHUD::pClassPointer = NULL;

// Class CombatGame.CombatWeaponPickupFactory
// 0x0075 (0x0361 - 0x02EC)
class ACombatWeaponPickupFactory : public ACombatPickupFactory
{
public:
	class UClass*                                      WeaponPickupClass;                                		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponPickupScaling;                              		// 0x02F0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsActive : 1;                                    		// 0x02F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDrawOutline : 1;                                 		// 0x02F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisplayHUDIcon : 1;                              		// 0x02F4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDropSameInventoryGroup : 1;                      		// 0x02F4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDestroySameInventoryGroup : 1;                   		// 0x02F4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FOutlineProperty                            OutlineColorForComrade;                           		// 0x02F8 (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FOutlineProperty                            OutlineColorForEnemy;                             		// 0x032C (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      HUDIconType;                                      		// 0x0360 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53676 ];

		return pClassPointer;
	};

	int GetObjectIconType ( );
	void NotifyLocalPlayerTeamReceived ( );
	void UpdateOutline ( );
	void SetPickupMesh ( );
	bool DelayRespawn ( );
	void SpawnCopyFor ( class APawn* Recipient );
	void AddAmmo ( class ACombatWeapon* Weapon );
	bool IsFullAmmo ( class ACombatWeapon* Weapon );
	bool CheckForErrors ( );
	void eventReplicatedEvent ( struct FName VarName );
	void SetPickupHidden ( );
	void SetPickupVisible ( );
	bool IsDisplayLocator ( );
	void InitializePickup ( );
};

UClass* ACombatWeaponPickupFactory::pClassPointer = NULL;

// Class CombatGame.CombatAmmoPickupFactory
// 0x0017 (0x0378 - 0x0361)
class ACombatAmmoPickupFactory : public ACombatWeaponPickupFactory
{
public:
	int                                                MainAmmoRate;                                     		// 0x0364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubAmmoRate;                                      		// 0x0368 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GrenadeRate_A;                                    		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GrenadeRate_B;                                    		// 0x0370 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GrenadeRate_C;                                    		// 0x0374 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53759 ];

		return pClassPointer;
	};

	bool CanSupplyTo ( class APawn* Other );
	void SupplyTo ( class APawn* SuppliedPawn );
	void SpawnCopyFor ( class APawn* Recipient );
};

UClass* ACombatAmmoPickupFactory::pClassPointer = NULL;

// Class CombatGame.CombatAnimNodeSlot
// 0x0000 (0x00E8 - 0x00E8)
class UCombatAnimNodeSlot : public UAnimNodeSlot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53964 ];

		return pClassPointer;
	};

};

UClass* UCombatAnimNodeSlot::pClassPointer = NULL;

// Class CombatGame.CombatArmsRaceGame
// 0x0002 (0x05B8 - 0x05B6)
class ACombatArmsRaceGame : public ACombatTDMGameBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54129 ];

		return pClassPointer;
	};

	bool CanDropWeapon ( );
	void Killed ( class AController* Killer, class AController* Victim, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
};

UClass* ACombatArmsRaceGame::pClassPointer = NULL;

// Class CombatGame.CombatArmsRacePawn
// 0x000C (0x0A30 - 0x0A24)
class ACombatArmsRacePawn : public ACombatGuy_Player
{
public:
	TArray< struct FWeaponLevelInfo >                  WeaponLevelList;                                  		// 0x0A24 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54139 ];

		return pClassPointer;
	};

	void AddPresetInventory ( );
	void ServerLevelUp ( int WeaponLevel );
	void LevelUp ( int WeaponLevel );
	class AWeapon* CurrentLevelWeapon ( int WeaponLevel, unsigned long bRespawn );
};

UClass* ACombatArmsRacePawn::pClassPointer = NULL;

// Class CombatGame.CombatArmsRacePC
// 0x0000 (0x0950 - 0x0950)
class ACombatArmsRacePC : public ACombatPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54140 ];

		return pClassPointer;
	};

};

UClass* ACombatArmsRacePC::pClassPointer = NULL;

// Class CombatGame.CombatArmsRacePRI
// 0x0004 (0x0420 - 0x041C)
class ACombatArmsRacePRI : public ACombatPlayerReplicationInfo
{
public:
	int                                                WeaponLevel;                                      		// 0x041C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54141 ];

		return pClassPointer;
	};

	void IncrementKills ( );
};

UClass* ACombatArmsRacePRI::pClassPointer = NULL;

// Class CombatGame.CombatArmsRaceGameReplicationInfo
// 0x0000 (0x02C4 - 0x02C4)
class ACombatArmsRaceGameReplicationInfo : public ACombatTDMGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54152 ];

		return pClassPointer;
	};

};

UClass* ACombatArmsRaceGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatArmsRaceHUD
// 0x0000 (0x04E4 - 0x04E4)
class ACombatArmsRaceHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54154 ];

		return pClassPointer;
	};

};

UClass* ACombatArmsRaceHUD::pClassPointer = NULL;

// Class CombatGame.CombatArmsRaceRadarCore
// 0x0000 (0x03A8 - 0x03A8)
class ACombatArmsRaceRadarCore : public ACombatRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54156 ];

		return pClassPointer;
	};

};

UClass* ACombatArmsRaceRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatArmsRaceMovie
// 0x0000 (0x0820 - 0x0820)
class UCombatArmsRaceMovie : public UCombatTeamGameMovie
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54157 ];

		return pClassPointer;
	};

};

UClass* UCombatArmsRaceMovie::pClassPointer = NULL;

// Class CombatGame.CombatDecalActorMovable
// 0x0000 (0x01DC - 0x01DC)
class ACombatDecalActorMovable : public ADecalActorMovable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54769 ];

		return pClassPointer;
	};

};

UClass* ACombatDecalActorMovable::pClassPointer = NULL;

// Class CombatGame.CombatSprayDecalActor
// 0x0040 (0x021C - 0x01DC)
class ACombatSprayDecalActor : public ACombatDecalActorMovable
{
public:
	int                                                SprayID;                                          		// 0x01DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              Angle;                                            		// 0x01E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              SprayedTime;                                      		// 0x01E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              SprayDecalFarPlane;                               		// 0x01E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SprayFloatDist;                                   		// 0x01EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SprayPreviewAlpha;                                		// 0x01F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                SpraySyncTime;                                    		// 0x01F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USoundCue*                                   SpraySound_1p;                                    		// 0x01F8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   SpraySound_3p;                                    		// 0x01FC (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   SprayMIC;                                         		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACombatDecalManager*                         CachedDecalManager;                               		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACBGameReplicationInfo*                      CachedGRI;                                        		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastSprayLocation;                                		// 0x020C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsPreviewSpray : 1;                              		// 0x0218 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54768 ];

		return pClassPointer;
	};

	void TryActivate ( );
	float GetCurrentSprayedTime ( );
	void OnSprayed ( );
	void OnAngleChanged ( );
	void OnSprayIDChanged ( );
	void SetSprayAlpha ( float NewAlpha );
	void SetSprayAngle ( float NewAngle );
	void SetSprayDrawInfo ( struct FVector NewLocation, struct FRotator NewRotation, float NewAngle );
	void SetSprayID ( int NewId );
	void SetPreviewSpray ( unsigned long bPreview );
	void InitializeDecalComponent ( );
	void RegisterToDecalManager ( );
	void Reset ( );
	void eventTick ( float DeltaTime );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ACombatSprayDecalActor::pClassPointer = NULL;

// Class CombatGame.CombatDroppedSupplies
// 0x003B (0x02B8 - 0x027D)
class ACombatDroppedSupplies : public ACombatDroppedBase
{
public:
	unsigned char                                      SuppliesType;                                     		// 0x0280 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CurrentIdentifyState;                             		// 0x0281 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                TeamIdentifyColor[ 0x3 ];                         		// 0x0284 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   TeamIdentifyMIC;                                  		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 54809 ];

		return pClassPointer;
	};

	bool CanPickup ( class ACombatPlayerControllerBase* LocalPC );
	void SupplyTo ( class APawn* SuppliedPawn );
	void GiveTo ( class APawn* TargetPawn );
	void SetTeamIdentify ( );
	void Init ( class AInventory* NewInventory, struct FVector* Direction );
	void UpdateTeamIFFColor ( );
	void PostBeginPlay ( );
};

UClass* ACombatDroppedSupplies::pClassPointer = NULL;

// Class CombatGame.CombatDemolitionHUD
// 0x0000 (0x04E4 - 0x04E4)
class ACombatDemolitionHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55662 ];

		return pClassPointer;
	};

	void NotifyC4BombPlanted ( );
	void SetUIData_Scoreboard ( class UGFxObject** out_sendData, struct FCachedPlayerInfo* out_playerData );
	void SetPlayerInfoForScoreboard ( struct FCachedPlayerInfo* out_prevInfo, class ACombatPlayerReplicationInfo** out_curPRI );
	bool CheckPlayerInfoForScoreboard ( struct FCachedPlayerInfo* out_prevInfo, class ACombatPlayerReplicationInfo** out_curPRI );
	int GetGoalStringIDForScoreboard ( );
	int GetSpecialScoreStringID ( );
	bool GetRoundResultString ( unsigned char Reason, int* WinLocalizedStrID, int* LoseLocalizedStrID );
	int GetRoundGoalInfo ( );
	void DisplayDemolitionGlobalMessage ( int MessageType, struct FString msg, struct FString subMsg );
	void NotifyDemolitionSystemMessage ( int TextID, struct FString OwnerCallSign );
	void EndBombProgressBar_Defuse ( int remainTime );
	void StartBombProgressBar_Defuse ( unsigned long bAnimation, unsigned long bActivateC4Kit );
	void SetBombBombProgressBar_Plant ( unsigned long bActivateC4Kit );
	class UCombatDemolitionMovie* DemolitionMovie ( );
	unsigned char GetPlayerState ( );
};

UClass* ACombatDemolitionHUD::pClassPointer = NULL;

// Class CombatGame.CombatASAGameReplicationInfo
// 0x0001 (0x02C5 - 0x02C4)
class ACombatASAGameReplicationInfo : public ACombatTDMGameReplicationInfo
{
public:
	unsigned char                                      GameStatus;                                       		// 0x02C4 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56141 ];

		return pClassPointer;
	};

	void UpdateHud ( );
	void UpdateGameStatus ( unsigned char newGameStatus );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ACombatASAGameReplicationInfo::pClassPointer = NULL;

// Class CombatGame.CombatNoRespawnTDMHUD
// 0x0000 (0x04E4 - 0x04E4)
class ACombatNoRespawnTDMHUD : public ACombatTDMHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56150 ];

		return pClassPointer;
	};

};

UClass* ACombatNoRespawnTDMHUD::pClassPointer = NULL;

// Class CombatGame.CombatAssasinModeHUD
// 0x0000 (0x04E4 - 0x04E4)
class ACombatAssasinModeHUD : public ACombatNoRespawnTDMHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56149 ];

		return pClassPointer;
	};

	void EnableEVACPointMessage ( );
	void PostVIPDeathMessage ( int NSec );
	void VIPDeathMessage ( );
	void ActivateEmergencyMessage ( );
	bool GetRoundResultString ( unsigned char Reason, int* WinLocalizedStrID, int* LoseLocalizedStrID );
	void SetHudTxt ( unsigned char GameStatus );
	int GetRoundGoalInfo ( );
};

UClass* ACombatAssasinModeHUD::pClassPointer = NULL;

// Class CombatGame.CombatNoRespawnTDMRadarCore
// 0x0000 (0x03A8 - 0x03A8)
class ACombatNoRespawnTDMRadarCore : public ACombatTDMRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56153 ];

		return pClassPointer;
	};

};

UClass* ACombatNoRespawnTDMRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatASARadarCore
// 0x0000 (0x03A8 - 0x03A8)
class ACombatASARadarCore : public ACombatNoRespawnTDMRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56155 ];

		return pClassPointer;
	};

};

UClass* ACombatASARadarCore::pClassPointer = NULL;

// Class CombatGame.CombatAssasinGameMessage
// 0x0000 (0x005C - 0x005C)
class UCombatAssasinGameMessage : public UCombatGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56189 ];

		return pClassPointer;
	};

	void EnableEVACPointMessage ( class APlayerController* P );
	void PostVIPDeathMessage ( class APlayerController* P, int Sec );
	void VIPDeathMessage ( class APlayerController* P );
	void ActivateEmergencyMessage ( class APlayerController* P );
	void ClientReceiveEx ( class APlayerController* P, int MessageType, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
};

UClass* UCombatAssasinGameMessage::pClassPointer = NULL;

// Class CombatGame.CombatNoRespawnTDMMovie
// 0x0000 (0x0828 - 0x0828)
class UCombatNoRespawnTDMMovie : public UCombatTDMMovie
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56211 ];

		return pClassPointer;
	};

	int GetRounOverPoint ( unsigned char TeamIndex );
	int GetRoundPoint ( unsigned char TeamIndex );
	void ClearRoundStatusBoard ( );
	void ChangeRoundStausMode ( int MyTeamIndex );
};

UClass* UCombatNoRespawnTDMMovie::pClassPointer = NULL;

// Class CombatGame.CombatAssasinMovie
// 0x0008 (0x0828 - 0x0820)
class UCombatAssasinMovie : public UCombatTeamGameMovie
{
public:
	unsigned long                                      bTestMode : 1;                                    		// 0x0820 (0x0004) [0x0000000000000000] [0x00000001] 
	class UCombatHUD_ExitContainer*                    ExitContainer;                                    		// 0x0824 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56218 ];

		return pClassPointer;
	};

	void Tick ( float DeltaSeconds );
	void InitUI ( );
	void UpdateAsaHUDIcon ( float DeltaSeconds );
	void EnableExitPoint ( );
	void DisableExitPoint ( );
	void SetMissionTxt ( int LocalizedTextID );
	void RegisterGOContainer ( );
	void registerLevelObject ( class UCombatHUD_ExitObject* M );
	int GetRounOverPoint ( unsigned char TeamIndex );
	int GetRoundPoint ( unsigned char TeamIndex );
	void ChangeRoundStausMode ( int MyTeamIndex );
};

UClass* UCombatAssasinMovie::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ExitContainer
// 0x0004 (0x00A8 - 0x00A4)
class UCombatHUD_ExitContainer : public UCombatHUD_GOContainer
{
public:
	class ACombatMapPoint*                             MapPointActor;                                    		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56246 ];

		return pClassPointer;
	};

	void InitVIP ( );
	void UpdateVIP ( float DeltaSeconds, unsigned long bAlive, struct FVector Location, int healthPercent, unsigned char iconType );
	void UpdateExit ( float DeltaSeconds );
	void StartVIPEscape ( );
	void EnableExitPoint ( );
	void DisableExitPoint ( );
	void SetMapPoint ( );
	void RegisterComponent ( class UCombatTeamGameMovie* Movie, class UCombatHUD_GameObject** Component );
	void Init ( class UCombatTeamGameMovie* Movie );
};

UClass* UCombatHUD_ExitContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_ExitObject
// 0x0008 (0x0158 - 0x0150)
class UCombatHUD_ExitObject : public UCombatHUD_GameObject
{
public:
	unsigned char                                      iconType;                                         		// 0x0150 (0x0001) [0x0000000000000000]              
	unsigned char                                      LastVIPIconType;                                  		// 0x0151 (0x0001) [0x0000000000000000]              
	int                                                LastVIPHealthPercent;                             		// 0x0154 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56259 ];

		return pClassPointer;
	};

	void CallsetHpGauge ( class UGFxObject* targetMC, unsigned char colorType, int HPPercent );
	void InitVIP ( );
	void UpdateVIP ( float DeltaSeconds, unsigned long bAlive, struct FVector Location, int healthPercent, unsigned char vipTeamType );
	void StartVIPEscape ( );
	void SetIconType ( unsigned char iconType_ );
	void GetLevelObjectMovieClips ( );
};

UClass* UCombatHUD_ExitObject::pClassPointer = NULL;

// Class CombatGame.CombatAutoCrouchVolume
// 0x0000 (0x0200 - 0x0200)
class ACombatAutoCrouchVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56293 ];

		return pClassPointer;
	};

	void CrouchTimer ( );
	void eventUnTouch ( class AActor* Other );
	void SetCrouch ( class APawn* P, unsigned char bCrouch );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ACombatAutoCrouchVolume::pClassPointer = NULL;

// Class CombatGame.CombatBusterHUD
// 0x0008 (0x04EC - 0x04E4)
class ACombatBusterHUD : public ACombatTeamGameHUD
{
public:
	float                                              BusterActorDamageStateDelay;                      		// 0x04E4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                BusterDamageScoreLocalizedID;                     		// 0x04E8 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56433 ];

		return pClassPointer;
	};

	int GetGoalStringIDForScoreboard ( );
	void NotifyDestroyObject ( unsigned long bMyTeam, struct FString msg );
	void eventGetScore ( struct FName EventName, float NewMissionScore, struct FString* ScoreName, int* Score );
	void SetPlayerInfoForScoreboard ( struct FCachedPlayerInfo* out_prevInfo, class ACombatPlayerReplicationInfo** out_curPRI );
	bool CheckPlayerInfoForScoreboard ( struct FCachedPlayerInfo* out_prevInfo, class ACombatPlayerReplicationInfo** out_curPRI );
	void SetUIData_Scoreboard ( class UGFxObject** out_sendData, struct FCachedPlayerInfo* out_playerData );
	int GetSpecialScoreStringID ( );
	int GetRoundGoalInfo ( );
};

UClass* ACombatBusterHUD::pClassPointer = NULL;

// Class CombatGame.CombatBombardActor
// 0x0064 (0x0238 - 0x01D4)
class ACombatBombardActor : public AActor
{
public:
	float                                              BombardDelay;                                     		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BombardNum;                                       		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PerBombNum;                                       		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PClass;                                           		// 0x01E0 (0x0004) [0x0000000000000000]              
	int                                                CurBombardNum;                                    		// 0x01E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BombardX;                                         		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BombardY;                                         		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BombardHeight;                                    		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartDelay;                                       		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreDelay;                                         		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AddedHeight;                                      		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMeshComponent*                              Mesh;                                             		// 0x0200 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   BombardSound;                                     		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   WarnigSound;                                      		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   AirWhipSound;                                     		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LocalizedMSGIndex;                                		// 0x0210 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             DustTemplate;                                     		// 0x0214 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    DustPSC;                                          		// 0x0218 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    LockOnPSC;                                        		// 0x021C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              StartDustDelay;                                   		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bShowLockOnEffectOnSameTeam : 1;                  		// 0x0224 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      AlreadyExcute : 1;                                		// 0x0224 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned char                                      CallerTeam;                                       		// 0x0228 (0x0001) [0x0000000000000020]              ( CPF_Net )
	int                                                WeaponIndex;                                      		// 0x022C (0x0004) [0x0000000000000000]              
	struct FName                                       EventName;                                        		// 0x0230 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56559 ];

		return pClassPointer;
	};

	void Destroyed ( );
	void ResetBombard ( );
	void DropBomb ( );
	void StopDust ( );
	void SpawnDust ( );
	void Bombing ( );
	class ACombatProjectile* MakeProjectile ( struct FVector Loc, struct FVector Dir );
	void PreBombard ( );
	void UpdateCallerTeam ( );
	void ReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* ACombatBombardActor::pClassPointer = NULL;

// Class CombatGame.CombatBusterGameScore
// 0x0010 (0x004C - 0x003C)
class UCombatBusterGameScore : public UCombatGameScore
{
public:
	float                                              BusterDamageScoreRatio;                           		// 0x003C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              BusterDamageMissionScoreRatio;                    		// 0x0040 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              BusterDamageCRRatio;                              		// 0x0044 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              BusterDamageRankExpRatio;                         		// 0x0048 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56785 ];

		return pClassPointer;
	};

	float GetRankExp ( struct FName EventName, float Ratio );
	float GetCR ( struct FName EventName, float Ratio );
	float GetMissionScore ( struct FName EventName, float Ratio );
	float GetScore ( struct FName EventName, float Ratio );
};

UClass* UCombatBusterGameScore::pClassPointer = NULL;

// Class CombatGame.SeqEvent_ChangedHealth
// 0x0000 (0x00DC - 0x00DC)
class USeqEvent_ChangedHealth : public USeqEvent_CombatBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56819 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqEvent_ChangedHealth::pClassPointer = NULL;

// Class CombatGame.CombatBusterGameMessage
// 0x0000 (0x005C - 0x005C)
class UCombatBusterGameMessage : public UCombatGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56848 ];

		return pClassPointer;
	};

	void ClientReceiveEx ( class APlayerController* P, int MessageType, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
};

UClass* UCombatBusterGameMessage::pClassPointer = NULL;

// Class CombatGame.CombatBusterMovie
// 0x000C (0x082C - 0x0820)
class UCombatBusterMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_BusterContainer*                  BusterContainer;                                  		// 0x0820 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  BusterMovie;                                      		// 0x0824 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUpdate : 1;                                      		// 0x0828 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56927 ];

		return pClassPointer;
	};

	int GetRounOverPoint ( unsigned char TeamIndex );
	int GetRoundPoint ( unsigned char TeamIndex );
	void ChangeRoundStausMode ( int MyTeamIndex );
	void InitUI ( );
	void Tick ( float DeltaSeconds );
	bool SetMissionActorState ( unsigned char TeamIndex, int MissionActorIndex, unsigned char CurrState );
	void InitMissionActor ( );
	void UpdateBusterHUDIcon ( float DeltaSeconds );
	void registerLevelObject ( class UCombatHUD_Buster* M );
	void RegisterGOContainer ( );
};

UClass* UCombatBusterMovie::pClassPointer = NULL;

// Class CombatGame.CombatBusterRadarCore
// 0x0000 (0x03A8 - 0x03A8)
class ACombatBusterRadarCore : public ACombatRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56931 ];

		return pClassPointer;
	};

};

UClass* ACombatBusterRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatHUD_BusterContainer
// 0x0000 (0x00A4 - 0x00A4)
class UCombatHUD_BusterContainer : public UCombatHUD_GOContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56950 ];

		return pClassPointer;
	};

	void Update ( float DeltaSeconds, TArray< struct FVector >* GO_Locations );
	void InitGameObject ( class ACBGameReplicationInfo* CBGRI );
	void RegisterComponent ( class UCombatTeamGameMovie* Movie, class UCombatHUD_GameObject** Component );
};

UClass* UCombatHUD_BusterContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Buster
// 0x000D (0x015D - 0x0150)
class UCombatHUD_Buster : public UCombatHUD_GameObject
{
public:
	class ACombatBusterActor*                          TargetActor;                                      		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TargetIndex;                                      		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastDisplayHealth;                                		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LastUIState;                                      		// 0x015C (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56954 ];

		return pClassPointer;
	};

	void CallsetHpGauge ( class UGFxObject* MovieClip, int ColorNumber, int Percenet );
	void UpdateHealth ( );
	void GetIconFrameLabel ( struct FString* out_label );
	void Update ( float DeltaSeconds, struct FVector Location );
	void UpdateVisible ( );
	bool GetGameObjectName ( struct FString* out_objectName );
	void SetTarget ( class AActor* NewTarget, int NewTargetIndex );
	void GetLevelObjectMovieClips ( );
};

UClass* UCombatHUD_Buster::pClassPointer = NULL;

// Class CombatGame.CombatCameraThirdPersonCameraMode_Crouch
// 0x0000 (0x0240 - 0x0240)
class UCombatCameraThirdPersonCameraMode_Crouch : public UCombatCameraThirdPersonCameraMode_default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56993 ];

		return pClassPointer;
	};

};

UClass* UCombatCameraThirdPersonCameraMode_Crouch::pClassPointer = NULL;

// Class CombatGame.CombatCameraThirdPersonCameraMode_Spectator
// 0x0000 (0x0240 - 0x0240)
class UCombatCameraThirdPersonCameraMode_Spectator : public UCombatCameraThirdPersonCameraMode_default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57038 ];

		return pClassPointer;
	};

};

UClass* UCombatCameraThirdPersonCameraMode_Spectator::pClassPointer = NULL;

// Class CombatGame.CombatCheatPawn
// 0x0014 (0x0AA0 - 0x0A8C)
class ACombatCheatPawn : public ACombatGuy_NPC
{
public:
	unsigned char                                      CheatPawnTeamNum;                                 		// 0x0A8C (0x0001) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	int                                                SpawnNumber;                                      		// 0x0A90 (0x0004) [0x0000000000000000]              
	struct FString                                     SpawnName;                                        		// 0x0A94 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57615 ];

		return pClassPointer;
	};

	void AutoRespawn ( );
	void SetSpawnData ( class ACombatBotController* _CBBC, struct FCheatPawnInfo _CheatPawnInfo );
	void ForceJump ( );
	bool IsValidCharClassInfo ( );
	int GetSpawnNumber ( );
	unsigned char eventScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	bool InGodMode ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void UpdateIFF ( class APlayerController* PC, unsigned long bEnemy, int _IFFType, int _X, int _Y );
	bool ShouldDisplayIFF ( class APlayerController* PC, class UCanvas* Canvas, unsigned long bEnemy, int* _IFFType, int* _X, int* _Y );
};

UClass* ACombatCheatPawn::pClassPointer = NULL;

// Class CombatGame.CombatHUD_PracticeGame
// 0x0004 (0x04E8 - 0x04E4)
class ACombatHUD_PracticeGame : public ACombatTeamGameHUD
{
public:
	class UCombatPracticeGameMovie*                    PracticeGameMovie;                                		// 0x04E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57643 ];

		return pClassPointer;
	};

	void SetProjectileCameraMessage ( unsigned long bPlaying );
	void ResetPracticeGameTimer ( );
	void PausePracticeGameTimer ( );
	void ResumePracticeGameTimer ( );
	void SetPeopleCount ( int inCount );
	void SetPracticeGameMessage ( struct FString inString );
	class UCombatPracticeGameMovie* GetPracticeGameMovie ( );
	struct FString GetModeNameInTacticalMap ( );
	void UpdateRadioMessage ( int senderUID, unsigned char UniqueRadioID, unsigned char chatType, unsigned long bGameManager_ );
	void NotifyCreateRadioUI ( class UCombatHUD_RadioMessage* radioUI );
	void ShowScoreBoard ( unsigned long bShow_ );
};

UClass* ACombatHUD_PracticeGame::pClassPointer = NULL;

// Class CombatGame.ComBatPC_PracticeGame
// 0x000C (0x095C - 0x0950)
class AComBatPC_PracticeGame : public ACombatPC
{
public:
	TArray< class UClass* >                            AllWeaponArray;                                   		// 0x0950 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57645 ];

		return pClassPointer;
	};

	void RequestSetPreset ( unsigned char PresetInput );
	void PostBeginPlay ( );
};

UClass* AComBatPC_PracticeGame::pClassPointer = NULL;

// Class CombatGame.SeqEvent_CombatVideoOptionChange
// 0x0000 (0x00DC - 0x00DC)
class USeqEvent_CombatVideoOptionChange : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58388 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CombatVideoOptionChange::pClassPointer = NULL;

// Class CombatGame.CombatCTFGameMessage
// 0x0000 (0x005C - 0x005C)
class UCombatCTFGameMessage : public UCombatGameMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59169 ];

		return pClassPointer;
	};

	void ActivatePickupFlagMessage ( class APlayerController* P, struct FString PickerName );
	void ActivateDroppedFlagMessage ( class APlayerController* P, unsigned long bDropByDeath );
	void ClientReceiveEx ( class APlayerController* P, int MessageType, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
};

UClass* UCombatCTFGameMessage::pClassPointer = NULL;

// Class CombatGame.CombatCTFHUD
// 0x0000 (0x04E4 - 0x04E4)
class ACombatCTFHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59184 ];

		return pClassPointer;
	};

	void eventGetMissionScore ( struct FName EventName, struct FString* ScoreName, int* Score );
	void NotifyCTFGameSystemMessage ( int TextID, struct FString OwnerCallSign );
	void NotifySpawnFlag ( unsigned long bMyTeam, struct FString msg );
	void NotifyCarriedTakePoint ( unsigned long bMyTeam, struct FString msg );
	void SetPlayerInfoForScoreboard ( struct FCachedPlayerInfo* out_prevInfo, class ACombatPlayerReplicationInfo** out_curPRI );
	bool CheckPlayerInfoForScoreboard ( struct FCachedPlayerInfo* out_prevInfo, class ACombatPlayerReplicationInfo** out_curPRI );
	void SetUIData_Scoreboard ( class UGFxObject** out_sendData, struct FCachedPlayerInfo* out_playerData );
	int GetSpecialScoreStringID ( );
	int GetRoundGoalInfo ( );
};

UClass* ACombatCTFHUD::pClassPointer = NULL;

// Class CombatGame.CombatCTFGamePC
// 0x0000 (0x0950 - 0x0950)
class ACombatCTFGamePC : public ACombatPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59198 ];

		return pClassPointer;
	};

	void ThrowFlagAction ( );
	void ServerThrowFlag ( );
	void ThrowFlag ( );
};

UClass* ACombatCTFGamePC::pClassPointer = NULL;

// Class CombatGame.CombatCTFGameScore
// 0x0028 (0x0064 - 0x003C)
class UCombatCTFGameScore : public UCombatGameScore
{
public:
	struct FScoreStruct                                FirstFlagCaptureScore;                            		// 0x003C (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FScoreStruct                                FlagCaptureScore;                                 		// 0x0044 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FScoreStruct                                FlagRecovery;                                     		// 0x004C (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FScoreStruct                                GetFlagFromEnemybase;                             		// 0x0054 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FScoreStruct                                GetDroppedenemyFlag;                              		// 0x005C (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59218 ];

		return pClassPointer;
	};

	float GetMissionScore ( struct FName EventName, float Ratio );
	float GetScore ( struct FName EventName, float Ratio );
};

UClass* UCombatCTFGameScore::pClassPointer = NULL;

// Class CombatGame.CombatLCTFMovie
// 0x000C (0x082C - 0x0820)
class UCombatLCTFMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_CTFPointContainer*                CTFContainer;                                     		// 0x0820 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  CTFMovie;                                         		// 0x0824 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUpdate : 1;                                      		// 0x0828 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59259 ];

		return pClassPointer;
	};

	int GetRounOverPoint ( unsigned char TeamIndex );
	int GetRoundPoint ( unsigned char TeamIndex );
	void InitUI ( );
	void Tick ( float DeltaSeconds );
	void InitMissionActor ( );
	void UpdateCTFPointArea ( float DeltaSeconds );
	void RegisterGOContainer ( );
	void registerLevelObject ( class UCombatHUD_CTFPointArea* M );
	void ClearRoundStatusBoard ( );
	void ChangeRoundStausMode ( int MyTeamIndex );
};

UClass* UCombatLCTFMovie::pClassPointer = NULL;

// Class CombatGame.CombatSEIRadarCore
// 0x0000 (0x03A8 - 0x03A8)
class ACombatSEIRadarCore : public ACombatRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59274 ];

		return pClassPointer;
	};

};

UClass* ACombatSEIRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_AR
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_AR : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59366 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_AR::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_BASR
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_BASR : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59368 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_BASR::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_DMR
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_DMR : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59370 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_DMR::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Explosion_FSW_AMSR
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_Explosion_FSW_AMSR : public UCombatDamageType_ExplosionWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59372 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Explosion_FSW_AMSR::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_FSW_AMSR
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_FSW_AMSR : public UCombatDamageType_BASR
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59374 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_FSW_AMSR::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_FSW_GL
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_FSW_GL : public UCombatDamageType_ExplosionWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59376 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_FSW_GL::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_FSW_LMG
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_FSW_LMG : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59378 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_FSW_LMG::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_FSW_Melee
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_FSW_Melee : public UCombatDamageType_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59380 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_FSW_Melee::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_FSW_RL
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_FSW_RL : public UCombatDamageType_ExplosionWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59382 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_FSW_RL::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_LMG
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_LMG : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59384 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_LMG::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Machine_Pistol
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_Machine_Pistol : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59386 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Machine_Pistol::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_Pistol
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_Pistol : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59388 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_Pistol::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_RSaW
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_RSaW : public UCombatDamageType_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59390 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_RSaW::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_RSawStrong
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_RSawStrong : public UCombatDamageType_RSaW
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59392 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_RSawStrong::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_SG
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_SG : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59394 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_SG::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_SMG
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_SMG : public UCombatDamageType_BulletWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59396 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_SMG::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_StrongMelee
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_StrongMelee : public UCombatDamageType_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59398 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_StrongMelee::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_TrophyTurret
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_TrophyTurret : public UCombatDamageType_Explosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59400 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_TrophyTurret::pClassPointer = NULL;

// Class CombatGame.CombatDamageType_TutoGrenade
// 0x0000 (0x00D0 - 0x00D0)
class UCombatDamageType_TutoGrenade : public UCombatDamageType_Grenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59402 ];

		return pClassPointer;
	};

};

UClass* UCombatDamageType_TutoGrenade::pClassPointer = NULL;

// Class CombatGame.CombatDefaultGame
// 0x0000 (0x05B8 - 0x05B8)
class ACombatDefaultGame : public ACombatTDMGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61638 ];

		return pClassPointer;
	};

};

UClass* ACombatDefaultGame::pClassPointer = NULL;

// Class CombatGame.CombatDemolitionGameMessage
// 0x0008 (0x0064 - 0x005C)
class UCombatDemolitionGameMessage : public UCombatGameMessage
{
public:
	int                                                BombPickupTextID;                                 		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BombDropTextID;                                   		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61751 ];

		return pClassPointer;
	};

	void ActivatePickupBombMessage ( class APlayerController* P, struct FString PickerName );
	void ActivateDroppedBombMessage ( class APlayerController* P, unsigned long bDropByDeath );
	void ClientReceiveEx ( class APlayerController* P, int MessageType, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject, int OptionalInt, int OptionalInt01, int OptionalInt02 );
};

UClass* UCombatDemolitionGameMessage::pClassPointer = NULL;

// Class CombatGame.CombatDemolitionMovie
// 0x0014 (0x0834 - 0x0820)
class UCombatDemolitionMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_BombsContainer*                   BombContainer;                                    		// 0x0820 (0x0004) [0x0000000000000000]              
	int                                                BombsiteCount;                                    		// 0x0824 (0x0004) [0x0000000000000000]              
	int                                                BombCount;                                        		// 0x0828 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUpdateEquippedBomb : 1;                          		// 0x082C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bUpdateEquippedBombSite : 1;                      		// 0x082C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsDisplayedBombLimitTime : 1;                    		// 0x082C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bStartSpectDefuseUI : 1;                          		// 0x082C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	int                                                LastBombDefuseTimeCount;                          		// 0x0830 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61781 ];

		return pClassPointer;
	};

	int GetRounOverPoint ( unsigned char TeamIndex );
	void NotifyDemolitionSystemMessage ( int TextID, struct FString OwnerCallSign );
	void DisplaySpectTargetUI ( );
	int GetRoundPoint ( unsigned char TeamIndex );
	void ClearRoundStatusBoard ( );
	void ChangeRoundStausMode ( int MyTeamIndex );
	int GetMissionType ( int* out_currentRound_ );
	void UpdateBombEquippedHUD ( float DeltaSeconds );
	bool CheckNearByBombSite ( );
	void UpdateBombs ( float DeltaSeconds );
	void UpdateBombsites ( float DeltaSeconds );
	void UpdateRemainTime ( );
	void Tick ( float DeltaSeconds );
	void InitUI ( );
	void registerFlag ( class UCombatHUD_Bomb* M );
	void registerLevelObject ( class UCombatHUD_Bombsite* M );
	void RegisterGOContainer ( );
};

UClass* UCombatDemolitionMovie::pClassPointer = NULL;

// Class CombatGame.CombatHUD_BombsContainer
// 0x0000 (0x00A4 - 0x00A4)
class UCombatHUD_BombsContainer : public UCombatHUD_GOContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61841 ];

		return pClassPointer;
	};

	void DisplayGODistanceMessage ( );
	void Update ( float DeltaSeconds, TArray< struct FVector >* Bomb_Locations );
	void RegisterComponent ( class UCombatTeamGameMovie* Movie, class UCombatHUD_GameObject** Component );
};

UClass* UCombatHUD_BombsContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Bombsite
// 0x0004 (0x0154 - 0x0150)
class UCombatHUD_Bombsite : public UCombatHUD_GameObject
{
public:
	class ACombatBombsiteVolume*                       BombsiteObject;                                   		// 0x0150 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61845 ];

		return pClassPointer;
	};

	bool CheckNearbyGO ( int* MessageId );
	bool IsInBombsite ( );
	bool CheckHotKeyMessage ( struct FString* HotKey, struct FString* ActionString );
	bool CheckAvailableGO ( int* MessageId );
	void UpdateVisible ( );
	void GetIconFrameLabel ( struct FString* out_label );
	bool GetGameObjectName ( struct FString* out_objectName );
	void SetBombsiteObject ( class ACombatBombsiteVolume* Bombsite );
};

UClass* UCombatHUD_Bombsite::pClassPointer = NULL;

// Class CombatGame.CombatHUD_Bomb
// 0x000C (0x015C - 0x0150)
class UCombatHUD_Bomb : public UCombatHUD_GameObject
{
public:
	class ACombatTrigger_Bomb*                         BombObject;                                       		// 0x0150 (0x0004) [0x0000000000000000]              
	struct FName                                       LastBombStateName;                                		// 0x0154 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61848 ];

		return pClassPointer;
	};

	void GetIconFrameLabel ( struct FString* out_label );
	void Update ( float DeltaSeconds, struct FVector Location );
	bool GetGameObjectName ( struct FString* out_objectName );
	bool CanDisplayBombIcon ( );
	void UpdateVisible ( );
	void SetBombObject ( class ACombatTrigger_Bomb* Bomb );
};

UClass* UCombatHUD_Bomb::pClassPointer = NULL;

// Class CombatGame.CombatWeapon_Bomb
// 0x0024 (0x19CC - 0x19A8)
class ACombatWeapon_Bomb : public ACombatWeapon
{
public:
	float                                              PlantAnimDuraion;                                 		// 0x19A8 (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	struct FLinearColor                                BombLightColor;                                   		// 0x19AC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   IndicatorMIC;                                     		// 0x19BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   ThirdIndicatorMIC;                                		// 0x19C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bNeedToSwitchWeapon : 1;                          		// 0x19C4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIgnoreMove : 1;                                  		// 0x19C4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class ACombatTrigger_Bomb*                         Bomb;                                             		// 0x19C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61979 ];

		return pClassPointer;
	};

	void SetBombIndicatorLight ( struct FLinearColor Col );
	bool CanEquipUp ( );
	void OwnerEvent ( struct FName EventName );
	bool ReleaseUse ( class ACombatPawn* CBInstigator );
	bool Use ( class ACombatPawn* CBInstigator );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	int AddAmmo ( int Amount );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity, class AInventory* SwapInventory, class AController* Killer );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	void DetachWeapon ( );
	void CheckBombVolumeInside ( );
	float GetFireInterval ( unsigned char FireModeNum );
	void ClientPendingDestory ( );
	void ServerPlanted ( );
	void ServerCancelPlanting ( );
	void ServerPlanting ( unsigned char InFireMode );
	class ACombatTrigger_Bomb* GetTriggerBomb ( );
	void IgnoreMoveInput ( unsigned long bFlag );
	void Destroyed ( );
	void PostBeginPlay ( );
};

UClass* ACombatWeapon_Bomb::pClassPointer = NULL;

// Class CombatGame.CombatDemoRecSpectatorHUD
// 0x0000 (0x04E4 - 0x04E4)
class ACombatDemoRecSpectatorHUD : public ACombatTeamGameHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62010 ];

		return pClassPointer;
	};

};

UClass* ACombatDemoRecSpectatorHUD::pClassPointer = NULL;

// Class CombatGame.CombatDemoRecSpectatorMovie
// 0x0010 (0x0830 - 0x0820)
class UCombatDemoRecSpectatorMovie : public UCombatTeamGameMovie
{
public:
	class UCombatHUD_DemoRecPlayer*                    DemoRecPlayerMC;                                  		// 0x0820 (0x0004) [0x0000000000000000]              
	int                                                LastFrame;                                        		// 0x0824 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bRewinding : 1;                                   		// 0x0828 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bForwarding : 1;                                  		// 0x0828 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                targetFrame;                                      		// 0x082C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62012 ];

		return pClassPointer;
	};

	void Tick ( float DeltaSeconds );
	void registerHUD ( class UCombatMain_HUD* M );
	void receivePlayerBar ( int Percent );
	void RegisterPlayer ( class UCombatHUD_DemoRecPlayer* M );
};

UClass* UCombatDemoRecSpectatorMovie::pClassPointer = NULL;

// Class CombatGame.CombatHUD_DemoRecPlayer
// 0x0003 (0x0090 - 0x008D)
class UCombatHUD_DemoRecPlayer : public UCombatHUDEntity_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62018 ];

		return pClassPointer;
	};

	void CallHideBG ( );
	void CallShowBG ( );
	void CallSetProgressBar ( int Percent );
};

UClass* UCombatHUD_DemoRecPlayer::pClassPointer = NULL;

// Class CombatGame.CombatSeizeGameBase
// 0x0010 (0x05C4 - 0x05B4)
class ACombatSeizeGameBase : public ACombatPVPGame
{
public:
	int                                                MaxTeamOccupationNum;                             		// 0x05B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PhasedOccupyTimeInterval[ 0x3 ];                  		// 0x05B8 (0x000C) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62383 ];

		return pClassPointer;
	};

	unsigned char eventGetGoalScoreValue ( );
	class ACBTeamInfo* GetWinTeamByFirstOccuied ( );
	class AActor* GetWinnerByDecision ( );
	bool CheckLive ( );
	bool CheckGoalScore ( );
};

UClass* ACombatSeizeGameBase::pClassPointer = NULL;

// Class CombatGame.CombatSEIGamePC
// 0x0008 (0x0958 - 0x0950)
class ACombatSEIGamePC : public ACombatPC
{
public:
	unsigned long                                      bGainOccupiedPoint : 1;                           		// 0x0950 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowLogSeizeScore : 1;                           		// 0x0950 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class ACombatSEIModePRI*                           CombatSEIPRI;                                     		// 0x0954 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62416 ];

		return pClassPointer;
	};

	void NotifyEndOccupiedScoring ( );
	void GainOccupiedScoring ( );
	void EndOccupiedScoring ( );
	void RegisterOccupiedScoring ( int OccupiedAreaIndex );
	void RefreshOccupiedScoring ( );
	void StartOccupiedScoring ( int OccupiedAreaIndex );
	void PawnDied ( class APawn* P );
	void ClientRestart ( class APawn* NewPawn, unsigned char inTeamNum );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
};

UClass* ACombatSEIGamePC::pClassPointer = NULL;

// Class CombatGame.CombatDominationGame
// 0x0000 (0x05C4 - 0x05C4)
class ACombatDominationGame : public ACombatSeizeGameBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62417 ];

		return pClassPointer;
	};

	class AActor* GetWinnerByDecision ( );
};

UClass* ACombatDominationGame::pClassPointer = NULL;

// Class CombatGame.CombatDominationHUD
// 0x0000 (0x04E4 - 0x04E4)
class ACombatDominationHUD : public ACombatSEIHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62448 ];

		return pClassPointer;
	};

	int GetRoundGoalInfo ( );
};

UClass* ACombatDominationHUD::pClassPointer = NULL;

// Class CombatGame.CombatDominationRadarCore
// 0x0000 (0x03A8 - 0x03A8)
class ACombatDominationRadarCore : public ACombatSEIRadarCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62452 ];

		return pClassPointer;
	};

};

UClass* ACombatDominationRadarCore::pClassPointer = NULL;

// Class CombatGame.CombatDominationMovie
// 0x0004 (0x082C - 0x0828)
class UCombatDominationMovie : public UCombatSEIMovie
{
public:
	class UGFxObject*                                  TestMultiLineTF;                                  		// 0x0828 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62453 ];

		return pClassPointer;
	};

	void UpdateDominationGameData ( );
	void DrawTestMultiLineText ( struct FString msg );
	void Tick ( float DeltaSeconds );
	void InitUI ( );
	void registerHUD ( class UCombatMain_HUD* M );
};

UClass* UCombatDominationMovie::pClassPointer = NULL;

// Class CombatGame.CombatHUD_OccupiedAreaContainer
// 0x0000 (0x00A4 - 0x00A4)
class UCombatHUD_OccupiedAreaContainer : public UCombatHUD_GOContainer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62456 ];

		return pClassPointer;
	};

	bool CheckAvailableGO ( int* MessageId );
	void Update ( float DeltaSeconds, TArray< struct FVector >* Area_Locations );
	void RegisterComponent ( class UCombatTeamGameMovie* Movie, class UCombatHUD_GameObject** Component );
};

UClass* UCombatHUD_OccupiedAreaContainer::pClassPointer = NULL;

// Class CombatGame.CombatHUD_OccupiedArea
// 0x0004 (0x0154 - 0x0150)
class UCombatHUD_OccupiedArea : public UCombatHUD_GameObject
{
public:
	class ACombatOccupiedAreaVolume*                   AreaVolume;                                       		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62459 ];

		return pClassPointer;
	};

	bool CheckAvailableGO ( int* MessageId );
	void UpdateVisible ( );
	void GetIconFrameLabel ( struct FString* out_label );
	bool GetGameObjectName ( struct FString* out_objectName );
	void SetAreaObject ( class ACombatOccupiedAreaVolume* AreaVol );
};

UClass* UCombatHUD_OccupiedArea::pClassPointer = NULL;

// Class CombatGame.CombatOccupiedAreaData
// 0x0014 (0x01E8 - 0x01D4)
class ACombatOccupiedAreaData : public AReplicationInfo
{
public:
	int                                                TotalOccupierNum;                                 		// 0x01D4 (0x0004) [0x0000000000000000]              
	float                                              UpdateOccupationTime;                             		// 0x01D8 (0x0004) [0x0000000000000000]              
	int                                                OccupationScore;                                  		// 0x01DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ACombatOccupiedAreaVolume*                   Target;                                           		// 0x01E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ACombatSEIModeTeamInfo*                      Team;                                             		// 0x01E4 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62499 ];

		return pClassPointer;
	};

	int GetOccupiedScoringTime ( );
	int CheckOccupationNum ( unsigned long bInOccupiedArea );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsOccupationSuccess ( );
	void AddScore ( int AdditionalScore );
	void eventReset ( );
};

UClass* ACombatOccupiedAreaData::pClassPointer = NULL;

// Class CombatGame.CombatDroppedSupplies_AmmoKit
// 0x0014 (0x02CC - 0x02B8)
class ACombatDroppedSupplies_AmmoKit : public ACombatDroppedSupplies
{
public:
	int                                                MainAmmoRate;                                     		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubAmmoRate;                                      		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GrenadeRate_A;                                    		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GrenadeRate_B;                                    		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GrenadeRate_C;                                    		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62634 ];

		return pClassPointer;
	};

	void SupplyTo ( class APawn* SuppliedPawn );
	bool CanPickup ( class ACombatPlayerControllerBase* LocalPC );
};

UClass* ACombatDroppedSupplies_AmmoKit::pClassPointer = NULL;

// Class CombatGame.CombatDroppedSupplies_MediKit
// 0x0004 (0x02BC - 0x02B8)
class ACombatDroppedSupplies_MediKit : public ACombatDroppedSupplies
{
public:
	int                                                HealRate;                                         		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62655 ];

		return pClassPointer;
	};

	void SupplyTo ( class APawn* SuppliedPawn );
	bool CanPickup ( class ACombatPlayerControllerBase* LocalPC );
};

UClass* ACombatDroppedSupplies_MediKit::pClassPointer = NULL;

// Class CombatGame.CombatDroppedWeapon_MeleeGame
// 0x0002 (0x0294 - 0x0292)
class ACombatDroppedWeapon_MeleeGame : public ACombatDroppedWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62738 ];

		return pClassPointer;
	};

	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventDestroyed ( );
	void eventSetPickupMesh ( class UPrimitiveComponent* PickupMesh );
	void GiveTo ( class APawn* OwnerPawn );
	bool CanPickup ( class ACombatPlayerControllerBase* LocalPC );
};

UClass* ACombatDroppedWeapon_MeleeGame::pClassPointer = NULL;

// Class CombatGame.CombatTDMMeleeGame
// 0x0000 (0x05B8 - 0x05B8)
class ACombatTDMMeleeGame : public ACombatTDMGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62745 ];

		return pClassPointer;
	};

	bool CanDropWeapon ( );
	void NotifyDropSpecialWeapon ( class ACombatWeapon* Wep );
	void NotifyPickupSpecialWeapon ( class AController* TargetPC, struct FName WeaponClassName );
	void NotifyRespawnSpecialWeapon ( struct FName WeaponClassName );
	bool IsPlayingGameState ( );
};

UClass* ACombatTDMMeleeGame::pClassPointer = NULL;

// Class CombatGame.CombatDummyClientController
// 0x0010 (0x04A4 - 0x0494)
class ACombatDummyClientController : public ACombatBotController_GuyBase
{
public:
	struct FString                                     GripControllerManagerClassPath;                   		// 0x0494 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      GripControllerManagerHolder;                      		// 0x04A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62772 ];

		return pClassPointer;
	};

	void SpawnGripControllerManager ( );
	void eventPostBeginPlay ( );
};

UClass* ACombatDummyClientController::pClassPointer = NULL;

// Class CombatGame.CombatEmitterPool
// 0x0000 (0x022C - 0x022C)
class ACombatEmitterPool : public AEmitterPool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62791 ];

		return pClassPointer;
	};

};

UClass* ACombatEmitterPool::pClassPointer = NULL;

// Class CombatGame.CombatFrontEndLocalSoundGroup_Base
// 0x00AC (0x00F0 - 0x0044)
class UCombatFrontEndLocalSoundGroup_Base : public UCombatHUDSoundGroup
{
public:
	class USoundCue*                                   EnterScene[ 0x18 ];                               		// 0x0044 (0x0060) [0x0000000000000000]              
	class USoundCue*                                   WarnInvalidNickName;                              		// 0x00A4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   MainLobby_SearchRoom;                             		// 0x00A8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   MainLobby_OptionMenu;                             		// 0x00AC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   MatchRoom_Intrude;                                		// 0x00B0 (0x0004) [0x0000000000000000]              
	TArray< class USoundCue* >                         MatchRoom_ChangeTeam;                             		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USoundCue*                                   MatchRoom_RoomState[ 0x7 ];                       		// 0x00C0 (0x001C) [0x0000000000000000]              
	class USoundCue*                                   Matchroom_StartMatch;                             		// 0x00DC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   Matchroom_StartMatchCountDown;                    		// 0x00E0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   AlramFriendSuggestion;                            		// 0x00E4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   MailBox_NewMail;                                  		// 0x00E8 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   MailBox_UnreadMail;                               		// 0x00EC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63058 ];

		return pClassPointer;
	};

};

UClass* UCombatFrontEndLocalSoundGroup_Base::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Accessterms
// 0x0000 (0x009C - 0x009C)
class UCombatFrontEnd_Accessterms : public UCombatFrontEnd_Object
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63275 ];

		return pClassPointer;
	};

	void receiveAccesstermsDisagreeBtn ( );
	void receiveAccesstermsAgreeBtn ( );
	void CallsetCancelBtnLabel ( struct FString Label );
	void CallsetOkBtnLabel ( struct FString Label );
	void CallsetCautionTxt ( struct FString txt );
	void CallsetAccesstermsTxt ( struct FString txt );
	void CallsetTitleTxt ( struct FString txt );
	void OnDisagreeDialogCancle ( struct FEventData ev );
	void OnDisagreeDialogOK ( struct FEventData ev );
	void ShowDisagreeDialog ( );
	void InitLabel ( );
	void Init ( );
};

UClass* UCombatFrontEnd_Accessterms::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Achieve
// 0x0038 (0x00D4 - 0x009C)
class UCombatFrontEnd_Achieve : public UCombatFrontEnd_Scene
{
public:
	int                                                RETURN_TO_MATCHRESULT_TIME_MAX;                   		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ReturnToMatchResultTime;                          		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PrevLevel;                                        		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                CurLevel;                                         		// 0x00A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bQuest : 1;                                       		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     RewardCodeName;                                   		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      RewardItemList;                                   		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ModeID;                                           		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                CurTier;                                          		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                NewTier;                                          		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63312 ];

		return pClassPointer;
	};

	void receiveMain_LastSceneAchieveButtonShow ( );
	void receiveMain_LastSceneAchieveAnimationComplete ( );
	void CallSetOkButtonSecond ( int Sec );
	void ClearTimer ( );
	void ReturnToMatchResultTimer ( );
	void StartTimer ( );
	void SetTierData ( class UGFxObject** out_Data );
	void SetTypeData ( class UGFxObject** out_Data );
	void SetRandomBoxData ( class UGFxObject** out_Data );
	void SetRewardData ( class UGFxObject** out_Data );
	bool SetLevelUpData ( class UGFxObject** out_Data );
	void SetQuestData ( class UGFxObject** out_Data );
	class UGFxObject* GetRewardDataObject ( struct FString ItemName, struct FString Period, struct FString ImgPath );
	void SetData ( );
	void InitLabels ( );
	bool IsTierUp ( );
	bool GetRewardItemList ( );
	struct FName GetNextFunc ( );
	void GotoPrevScene ( );
	void DelayShowScene ( );
	void ShowScene ( );
	void Init ( );
};

UClass* UCombatFrontEnd_Achieve::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_AwaitList
// 0x0050 (0x00EC - 0x009C)
class UCombatFrontEnd_AwaitList : public UCombatFrontEnd_Object
{
public:
	int                                                ShowType;                                         		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                ShowPageNum;                                      		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                TotalPage;                                        		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                TitleId;                                          		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                L_NoUserID;                                       		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                M_NoUserID;                                       		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                RegisterID;                                       		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                UnRegisterID;                                     		// 0x00B8 (0x0004) [0x0000000000000000]              
	struct FAwaitListPopUpItem                         AwaitListPopUpInfo[ 0x4 ];                        		// 0x00BC (0x0020) [0x0000000000000000]              
	unsigned char                                      OptionType;                                       		// 0x00DC (0x0001) [0x0000000000000000]              
	TArray< int >                                      Invite_UserID_List;                               		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63442 ];

		return pClassPointer;
	};

	void OnDisplayDialogAwait_NO ( struct FEventData ev );
	void OnDisplayDialogAwait_YES ( struct FEventData ev );
	void DisplayDialogAwait ( );
	void receiveAwaitListPopupMenuBtn ( int Id, int userID );
	void receiveAwaitListAwaiterLeftRightClick ( int Id, int X, int Y );
	void receiveAwaitListCloseBtn ( );
	void receiveAwaitListEnrollmentBtn ( );
	void receiveAwaitListNextBtn ( );
	void receiveAwaitListPrevBtn ( );
	void receiveAwaitListReflashBtn ( );
	void CallDrawPopupMenu ( class UGFxObject* List, int X, int Y );
	void CallSetEnrollmentBtn ( int _State, struct FString Label );
	void CallSetNoUserLabel ( struct FString Label );
	void CallSetAwaiterList ( class UGFxObject* List );
	void CallSetCurrentScene ( int Index );
	void CallSetAwaitListTitle ( struct FString Title );
	void InitAwaiterList ( );
	void SetAwaiterList ( );
	void RequestMatchRoomChannelInviteUserList ( );
	void SetEnrollmentBtnLabel ( );
	void SetNoUserLabel ( );
	void InitLabel ( );
	void Init ( );
	void HideAwaitList ( );
	void ShowAwaitListType ( int Index );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatFrontEnd_AwaitList::pClassPointer = NULL;

// Class CombatGame.CombatFrontEndActor
// 0x00BC (0x0290 - 0x01D4)
class ACombatFrontEndActor : public AActor
{
public:
	class USkeletalMeshComponent*                      CharacterMesh;                                    		// 0x01D4 (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UClass*                                      Char_InfoClass;                                   		// 0x01D8 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class USkelControlSingleBone*                      Char_RootRotControl;                              		// 0x01DC (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class UAnimNodeSlot*                               Char_FullBodyAnimSlot;                            		// 0x01E0 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class UAnimNodeSlot*                               Char_TopHalfAnimSlot;                             		// 0x01E4 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	class UCombatAnimBlendBySlotActive*                Char_TopHalfParentNode;                           		// 0x01E8 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	unsigned char                                      Char_GenderType;                                  		// 0x01EC (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      Char_TeamIndex;                                   		// 0x01ED (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      IKHand;                                           		// 0x01EE (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PhysUnFreezeCounter;                              		// 0x01EF (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentCharacterRefItemIndex;                     		// 0x01F0 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UPhysicsAsset*                               Char_PhysicAsset;                                 		// 0x01F4 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class USkeletalMeshComponent*                      WeaponMesh;                                       		// 0x01F8 (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UClass*                                      WP_WeaponClass;                                   		// 0x01FC (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UAnimNodeSlot*                               WP_CustomAnim;                                    		// 0x0200 (0x0004) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	int                                                CurrentWeaponRefItemIndex;                        		// 0x0204 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class USkeletalMeshComponent*                      LeftArmorMesh;                                    		// 0x0208 (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      RightArmorMesh;                                   		// 0x020C (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UClass*                                      ArmorClass;                                       		// 0x0210 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                CurrentArmorItemIndex;                            		// 0x0214 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UParticleSystemComponent*                    FXUpperPSC;                                       		// 0x0218 (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    FXFootPSC;                                        		// 0x021C (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UClass*                                      FXUpperClass;                                     		// 0x0220 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UClass*                                      FXFootClass;                                      		// 0x0224 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bShowActor : 1;                                   		// 0x0228 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDoRotation : 1;                                  		// 0x0228 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              DefaultMouseInputDuration;                        		// 0x022C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DefaultMouseMovementPixel;                        		// 0x0230 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DefaultRotationDegree;                            		// 0x0234 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DefaultRotationInterpolationSpeed;                		// 0x0238 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DefaultRotationInterpolationSpeed_Max;            		// 0x023C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                LastMouseInput_X;                                 		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              LastMouseInputTime;                               		// 0x0244 (0x0004) [0x0000000000000000]              
	float                                              YawInterpolationSpeed;                            		// 0x0248 (0x0004) [0x0000000000000000]              
	struct FRotator                                    TargetRot;                                        		// 0x024C (0x000C) [0x0000000000000000]              
	class USkelControlLimb*                            HandGripIKNode[ 0x2 ];                            		// 0x0258 (0x0008) [0x0000000000000000]              
	class UAnimSet*                                    InvenAnimset[ 0x2 ];                              		// 0x0260 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     InvenAnimSetName[ 0x2 ];                          		// 0x0268 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAnimNodeRandom*                             RandomNode;                                       		// 0x0280 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             UnfixedBoneNames;                                 		// 0x0284 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63566 ];

		return pClassPointer;
	};

	void SetFXFootInfo ( class UClass* FXFootInfo, unsigned long bForceUpdate );
	void SetFXUpperInfo ( class UClass* FXUpperInfo, unsigned long bForceUpdate );
	void SetArmorMeshFromInfo ( class UClass* _ArmorClass, unsigned long bForceUpdate );
	struct FVector GetWeaponGripOffset ( int Space );
	void SetWeaponHandGripOffset ( );
	void SetGripIK ( int Hand, unsigned long UseIK );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void SetCharacterAnimSets ( class UAnimSet* optionAnimSet, class UAnimSet* subAnimSet );
	void SetWeaponMeshFromInfo ( class UClass* WeaponClass, int RefItemIndex, unsigned long bForceUpdate );
	void SetWeaponMesh ( );
	void HideWeaponSilencer ( unsigned long Show );
	void UnfixPhysBodies ( );
	void GetUnfixedBoneNames ( );
	unsigned char SetCharacterMeshFromInfo ( class UClass* Info, int RefItemIndex, unsigned char TeamIndex );
	void DetachMesh ( unsigned long bNeedDetachMesh );
	class UAnimSet* GetInvenAnimset ( unsigned char Gender );
	void SetFrontEndActorRotationX ( int X );
	bool IsShown ( );
	void SetFrontEndPlayerActorVisible ( unsigned long bShow );
	void eventTick ( float DeltaTime );
	void eventDestroyed ( );
};

UClass* ACombatFrontEndActor::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyAfter_Base
// 0x0000 (0x003C - 0x003C)
class UCombatFrontEnd_BuyAfter_Base : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63848 ];

		return pClassPointer;
	};

	void UseItemFail ( unsigned char error_type, class UCombatFrontEnd_Base* UIUserObj );
	void UseItemAction ( int InvenSlotIndex, int StackCount, class UCombatFrontEnd_Base* UIUserObj );
	bool BuyItemAction ( int InvenSlotIndex, class UCombatFrontEnd_Base* UIBuyerObj );
};

UClass* UCombatFrontEnd_BuyAfter_Base::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyAfter_Used
// 0x0000 (0x003C - 0x003C)
class UCombatFrontEnd_BuyAfter_Used : public UCombatFrontEnd_BuyAfter_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64034 ];

		return pClassPointer;
	};

	void UseItemFail ( unsigned char error_type, class UCombatFrontEnd_Base* UIUserObj );
	bool BuyItemAction ( int InvenSlotIndex, class UCombatFrontEnd_Base* UIBuyerObj );
};

UClass* UCombatFrontEnd_BuyAfter_Used::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyAfter_CallingCard
// 0x0000 (0x003C - 0x003C)
class UCombatFrontEnd_BuyAfter_CallingCard : public UCombatFrontEnd_BuyAfter_Used
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64046 ];

		return pClassPointer;
	};

	void UseItemFail ( unsigned char error_type, class UCombatFrontEnd_Base* UIUserObj );
};

UClass* UCombatFrontEnd_BuyAfter_CallingCard::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyAfter_Equip
// 0x0000 (0x003C - 0x003C)
class UCombatFrontEnd_BuyAfter_Equip : public UCombatFrontEnd_BuyAfter_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64051 ];

		return pClassPointer;
	};

	void UseItemFail ( unsigned char error_type, class UCombatFrontEnd_Base* UIUserObj );
	void UseItemAction ( int InvenSlotIndex, int StackCount, class UCombatFrontEnd_Base* UIUserObj );
	bool BuyItemAction ( int InvenSlotIndex, class UCombatFrontEnd_Base* UIBuyerObj );
};

UClass* UCombatFrontEnd_BuyAfter_Equip::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyAfter_MoneyType
// 0x0000 (0x003C - 0x003C)
class UCombatFrontEnd_BuyAfter_MoneyType : public UCombatFrontEnd_BuyAfter_Used
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64064 ];

		return pClassPointer;
	};

	void UseItemFail ( unsigned char error_type, class UCombatFrontEnd_Base* UIUserObj );
	void UseItemAction ( int InvenSlotIndex, int StackCount, class UCombatFrontEnd_Base* UIUserObj );
	bool BuyItemAction ( int InvenSlotIndex, class UCombatFrontEnd_Base* UIBuyerObj );
};

UClass* UCombatFrontEnd_BuyAfter_MoneyType::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyAfter_RandomBox
// 0x0000 (0x003C - 0x003C)
class UCombatFrontEnd_BuyAfter_RandomBox : public UCombatFrontEnd_BuyAfter_Used
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64087 ];

		return pClassPointer;
	};

	void UseItemFail ( unsigned char error_type, class UCombatFrontEnd_Base* UIUserObj );
	void UseItemAction ( int InvenSlotIndex, int StackCount, class UCombatFrontEnd_Base* UIUserObj );
	bool BuyItemAction ( int InvenSlotIndex, class UCombatFrontEnd_Base* UIBuyerObj );
};

UClass* UCombatFrontEnd_BuyAfter_RandomBox::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_BuyItem
// 0x00F4 (0x0190 - 0x009C)
class UCombatFrontEnd_BuyItem : public UCombatFrontEnd_Object
{
public:
	class UCombatDataTableRefItem*                     RefItem;                                          		// 0x009C (0x0004) [0x0000000000000000]              
	class UCombatDataTableRefShopItem*                 refShopItem;                                      		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UCombatDataTableRefItemDetailinfo*           RefItemDetailinfo;                                		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                PriceType;                                        		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                priceID;                                          		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                BuyItemSlotIndex;                                 		// 0x00B0 (0x0004) [0x0000000000000000]              
	unsigned char                                      SelectPresetTab;                                  		// 0x00B4 (0x0001) [0x0000000000000000]              
	unsigned char                                      RecvType;                                         		// 0x00B5 (0x0001) [0x0000000000000000]              
	int                                                PresetLabelIDList[ 0x3 ];                         		// 0x00B8 (0x000C) [0x0000000000000000]              
	struct FAddoninfo                                  AddOnInfoList[ 0xA ];                             		// 0x00C4 (0x0078) [0x0000000000000000]              
	struct Fabilityinfo                                AbilityInfoList[ 0x7 ];                           		// 0x013C (0x0054) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64107 ];

		return pClassPointer;
	};

	void OnBuyItemFailureOK ( struct FEventData ev );
	void OnBuyItemCheckCancel ( struct FEventData ev );
	void OnBuyItemCheckOK ( struct FEventData ev );
	void EquipItem ( unsigned char PresetTab );
	bool isSale ( );
	bool IsPurchasableItemByHoldingSum ( );
	void DisPlayDialog_BuyItem ( unsigned long bBuyAndEquipBtn );
	void receiveShopPopupInventoryBtn ( );
	void receiveShopPopupEquipBtn ( unsigned long bPreset1, unsigned long bPreset2, unsigned long bPreset3 );
	void receiveShopPopupBuyCancelBtn ( );
	void receiveShopPopupBuyAndEquipBtn ( int unit_id, int price_id );
	void receiveShopPopupBuyBtn ( int unit_id, int price_id );
	void receiveShopPopupPriceBtn ( int Id );
	void receiveShopPopupUnitBtn ( int Id );
	void receiveShopPopupPresetViewBtn ( int Id );
	void CallPlayPurchaseSound ( );
	void CallSetSuccess ( );
	void CallPlayEquipSound ( int Index );
	void CallShowEquipPopup ( );
	void CallSetInventoryBtnState ( int BtnState );
	void CallSetInventoryBtnLabel ( struct FString Label );
	void CallSetEquipBtnState ( int BtnState );
	void CallSetEquipBtnLabel ( struct FString Label );
	void CallSetPresetItemList ( int Index, class UGFxObject* Data );
	void CallSetBuyFinishLabel ( struct FString Label );
	void CallSetBuyItemInfo ( class UGFxObject* Data );
	void CallSetEquipTitleLabel ( struct FString Label );
	void CallSetCancelState ( int BtnState );
	void CallSetCancelLabel ( struct FString Label );
	void CallSetBuyAndEquipVisible ( unsigned long Visible );
	void CallSetBuyAndEquipState ( int BtnState );
	void CallSetBuyAndEquipLabel ( struct FString Label );
	void CallSetBuyBtnState ( int BtnState );
	void CallSetBuyBtnLabel ( struct FString Label );
	void CallSetPayAttention ( struct FString Desc );
	void CallSetBalanceValue ( struct FString _Value, unsigned long shortage );
	void CallSetBalanceLabel ( struct FString Label, int Icon );
	void CallSetHoldingSumValue ( struct FString _Value );
	void CallSetHoldingSumLabel ( struct FString Label, int Icon );
	void CallSelectBuyPrice ( int Id );
	void CallSetBuyPriceTab ( class UGFxObject* Data );
	void CallSetBuyPriceLabel ( struct FString Label );
	void CallSelectMonetaryUnit ( int Id );
	void CallSetMonetaryUnitTab ( class UGFxObject* Data );
	void CallSetMonetaryLabel ( struct FString Label );
	void CallSetInfoDesc ( class UGFxObject* Data );
	void CallSetAddon ( class UGFxObject* Data );
	void CallSetAttachmentTitle ( struct FString Title );
	void CallSetAbility ( class UGFxObject* Data );
	void CallSetItemEffect ( struct FString Effect );
	void CallSetItemImage ( struct FString ImageURL );
	void CallSetItemIcon ( class UGFxObject* Data );
	void CallSetPackageItemList ( class UGFxObject* Data );
	void CallSetPackageItemTitle ( struct FString Title );
	void CallSetComparisonSlot ( int SlotIndex );
	void CallSetEquipSlotData ( class UGFxObject* Data );
	void CallSelectPresetTab ( int Index );
	void CallSetPresetTab ( class UGFxObject* Data );
	void CallSetTemplate ( int Template );
	void CallSetBuyTitleLabel ( struct FString Title );
	void InitPresetItemObject ( int Index, class UGFxObject** out_Data );
	void SetPresetItemList ( int Index );
	void SetBuyItemInfoData ( );
	void ResetAbilityInfoList ( );
	bool GetAbilityInfoList ( );
	void SetAbility ( );
	void ResetAddOnList ( );
	bool GetAddOnList ( );
	void SetAddOn ( );
	void SetInfoDesc ( );
	void CalcPriceValue ( );
	void SetPriceValueList ( );
	void SetMonetaryUnitTab ( );
	void SetItemEffect ( );
	void SetItemImage ( );
	void SetItemIcon ( );
	void ResetEquipSlot ( );
	void SetEquipSlotData ( );
	struct FString CalcDayItemPriod ( int GiveType, int Min, int Max );
	void SetPackageItemList ( );
	void SetTemplate ( );
	void SetBuyAndEquipLabel ( );
	void SetBuyTitleLabel ( );
	struct FString GetPriceString ( );
	unsigned char GetPriceIconType ( );
	void SetPriceType ( );
	void OnBuyItem_Success ( unsigned long bShowEquipPopUp, int InvenSlot );
	void ShowEquipPopUp ( int InvenSlot );
	void ShowBuyItemPopUp ( int Index );
	struct FShopItemValueStruct GetPriceInfo ( );
	bool SetItemData ( int Index );
	void InitItemData ( );
	void InitPresetTabInfo ( );
	void InitLabels ( );
	void HidePopUp ( unsigned long bSuccess );
	void HideScene ( );
	void ShowScene ( );
	void Init ( );
};

UClass* UCombatFrontEnd_BuyItem::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CallingCardPage
// 0x0064 (0x0100 - 0x009C)
class UCombatFrontEnd_CallingCardPage : public UCombatFrontEnd_Object
{
public:
	struct FFrontEndButtonStruct                       CallingCardButtonInfo[ 0x2 ];                     		// 0x009C (0x0028) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FFrontEndButtonStruct                       CallingCardTabInfo[ 0x2 ];                        		// 0x00C4 (0x0028) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCallingCardInfo >                  CallingCardInfoList;                              		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      SHOW_CALLINGCARD_COUNT;                           		// 0x00F8 (0x0001) [0x0000000000000000]              
	int                                                selectID;                                         		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64438 ];

		return pClassPointer;
	};

	void receiveListItemBtn ( int Id );
	void receiveCloseBtn ( );
	void receiveApplyBtn ( );
	void CallSetTabData ( class UGFxObject* List );
	void CallscrollingItemList ( int Id );
	void CallSelectItemList ( int Id );
	void CallSetItemList ( class UGFxObject* Data );
	void CallSetBtnLabel ( struct FString _Name, struct FString _Label );
	void CallSetTitle ( struct FString Title );
	struct FString GetCurrentRemainTime ( int remainTime );
	void OnCallingCardExpire ( );
	void OnCallingCardChangeFailureOK ( struct FEventData ev );
	void OnCallingCardChange_Failure ( unsigned char Error_Code );
	void OnCallingCardChange_Sucess ( );
	void NotShowCallingCardPageOK ( struct FEventData ev );
	void NotShowCallingCardPage ( );
	bool IsShowCallingCardPage ( );
	void SetCallingCardList ( );
	int CurrentCallingCardID ( );
	void FocusCallingCardID ( );
	void InitLabel ( );
	void HideScene ( );
	void ShowScene ( );
	void Init ( );
};

UClass* UCombatFrontEnd_CallingCardPage::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ChangePropernounPopup
// 0x001C (0x00B8 - 0x009C)
class UCombatFrontEnd_ChangePropernounPopup : public UCombatFrontEnd_Object
{
public:
	unsigned char                                      PopupMode;                                        		// 0x009C (0x0001) [0x0000000000000000]              
	TArray< struct FSendTextInfo >                     SendTextList;                                     		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SendText;                                         		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64504 ];

		return pClassPointer;
	};

	void CallSetCancelBtn ( struct FString Label, class UGFxObject* Data );
	void CallSetOkBtn ( struct FString Label, class UGFxObject* Data );
	void CallSetFocus ( );
	void CallSetMaxChars ( int Max );
	void CallsetCautionTxt ( struct FString txt );
	void CallSetGuideTxt ( struct FString txt );
	void CallSetInputTxt ( struct FString txt );
	void CallSetTitleText ( struct FString txt );
	void receiveChangeProperNounPopupCancelBtn ( );
	void OnDisplayDialogUseDialogCancle ( struct FEventData ev );
	void OnDisplayDialogUseDialogOK ( struct FEventData ev );
	void receiveChangeProperNounPopupOkBtn ( struct FString txt );
	unsigned char CheckText ( struct FString Text );
	void HideScene ( );
	void onChangeError ( unsigned char ErrorCode );
	void SetChangePropernounLabel ( );
	void ShowPropernounPopup ( unsigned char Mode );
};

UClass* UCombatFrontEnd_ChangePropernounPopup::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Channel
// 0x005C (0x00F8 - 0x009C)
class UCombatFrontEnd_Channel : public UCombatFrontEnd_Scene
{
public:
	struct UCombatFrontEnd_Channel_FButtonInfo         ButtonList[ 0x3 ];                                		// 0x009C (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                BoosterList[ 0x2 ];                               		// 0x00CC (0x0008) [0x0000000000000000]              
	class UCombatChannelTransaction*                   ChannelTran;                                      		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                SelectChannelIndex;                               		// 0x00D8 (0x0004) [0x0000000000000000]              
	TArray< struct UCombatFrontEnd_Channel_FOnlineBannerInfo > BannerImgDownloadData;                            		// 0x00DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FBannerInfo >                       BannerImgURL;                                     		// 0x00E8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                BannerDurationTime;                               		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64554 ];

		return pClassPointer;
	};

	void receiveQuickBtn ( int Id );
	void receiveLobbyChannelListBtn ( int ChannelID );
	void receiveLobbyChannelTutorialBtn ( );
	void CallSetMissionList ( class UGFxObject* Data );
	void CallSetMissionLabel ( struct FString Label );
	void CallSetBottomQuickButtons ( class UGFxObject* Data );
	void CallSetTopQuickButtons ( class UGFxObject* Data );
	void CallSetQuickButtonLabel ( struct FString Label );
	void CallSetTutorialToolTip ( struct FString Str );
	void CallHideTutorialToolTip ( );
	void CallShowTutorialToolTip ( );
	void CallSelectedChannelList ( int Id );
	void CallSetRemoveChannelList ( int Id );
	void CallSetAddChannelList ( class UGFxObject* Data );
	void CallSetUpdateChannelList ( class UGFxObject* Data );
	void CallSetChannelList ( class UGFxObject* List );
	void CallSetChannelBtn ( class UGFxObject* Data );
	void CallSetChannelLabel ( struct FString CannelListLabel );
	void CallSetBannerTexture ( int Index, class UGFxObject* imgUrlAry, int interval );
	void OnDisplayEnterMatchChannelPenaltyCancel ( struct FEventData ev );
	void OnDisplayEnterMatchChannelPenaltyOK ( struct FEventData ev );
	void DisplayEnterMatchChannelPenalty ( unsigned char Error_Code, int Penalty );
	void OnDisplayDialogEnterMatchChannelFailureOK ( struct FEventData ev );
	void DisplayDialogEnterMatchChannelFailure ( unsigned char Error_Code );
	bool CheckKAD ( int Min, int Max );
	bool CheckLevel ( int Low, int High );
	bool CheckTestChannel ( );
	bool CheckChampionship ( );
	bool CheckAdmin ( );
	unsigned char CheckEnterMatchChannel ( int* _PaneltyPec );
	void OnEnterMatchChannel ( unsigned char Error_Code );
	void ShowPopupList ( );
	void CheckFirstPlay ( );
	int GetChannelState ( int ChannelState, struct FChannelPropertyInfo _ChannelPropertyInfo );
	void UpdateChannelList ( );
	bool CheckBooster ( struct FString CodeName, int* Exp, int* Gold );
	void UpdateTutorialToolTip ( );
	class UGFxObject* GetChannelList ( int* _FirstIndex );
	void GetSendMatchChannelStateList ( TArray< int >* _List );
	void RequestEnterMatchChannel ( );
	void RequestMatchChannelState ( );
	void OnDisPlayDialogTutorialResultOK ( struct FEventData ev );
	void DisplayDialogTutorialResult ( );
	void InitBannerImageDownload ( );
	void InitBannerImage ( );
	void InitData ( );
	void UpdateMissionList ( );
	void InitQuickButtons ( );
	void InitButtons ( );
	void InitLabels ( );
	void GotoPrevScene ( );
	void HideScene ( );
	void ShowScene ( );
	void Close ( );
	void SetActorWeapon ( );
	void ShowFrontEndPlayerActor ( );
	void Init ( );
};

UClass* UCombatFrontEnd_Channel::pClassPointer = NULL;

// Class CombatGame.UIDisplayPoint
// 0x000C (0x01E0 - 0x01D4)
class AUIDisplayPoint : public AActor
{
public:
	struct FString                                     NameText;                                         		// 0x01D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64592 ];

		return pClassPointer;
	};

};

UClass* AUIDisplayPoint::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Chat
// 0x0040 (0x00DC - 0x009C)
class UCombatFrontEnd_Chat : public UCombatFrontEnd_Object
{
public:
	struct FString                                     LastWhisperSenderName;                            		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TabLabelIDList[ 0x3 ];                            		// 0x00A8 (0x000C) [0x0000000000000000]              
	int                                                PopUpLabelIDList[ 0x5 ];                          		// 0x00B4 (0x0014) [0x0000000000000000]              
	unsigned long                                      bPlayScrNotice : 1;                               		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                CurrentTabType;                                   		// 0x00CC (0x0004) [0x0000000000000000]              
	struct FString                                     CurrentWhisperID;                                 		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65070 ];

		return pClassPointer;
	};

	bool IsClanInvite ( );
	void receiveCommonLobbyChattingPopupButton ( int Index, struct FString Id );
	void receiveCommonLobbyChattingListViewRightClick ( struct FString Id, int X, int Y );
	void receiveCommonLobbyChattingListViewClick ( struct FString Id );
	void receiveCommonLobbyChattingFocus ( unsigned long bFocus );
	void receiveCommonLobbyChattingTab ( int Index );
	void receiveCommonLobbyChattingMessage ( struct FString msg, struct FString Code, struct FString WhiperID, struct FString Channel );
	void CallRemovePopup ( );
	void CallSetPopup ( class UGFxObject* Menu, struct FString _Name, int X, int Y, class UGFxObject* Disables );
	void CallSetLabelLastWhisperList ( struct FString Move, struct FString Select );
	void CallRemoveLastWhisperListData ( );
	void CallSetLastWhisperListData ( class UGFxObject* List );
	void CallHideLastWhisperList ( );
	void showLastWhisperList ( );
	void CallStopNotice ( );
	void CallPlayNotice ( );
	void CallSetNotice ( class UGFxObject* List, int Time, int DelayTime );
	void CallSetWhisperId ( struct FString Id );
	void CallChangeWhisperMode ( struct FString Id );
	void CallSetTextFocus ( int Type );
	void CallSetChatTabButtonToolTip ( class UGFxObject* List );
	void CallSetChatTabButtonSelected ( int Index, unsigned long bSelected );
	void CallRemoveAllMessage ( );
	void CallSetModeLables ( struct FString Whisper, struct FString Clan );
	void CallAddMessage ( class UGFxObject* List, int TabIndex, unsigned long bMe, struct FString Id );
	void UpdateLastWhisperList ( struct FString Recipient );
	void SaveLastWhisperSenderName ( struct FString SenderID );
	void AddMessage ( unsigned char TabType, TArray< struct FChattingInfo > chatInfo );
	void OnWhisperMode ( struct FString Id );
	void UpdateScrNotice ( );
	void StopScrNotice ( );
	void PlayScrNotice ( );
	void InitChatTab ( );
	void InitPopUpLabels ( );
	void InitTabLabels ( );
	void InitLabels ( );
	void HideWhisperList ( );
	void HideScene ( );
	void ShowScene ( );
	void Init ( );
};

UClass* UCombatFrontEnd_Chat::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Clan
// 0x0014 (0x00B0 - 0x009C)
class UCombatFrontEnd_Clan : public UCombatFrontEnd_Scene
{
public:
	struct FString                                     ReqClanName;                                      		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RequiredMoney;                                    		// 0x00A8 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_ClanJoinPopup*               PopupClass;                                       		// 0x00AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66567 ];

		return pClassPointer;
	};

	void UpdateCraeteButton ( );
	void GotoPrevScene ( );
	void CallSetDisableCancelBtn ( unsigned long Disable );
	void CallSetDisableCreatedBtn ( unsigned long Disable );
	void RecvFailKickMemberClan ( unsigned char Error );
	void RecvFailAcceptSuggestClan ( unsigned char Error );
	void RecvFailInviteClan ( unsigned char Error );
	void OnCreateClanErrorDialogOK ( struct FEventData ev );
	void CreateClanErrorDialog ( struct FString ErrorMessage );
	void RecvFailCreateClan ( unsigned char Error );
	void RecvSuccessCreateClan ( );
	void RequestCreateClanName ( struct FString clanPassword );
	void RequestSendClanCreatableNameCheck ( struct FString ClanName );
	void OnCreateClanNameDialogCancel ( struct FEventData ev );
	void OnCreateClanNameDialogOK ( struct FEventData ev );
	void CreateClanNameDialog ( );
	void SetClanText ( );
	void CallSetEmphasisMessageText ( struct FString Message );
	void CallSetThirdParagraphText ( struct FString mainTitle, struct FString firstTitle, struct FString firstContent, struct FString secondTitle, struct FString secondContent );
	void CallSetSecondParagraphText ( struct FString Title, struct FString Content );
	void CallSetFirstParagraphText ( struct FString Title, struct FString Content );
	void CallSetButtonLabelText ( struct FString CreatedBtn, struct FString CancelBtn );
	void CallSetMessageText ( struct FString Tex );
	void CallSetInputText ( struct FString Tex );
	void CallSetTitleText ( struct FString Tex );
	void SetJoinPopup ( class UCombatFrontEnd_ClanJoinPopup* M );
	void Init ( );
};

UClass* UCombatFrontEnd_Clan::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ClanJoinPopup
// 0x0009 (0x00A5 - 0x009C)
class UCombatFrontEnd_ClanJoinPopup : public UCombatFrontEnd_Object
{
public:
	unsigned long                                      bNeedInitClanPasswordLabel : 1;                   		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                nClanID;                                          		// 0x00A0 (0x0004) [0x0000000000000000]              
	unsigned char                                      PopupMode;                                        		// 0x00A4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66569 ];

		return pClassPointer;
	};

	void CallSetClanPasswordAdviceText ( struct FString Advice );
	void CallSetClanPasswordCautionText ( struct FString Caution );
	void CallSetClanPasswordInputHeadText ( struct FString PW, struct FString PwConfirm, struct FString CurrentPw, struct FString NewPw, struct FString NewPwConfirm );
	void CallSetClanPasswordNoticeText ( struct FString notice );
	void CallSetClanPasswordTitleText ( struct FString Title );
	void CallShowClanPasswordPop ( int Type );
	void ReceiveClanPopupCancelBtn ( );
	void ReceiveClanPopupJoinOkBtn ( );
	void CallSetCancelBtn ( struct FString Label, class UGFxObject* PopState );
	void CallSetOkBtn ( struct FString Label, class UGFxObject* PopState );
	void CallSetClanJoinFixText ( struct FString Title, struct FString ClanName, struct FString Desc );
	void CallSetClanNoticeFixTxt ( struct FString Title, struct FString Warn );
	void CallShowClanIntroducePop ( );
	void CallShowClanNoticePop ( );
	void CallShowClanJoinPop ( );
	void SetPopupClanName ( int ClanID );
	void SetClanPopUpBtnLabel ( int Type );
	void HideClanJoinPopup ( );
	void HideScene ( );
	void ShowClanPasswordPopup ( int Type );
	void ShowClanIntroduceWritePopup ( );
	void ShowClanNoticeWritePopup ( );
	void ShowClanJoinPopup ( int ClanID );
};

UClass* UCombatFrontEnd_ClanJoinPopup::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ClanHome
// 0x00AC (0x0148 - 0x009C)
class UCombatFrontEnd_ClanHome : public UCombatFrontEnd_Scene
{
public:
	struct FString                                     ClanMaster;                                       		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MyUserID;                                         		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                MyGrade;                                          		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                SendUserID;                                       		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                SendGrade;                                        		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                PopupState;                                       		// 0x00B8 (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_ClanJoinPopup*               PopupClass;                                       		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                SelectedMatchTab;                                 		// 0x00C0 (0x0004) [0x0000000000000000]              
	class UCBUIDataStore_Mission*                      DataStoreMission;                                 		// 0x00C4 (0x0004) [0x0000000000000000]              
	TArray< struct FClanMatchRecordData >              MatchRecordList;                                  		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPopupMenuStruct                            PopupMenuData[ 0xA ];                             		// 0x00D4 (0x0050) [0x0000000000000000]              
	TArray< int >                                      PopupMenuIDs;                                     		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      SelfPopupMenuIDs;                                 		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      JoinPopupMenuIDs;                                 		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66639 ];

		return pClassPointer;
	};

	void CallResetDetailInfo ( );
	void CallSelectClanLocalList ( int Idx );
	void CallSetClanLocalList ( class UGFxObject* List );
	void CallViewClanLocalList ( unsigned long Show );
	void CallSetClanLocalLabel ( struct FString rgn );
	void CallSetClanLocalHead ( struct FString lbl );
	void ReceiveClanHomeLocalChange ( int Id );
	void ReceiveClanHomeMatchListBtn ( int Id );
	void ReceiveClanHomeBMatchBtn ( );
	void ReceiveClanHomeAMatchBtn ( );
	void ReceiveClanHomeRecentlyMatchBtn ( );
	void ReceiveClanHomeSecondTabBtn ( );
	void ReceiveClanHomeFirstTabBtn ( );
	void CallSetDetailInfo ( class UGFxObject* leftTeam, class UGFxObject* rightTeam, struct FString Score, struct FString Day, class UGFxObject* Vc, class UGFxObject* PM, class UGFxObject* topkill, class UGFxObject* topScore );
	void CallSetScoreBarText ( struct FString barName, struct FString Vc, struct FString PM, struct FString Score, struct FString kad, struct FString bestKill, struct FString bestScore );
	void CallSetScoreList ( class UGFxObject* Data );
	void CallSetScoreTabLabel ( struct FString recently, struct FString a_match, struct FString b_match );
	void CallMainTabLabel ( struct FString clanHome, struct FString clanScore );
	void SetDetailClanMatchRecord ( int Index );
	int SortByScore ( struct FMatchPlayerData A, struct FMatchPlayerData B );
	void SetClanMatchRecord ( );
	void MakeClanMatchList ( int SelectType );
	void SetNoticeBtnDisabled ( unsigned long Disable );
	bool IsClanIntroducePopupDisplayed ( );
	bool IsClanPopupDisplayed ( );
	void SetClanMatchData ( );
	void RequestChangeClanPassword ( struct FString old_Password, struct FString new_Password );
	void ClanPasswordError ( int error_type );
	void ShowClanPasswordPopup ( int Type );
	void CloseNoticePopup ( );
	int GetClanTabState ( );
	void receiveClanNoticeBtn ( int Index );
	void ReceiveClanHomePopupBtn ( int Id, int userID );
	bool CanDelegateClanMaster ( int user_id, int ReqiredRank );
	void ReceiveClanHomeRejectBtn ( int userID );
	void ReceiveClanHomeApprovalBtn ( int Id );
	void ReceiveClanHomePersonalRightBtn ( int Id, int userID, int X, int Y );
	void ReceiveClanSubscriberTabBtn ( );
	void ReceiveClanHomeMemberTabBtn ( );
	void ReceiveClanHomePasswordChangeBtn ( );
	void ReceiveClanHomeClanCloseBtn ( );
	void ReceiveClanBreakAwayFailed ( unsigned char Error );
	void ReceiveClanRegionUpdateFailed ( unsigned char Error );
	void RecvClanKickMemberSucceed ( struct FString UserName );
	void RecvClanGradeChangeFail ( unsigned char Error );
	void RecvClanMasterDelegateFail ( unsigned char Error );
	void RecvClanJoinRefuseFail ( unsigned char Error );
	void RecvClanJoinApproveFail ( unsigned char Error );
	void RecvFailShutDownClan ( unsigned char Error );
	void OnClanError_OK ( struct FEventData ev );
	void DisplayDialogClanHomeError ( struct FString ErrorMessage );
	void OnClanClanBreakAway_OK ( struct FEventData ev );
	void DisplayDialogClanBreakAway ( );
	void OnClanClanGrade_OK ( struct FEventData ev );
	void DisplayDialogClanGrade ( int GRADE, int userID );
	void OnClanKickMemberSucced_OK ( struct FEventData ev );
	void DisplayDialogClanKickMemberSucced ( struct FString UserName );
	void OnClanKickMember_OK ( struct FEventData ev );
	void DisplayDialogClanKickMember ( int userID );
	void OnClanShutDownSucceed_OK ( struct FEventData ev );
	void DisplayDialogClanShutDownSucceed ( );
	void OnClan_Cancel ( struct FEventData ev );
	void OnClanShutDownNotice_OK ( struct FEventData ev );
	void DisplayDialogClanShutDownNotice ( );
	void CallSetClanIntroduceDesc ( struct FString Desc );
	void CallSetClanIntroduceDrawLabel ( struct FString Desc );
	void CallSetClanNoticeDesc ( struct FString Desc );
	void CallSetClanNoticeDrawLabel ( struct FString Label );
	void CallDrawPopupMenu ( class UGFxObject* List, int X, int Y );
	void CallSetClanHomeBtn ( class UGFxObject* datas );
	void CallSetClanSubscriberSortTitle ( struct FString Callsign, struct FString requestDay, struct FString Select, struct FString RankPoint );
	void CallUpdateClanSubscriberList ( class UGFxObject* datas );
	void CallSetClanSubscriberList ( class UGFxObject* datas );
	void CallSetClanMemberSortTitle ( struct FString Callsign, struct FString GRADE, struct FString joinDay, struct FString memberState, struct FString RankPoint );
	void CallUpdateClanMemberList ( class UGFxObject* datas );
	void CallSetClanMemberList ( class UGFxObject* datas );
	void CallAddClanNewsList ( struct FString news );
	void CallSetClanNewsList ( struct FString news );
	void CallSetClanNewsTitle ( struct FString Title );
	void CallSetClanBooster ( class UGFxObject* dats );
	void CallSetClanExperiencePoint ( struct FString CurrentValue, struct FString MaxValue, int Percent );
	void CallSetClanLevel ( struct FString Level, struct FString LevelColor );
	void CallSetClanLevelAndBoosterTitle ( struct FString Title );
	void CallSetClanInfoList ( struct FString clanMark, struct FString ClanName, struct FString masterName, struct FString openDay, struct FString Members );
	void CallSetClanInfoTitle ( struct FString Title );
	void CallSetClanHomeTip ( struct FString Tip );
	void SendClanShutDownReq ( struct FString clanPassword );
	void SendClanBreakAwayReq ( );
	void ChangClanMasterInfoData ( );
	void ChangeClanInfoData ( );
	void ClearClanHomeData ( );
	void SetPopupJoinMenu ( int userID, int X, int Y );
	void SetPopupSelfMenu ( int userID, int X, int Y );
	void SetPopupMenu ( int userID, int X, int Y );
	void SetClanHomeButton ( );
	void SetClanSubscriberInfo ( );
	void SetClanMemberLoginInfo ( int userID );
	void SetClanLoginInfo ( int userID );
	void SetClanMemberInfo ( );
	void SetClanLevelInfo ( );
	void SetClanInfo ( );
	void SetMyClanInfo ( );
	void SetClanData ( );
	void InitLabels ( );
	void GotoPrevScene ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void SetJoinPopup ( class UCombatFrontEnd_ClanJoinPopup* M );
	void Init ( );
};

UClass* UCombatFrontEnd_ClanHome::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ClanList
// 0x0080 (0x011C - 0x009C)
class UCombatFrontEnd_ClanList : public UCombatFrontEnd_Scene
{
public:
	class UCombatFrontEnd_ClanJoinPopup*               PopupClass;                                       		// 0x009C (0x0004) [0x0000000000000000]              
	struct FClanInformation                            CurrentClanInfo;                                  		// 0x00A0 (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UCBUIDataStore_Mission*                      DataStoreMission;                                 		// 0x00DC (0x0004) [0x0000000000000000]              
	TArray< struct FFixTextInfo >                      FixTextList;                                      		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      SortMenuIDList;                                   		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ShowPageNum;                                      		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                TotalPage;                                        		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                ShowType;                                         		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                MyClanID;                                         		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                SelectClanID;                                     		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                joinState;                                        		// 0x010C (0x0004) [0x0000000000000000]              
	struct FString                                     SearchClanName;                                   		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67133 ];

		return pClassPointer;
	};

	void SetJoinPopup ( class UCombatFrontEnd_ClanJoinPopup* M );
	void GotoPrevScene ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void ReceiveClanPopupCancelBtn ( );
	void ReceiveClanPopupJoinOkBtn ( );
	void receiveClanListSortDropDownMenuChange ( int Id );
	void receiveClanListSearchBtn ( struct FString SearchStr );
	void receiveClanListJoinBtn ( );
	void receiveClanListClanBtn ( int Id );
	void receiveClanListNextBtn ( );
	void receiveClanListPrevBtn ( );
	void receiveClanListClanFoundationBtn ( );
	void CallSetClanSearchTxt ( struct FString ClanName );
	void CallSetClanJoinBtn ( class UGFxObject* Data );
	void CallSetClanProfile ( struct FString Profile );
	void CallSetClanLatelyRecord ( class UGFxObject* List );
	void CallSetClanInfo ( class UGFxObject* Data );
	void CallSetClanFixText ( class UGFxObject* Data );
	void CallSetWayBtn ( class UGFxObject* Data );
	void CallSetClanFoundationBtn ( class UGFxObject* Data );
	void CallDisableClanListSortMenu ( unsigned long bDisabled );
	void CallSelectClanListSortMenu ( int Id );
	void CallSetClanListSortMenu ( class UGFxObject* List );
	void CallSelectClanList ( int Number );
	void CallSetClanListData ( class UGFxObject* List );
	void CallSetClanListTitle ( struct FString Title );
	void RecvClanJoinCancelFail ( unsigned char Error );
	void RecvClanJoinApplyFail ( unsigned char Error );
	void OnClanError_OK ( struct FEventData ev );
	void DisplayDialogClanListError ( struct FString ErrorMessage );
	void SetClanJoinButton ( int Id );
	void SetClanInformation ( );
	void OnFindFailureDialogOK ( struct FEventData ev );
	void DisplayClanFindFailureDialog ( struct FString ErrorMessage );
	void OnClanFindFailed ( unsigned char errorType );
	int CompareClanID ( int ClanID );
	void SetClanList ( );
	void UpdateWayButton ( );
	void SetWayBtn ( unsigned char ButtonType, unsigned long bDisabled );
	void SetClanJoinBtn ( );
	void SetClanFoundationBtn ( );
	void SetClanListSortMenu ( );
	void SetClanFixText ( );
	void InitData ( );
	void InitButtons ( );
	void InitLabels ( );
	void SetSearchClanName ( struct FString ClanName );
	void RequestSendClanFind ( );
	void RequestSendClanDetail ( );
	void RequestSendClanList ( );
	void HideScene ( );
	void ShowScene ( );
	void Close ( );
	void Init ( );
};

UClass* UCombatFrontEnd_ClanList::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ClassSelect
// 0x0000 (0x009C - 0x009C)
class UCombatFrontEnd_ClassSelect : public UCombatFrontEnd_Object
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67315 ];

		return pClassPointer;
	};

};

UClass* UCombatFrontEnd_ClassSelect::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ClausePopup
// 0x000C (0x00A8 - 0x009C)
class UCombatFrontEnd_ClausePopup : public UCombatFrontEnd_Object
{
public:
	struct FString                                     URL;                                              		// 0x009C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67317 ];

		return pClassPointer;
	};

	void receiveClausePopupClauseBtn ( );
	void receiveClausePopupCancelBtn ( );
	void receiveClausePopupOkBtn ( );
	void CalletClauseBtn ( struct FString Label );
	void CallSetCancelBtn ( struct FString Label, class UGFxObject* Data );
	void CallSetOkBtn ( struct FString Label, class UGFxObject* Data );
	void CallSetContent ( struct FString Content );
	void CallSetTitle ( struct FString Title );
	void InitLabel ( );
	void Init ( );
};

UClass* UCombatFrontEnd_ClausePopup::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Community
// 0x018C (0x0228 - 0x009C)
class UCombatFrontEnd_Community : public UCombatFrontEnd_Object
{
public:
	struct FMessengerListStruct                        MessengerListInfos[ 0x6 ];                        		// 0x009C (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MessengerPopupLabelIDList[ 0x9 ];                 		// 0x0114 (0x0024) [0x0000000000000000]              
	struct FString                                     UserName_FriendWith;                              		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     UserName_AddBlackList;                            		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                UserID_BreakFriend;                               		// 0x0150 (0x0004) [0x0000000000000000]              
	struct FString                                     UserName_ClanInvite;                              		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                Banish_UserID;                                    		// 0x0160 (0x0004) [0x0000000000000000]              
	int                                                Invite_ClanID;                                    		// 0x0164 (0x0004) [0x0000000000000000]              
	unsigned char                                      MessengerState;                                   		// 0x0168 (0x0001) [0x0000000000000000]              
	unsigned long                                      bDisplayedNoList : 1;                             		// 0x016C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisplayedUserInfoTooltip : 1;                    		// 0x016C (0x0004) [0x0000000000000000] [0x00000002] 
	struct FUserInfoTooltipInfo                        CurrentUserInfoTooltipInfo;                       		// 0x0170 (0x0064) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct UCombatFrontEnd_Community_FPopupItemInfo > Items_FriendsRequestsPopup;                       		// 0x01D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct UCombatFrontEnd_Community_FPopupItemInfo > Items_MyFriendsPopup;                             		// 0x01E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct UCombatFrontEnd_Community_FPopupItemInfo > Items_ClanPopup;                                  		// 0x01EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct UCombatFrontEnd_Community_FPopupItemInfo > Items_BlockedUsersPopup;                          		// 0x01F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     NoFriendLabel;                                    		// 0x0204 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     NoClanLabel;                                      		// 0x0210 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     NoClanMemberLabel;                                		// 0x021C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67340 ];

		return pClassPointer;
	};

	void SetMessenger_ClanList_Offline ( int ListIndex, class UGFxObject** List, struct FMessengerInfo* const_cout_clanData );
	bool GetClanLocationDescription ( struct FMessengerInfo* const_cout_clanData, struct FString* out_description );
	struct FString GetClanLevelName ( struct FMessengerInfo* const_cout_clanData );
	struct FString GetClanLevelIconPath ( struct FMessengerInfo* const_cout_clanData );
	unsigned char GetMessengerUserState_Clan ( struct FMessengerInfo* const_cout_clanData );
	unsigned char GetClanMessengerUserState ( unsigned char Type, struct FMessengerInfo* const_cout_clanData );
	struct FString GetStatusDecription_Clan ( struct FMessengerInfo* const_cout_clanData );
	struct FString GetClanStatusDecription ( unsigned char Type, struct FMessengerInfo* const_cout_clanData );
	void CallSetTapButtonSelected ( int Index, unsigned long bSelected );
	void receiveMessengerTapButton ( int Index );
	void receiveMessengerPopupButton ( int popUpIndex, struct FString UserName );
	int GetUserIDbyName ( struct FString UserName );
	void ClearCurrentUserInfoTooltipInfo ( );
	void RemoveUserInfoTooltip ( );
	void MakeUserInfoTooltipInfoGFxObject ( class UGFxObject* out_List );
	void UpdateUserInfoTooltipInfo ( int X, int Y, struct FMessengerInfo* const_out_messengerInfo );
	void DisplayClanUserInfoTooltip ( struct FString UserName, int X, int Y );
	void DisplayUserInfoTooltip ( struct FString UserName, int X, int Y );
	void receiveMessengerListViewOutButton ( );
	void receiveMessengerListViewOverButton ( struct FString UserName, int X, int Y );
	void receiveMessengerListViewRequestFriendCancelButton ( struct FString UserName );
	void receiveMessengerListViewRequestFriendOkButton ( struct FString UserName );
	bool IsCompetitiveChannel ( int ChannelID );
	int SetSubmenu ( unsigned char UIUserState, struct FString UserName, class UGFxObject** out_submenuList, class UGFxObject** out_submenuDisabledList );
	bool IsAbleClanInviteUser ( unsigned char UIUserState, struct FString UserName );
	bool IsAbleMatchroomInviteUser ( unsigned char UIUserState, struct FString UserName );
	bool IsAbleFollowUser ( unsigned char UIUserState, struct FString UserName );
	void SendSubmenu ( unsigned char UIUserState, struct FString UserName, int X, int Y );
	void ShowPopup_Clan ( struct FString UserName, int X, int Y );
	void ShowPopup_Messenger ( struct FString UserName, int X, int Y );
	void receiveMessengerListViewLeftRightButton ( struct FString UserName, int X, int Y );
	void receiveMessengerListViewTitleOpenButton ( int ListIndex );
	void receiveMessengerListViewTitleCloseButton ( int ListIndex );
	void receiveMessengerAddFriendsKillFocus ( );
	void receiveMessengerAddFriendsSetFocus ( );
	void receiveMessengerAddFriendButton ( struct FString UserName );
	void receiveMessengerCloseButton ( );
	void CallUpdateToolTip ( class UGFxObject* toolTipDataList, int X, int Y );
	void CallRemoveToolTip ( );
	void CallSetToopTip ( class UGFxObject* toolTipDataList, int X, int Y );
	void CallRemovePopup ( );
	void CallSetPopup ( class UGFxObject* MenuList, struct FString popupName, int X, int Y, class UGFxObject* disabledList );
	void CallHideNoPeopleCover ( );
	void CallShowNoPeopleCover ( struct FString Label );
	void CallSetListGruopPerson ( int ListIndex, int MemberCount, struct FString listName );
	void CallRemoveList ( int ListIndex );
	void CallCloseList ( int ListIndex );
	void CallOpenList ( int ListIndex, class UGFxObject* listData, struct FString Typename );
	void CallInitAddFriend ( );
	void HideWithMotion ( );
	void ShowWithMotion ( );
	void OnRemoveBlackList_Cancel ( struct FEventData ev );
	void OnRemoveBlackList_Failure ( unsigned char Error );
	void RemoveBlackList ( struct FString PlayerName );
	void OnAddBlackList_Failure_OK ( struct FEventData ev );
	void DisplayAddBlackList_Failure ( struct FString errorMsg );
	void OnAddBlackList_Cancel ( struct FEventData ev );
	void OnAddBlackList_OK ( struct FEventData ev );
	void TryAddBlackList ( struct FString PlayerName );
	void OnRemoveFriend_Failure_OK ( struct FEventData ev );
	void OnRemoveFriend_Failure ( unsigned char Error );
	void OnBreakFriends_Cancel ( struct FEventData ev );
	void OnBreakFriends_OK ( struct FEventData ev );
	void BreakFriendsWith ( struct FString PlayerName );
	void OnAnswerRejectFriendSuggestion_Failure_OK ( struct FEventData ev );
	void OnAnswerRejectFriendSuggestion_Failure ( unsigned char Error );
	void OnAnswerAcceptFriendSuggestion_Failure_OK ( struct FEventData ev );
	void OnAnswerAcceptFriendSuggestion_Failure ( unsigned char Error );
	void AlramFriendSuggestion ( struct FString PlayerName );
	void OnSuggestFriend_Failure_OK ( struct FEventData ev );
	void OnSuggestFriend_Failure ( unsigned char Error, struct FString PlayerName );
	void OnSuggestFriend_Success ( struct FString PlayerName );
	void OnClanBanish_Cancel ( struct FEventData ev );
	void OnClanBreakAway_Cancel ( struct FEventData ev );
	void OnClanBreakAway_OK ( struct FEventData ev );
	void OnClanBanish_OK ( struct FEventData ev );
	void RecvFailKickMemberClan ( unsigned char Error );
	void RecvFailAcceptClan ( unsigned char Error );
	void RecvFailSuggestClan ( unsigned char Error );
	void ClanMemberList ( );
	void OnClanGradeBreak_OK ( struct FEventData ev );
	void ClanBreakAway ( );
	void ClanMemberBanis ( struct FString PlayerName );
	void OnClanAccept_Cancel ( struct FEventData ev );
	void OnClanAccept_OK ( struct FEventData ev );
	void ClanAccept ( int clan_id, struct FString ClanName, struct FString suggest_Name );
	void OnClanInvite_Cancel ( struct FEventData ev );
	void OnClanInvite_OK ( struct FEventData ev );
	void ClanInvite ( struct FString PlayerName );
	void OnFriendWith_Cancel ( struct FEventData ev );
	void OnFriendWith_OK ( struct FEventData ev );
	void DisplayDialogFriendWith ( struct FString PlayerName );
	void FriendsWith ( struct FString PlayerName );
	int SortNickname ( struct FMessengerInfo A, struct FMessengerInfo B );
	int SortClanNickname ( struct FMessengerInfo A, struct FMessengerInfo B );
	void SortClanMessnegerInfo ( TArray< struct FMessengerInfo >* out_clanInfoList );
	void SortMessnegerInfo ( TArray< struct FMessengerInfo >* out_messengerInfoList );
	struct FString GetModeGroupname ( int RefModeGroupIndex, int RefModeIndex );
	struct FString GetModeName ( int RefModeIndex );
	bool GetLocationDescription ( struct FMessengerInfo* const_cout_messengerData, struct FString* out_description );
	struct FString GetLevelName ( struct FMessengerInfo* const_cout_messengerData );
	struct FString GetLevelIconPath ( struct FMessengerInfo* const_cout_messengerData );
	unsigned char GetMessengerUserState_Friend ( struct FMessengerInfo* const_cout_messengerData );
	unsigned char GetMessengerUserState ( unsigned char Type, struct FMessengerInfo* const_cout_messengerData );
	struct FString GetStatusDecription_Friend ( struct FMessengerInfo* const_cout_messengerData );
	struct FString GetStatusDecription ( unsigned char Type, struct FMessengerInfo* const_cout_messengerData );
	void SetMessenger_BlockList ( int ListIndex, class UGFxObject** List, struct FMessengerInfo* const_cout_messengerData );
	void UpdateMessenger_BlockList ( unsigned long bInit );
	void SetMessenger_FriendList_Offline ( int ListIndex, class UGFxObject** List, struct FMessengerInfo* const_cout_messengerData );
	void UpdateClanMessenger_ClanList_Offline ( );
	void UpdateClanMessenger_ClanList_Online ( );
	void UpdateClanMessenger_ClanList ( );
	void UpdateMessenger_FriendList_Offline ( );
	void SetMessenger_ClanList_Online ( int ListIndex, class UGFxObject** List, struct FMessengerInfo* const_cout_clanData );
	void SetMessenger_FriendList_Online ( int ListIndex, class UGFxObject** List, struct FMessengerInfo* const_cout_messengerData );
	void UpdateMessenger_FriendList_Online ( );
	void UpdateOnlineFriendsCount ( );
	void UpdateMessenger_FriendList ( );
	void SetMessenger_SuggestionList ( int ListIndex, class UGFxObject** List, struct FMessengerInfo* const_cout_messengerData );
	void UpdateNewSuggestionFriendIcon ( );
	void UpdateMessenger_SuggestionList ( );
	bool CheckDisplayNoListUI ( struct FString* out_label );
	void CheckNeedDisplayZeroList ( );
	void UpdateMessenger ( unsigned long bInit );
	void ControlMessengerVisible ( unsigned long bForce );
	void Close ( );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void InitLabels ( );
	void Init ( );
	void HideSceneWithMotion ( );
	void ShowSceneWithMotion ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatFrontEnd_Community::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_CreateCharacter
// 0x0018 (0x00B4 - 0x009C)
class UCombatFrontEnd_CreateCharacter : public UCombatFrontEnd_Scene
{
public:
	TArray< struct FSendNickInfo >                     SendNickList;                                     		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SendNick;                                         		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67904 ];

		return pClassPointer;
	};

	void receiveLobbyCreateNicknameExitBtn ( );
	void receiveLobbyCreateNicknameOkBtn ( struct FString NickName );
	void CallSetFocus ( );
	void CallSetBtnLabel ( struct FString OKBtn, struct FString ExitBtn );
	void CallSetMessageTxt ( struct FString txt );
	void CallSetInputTxt ( struct FString txt );
	void CallsetTitleTxt ( struct FString txt );
	void OnDisplayDialogExitDialogCancle ( struct FEventData ev );
	void OnDisplayDialogExitDialogOK ( struct FEventData ev );
	void DisplayDialogExitDialog ( );
	unsigned char CheckNickname ( struct FString NickName );
	void AddSendNick ( unsigned char Error_Code );
	void UpdateMessage ( unsigned char Error_Code );
	void UpdateCreateNickName ( unsigned char Error_Code );
	void SaveFirstPlay ( );
	void InitLabels ( );
	void Close ( );
	void Init ( );
};

UClass* UCombatFrontEnd_CreateCharacter::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Cube
// 0x0000 (0x009C - 0x009C)
class UCombatFrontEnd_Cube : public UCombatFrontEnd_Object
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67956 ];

		return pClassPointer;
	};

};

UClass* UCombatFrontEnd_Cube::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Dashboard
// 0x0324 (0x03C0 - 0x009C)
class UCombatFrontEnd_Dashboard : public UCombatFrontEnd_Object
{
public:
	struct FDashBoardButtonInfo                        DashBoardButtonList[ 0xF ];                       		// 0x009C (0x0258) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  TopBar;                                           		// 0x02F4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  BottomBar;                                        		// 0x02F8 (0x0004) [0x0000000000000000]              
	struct FString                                     LastPlayerName;                                   		// 0x02FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastCCardID;                                      		// 0x0308 (0x0004) [0x0000000000000000]              
	struct FString                                     LastCCardIconPath;                                		// 0x030C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastClanName;                                     		// 0x0318 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastClanIconName;                                 		// 0x0324 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastClanIconPath;                                 		// 0x0330 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastClanLevel;                                    		// 0x033C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastClanLevelColor;                               		// 0x0348 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastLevel;                                        		// 0x0354 (0x0004) [0x0000000000000000]              
	int                                                LastExpGuage;                                     		// 0x0358 (0x0004) [0x0000000000000000]              
	struct FString                                     LastLevelIconPath;                                		// 0x035C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastCurExp;                                       		// 0x0368 (0x0004) [0x0000000000000000]              
	int                                                LastNextExp;                                      		// 0x036C (0x0004) [0x0000000000000000]              
	int                                                LastTierPoint;                                    		// 0x0370 (0x0004) [0x0000000000000000]              
	struct FString                                     LastTierIconPath;                                 		// 0x0374 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMyMoneyStruct >                    LastMyMoneyInfo;                                  		// 0x0380 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastOnlineFriendCount;                            		// 0x038C (0x0004) [0x0000000000000000]              
	unsigned long                                      bLastNewSuggestionFriend : 1;                     		// 0x0390 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLastNewMail : 1;                                 		// 0x0390 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bLastExpiresMail : 1;                             		// 0x0390 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bLastNoManner : 1;                                		// 0x0390 (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                LastNewMailCount;                                 		// 0x0394 (0x0004) [0x0000000000000000]              
	int                                                BulletSaleEffectTimeOut;                          		// 0x0398 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                BulletSaleEffectLineCount;                        		// 0x039C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FURLInfo >                          URLList;                                          		// 0x03A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                PenaltyTimeMinute_UI;                             		// 0x03AC (0x0004) [0x0000000000000000]              
	int                                                PenaltyPoint_UI;                                  		// 0x03B0 (0x0004) [0x0000000000000000]              
	TArray< struct UCombatFrontEnd_Dashboard_FPopupItemInfo > DashBoardPopup;                                   		// 0x03B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67958 ];

		return pClassPointer;
	};

	void receiveCommonBottomBarSurpportBtn ( );
	void receiveCommonBottomBarNoticeBtn ( );
	void CallSetServerPing ( struct FString txt );
	void CallHideEventEffect ( int Type );
	void CallShowEventEffect ( int Type, struct FString Label );
	void CallClosePopupMenu ( );
	void CallSetNoticeIconVisible ( int Index, unsigned long Visible );
	void CallSetNoticeIcon ( int Index, class UGFxObject* Data );
	void ChargeCash ( );
	void receiveCommonTopBarChargeBtn ( int Type );
	void receiveCommonTopBarRefreshBtn ( int _Type );
	void receiveTopBarPopupMenuBtn ( int Id );
	void CallDrawPopupMenu ( class UGFxObject* data_, int X, int Y );
	void receiveTopBarLeftRightBtn ( int userID, int X, int Y );
	void UpdateMoneyDisplayButtonDisable ( unsigned long Disabled );
	struct FString NoMannerTimeToString ( struct FTimeData* Time );
	void SetBottomBoosterIcon ( );
	struct FString GetJackpotColorString ( int NoticeType );
	void AddJackpotNoticeMessage ( struct FString Callsign, struct FString SrcItemCodeName, struct FString DestItemCodeName, int GiveType, int GiveValue );
	void CallStopNotice ( );
	void CallPlayNotice ( );
	void CallAddNotice ( struct FString Message );
	void CallInitNotice ( int NoticeDelayTime );
	struct FString GetBoosterToolTipAttendRewardDesc ( int AttendRewardBuff );
	struct FString GetBoosterToolTipGoldDesc ( unsigned char BoosterType, int GoldBuff );
	struct FString GetBoosterToolTipExpDesc ( unsigned char BoosterType, int ExpBuff );
	struct FString GetBoosterToolTipByID ( int BoosterToolTipID );
	struct FString GetBoosterToolTipTitle ( unsigned char BoosterType );
	void CallSetApplyBooster ( class UGFxObject* Data );
	void CallSetBottomBarBtn ( class UGFxObject* data_ );
	void CallHideBottombar ( );
	void CallShowBottombar ( );
	void CallSetFinanceAllDisabled ( unsigned long Disabled );
	void CallUpdateFinance ( class UGFxObject* data_ );
	void CallSetFinance ( class UGFxObject* data_ );
	void CallSetUserInfo ( class UGFxObject* data_ );
	void CallTopbarBtnExpriesVisible ( class UGFxObject* data_ );
	void CallSetTopBarBtn ( class UGFxObject* data_ );
	void CallHideTopbar ( );
	void CallShowTopbar ( );
	bool IsBackButtonDisabled ( );
	void UpdateMailButton_ExpiresMail ( unsigned long bHasExpire, unsigned long bInit );
	void UpdateMailButtonHasExpires ( unsigned long bInit );
	void UpdateMailButton_NewMailCount ( int Count, unsigned long bInit );
	void UpdateMailButton_NewMail ( unsigned long bHasNew, unsigned long bInit );
	void UpdateMailButton ( unsigned long bInit );
	void InitMailButton ( );
	void UpdateMessengerButton_OnlineFriendCount ( int Count, unsigned long bInit );
	void UpdateMessengerButton_NewSuggestionFriend ( unsigned long bHasNew, unsigned long bInit );
	void UpdateClanButton ( );
	void InitMessengerButton ( );
	void UpdateDashBoardIcon ( );
	void UpdateMyMoneyInfo ( );
	void UpdateMyBaseInfo ( );
	void SendButtonState_Disabled ( int ButtonType );
	void SetButtonState_Disabled ( int ButtonType, unsigned long bDisabled );
	void SendButtonState_Selected ( int ButtonType );
	void SetButtonState_Selected ( int ButtonType, unsigned long bSelected );
	void GetButtonState_Disabled ( int ButtonType, class UGFxObject** out_Data );
	void GetButtonState_Selected ( int ButtonType, class UGFxObject** out_Data );
	struct FString GetSupportURL ( );
	struct FString GetNoticeURL ( );
	void StopBulletSaleEventEffect ( );
	void StartBulletSaleEventEffect ( );
	void HideSaleEventEffect ( int Index );
	void SetFinance ( );
	bool IsButtonAble ( int ButtonType );
	class UGFxObject* GetButtonData ( int ButtonType );
	void SetTopBottomButton ( );
	void InitData ( );
	void Init ( );
	void HideScene ( );
	void ShowScene ( );
	void SetBottomBar ( class UGFxObject* M );
	void SetTopBar ( class UGFxObject* M );
};

UClass* UCombatFrontEnd_Dashboard::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_DebugUI
// 0x0000 (0x009C - 0x009C)
class UCombatFrontEnd_DebugUI : public UCombatFrontEnd_Object
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68335 ];

		return pClassPointer;
	};

	void CallSetDebugInfo ( struct FString Data );
};

UClass* UCombatFrontEnd_DebugUI::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event
// 0x0030 (0x00CC - 0x009C)
class UCombatFrontEnd_Event : public UCombatFrontEnd_Scene
{
public:
	int                                                CurrentViewTabIndex;                              		// 0x009C (0x0004) [0x0000000000000000]              
	TArray< struct FEventTabStruct >                   EventTabList;                                     		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UCombatFrontEnd_Event_TabBase*               TabList[ 0x8 ];                                   		// 0x00AC (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68339 ];

		return pClassPointer;
	};

	void receiveTabBtn ( int TabID );
	void OnQuestStatus_Change ( unsigned char QUEST_TYPE, unsigned long SetActive );
	void receiveRewardBtn ( int Index );
	void CallSelectMainTab ( int Index );
	void CallSetMainTab ( class UGFxObject* Data );
	void CallSetMainTitle ( struct FString Title );
	void Init ( );
	class UCombatFrontEnd_Event_TabBase* GetTabClassData ( int Id );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void GotoPrevScene ( );
};

UClass* UCombatFrontEnd_Event::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_TabBase
// 0x0008 (0x0044 - 0x003C)
class UCombatFrontEnd_Event_TabBase : public UObject
{
public:
	class UCombatFrontEndMoviePlayer*                  ParentMoviePlayer;                                		// 0x003C (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowTab : 1;                                     		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68345 ];

		return pClassPointer;
	};

	void InitData ( );
	class UGFxObject* InitCategoryButton ( int TabPage, unsigned long bDisable );
	void Init ( class UCombatFrontEndMoviePlayer* ParentGFxMoviePlayer );
};

UClass* UCombatFrontEnd_Event_TabBase::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_AttendanceCheckTab
// 0x000C (0x0050 - 0x0044)
class UCombatFrontEnd_Event_AttendanceCheckTab : public UCombatFrontEnd_Event_TabBase
{
public:
	TArray< struct FRewardItemStruct >                 RewardItemList;                                   		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68365 ];

		return pClassPointer;
	};

	void receiveRewardBtn ( int Index );
	void CallDrawAttendanceCheckReward ( class UGFxObject* Data );
	void CallStampAnimation ( int Index );
	void CallSetAttendanceCheck ( class UGFxObject* calenderData, class UGFxObject* RewardData );
	void PlayStampAnimation ( );
	void InitData ( );
	void GetRewardItemList ( );
	int GetToday ( );
	class UGFxObject* InitCategoryButton ( int TabPage, unsigned long bDisable );
};

UClass* UCombatFrontEnd_Event_AttendanceCheckTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_MissionTab
// 0x0018 (0x005C - 0x0044)
class UCombatFrontEnd_Event_MissionTab : public UCombatFrontEnd_Event_TabBase
{
public:
	struct FString                                     MissionState_TextColor[ 0x2 ];                    		// 0x0044 (0x0018) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68367 ];

		return pClassPointer;
	};

	class UGFxObject* AddMissionData ( class UCombatDataTableRefQuest* QuestTable, unsigned char QuestType );
	void InitData ( );
	class UGFxObject* InitCategoryButton ( int TabPage, unsigned long bDisable );
	void CallSetMissionData ( struct FString Title, class UGFxObject* DataList, struct FString ResetStr );
	unsigned char GetMissionGroup ( );
	int GetResetTimeLabelID ( );
	int GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_MissionTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_DailyMissionTab
// 0x0000 (0x005C - 0x005C)
class UCombatFrontEnd_Event_DailyMissionTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68366 ];

		return pClassPointer;
	};

	void CallSetMissionData ( struct FString Title, class UGFxObject* DataList, struct FString ResetStr );
	unsigned char GetMissionGroup ( );
	int GetResetTimeLabelID ( );
	int GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_DailyMissionTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_WeeklyMissionTab
// 0x0000 (0x005C - 0x005C)
class UCombatFrontEnd_Event_WeeklyMissionTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68368 ];

		return pClassPointer;
	};

	void CallSetMissionData ( struct FString Title, class UGFxObject* DataList, struct FString ResetStr );
	unsigned char GetMissionGroup ( );
	int GetResetTimeLabelID ( );
	int GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_WeeklyMissionTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_SpecialEventTab
// 0x0000 (0x005C - 0x005C)
class UCombatFrontEnd_Event_SpecialEventTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68369 ];

		return pClassPointer;
	};

	void CallSetMissionData ( struct FString Title, class UGFxObject* DataList, struct FString ResetStr );
	unsigned char GetMissionGroup ( );
	int GetResetTimeLabelID ( );
	int GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_SpecialEventTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_PCBangEventTab
// 0x0000 (0x005C - 0x005C)
class UCombatFrontEnd_Event_PCBangEventTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68370 ];

		return pClassPointer;
	};

	void CallSetMissionData ( struct FString Title, class UGFxObject* DataList, struct FString ResetStr );
	unsigned char GetMissionGroup ( );
	int GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_PCBangEventTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_AiEventTab
// 0x0000 (0x005C - 0x005C)
class UCombatFrontEnd_Event_AiEventTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68371 ];

		return pClassPointer;
	};

	void CallSetMissionData ( struct FString Title, class UGFxObject* DataList, struct FString ResetStr );
	unsigned char GetMissionGroup ( );
	int GetResetTimeLabelID ( );
	int GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_AiEventTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_HiredSoldierEventTab
// 0x0000 (0x005C - 0x005C)
class UCombatFrontEnd_Event_HiredSoldierEventTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68372 ];

		return pClassPointer;
	};

	void CallSetMissionData ( struct FString Title, class UGFxObject* DataList, struct FString ResetStr );
	int GetResetTimeLabelID ( );
	unsigned char GetMissionGroup ( );
	int GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_HiredSoldierEventTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_AchievementTab
// 0x0000 (0x005C - 0x005C)
class UCombatFrontEnd_Event_AchievementTab : public UCombatFrontEnd_Event_MissionTab
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68373 ];

		return pClassPointer;
	};

	void CallSetMissionData ( struct FString Title, class UGFxObject* DataList, struct FString ResetStr );
	unsigned char GetMissionGroup ( );
	void InitData ( );
	int GetTabLabelID ( );
};

UClass* UCombatFrontEnd_Event_AchievementTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Event_ComebackRewardTab
// 0x0000 (0x0044 - 0x0044)
class UCombatFrontEnd_Event_ComebackRewardTab : public UCombatFrontEnd_Event_TabBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68572 ];

		return pClassPointer;
	};

	void InitData ( );
	class UGFxObject* InitCategoryButton ( int TabPage, unsigned long bDisable );
};

UClass* UCombatFrontEnd_Event_ComebackRewardTab::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Exit
// 0x000C (0x00A8 - 0x009C)
class UCombatFrontEnd_Exit : public UCombatFrontEnd_Object
{
public:
	struct FScriptDelegate                             __CallSetMission__Delegate;                       		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68859 ];

		return pClassPointer;
	};

	void Show ( );
	void CallSetLayout ( unsigned long IsShow );
	void CallSetPresent ( class UGFxObject* Object );
	void CallSetGameExp ( class UGFxObject* Object );
	void CallSetGameInfo ( class UGFxObject* Object );
	void CallSetTitle ( class UGFxObject* Object );
	void CallBtnLabel ( struct FString Id, struct FString Label );
	void CallSetPCRoomDisabled ( unsigned long Disable );
	void CallSetPCRoomMission ( class UGFxObject* Title, class UGFxObject* listData );
	void CallSetDailyMission ( class UGFxObject* Title, class UGFxObject* listData );
	void SetQuestData ( unsigned char MissionGroup, struct FScriptDelegate func );
	void CallSetMission ( class UGFxObject* Title, class UGFxObject* listData );
	class UGFxObject* GetTitle ( unsigned char MissionGroup );
	void HideScene ( );
	void ShowScene ( );
	int SetRewardData ( );
	void SetGameExpData ( );
	void eventBattleInfo_PushElement ( int NewIndex, struct FString Subject, struct FString Description, class UGFxObject** Target );
	void SetBattleData ( );
};

UClass* UCombatFrontEnd_Exit::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_GameTitle
// 0x0000 (0x009C - 0x009C)
class UCombatFrontEnd_GameTitle : public UCombatFrontEnd_Scene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68977 ];

		return pClassPointer;
	};

	void CallsetRatingDesc ( struct FString RatingDesc );
	void CallsetRatingIcon ( class UGFxObject* iconList );
	void SetRatingIcon ( );
	void Init ( );
};

UClass* UCombatFrontEnd_GameTitle::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Help
// 0x0008 (0x00A4 - 0x009C)
class UCombatFrontEnd_Help : public UCombatFrontEnd_Object
{
public:
	int                                                MaxSubTabNum;                                     		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsFirstOpen : 1;                                 		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      FirstEverPlay : 1;                                		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68987 ];

		return pClassPointer;
	};

	void CallHideHome ( );
	void CallShowHome ( );
	void CallSetHome ( class UGFxObject* DataObj );
	void CallSetSubTab ( int GrandParentID, class UGFxObject* SubTabData );
	void CallSelectMainTab ( int Id );
	void CallSetMainTab ( class UGFxObject* TabData );
	void CallSetHelpBG ( struct FString ImgName );
	void CallSetNextBtnLabel ( struct FString Label );
	void CallSetCloseBtnLabel ( struct FString Label );
	void CallSetTitle ( struct FString Title );
	class UGFxObject* GetTabDetailInfoObject ( class UCombatGameClientTableDepot* TableDepot, struct FString CodeName );
	class UGFxObject* GetHelpTabSubObject ( class UCombatGameClientTableDepot* TableDepot, struct FString CodeName );
	void SetHelpTabMain ( class UCombatGameClientTableDepot* TableDepot );
	void InitHome ( class UCombatGameClientTableDepot* TableDepot );
	void UpdateDashboardButtons_Hide ( );
	void UpdateDashboardButtons_Show ( );
	void HideScene ( );
	void ShowScene ( );
};

UClass* UCombatFrontEnd_Help::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ItemSellPopup
// 0x003C (0x00D8 - 0x009C)
class UCombatFrontEnd_ItemSellPopup : public UCombatFrontEnd_Object
{
public:
	struct FInvenItemInfo                              SellItemInfo;                                     		// 0x009C (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      SellSlotList;                                     		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69635 ];

		return pClassPointer;
	};

	void receiveInventorySellItemNoticePopupCancelBtn ( );
	void receiveInventorySellItemNoticePopupOkBtn ( );
	void receiveInventorySellItemViewPopupCancelBtn ( );
	void receiveInventorySellItemViewPopupOkBtn ( int SellItemCount );
	void CallPlaySellSound ( );
	void CallSetSuccess ( );
	void CallSetSellItemNoticeContent ( struct FString Content );
	void CallSetSellItemNoticeFixTxt ( struct FString Title, struct FString OK, struct FString Cancel );
	void CallShowSellItemNoticePopup ( );
	void CallSetSellMaxCnt ( int Number );
	void CallSetSellViewCnt ( int Number );
	void CallSetSellItemInfo ( class UGFxObject* Data );
	void CallSetSellItemViewFixTxt ( struct FString Title, struct FString Sell, struct FString Cancel );
	void CallShowSellItemViewPopup ( );
	void OnDisPlayDialog_ItemSellFailedOK ( struct FEventData ev );
	void DisPlayDialog_ItemSellFailed ( unsigned char Error_Code );
	void ItemSellSuccess ( );
	void OnItemSell ( unsigned char Error_Code );
	void SetSellItemNoticeContent ( unsigned long bIsSellPresetItem );
	void SetSellSlotList ( int SellItemCount );
	void SetSellMaxCnt ( );
	void SetSellItemInfo ( );
	void SetSellItemData ( struct FInvenItemInfo _SellItemInfo );
	void ShowSellItemViewPopup ( struct FInvenItemInfo _SellItemInfo );
	void InitLabels ( );
	void HideScene ( );
	void ShowScene ( );
	void Close ( );
	void Init ( );
};

UClass* UCombatFrontEnd_ItemSellPopup::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ToolTip
// 0x0154 (0x01F0 - 0x009C)
class UCombatFrontEnd_ToolTip : public UCombatFrontEnd_Object
{
public:
	unsigned long                                      bInitTooltipLocalization : 1;                     		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     WeaponLocalizationInfos[ 0x6 ];                   		// 0x00A0 (0x0048) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ClothesChipLocalizationInfos[ 0x14 ];             		// 0x00E8 (0x00F0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     html_br;                                          		// 0x01D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     html_img;                                         		// 0x01E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69707 ];

		return pClassPointer;
	};

	struct FString CalculateRemainRentalTime_Shop ( int Sec );
	struct FString CalculateRemainRentalTime_Inventory ( int remainSec );
	struct FString GetItemCategoryLabel ( class UCombatDataTableRefItem** itemData );
	void SetTooltipLocalization ( );
};

UClass* UCombatFrontEnd_ToolTip::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ItemToolTip
// 0x0000 (0x01F0 - 0x01F0)
class UCombatFrontEnd_ItemToolTip : public UCombatFrontEnd_ToolTip
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69732 ];

		return pClassPointer;
	};

};

UClass* UCombatFrontEnd_ItemToolTip::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_ItemToolTip_RollOver
// 0x0000 (0x01F0 - 0x01F0)
class UCombatFrontEnd_ItemToolTip_RollOver : public UCombatFrontEnd_ToolTip
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69734 ];

		return pClassPointer;
	};

};

UClass* UCombatFrontEnd_ItemToolTip_RollOver::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_Login
// 0x0044 (0x00E0 - 0x009C)
class UCombatFrontEnd_Login : public UCombatFrontEnd_Scene
{
public:
	int                                                IDLabelID;                                        		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                PWLabelID;                                        		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                CheckBoxLabelID;                                  		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                OKBtnLabelID;                                     		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                CancelBtnLabelID;                                 		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                AccountBtnLabelID;                                		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                OptionBtnLabelID;                                 		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                ExitBtnLabelID;                                   		// 0x00B8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNeedLocalize : 1;                                		// 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSaveUserInfo : 1;                                		// 0x00BC (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	struct FString                                     loginID;                                          		// 0x00C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     userPW;                                           		// 0x00CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                FailedLoginCount;                                 		// 0x00D8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  StatusTF;                                         		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69736 ];

		return pClassPointer;
	};

	void OnDialogTextInputError_OK ( struct FEventData ev );
	void DisplayDialogTextInputError ( unsigned char errorType );
	bool IsMaxFailedLoginCount ( );
	void receiveLoginBackBtn ( );
	void receiveLoginExitBtn ( );
	void receiveLoginOptionBtn ( );
	void receiveLoginAccountBtn ( );
	void receiveCheckCancelBtn ( );
	void receiveLoginOkBtn ( struct FString Id, struct FString PW, unsigned long bSave );
	void SetButtonDisabled ( unsigned long bDisabled );
	void UpdateCertifyWaitUserCount ( int Count );
	void UpdateLoginProgressUI ( int CertificationType, int ProcessType );
	void InitLoginProgressUI ( );
	void HideLoginProgressUI ( );
	void ShowLoginProgressUI ( );
	void CallSetLoginProgressStatus ( struct FString Text, struct FString BtnLabel );
	void CallSetLoginProgress ( int Step, struct FString Text, int Status );
	void CallHideProgress ( );
	void CallShowProgress ( );
	void CallSetLoginButtonsDisabled ( struct FString BtnLabel, unsigned long bDisabled );
	void CallSetLoginFirst ( struct FString ResetTarget );
	void CallSetLoginUserInfo ( struct FString Id, struct FString PW, unsigned long bSave );
	void CallSetLoginTexts ( struct FString titleStr, struct FString idStr, struct FString pwStr, struct FString okBtnStr, struct FString checkBoxStr, struct FString accounBtnStr, struct FString optionBtnStr );
	void UnLock ( );
	void Lock ( );
	void GotoPrevScene ( );
	void Init ( );
};

UClass* UCombatFrontEnd_Login::pClassPointer = NULL;

// Class CombatGame.CombatFrontEnd_MainLobby
// 0x00D0 (0x016C - 0x009C)
class UCombatFrontEnd_MainLobby : public UCombatFrontEnd_Scene
{
public:
	struct UCombatFrontEnd_MainLobby_FButtonInfo       SortButtonList[ 0x7 ];                            		// 0x009C (0x0070) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct UCombatFrontEnd_MainLobby_FButtonInfo       RoomButtonList[ 0x5 ];                            		// 0x010C (0x0050) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UCombatLobbyTransaction*                     LobbyTran;                                        		// 0x015C (0x0004) [0x0000000000000000]              
	class UCombatFrontEnd_MatchMembe                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                